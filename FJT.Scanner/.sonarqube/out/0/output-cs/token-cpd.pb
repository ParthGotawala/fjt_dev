ıÖ
1D:\Development\FJT\FJT-DEV\FJT.Scanner\Program.cs
	namespace 	
FJT
 
. 
Scanner 
{		 
class

 	
Program


 
{ 
static
µµ 
void
µµ 
Main
µµ 
(
µµ 
string
µµ 
[
µµ  
]
µµ  !
args
µµ" &
)
µµ& '
{
∂∂ 	

ScanDetail
∑∑ 

scanDetail
∑∑ !
=
∑∑" #
new
∑∑$ '

ScanDetail
∑∑( 2
(
∑∑2 3
)
∑∑3 4
;
∑∑4 5
string
∏∏ 
ScanDocuFilePath
∏∏ #
=
∏∏$ %%
WebConfigurationManager
∏∏& =
.
∏∏= >
AppSettings
∏∏> I
[
∏∏I J
$str
∏∏J \
]
∏∏\ ]
.
∏∏] ^
ToString
∏∏^ f
(
∏∏f g
)
∏∏g h
;
∏∏h i
try
ππ 
{
∫∫ 
ScanRequestModel
ºº  
scanRequestModel
ºº! 1
=
ºº2 3
new
ºº4 7
ScanRequestModel
ºº8 H
(
ººH I
)
ººI J
;
ººJ K
if
ΩΩ 
(
ΩΩ 
args
ΩΩ 
.
ΩΩ 
Length
ΩΩ 
>
ΩΩ  !
$num
ΩΩ" #
)
ΩΩ# $
{
ææ 
File
øø 
.
øø 
AppendAllText
øø &
(
øø& '
ScanDocuFilePath
øø' 7
,
øø7 8
string
øø9 ?
.
øø? @
Format
øø@ F
(
øøF G
$str
øøG Z
,
øøZ [
args
øø\ `
[
øø` a
$num
øøa b
]
øøb c
,
øøc d
Environment
øøe p
.
øøp q
NewLine
øøq x
)
øøx y
)
øøy z
;
øøz {
string
¿¿ 
	argsments
¿¿ $
=
¿¿% &
args
¿¿' +
[
¿¿+ ,
$num
¿¿, -
]
¿¿- .
;
¿¿. /
if
¡¡ 
(
¡¡ 
!
¡¡ 
string
¡¡ 
.
¡¡  
IsNullOrEmpty
¡¡  -
(
¡¡- .
	argsments
¡¡. 7
)
¡¡7 8
)
¡¡8 9
{
¬¬ 
scanRequestModel
√√ (
=
√√) *
JsonConvert
√√+ 6
.
√√6 7
DeserializeObject
√√7 H
<
√√H I
ScanRequestModel
√√I Y
>
√√Y Z
(
√√Z [
	argsments
√√[ d
)
√√d e
;
√√e f
}
≈≈ 
}
∆∆ 
if
»» 
(
»» 
scanRequestModel
»» $
.
»»$ %
scanDocument
»»% 1
)
»»1 2
{
…… 
File
   
.
   
AppendAllText
   &
(
  & '
ScanDocuFilePath
  ' 7
,
  7 8
string
  9 ?
.
  ? @
Format
  @ F
(
  F G
$str
  G y
,
  y z
DateTime  { É
.  É Ñ
Now  Ñ á
,  á à
Environment  â î
.  î ï
NewLine  ï ú
)  ú ù
)  ù û
;  û ü
}
ÀÀ 
using
ÕÕ 
(
ÕÕ 
var
ÕÕ 
sdk
ÕÕ 
=
ÕÕ  

SDKWrapper
ÕÕ! +
.
ÕÕ+ ,
CreateInstance
ÕÕ, :
(
ÕÕ: ;
)
ÕÕ; <
)
ÕÕ< =
{
ŒŒ 

DeviceInfo
œœ 
device
œœ %
=
œœ& '
new
œœ( +

DeviceInfo
œœ, 6
(
œœ6 7
)
œœ7 8
;
œœ8 9
if
—— 
(
—— 
!
—— 
string
—— 
.
——  
IsNullOrEmpty
——  -
(
——- .
scanRequestModel
——. >
.
——> ?
connectionType
——? M
)
——M N
)
——N O
{
““ 
device
”” 
.
”” 
connectionType
”” -
=
””. /
(
””0 1
InterfaceType
””1 >
)
””> ?
Enum
””? C
.
””C D
Parse
””D I
(
””I J
typeof
””J P
(
””P Q
InterfaceType
””Q ^
)
””^ _
,
””_ `
scanRequestModel
””a q
.
””q r
connectionType””r Ä
,””Ä Å
true””Ç Ü
)””Ü á
;””á à
}
‘‘ 
if
÷÷ 
(
÷÷ 
device
÷÷ 
.
÷÷ 
connectionType
÷÷ -
==
÷÷. 0
InterfaceType
÷÷1 >
.
÷÷> ?
Network
÷÷? F
)
÷÷F G
{
◊◊ 
device
ÿÿ 
.
ÿÿ 
	ipAddress
ÿÿ (
=
ÿÿ) *
!
ÿÿ+ ,
string
ÿÿ, 2
.
ÿÿ2 3
IsNullOrEmpty
ÿÿ3 @
(
ÿÿ@ A
scanRequestModel
ÿÿA Q
.
ÿÿQ R
	ipAddress
ÿÿR [
)
ÿÿ[ \
?
ÿÿ] ^
scanRequestModel
ÿÿ_ o
.
ÿÿo p
	ipAddress
ÿÿp y
:
ÿÿz {
nullÿÿ| Ä
;ÿÿÄ Å
device
ŸŸ 
.
ŸŸ 
nodeName
ŸŸ '
=
ŸŸ( )
!
ŸŸ* +
string
ŸŸ+ 1
.
ŸŸ1 2
IsNullOrEmpty
ŸŸ2 ?
(
ŸŸ? @
scanRequestModel
ŸŸ@ P
.
ŸŸP Q
nodename
ŸŸQ Y
)
ŸŸY Z
?
ŸŸ[ \
scanRequestModel
ŸŸ] m
.
ŸŸm n
nodename
ŸŸn v
:
ŸŸw x
null
ŸŸy }
;
ŸŸ} ~
}
⁄⁄ 
else
€€ 
if
€€ 
(
€€ 
device
€€ #
.
€€# $
connectionType
€€$ 2
==
€€3 5
InterfaceType
€€6 C
.
€€C D
Usb
€€D G
)
€€G H
{
‹‹ 
device
›› 
.
›› 
	modelName
›› (
=
››) *
!
››+ ,
string
››, 2
.
››2 3
IsNullOrEmpty
››3 @
(
››@ A
scanRequestModel
››A Q
.
››Q R
usbModelName
››R ^
)
››^ _
?
››` a
scanRequestModel
››b r
.
››r s
usbModelName
››s 
:››Ä Å
null››Ç Ü
;››Ü á
}
ﬁﬁ 
sdk
ﬂﬂ 
.
ﬂﬂ 
SelectDevice
ﬂﬂ $
(
ﬂﬂ$ %
device
ﬂﬂ% +
)
ﬂﬂ+ ,
;
ﬂﬂ, -
File
·· 
.
·· 
AppendAllText
·· &
(
··& '
ScanDocuFilePath
··' 7
,
··7 8
string
··9 ?
.
··? @
Format
··@ F
(
··F G
$str
··G [
,
··[ \
JsonConvert
··] h
.
··h i
SerializeObject
··i x
(
··x y
device
··y 
)·· Ä
,··Ä Å
Environment··Ç ç
.··ç é
NewLine··é ï
)··ï ñ
)··ñ ó
;··ó ò
if
‚‚ 
(
‚‚ 
scanRequestModel
‚‚ (
.
‚‚( )
scanDocument
‚‚) 5
)
‚‚5 6
{
„„ 
var
‰‰ 
capabilities
‰‰ (
=
‰‰) *
sdk
‰‰+ .
.
‰‰. /
QueryCapabilities
‰‰/ @
(
‰‰@ A
)
‰‰A B
;
‰‰B C
var
ÂÂ 

parameters
ÂÂ &
=
ÂÂ' (
sdk
ÂÂ) ,
.
ÂÂ, -
GetScanParameter
ÂÂ- =
(
ÂÂ= >
)
ÂÂ> ?
;
ÂÂ? @
if
ÈÈ 
(
ÈÈ 
capabilities
ÈÈ (
.
ÈÈ( )
duplex
ÈÈ) /
)
ÈÈ/ 0
{
ÍÍ 

parameters
ÎÎ &
.
ÎÎ& '
duplex
ÎÎ' -
=
ÎÎ. /
(
ÎÎ0 1

DuplexType
ÎÎ1 ;
)
ÎÎ; <
Enum
ÎÎ< @
.
ÎÎ@ A
Parse
ÎÎA F
(
ÎÎF G
typeof
ÎÎG M
(
ÎÎM N

DuplexType
ÎÎN X
)
ÎÎX Y
,
ÎÎY Z
scanRequestModel
ÎÎ[ k
.
ÎÎk l
scanSide
ÎÎl t
,
ÎÎt u
true
ÎÎv z
)
ÎÎz {
;
ÎÎ{ |
}
ÏÏ 

parameters
ÓÓ "
.
ÓÓ" #
	colorType
ÓÓ# ,
=
ÓÓ- .
(
ÓÓ/ 0
	ColorType
ÓÓ0 9
)
ÓÓ9 :
Enum
ÓÓ: >
.
ÓÓ> ?
Parse
ÓÓ? D
(
ÓÓD E
typeof
ÓÓE K
(
ÓÓK L
	ColorType
ÓÓL U
)
ÓÓU V
,
ÓÓV W
scanRequestModel
ÓÓX h
.
ÓÓh i
color
ÓÓi n
,
ÓÓn o
true
ÓÓp t
)
ÓÓt u
;
ÓÓu v

parameters
ÔÔ "
.
ÔÔ" #
scanArea
ÔÔ# +
.
ÔÔ+ ,
	paperType
ÔÔ, 5
=
ÔÔ6 7
(
ÔÔ8 9
	PaperType
ÔÔ9 B
)
ÔÔB C
Enum
ÔÔC G
.
ÔÔG H
Parse
ÔÔH M
(
ÔÔM N
typeof
ÔÔN T
(
ÔÔT U
	PaperType
ÔÔU ^
)
ÔÔ^ _
,
ÔÔ_ `
scanRequestModel
ÔÔa q
.
ÔÔq r
size
ÔÔr v
,
ÔÔv w
true
ÔÔx |
)
ÔÔ| }
;
ÔÔ} ~

parameters
 "
.
" #

resolution
# -
=
. /
(
0 1

Resolution
1 ;
)
; <
Enum
< @
.
@ A
Parse
A F
(
F G
typeof
G M
(
M N

Resolution
N X
)
X Y
,
Y Z
scanRequestModel
[ k
.
k l

resolution
l v
,
v w
true
x |
)
| }
;
} ~
ImageProcessing
ÚÚ '%
imageProcessingSkipPage
ÚÚ( ?
=
ÚÚ@ A
new
ÚÚB E
ImageProcessing
ÚÚF U
(
ÚÚU V
)
ÚÚV W
;
ÚÚW X%
imageProcessingSkipPage
ÛÛ /
.
ÛÛ/ 0
execute
ÛÛ0 7
=
ÛÛ8 9
scanRequestModel
ÛÛ: J
.
ÛÛJ K
skipBlankPage
ÛÛK X
;
ÛÛX Y%
imageProcessingSkipPage
ÙÙ /
.
ÙÙ/ 0
level
ÙÙ0 5
=
ÙÙ6 7
$num
ÙÙ8 9
;
ÙÙ9 :

parameters
ıı "
.
ıı" #
skipBlankPage
ıı# 0
=
ıı1 2%
imageProcessingSkipPage
ıı3 J
;
ııJ K
sdk
˜˜ 
.
˜˜ 
SetScanParameter
˜˜ ,
(
˜˜, -

parameters
˜˜- 7
)
˜˜7 8
;
˜˜8 9
var
˘˘ 
fileParameter
˘˘ )
=
˘˘* +
sdk
˘˘, /
.
˘˘/ 0
GetFileParameter
˘˘0 @
(
˘˘@ A
)
˘˘A B
;
˘˘B C
fileParameter
˙˙ %
.
˙˙% &
fileType
˙˙& .
=
˙˙/ 0
FileType
˙˙1 9
.
˙˙9 :
Pdf
˙˙: =
;
˙˙= >
fileParameter
˚˚ %
.
˚˚% &

folderPath
˚˚& 0
=
˚˚1 2
string
˚˚3 9
.
˚˚9 :
Format
˚˚: @
(
˚˚@ A
$str
˚˚A G
,
˚˚G H%
WebConfigurationManager
˚˚I `
.
˚˚` a
AppSettings
˚˚a l
[
˚˚l m
$str˚˚m Ü
]˚˚Ü á
)˚˚á à
;˚˚à â
fileParameter
¸¸ %
.
¸¸% &

filePrefix
¸¸& 0
=
¸¸1 2
!
¸¸3 4
string
¸¸4 :
.
¸¸: ;
IsNullOrEmpty
¸¸; H
(
¸¸H I
scanRequestModel
¸¸I Y
.
¸¸Y Z

filePrefix
¸¸Z d
)
¸¸d e
?
¸¸f g
scanRequestModel
¸¸h x
.
¸¸x y

filePrefix¸¸y É
:¸¸Ñ Ö
string¸¸Ü å
.¸¸å ç
Format¸¸ç ì
(¸¸ì î
$str¸¸î ù
,¸¸ù û 
scanRequestModel¸¸ü Ø
.¸¸Ø ∞

refTransID¸¸∞ ∫
,¸¸∫ ª
DateTime¸¸º ƒ
.¸¸ƒ ≈
Now¸¸≈ »
.¸¸» …
ToString¸¸… —
(¸¸— “
$str¸¸“ ‚
)¸¸‚ „
)¸¸„ ‰
;¸¸‰ Â
sdk
˝˝ 
.
˝˝ 
SetFileParameter
˝˝ ,
(
˝˝, -
fileParameter
˝˝- :
)
˝˝: ;
;
˝˝; <
if
ÉÉ 
(
ÉÉ 
scanRequestModel
ÉÉ ,
.
ÉÉ, -
scanDocument
ÉÉ- 9
)
ÉÉ9 :
{
ÑÑ 
File
ÖÖ  
.
ÖÖ  !
AppendAllText
ÖÖ! .
(
ÖÖ. /
ScanDocuFilePath
ÖÖ/ ?
,
ÖÖ? @
string
ÖÖA G
.
ÖÖG H
Format
ÖÖH N
(
ÖÖN O
$str
ÖÖO x
,
ÖÖx y
DateTimeÖÖz Ç
.ÖÖÇ É
NowÖÖÉ Ü
,ÖÖÜ á
EnvironmentÖÖà ì
.ÖÖì î
NewLineÖÖî õ
)ÖÖõ ú
)ÖÖú ù
;ÖÖù û
}
ÜÜ 
sdk
áá 
.
áá 
	ScanAsync
áá %
(
áá% &
)
áá& '
;
áá' (
while
àà 
(
àà 
sdk
àà "
.
àà" #
GetScanStatus
àà# 0
(
àà0 1
)
àà1 2
==
àà3 5

ScanStatus
àà6 @
.
àà@ A
Scanning
ààA I
)
ààI J
{
ââ 
Thread
ää "
.
ää" #
Sleep
ää# (
(
ää( )
$num
ää) ,
)
ää, -
;
ää- .
}
ãã 
var
åå 
status
åå "
=
åå# $
sdk
åå% (
.
åå( )
GetScanStatus
åå) 6
(
åå6 7
)
åå7 8
;
åå8 9
if
çç 
(
çç 
scanRequestModel
çç ,
.
çç, -
scanDocument
çç- 9
)
çç9 :
{
éé 
File
èè  
.
èè  !
AppendAllText
èè! .
(
èè. /
ScanDocuFilePath
èè/ ?
,
èè? @
string
èèA G
.
èèG H
Format
èèH N
(
èèN O
$str
èèO 
,èè Ä
DateTimeèèÅ â
.èèâ ä
Nowèèä ç
,èèç é
Environmentèèè ö
.èèö õ
NewLineèèõ ¢
)èè¢ £
)èè£ §
;èè§ •
}
êê 
if
ëë 
(
ëë 
status
ëë "
==
ëë# %

ScanStatus
ëë& 0
.
ëë0 1
AllEnd
ëë1 7
||
ëë8 :
status
ëë; A
==
ëëB D

ScanStatus
ëëE O
.
ëëO P
Standby
ëëP W
)
ëëW X
{
íí 
var
ìì 
fileList
ìì  (
=
ìì) *
sdk
ìì+ .
.
ìì. /
GetFileList
ìì/ :
(
ìì: ;
)
ìì; <
;
ìì< =
foreach
îî #
(
îî$ %
var
îî% (
filePath
îî) 1
in
îî2 4
fileList
îî5 =
)
îî= >
{
ïï 

scanDetail
ññ  *
.
ññ* +
FileName
ññ+ 3
=
ññ4 5
Path
ññ6 :
.
ññ: ;
GetFileName
ññ; F
(
ññF G
filePath
ññG O
)
ññO P
;
ññP Q
}
óó 
}
òò 
else
ôô 
{
öö 

scanDetail
õõ &
.
õõ& '
Error
õõ' ,
=
õõ- .
sdk
õõ/ 2
.
õõ2 3
GetScanError
õõ3 ?
(
õõ? @
)
õõ@ A
.
õõA B
ToString
õõB J
(
õõJ K
)
õõK L
;
õõL M
}
úú 
}
ùù 
}
ûû 
}
üü 
catch
†† 
(
†† 
SDKException
†† 
ex
††  "
)
††" #
{
°° 

scanDetail
¢¢ 
.
¢¢ 
Error
¢¢  
=
¢¢! "
ex
¢¢# %
.
¢¢% &
_error
¢¢& ,
.
¢¢, -
ToString
¢¢- 5
(
¢¢5 6
)
¢¢6 7
;
¢¢7 8
}
££ 
File
§§ 
.
§§ 
AppendAllText
§§ 
(
§§ 
ScanDocuFilePath
§§ /
,
§§/ 0
string
§§1 7
.
§§7 8
Format
§§8 >
(
§§> ?
$str
§§? S
,
§§S T
JsonConvert
§§U `
.
§§` a
SerializeObject
§§a p
(
§§p q

scanDetail
§§q {
)
§§{ |
,
§§| }
Environment§§~ â
.§§â ä
NewLine§§ä ë
)§§ë í
)§§í ì
;§§ì î
Console
•• 
.
•• 
Write
•• 
(
•• 
JsonConvert
•• %
.
••% &
SerializeObject
••& 5
(
••5 6

scanDetail
••6 @
)
••@ A
)
••A B
;
••B C
}
¶¶ 	
static
©© 
void
©© 
AddFileSecurity
©© #
(
©©# $
string
©©$ *
filePath
©©+ 3
,
©©3 4
string
©©5 ;
account
©©< C
,
©©C D
FileSystemRights
©©E U
rights
©©V \
,
©©\ ]
AccessControlType
©©^ o
controlType
©©p {
)
©©{ |
{
™™ 	
FileSecurity
ØØ 
	fSecurity
ØØ "
=
ØØ# $
File
ØØ% )
.
ØØ) *
GetAccessControl
ØØ* :
(
ØØ: ;
filePath
ØØ; C
)
ØØC D
;
ØØD E
	fSecurity
≤≤ 
.
≤≤ 
AddAccessRule
≤≤ #
(
≤≤# $
new
≤≤$ '"
FileSystemAccessRule
≤≤( <
(
≤≤< =
account
≤≤= D
,
≤≤D E
rights
≥≥ 
,
≥≥ 
controlType
≥≥ #
)
≥≥# $
)
≥≥$ %
;
≥≥% &
File
∂∂ 
.
∂∂ 
SetAccessControl
∂∂ !
(
∂∂! "
filePath
∂∂" *
,
∂∂* +
	fSecurity
∂∂, 5
)
∂∂5 6
;
∂∂6 7
}
∏∏ 	
}
ππ 
}∫∫ Ï
AD:\Development\FJT\FJT-DEV\FJT.Scanner\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str &
)& '
]' (
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str (
)( )
]) *
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *ﬁ≤
1D:\Development\FJT\FJT-DEV\FJT.Scanner\Wrapper.cs
	namespace 	
FJT
 
. 
Scanner 
{ 
static

 

class

 
	Constants

 
{ 
public 
const 
int 
MAX_ARRAY_ELEMENTS +
=, -
$num. 1
;1 2
public 
const 
int  
FILE_PATH_MAX_LENGTH -
=. /
$num0 3
;3 4
} 
public 

enum 
	ErrorCode 
{ 
NoErrors 
= 
$num 
, 
OtherFailure 
= 
$num 
, 
InvalidArgument 
, %
InvalidOperationProcedure !
,! "
ScanningInProgress 
, 
NotFoundDevice   
,   
InvalidParameters!! 
,!! 
NoDeviceResponse"" 
,"" 
OtherDeviceError%% 
=%% 
$num%% 
,%% 
PaperJam&& 
,&& 
PaperDoubleFeed'' 
,'' 
	CoverOpen(( 
,(( 
SecureFunctionLock)) 
,)) 
NoPaper** 
,** 
Busy++ 
,++ 
DeviceMemoryFull,, 
,,, 
PullScanLock-- 
,-- 1
%InvalidParametersInCurrentDeviceState.. -
,..- .
OtherPaperFeedError// 
,// 
FailedToSave22 
=22 
$num22 
,22 
	LowMemory55 
=55 
$num55 
,55 
PathTooLong88 
=88 
$num88 
,88 
}99 
publicBB 

enumBB 

ResolutionBB 
{CC 

reso100dpiDD 
=DD 
$numDD 
,DD 

reso150dpiEE 
,EE 

reso200dpiFF 
,FF 

reso300dpiGG 
,GG 

reso400dpiHH 
,HH 

reso600dpiII 
,II 
reso1200dpiJJ 
,JJ 
reso2400dpiKK 
,KK 
reso4800dpiLL 
,LL 
reso9600dpiMM 
,MM 
reso19200dpiNN 
,NN 
}OO 
;OO 
publicRR 

enumRR 
	PaperTypeRR 
{SS 
AutoSizeTT 
=TT 
$numTT 
,TT 
A3UU 

,UU
 
LedgerVV 
,VV 
JISB4WW 
,WW 
A4XX 

,XX
 
JISB5YY 
,YY 
LetterZZ 
,ZZ 
Legal[[ 
,[[ 
A5\\ 

,\\
 
JISB6]] 
,]] 
A6^^ 

,^^
 
	Executive__ 
,__ 
Photo`` 
,`` 
	IndexCardaa 
,aa 
PhotoLbb 
,bb 
Photo2Lcc 
,cc 
Postcarddd 
,dd 
	Postcard2ee 
,ee 
BusinessCard90X60ff 
,ff 
BusinessCard60X90gg 
,gg 
Foliohh 
,hh 
MexicanLegalii 
,ii 

IndiaLegaljj 
,jj !
LongPaper_NarrowWidthkk 
,kk  
LongPaper_NomalWidthll 
,ll 

CustomSizemm 
,mm 
}nn 
;nn 
publicqq 

enumqq 
	ColorTypeqq 
{rr 
	AutoColorss 
=ss 
$numss 
,ss 

BlackWhitett 
,tt 
ErrorDiffusionuu 
,uu 
TrueGrayvv 
,vv 

Color24bitww 
,ww 
}xx 
;xx 
[|| 
StructLayout|| 
(|| 

LayoutKind|| 
.|| 

Sequential|| '
)||' (
]||( )
public}} 

struct}} 
Size}} 
{~~ 
public 
UInt32 
x 
; 
public
ÄÄ 
UInt32
ÄÄ 
y
ÄÄ 
;
ÄÄ 
}
ÅÅ 
;
ÅÅ 
public
ää 

enum
ää 
InterfaceType
ää 
{
ãã 
Usb
åå 
=
åå 
$num
åå 
,
åå 
Network
çç 
}
éé 
[
ëë 
StructLayout
ëë 
(
ëë 

LayoutKind
ëë 
.
ëë 

Sequential
ëë '
,
ëë' (
CharSet
ëë) 0
=
ëë1 2
CharSet
ëë3 :
.
ëë: ;
Ansi
ëë; ?
)
ëë? @
]
ëë@ A
public
íí 

class
íí 

DeviceInfo
íí 
{
ìì 
public
îî 
InterfaceType
îî 
connectionType
îî +
;
îî+ ,
[
ïï 	
	MarshalAs
ïï	 
(
ïï 
UnmanagedType
ïï  
.
ïï  !
	ByValTStr
ïï! *
,
ïï* +
	SizeConst
ïï, 5
=
ïï6 7
	Constants
ïï8 A
.
ïïA B 
MAX_ARRAY_ELEMENTS
ïïB T
)
ïïT U
]
ïïU V
public
ññ 
string
ññ 
	modelName
ññ 
;
ññ  
[
óó 	
	MarshalAs
óó	 
(
óó 
UnmanagedType
óó  
.
óó  !
	ByValTStr
óó! *
,
óó* +
	SizeConst
óó, 5
=
óó6 7
	Constants
óó8 A
.
óóA B 
MAX_ARRAY_ELEMENTS
óóB T
)
óóT U
]
óóU V
public
òò 
string
òò 
nodeName
òò 
;
òò 
[
ôô 	
	MarshalAs
ôô	 
(
ôô 
UnmanagedType
ôô  
.
ôô  !
	ByValTStr
ôô! *
,
ôô* +
	SizeConst
ôô, 5
=
ôô6 7
	Constants
ôô8 A
.
ôôA B 
MAX_ARRAY_ELEMENTS
ôôB T
)
ôôT U
]
ôôU V
public
öö 
string
öö 
	ipAddress
öö 
;
öö  
[
õõ 	
	MarshalAs
õõ	 
(
õõ 
UnmanagedType
õõ  
.
õõ  !
	ByValTStr
õõ! *
,
õõ* +
	SizeConst
õõ, 5
=
õõ6 7
	Constants
õõ8 A
.
õõA B 
MAX_ARRAY_ELEMENTS
õõB T
)
õõT U
]
õõU V
public
úú 
string
úú 

macAddress
úú  
;
úú  !
}
ùù 
[
†† 
StructLayout
†† 
(
†† 

LayoutKind
†† 
.
†† 

Sequential
†† '
)
††' (
]
††( )
public
°° 

class
°° 
DeviceInfoList
°° 
{
¢¢ 
public
££ 
IntPtr
££ 
list
££ 
;
££ 
public
§§ 
UInt32
§§ 
listSize
§§ 
;
§§ 
}
•• 
;
•• 
public
ÆÆ 

enum
ÆÆ 
FileType
ÆÆ 
{
ØØ 
Bmp
∞∞ 
=
∞∞ 
$num
∞∞ 
,
∞∞ 
Jpg
±± 
,
±± 
Png
≤≤ 
,
≤≤ 
Tiff
≥≥ 
,
≥≥ 
Pdf
¥¥ 
}
µµ 
;
µµ 
public
∏∏ 

enum
∏∏ 
TiffCompressType
∏∏  
{
ππ 

NoCompress
∫∫ 
,
∫∫ 
CCITT3
ªª 
,
ªª 
CCITT4
ºº 
,
ºº 
RLE
ΩΩ 
,
ΩΩ 
LZW
ææ 
,
ææ 
}
øø 
;
øø 
[
¬¬ 
StructLayout
¬¬ 
(
¬¬ 

LayoutKind
¬¬ 
.
¬¬ 

Sequential
¬¬ '
,
¬¬' (
CharSet
¬¬) 0
=
¬¬1 2
CharSet
¬¬3 :
.
¬¬: ;
Ansi
¬¬; ?
)
¬¬? @
]
¬¬@ A
public
√√ 

class
√√ 
FileParameter
√√ 
{
ƒƒ 
public
≈≈ 
FileType
≈≈ 
fileType
≈≈  
;
≈≈  !
[
∆∆ 	
	MarshalAs
∆∆	 
(
∆∆ 
UnmanagedType
∆∆  
.
∆∆  !
	ByValTStr
∆∆! *
,
∆∆* +
	SizeConst
∆∆, 5
=
∆∆6 7
	Constants
∆∆8 A
.
∆∆A B"
FILE_PATH_MAX_LENGTH
∆∆B V
)
∆∆V W
]
∆∆W X
public
«« 
string
«« 

folderPath
««  
;
««  !
[
»» 	
	MarshalAs
»»	 
(
»» 
UnmanagedType
»»  
.
»»  !
	ByValTStr
»»! *
,
»»* +
	SizeConst
»», 5
=
»»6 7
	Constants
»»8 A
.
»»A B"
FILE_PATH_MAX_LENGTH
»»B V
)
»»V W
]
»»W X
public
…… 
string
…… 

filePrefix
……  
;
……  !
public
   
UInt32
   
quality
   
;
   
public
ÀÀ 
TiffCompressType
ÀÀ 
tiffCompressType
ÀÀ  0
;
ÀÀ0 1
public
ÃÃ 
UInt32
ÃÃ 
pageCountPerFile
ÃÃ &
;
ÃÃ& '
}
ÕÕ 
;
ÕÕ 
[
÷÷ 
StructLayout
÷÷ 
(
÷÷ 

LayoutKind
÷÷ 
.
÷÷ 

Sequential
÷÷ '
)
÷÷' (
]
÷÷( )
public
◊◊ 

struct
◊◊ 
SupportColorType
◊◊ "
{
ÿÿ 
[
ŸŸ 	
	MarshalAs
ŸŸ	 
(
ŸŸ 
UnmanagedType
ŸŸ  
.
ŸŸ  !
U1
ŸŸ! #
)
ŸŸ# $
]
ŸŸ$ %
public
⁄⁄ 
bool
⁄⁄ 
	autoColor
⁄⁄ 
;
⁄⁄ 
[
€€ 	
	MarshalAs
€€	 
(
€€ 
UnmanagedType
€€  
.
€€  !
U1
€€! #
)
€€# $
]
€€$ %
public
‹‹ 
bool
‹‹ 
blackAndWhite
‹‹ !
;
‹‹! "
[
›› 	
	MarshalAs
››	 
(
›› 
UnmanagedType
››  
.
››  !
U1
››! #
)
››# $
]
››$ %
public
ﬁﬁ 
bool
ﬁﬁ 
errorDiffusion
ﬁﬁ "
;
ﬁﬁ" #
[
ﬂﬂ 	
	MarshalAs
ﬂﬂ	 
(
ﬂﬂ 
UnmanagedType
ﬂﬂ  
.
ﬂﬂ  !
U1
ﬂﬂ! #
)
ﬂﬂ# $
]
ﬂﬂ$ %
public
‡‡ 
bool
‡‡ 
trueGray
‡‡ 
;
‡‡ 
[
·· 	
	MarshalAs
··	 
(
·· 
UnmanagedType
··  
.
··  !
U1
··! #
)
··# $
]
··$ %
public
‚‚ 
bool
‚‚ 

color24bit
‚‚ 
;
‚‚ 
}
„„ 
;
„„ 
[
ÊÊ 
StructLayout
ÊÊ 
(
ÊÊ 

LayoutKind
ÊÊ 
.
ÊÊ 

Sequential
ÊÊ '
)
ÊÊ' (
]
ÊÊ( )
public
ÁÁ 

struct
ÁÁ 
SupportScanSize
ÁÁ !
{
ËË 
public
ÈÈ 
Size
ÈÈ 
flatbed
ÈÈ 
;
ÈÈ 
public
ÍÍ 
Size
ÍÍ 
simplex
ÍÍ 
;
ÍÍ 
public
ÎÎ 
Size
ÎÎ 
duplex
ÎÎ 
;
ÎÎ 
}
ÏÏ 
;
ÏÏ 
[
ÒÒ 
StructLayout
ÒÒ 
(
ÒÒ 

LayoutKind
ÒÒ 
.
ÒÒ 

Sequential
ÒÒ '
)
ÒÒ' (
]
ÒÒ( )
public
ÚÚ 

struct
ÚÚ 
	LongPaper
ÚÚ 
{
ÛÛ 
public
ÙÙ 
UInt32
ÙÙ 
maxSimplexLength
ÙÙ &
;
ÙÙ& '
public
ıı 
UInt32
ıı 
maxDuplexLength
ıı %
;
ıı% &
public
ˆˆ 
UInt32
ˆˆ 
maxResolution
ˆˆ #
;
ˆˆ# $
}
˜˜ 
;
˜˜ 
[
¸¸ 
StructLayout
¸¸ 
(
¸¸ 

LayoutKind
¸¸ 
.
¸¸ 

Sequential
¸¸ '
)
¸¸' (
]
¸¸( )
public
˝˝ 

struct
˝˝ 
DeviceReadMargin
˝˝ "
{
˛˛ 
public
ˇˇ 
int
ˇˇ 
left
ˇˇ 
;
ˇˇ 
public
ÄÄ 
int
ÄÄ 
top
ÄÄ 
;
ÄÄ 
public
ÅÅ 
int
ÅÅ 
right
ÅÅ 
;
ÅÅ 
public
ÇÇ 
int
ÇÇ 
bottom
ÇÇ 
;
ÇÇ 
}
ÉÉ 
;
ÉÉ 
[
ÜÜ 
StructLayout
ÜÜ 
(
ÜÜ 

LayoutKind
ÜÜ 
.
ÜÜ 

Sequential
ÜÜ '
)
ÜÜ' (
]
ÜÜ( )
public
áá 

struct
áá  
SupportPaperSource
áá $
{
àà 
[
ââ 	
	MarshalAs
ââ	 
(
ââ 
UnmanagedType
ââ  
.
ââ  !
U1
ââ! #
)
ââ# $
]
ââ$ %
public
ää 
bool
ää 
flatbed
ää 
;
ää 
[
ãã 	
	MarshalAs
ãã	 
(
ãã 
UnmanagedType
ãã  
.
ãã  !
U1
ãã! #
)
ãã# $
]
ãã$ %
public
åå 
bool
åå 
adf
åå 
;
åå 
[
çç 	
	MarshalAs
çç	 
(
çç 
UnmanagedType
çç  
.
çç  !
U1
çç! #
)
çç# $
]
çç$ %
public
éé 
bool
éé 
cardslot
éé 
;
éé 
}
èè 
;
èè 
[
íí 
StructLayout
íí 
(
íí 

LayoutKind
íí 
.
íí 

Sequential
íí '
)
íí' (
]
íí( )
public
ìì 

struct
ìì 
SupportAutoDeskew
ìì #
{
îî 
[
ïï 	
	MarshalAs
ïï	 
(
ïï 
UnmanagedType
ïï  
.
ïï  !
U1
ïï! #
)
ïï# $
]
ïï$ %
public
ññ 
bool
ññ 
support
ññ 
;
ññ 
public
óó  
SupportPaperSource
óó !
paperSource
óó" -
;
óó- .
}
òò 
;
òò 
[
úú 
StructLayout
úú 
(
úú 

LayoutKind
úú 
.
úú 

Sequential
úú '
)
úú' (
]
úú( )
public
ùù 

struct
ùù #
SupportMarginSettings
ùù '
{
ûû 
[
üü 	
	MarshalAs
üü	 
(
üü 
UnmanagedType
üü  
.
üü  !
U1
üü! #
)
üü# $
]
üü$ %
public
†† 
bool
†† 
support
†† 
;
†† 
public
°° 
int
°° 
	maxMargin
°° 
;
°° 
public
¢¢ 
int
¢¢ 
	minMargin
¢¢ 
;
¢¢ 
[
££ 	
	MarshalAs
££	 
(
££ 
UnmanagedType
££  
.
££  !
U1
££! #
)
££# $
]
££$ %
public
§§ 
bool
§§ 
isAutoSizeOnly
§§ "
;
§§" #
}
•• 
;
•• 
[
®® 
StructLayout
®® 
(
®® 

LayoutKind
®® 
.
®® 

Sequential
®® '
)
®®' (
]
®®( )
public
©© 

struct
©© #
SupportContinuousScan
©© '
{
™™ 
[
´´ 	
	MarshalAs
´´	 
(
´´ 
UnmanagedType
´´  
.
´´  !
U1
´´! #
)
´´# $
]
´´$ %
public
¨¨ 
bool
¨¨ 
support
¨¨ 
;
¨¨ 
public
≠≠ 
UInt32
≠≠ 
minTimeoutMinutes
≠≠ '
;
≠≠' (
public
ÆÆ 
UInt32
ÆÆ 
maxTimeoutMinutes
ÆÆ '
;
ÆÆ' (
public
ØØ 
UInt32
ØØ 
minFeedDelaySec
ØØ %
;
ØØ% &
public
∞∞ 
UInt32
∞∞ 
maxFeedDelaySec
∞∞ %
;
∞∞% &
}
±± 
;
±± 
[
µµ 
StructLayout
µµ 
(
µµ 

LayoutKind
µµ 
.
µµ 

Sequential
µµ '
)
µµ' (
]
µµ( )
public
∂∂ 

class
∂∂ 

Capability
∂∂ 
{
∑∑ 
public
ππ 
SupportScanSize
ππ 

maxDocSize
ππ )
;
ππ) *
public
∫∫ 
SupportScanSize
∫∫ 

minDocSize
∫∫ )
;
∫∫) *
public
ªª 
	LongPaper
ªª 
	longPaper
ªª "
;
ªª" #
public
ºº 
UInt32
ºº #
autoSizeMaxResolution
ºº +
;
ºº+ ,
public
ΩΩ 
DeviceReadMargin
ΩΩ 

readMargin
ΩΩ  *
;
ΩΩ* +
public
¿¿  
SupportPaperSource
¿¿ !
paperSource
¿¿" -
;
¿¿- .
[
¡¡ 	
	MarshalAs
¡¡	 
(
¡¡ 
UnmanagedType
¡¡  
.
¡¡  !

ByValArray
¡¡! +
,
¡¡+ ,
	SizeConst
¡¡- 6
=
¡¡7 8
	Constants
¡¡9 B
.
¡¡B C 
MAX_ARRAY_ELEMENTS
¡¡C U
)
¡¡U V
]
¡¡V W
public
¬¬ 

Resolution
¬¬ 
[
¬¬ 
]
¬¬ 
resolutionList
¬¬ *
;
¬¬* +
public
√√ 
byte
√√ 
resolutionNum
√√ !
;
√√! "
public
ƒƒ 
SupportColorType
ƒƒ 
	colorType
ƒƒ  )
;
ƒƒ) *
[
≈≈ 	
	MarshalAs
≈≈	 
(
≈≈ 
UnmanagedType
≈≈  
.
≈≈  !

ByValArray
≈≈! +
,
≈≈+ ,
	SizeConst
≈≈- 6
=
≈≈7 8
	Constants
≈≈9 B
.
≈≈B C 
MAX_ARRAY_ELEMENTS
≈≈C U
)
≈≈U V
]
≈≈V W
public
∆∆ 
	PaperType
∆∆ 
[
∆∆ 
]
∆∆ 
paperTypeList
∆∆ (
;
∆∆( )
public
«« 
byte
«« 
paperTypeNum
««  
;
««  !
[
»» 	
	MarshalAs
»»	 
(
»» 
UnmanagedType
»»  
.
»»  !
U1
»»! #
)
»»# $
]
»»$ %
public
…… 
bool
…… 

brightness
…… 
;
…… 
[
   	
	MarshalAs
  	 
(
   
UnmanagedType
    
.
    !
U1
  ! #
)
  # $
]
  $ %
public
ÀÀ 
bool
ÀÀ 
contrast
ÀÀ 
;
ÀÀ 
[
ÃÃ 	
	MarshalAs
ÃÃ	 
(
ÃÃ 
UnmanagedType
ÃÃ  
.
ÃÃ  !
U1
ÃÃ! #
)
ÃÃ# $
]
ÃÃ$ %
public
ÕÕ 
bool
ÕÕ 
duplex
ÕÕ 
;
ÕÕ 
SupportAutoDeskew
–– 

autoDeskew
–– $
;
––$ %
[
—— 	
	MarshalAs
——	 
(
—— 
UnmanagedType
——  
.
——  !
U1
——! #
)
——# $
]
——$ %
public
““ 
bool
““ 
detectEndOfPage
““ #
;
““# $#
SupportMarginSettings
”” 
marginSettings
”” ,
;
””, -
[
‘‘ 	
	MarshalAs
‘‘	 
(
‘‘ 
UnmanagedType
‘‘  
.
‘‘  !
U1
‘‘! #
)
‘‘# $
]
‘‘$ %
public
’’ 
bool
’’ 
rotateImage
’’ 
;
’’  
[
÷÷ 	
	MarshalAs
÷÷	 
(
÷÷ 
UnmanagedType
÷÷  
.
÷÷  !
U1
÷÷! #
)
÷÷# $
]
÷÷$ %
public
◊◊ 
bool
◊◊ 
autoEdgeFill
◊◊  
;
◊◊  !
[
ÿÿ 	
	MarshalAs
ÿÿ	 
(
ÿÿ 
UnmanagedType
ÿÿ  
.
ÿÿ  !
U1
ÿÿ! #
)
ÿÿ# $
]
ÿÿ$ %
public
ŸŸ 
bool
ŸŸ 
customEdgeFill
ŸŸ "
;
ŸŸ" #
[
⁄⁄ 	
	MarshalAs
⁄⁄	 
(
⁄⁄ 
UnmanagedType
⁄⁄  
.
⁄⁄  !
U1
⁄⁄! #
)
⁄⁄# $
]
⁄⁄$ %
public
€€ 
bool
€€ 
punchHoleRemoval
€€ $
;
€€$ %
[
‹‹ 	
	MarshalAs
‹‹	 
(
‹‹ 
UnmanagedType
‹‹  
.
‹‹  !
U1
‹‹! #
)
‹‹# $
]
‹‹$ %
public
›› 
bool
›› #
autoColorDetectAdjust
›› )
;
››) *
[
ﬁﬁ 	
	MarshalAs
ﬁﬁ	 
(
ﬁﬁ 
UnmanagedType
ﬁﬁ  
.
ﬁﬁ  !
U1
ﬁﬁ! #
)
ﬁﬁ# $
]
ﬁﬁ$ %
public
ﬂﬂ 
bool
ﬂﬂ 
skipBlankPage
ﬂﬂ !
;
ﬂﬂ! "
[
‡‡ 	
	MarshalAs
‡‡	 
(
‡‡ 
UnmanagedType
‡‡  
.
‡‡  !
U1
‡‡! #
)
‡‡# $
]
‡‡$ %
public
·· 
bool
·· &
diffusionAdjustment_Gray
·· ,
;
··, -
[
‚‚ 	
	MarshalAs
‚‚	 
(
‚‚ 
UnmanagedType
‚‚  
.
‚‚  !
U1
‚‚! #
)
‚‚# $
]
‚‚$ %
public
„„ 
bool
„„ !
colorToneAdjustment
„„ '
;
„„' (
[
‰‰ 	
	MarshalAs
‰‰	 
(
‰‰ 
UnmanagedType
‰‰  
.
‰‰  !
U1
‰‰! #
)
‰‰# $
]
‰‰$ %
public
ÂÂ 
bool
ÂÂ "
backgroundProcessing
ÂÂ (
;
ÂÂ( )
[
ÊÊ 	
	MarshalAs
ÊÊ	 
(
ÊÊ 
UnmanagedType
ÊÊ  
.
ÊÊ  !
U1
ÊÊ! #
)
ÊÊ# $
]
ÊÊ$ %
public
ÁÁ 
bool
ÁÁ 
	colorDrop
ÁÁ 
;
ÁÁ 
[
ËË 	
	MarshalAs
ËË	 
(
ËË 
UnmanagedType
ËË  
.
ËË  !
U1
ËË! #
)
ËË# $
]
ËË$ %
public
ÈÈ 
bool
ÈÈ 
edgeEmphasis
ÈÈ  
;
ÈÈ  !
[
ÍÍ 	
	MarshalAs
ÍÍ	 
(
ÍÍ 
UnmanagedType
ÍÍ  
.
ÍÍ  !
U1
ÍÍ! #
)
ÍÍ# $
]
ÍÍ$ %
public
ÎÎ 
bool
ÎÎ 
reduceNoise
ÎÎ 
;
ÎÎ  
[
ÏÏ 	
	MarshalAs
ÏÏ	 
(
ÏÏ 
UnmanagedType
ÏÏ  
.
ÏÏ  !
U1
ÏÏ! #
)
ÏÏ# $
]
ÏÏ$ %
public
ÌÌ 
bool
ÌÌ %
monoThresholdAdjustment
ÌÌ +
;
ÌÌ+ ,
[
ÓÓ 	
	MarshalAs
ÓÓ	 
(
ÓÓ 
UnmanagedType
ÓÓ  
.
ÓÓ  !
U1
ÓÓ! #
)
ÓÓ# $
]
ÓÓ$ %
public
ÔÔ 
bool
ÔÔ (
blurredCharacterCorrection
ÔÔ .
;
ÔÔ. /
[
 	
	MarshalAs
	 
(
 
UnmanagedType
  
.
  !
U1
! #
)
# $
]
$ %
public
ÒÒ 
bool
ÒÒ  
boldfaceFormatting
ÒÒ &
;
ÒÒ& '
[
ÚÚ 	
	MarshalAs
ÚÚ	 
(
ÚÚ 
UnmanagedType
ÚÚ  
.
ÚÚ  !
U1
ÚÚ! #
)
ÚÚ# $
]
ÚÚ$ %
public
ÛÛ 
bool
ÛÛ 
mergeImages
ÛÛ 
;
ÛÛ  
[
ÙÙ 	
	MarshalAs
ÙÙ	 
(
ÙÙ 
UnmanagedType
ÙÙ  
.
ÙÙ  !
U1
ÙÙ! #
)
ÙÙ# $
]
ÙÙ$ %
public
ıı 
bool
ıı 
carrierSheetMode
ıı $
;
ıı$ %
[
ˆˆ 	
	MarshalAs
ˆˆ	 
(
ˆˆ 
UnmanagedType
ˆˆ  
.
ˆˆ  !
U1
ˆˆ! #
)
ˆˆ# $
]
ˆˆ$ %
public
˜˜ 
bool
˜˜ 
plasticCardMode
˜˜ #
;
˜˜# $
[
¯¯ 	
	MarshalAs
¯¯	 
(
¯¯ 
UnmanagedType
¯¯  
.
¯¯  !
U1
¯¯! #
)
¯¯# $
]
¯¯$ %
public
˘˘ 
bool
˘˘ 
singlePaperScan
˘˘ #
;
˘˘# $
public
˙˙ #
SupportContinuousScan
˙˙ $
continuousScan
˙˙% 3
;
˙˙3 4
[
˚˚ 	
	MarshalAs
˚˚	 
(
˚˚ 
UnmanagedType
˚˚  
.
˚˚  !
U1
˚˚! #
)
˚˚# $
]
˚˚$ %
public
¸¸ 
bool
¸¸  
multifeedDetection
¸¸ &
;
¸¸& '
[
˝˝ 	
	MarshalAs
˝˝	 
(
˝˝ 
UnmanagedType
˝˝  
.
˝˝  !
U1
˝˝! #
)
˝˝# $
]
˝˝$ %
public
˛˛ 
bool
˛˛ 
barcodeDetection
˛˛ $
;
˛˛$ %
[
ˇˇ 	
	MarshalAs
ˇˇ	 
(
ˇˇ 
UnmanagedType
ˇˇ  
.
ˇˇ  !
U1
ˇˇ! #
)
ˇˇ# $
]
ˇˇ$ %
public
ÄÄ 
bool
ÄÄ  
patchcodeDetection
ÄÄ &
;
ÄÄ& '
}
ÅÅ 
;
ÅÅ 
public
ää 

enum
ää 
PaperSourceType
ää 
{
ãã 

SourceAuto
åå 
=
åå 
$num
åå 
,
åå 
Flatbed
çç 
,
çç 
Adf
éé 
,
éé 
}
èè 
;
èè 
public
íí 

enum
íí 

DuplexType
íí 
{
ìì 
Simplex
îî 
=
îî 
$num
îî 
,
îî 
DuplexLongBinding
ïï 
,
ïï  
DuplexShortBinding
ññ 
}
óó 
;
óó 
public
öö 

enum
öö 
RotateAngle
öö 
{
õõ 
Rotate0
úú 
=
úú 
$num
úú 
,
úú 
Rotate90
ùù 
,
ùù 
	Rotate180
ûû 
,
ûû 
	Rotate270
üü 
}
†† 
;
†† 
public
££ 

enum
££ !
CustomEdgeFillColor
££ #
{
§§ 
EdgeFillWhite
•• 
=
•• 
$num
•• 
,
•• 
EdgeFillBlack
¶¶ 
}
ßß 
;
ßß 
public
™™ 

enum
™™ #
PunchHoleRemovalColor
™™ %
{
´´ #
PunchHoleRemovalWhite
¨¨ 
=
¨¨ 
$num
¨¨  !
,
¨¨! ")
PunchHoleRemovalNearbyColor
≠≠ #
}
ÆÆ 
;
ÆÆ 
public
±± 

enum
±± 
SmoothingType
±± 
{
≤≤ !
BleedThroughRemoval
≥≥ 
=
≥≥ 
$num
≥≥ 
,
≥≥  .
 BackgroundAndBleedThroughRemoval
¥¥ (
}
µµ 
;
µµ 
public
∏∏ 

enum
∏∏ 
	DropColor
∏∏ 
{
ππ  
DropColorChromatic
∫∫ 
=
∫∫ 
$num
∫∫ 
,
∫∫ 
DropColorRed
ªª 
,
ªª 
DropColorGreen
ºº 
,
ºº 
DropColorBlue
ΩΩ 
,
ΩΩ 
DropColorCustom
ææ 
}
øø 
;
øø 
public
¬¬ 

enum
¬¬ 
	MergeType
¬¬ 
{
√√ 
	MergeNone
ƒƒ 
=
ƒƒ 
$num
ƒƒ 
,
ƒƒ "
MergeFromLeftToRight
≈≈ 
,
≈≈ "
MergeFromTopToBottom
∆∆ 
,
∆∆ 
}
«« 
;
«« 
public
   

enum
   
BarcodeType
   
{
ÀÀ 
Code39
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
,
ÃÃ 
ITF
ÕÕ 
,
ÕÕ 
Code128
ŒŒ 
,
ŒŒ 
GS1_128
œœ 
,
œœ 
Codabar
–– 
,
–– 
UPCA
—— 
,
—— 
UPCE
““ 
,
““ 
JAN8
”” 
,
”” 
JAN13
‘‘ 
,
‘‘ 
QR
’’ 

,
’’
 

DataMatrix
÷÷ 
,
÷÷ 
PDF417
◊◊ 
,
◊◊ 
Code93
ÿÿ 
,
ÿÿ 
}
ŸŸ 
;
ŸŸ 
public
‹‹ 

enum
‹‹ 
PatchcodeType
‹‹ 
{
›› 
PatchcodeNone
ﬁﬁ 
=
ﬁﬁ 
$num
ﬁﬁ 
,
ﬁﬁ 
Type1
ﬂﬂ 
,
ﬂﬂ 
Type2
‡‡ 
,
‡‡ 
Type3
·· 
,
·· 
Type4
‚‚ 
,
‚‚ 
TypeT
„„ 
,
„„ 
Type6
‰‰ 
,
‰‰ 
}
ÂÂ 
;
ÂÂ 
[
ÈÈ 
StructLayout
ÈÈ 
(
ÈÈ 

LayoutKind
ÈÈ 
.
ÈÈ 

Sequential
ÈÈ '
)
ÈÈ' (
]
ÈÈ( )
public
ÍÍ 

struct
ÍÍ 
Area
ÍÍ 
{
ÎÎ 
public
ÏÏ 
UInt32
ÏÏ 
offsetX
ÏÏ 
;
ÏÏ 
public
ÌÌ 
UInt32
ÌÌ 
offsetY
ÌÌ 
;
ÌÌ 
public
ÓÓ 
UInt32
ÓÓ 
width
ÓÓ 
;
ÓÓ 
public
ÔÔ 
UInt32
ÔÔ 
height
ÔÔ 
;
ÔÔ 
}
 
;
 
[
ÛÛ 
StructLayout
ÛÛ 
(
ÛÛ 

LayoutKind
ÛÛ 
.
ÛÛ 

Sequential
ÛÛ '
)
ÛÛ' (
]
ÛÛ( )
public
ÙÙ 

struct
ÙÙ 
ImageProcessing
ÙÙ !
{
ıı 
[
ˆˆ 	
	MarshalAs
ˆˆ	 
(
ˆˆ 
UnmanagedType
ˆˆ  
.
ˆˆ  !
U1
ˆˆ! #
)
ˆˆ# $
]
ˆˆ$ %
public
˜˜ 
bool
˜˜ 
execute
˜˜ 
;
˜˜ 
public
¯¯ 
UInt32
¯¯ 
level
¯¯ 
;
¯¯ 
}
˘˘ 
;
˘˘ 
[
¸¸ 
StructLayout
¸¸ 
(
¸¸ 

LayoutKind
¸¸ 
.
¸¸ 

Sequential
¸¸ '
)
¸¸' (
]
¸¸( )
public
˝˝ 

struct
˝˝ 
ScanArea
˝˝ 
{
˛˛ 
public
ˇˇ 
	PaperType
ˇˇ 
	paperType
ˇˇ "
;
ˇˇ" #
public
ÄÄ 
Size
ÄÄ 

customSize
ÄÄ 
;
ÄÄ 
[
ÅÅ 	
	MarshalAs
ÅÅ	 
(
ÅÅ 
UnmanagedType
ÅÅ  
.
ÅÅ  !
U1
ÅÅ! #
)
ÅÅ# $
]
ÅÅ$ %
public
ÇÇ 
bool
ÇÇ 

isSelected
ÇÇ 
;
ÇÇ 
public
ÉÉ 
Area
ÉÉ 
selectedArea
ÉÉ  
;
ÉÉ  !
}
ÑÑ 
;
ÑÑ 
[
àà 
StructLayout
àà 
(
àà 

LayoutKind
àà 
.
àà 

Sequential
àà '
)
àà' (
]
àà( )
public
ââ 

struct
ââ 
MarginSettings
ââ  
{
ää 
[
ãã 	
	MarshalAs
ãã	 
(
ãã 
UnmanagedType
ãã  
.
ãã  !
U1
ãã! #
)
ãã# $
]
ãã$ %
public
åå 
bool
åå 
execute
åå 
;
åå 
public
çç 
int
çç 
left
çç 
;
çç 
public
éé 
int
éé 
top
éé 
;
éé 
public
èè 
int
èè 
right
èè 
;
èè 
public
êê 
int
êê 
bottom
êê 
;
êê 
}
ëë 
;
ëë 
[
ïï 
StructLayout
ïï 
(
ïï 

LayoutKind
ïï 
.
ïï 

Sequential
ïï '
)
ïï' (
]
ïï( )
public
ññ 

struct
ññ 
CustomEdgeFill
ññ  
{
óó 
[
òò 	
	MarshalAs
òò	 
(
òò 
UnmanagedType
òò  
.
òò  !
U1
òò! #
)
òò# $
]
òò$ %
public
ôô 
bool
ôô 
execute
ôô 
;
ôô 
public
öö !
CustomEdgeFillColor
öö "
color
öö# (
;
öö( )
public
õõ 
UInt32
õõ 
left
õõ 
;
õõ 
public
úú 
UInt32
úú 
top
úú 
;
úú 
public
ùù 
UInt32
ùù 
right
ùù 
;
ùù 
public
ûû 
UInt32
ûû 
bottom
ûû 
;
ûû 
}
üü 
;
üü 
[
¢¢ 
StructLayout
¢¢ 
(
¢¢ 

LayoutKind
¢¢ 
.
¢¢ 

Sequential
¢¢ '
)
¢¢' (
]
¢¢( )
public
££ 

struct
££ 
PunchHoleRemoval
££ "
{
§§ 
[
•• 	
	MarshalAs
••	 
(
•• 
UnmanagedType
••  
.
••  !
U1
••! #
)
••# $
]
••$ %
public
¶¶ 
bool
¶¶ 
execute
¶¶ 
;
¶¶ 
public
ßß #
PunchHoleRemovalColor
ßß $
color
ßß% *
;
ßß* +
}
®® 
;
®® 
[
¨¨ 
StructLayout
¨¨ 
(
¨¨ 

LayoutKind
¨¨ 
.
¨¨ 

Sequential
¨¨ '
)
¨¨' (
]
¨¨( )
public
≠≠ 

struct
≠≠ 
AutoColorLevel
≠≠  
{
ÆÆ 
public
≤≤ 
UInt32
≤≤ "
monoColorDetectLevel
≤≤ *
;
≤≤* +
public
∂∂ 
UInt32
∂∂ !
monoGrayDetectLevel
∂∂ )
;
∂∂) *
}
∑∑ 
;
∑∑ 
[
ªª 
StructLayout
ªª 
(
ªª 

LayoutKind
ªª 
.
ªª 

Sequential
ªª '
)
ªª' (
]
ªª( )
public
ºº 

struct
ºº !
DiffusionAdjustment
ºº %
{
ΩΩ 
public
ææ 
int
ææ 

brightness
ææ 
;
ææ 
public
øø 
int
øø 
contrast
øø 
;
øø 
}
¿¿ 
;
¿¿ 
[
ƒƒ 
StructLayout
ƒƒ 
(
ƒƒ 

LayoutKind
ƒƒ 
.
ƒƒ 

Sequential
ƒƒ '
)
ƒƒ' (
]
ƒƒ( )
public
≈≈ 

struct
≈≈ 
	ColorTone
≈≈ 
{
∆∆ 
[
«« 	
	MarshalAs
««	 
(
«« 
UnmanagedType
««  
.
««  !
U1
««! #
)
««# $
]
««$ %
public
»» 
bool
»» 
custom
»» 
;
»» 
public
…… 
int
…… 

brightness
…… 
;
…… 
public
   
int
   
contrast
   
;
   
public
ÀÀ 
UInt32
ÀÀ 
	highlight
ÀÀ 
;
ÀÀ  
public
ÃÃ 
UInt32
ÃÃ 
shadow
ÃÃ 
;
ÃÃ 
public
ÕÕ 
UInt32
ÕÕ 
gamma
ÕÕ 
;
ÕÕ 
}
ŒŒ 
;
ŒŒ 
[
—— 
StructLayout
—— 
(
—— 

LayoutKind
—— 
.
—— 

Sequential
—— '
)
——' (
]
——( )
public
““ 

struct
““ "
BackgroundProcessing
““ &
{
”” 
[
‘‘ 	
	MarshalAs
‘‘	 
(
‘‘ 
UnmanagedType
‘‘  
.
‘‘  !
U1
‘‘! #
)
‘‘# $
]
‘‘$ %
public
’’ 
bool
’’ 
execute
’’ 
;
’’ 
public
÷÷ 
SmoothingType
÷÷ 
type
÷÷ !
;
÷÷! "
public
◊◊ 
int
◊◊ 
level
◊◊ 
;
◊◊ 
}
ÿÿ 
;
ÿÿ 
[
‹‹ 
StructLayout
‹‹ 
(
‹‹ 

LayoutKind
‹‹ 
.
‹‹ 

Sequential
‹‹ '
)
‹‹' (
]
‹‹( )
public
›› 

struct
›› 
CustomColorDrop
›› !
{
ﬁﬁ 
public
ﬂﬂ 
UInt32
ﬂﬂ 
redVal
ﬂﬂ 
;
ﬂﬂ 
public
‡‡ 
UInt32
‡‡ 
greenVal
‡‡ 
;
‡‡ 
public
·· 
UInt32
·· 
blueVal
·· 
;
·· 
public
ËË 
UInt32
ËË 
level
ËË 
;
ËË 
[
ÈÈ 	
	MarshalAs
ÈÈ	 
(
ÈÈ 
UnmanagedType
ÈÈ  
.
ÈÈ  !
U1
ÈÈ! #
)
ÈÈ# $
]
ÈÈ$ %
public
ÍÍ 
bool
ÍÍ 
keepDarkColor
ÍÍ !
;
ÍÍ! "
}
ÎÎ 
;
ÎÎ 
[
ÓÓ 
StructLayout
ÓÓ 
(
ÓÓ 

LayoutKind
ÓÓ 
.
ÓÓ 

Sequential
ÓÓ '
)
ÓÓ' (
]
ÓÓ( )
public
ÔÔ 

struct
ÔÔ 
	ColorDrop
ÔÔ 
{
 
[
ÒÒ 	
	MarshalAs
ÒÒ	 
(
ÒÒ 
UnmanagedType
ÒÒ  
.
ÒÒ  !
U1
ÒÒ! #
)
ÒÒ# $
]
ÒÒ$ %
public
ÚÚ 
bool
ÚÚ 
execute
ÚÚ 
;
ÚÚ 
public
ÛÛ 
	DropColor
ÛÛ 
color
ÛÛ 
;
ÛÛ 
public
ÙÙ 
CustomColorDrop
ÙÙ 
customColor
ÙÙ *
;
ÙÙ* +
}
ıı 
;
ıı 
[
¯¯ 
StructLayout
¯¯ 
(
¯¯ 

LayoutKind
¯¯ 
.
¯¯ 

Sequential
¯¯ '
)
¯¯' (
]
¯¯( )
public
˘˘ 

struct
˘˘ 
ContinuousScan
˘˘  
{
˙˙ 
[
˚˚ 	
	MarshalAs
˚˚	 
(
˚˚ 
UnmanagedType
˚˚  
.
˚˚  !
U1
˚˚! #
)
˚˚# $
]
˚˚$ %
public
¸¸ 
bool
¸¸ 
execute
¸¸ 
;
¸¸ 
public
˝˝ 
UInt32
˝˝ 
timeoutMinutes
˝˝ $
;
˝˝$ %
public
˛˛ 
UInt32
˛˛ 
feedDelaySec
˛˛ "
;
˛˛" #
}
ˇˇ 
;
ˇˇ 
[
ÇÇ 
StructLayout
ÇÇ 
(
ÇÇ 

LayoutKind
ÇÇ 
.
ÇÇ 

Sequential
ÇÇ '
)
ÇÇ' (
]
ÇÇ( )
public
ÉÉ 

struct
ÉÉ 
BarcodeDetection
ÉÉ "
{
ÑÑ 
[
ÖÖ 	
	MarshalAs
ÖÖ	 
(
ÖÖ 
UnmanagedType
ÖÖ  
.
ÖÖ  !
U1
ÖÖ! #
)
ÖÖ# $
]
ÖÖ$ %
public
ÜÜ 
bool
ÜÜ 
execute
ÜÜ 
;
ÜÜ 
[
áá 	
	MarshalAs
áá	 
(
áá 
UnmanagedType
áá  
.
áá  !
U1
áá! #
)
áá# $
]
áá$ %
public
àà 
bool
àà 
specifyArea
àà 
;
àà  
public
ââ 
Area
ââ 
area
ââ 
;
ââ 
[
ää 	
	MarshalAs
ää	 
(
ää 
UnmanagedType
ää  
.
ää  !

ByValArray
ää! +
,
ää+ ,
	SizeConst
ää- 6
=
ää7 8
	Constants
ää9 B
.
ääB C 
MAX_ARRAY_ELEMENTS
ääC U
)
ääU V
]
ääV W
public
ãã 
BarcodeType
ãã 
[
ãã 
]
ãã 
types
ãã "
;
ãã" #
public
íí 
byte
íí 
typesNum
íí 
;
íí 
}
ìì 
;
ìì 
[
ññ 
StructLayout
ññ 
(
ññ 

LayoutKind
ññ 
.
ññ 

Sequential
ññ '
)
ññ' (
]
ññ( )
public
óó 

struct
óó  
PatchcodeDetection
óó $
{
òò 
[
ôô 	
	MarshalAs
ôô	 
(
ôô 
UnmanagedType
ôô  
.
ôô  !
U1
ôô! #
)
ôô# $
]
ôô$ %
public
öö 
bool
öö 
execute
öö 
;
öö 
[
õõ 	
	MarshalAs
õõ	 
(
õõ 
UnmanagedType
õõ  
.
õõ  !

ByValArray
õõ! +
,
õõ+ ,
	SizeConst
õõ- 6
=
õõ7 8
	Constants
õõ9 B
.
õõB C 
MAX_ARRAY_ELEMENTS
õõC U
)
õõU V
]
õõV W
public
úú 
PatchcodeType
úú 
[
úú 
]
úú 
types
úú $
;
úú$ %
public
ùù 
byte
ùù 
typesNum
ùù 
;
ùù 
}
ûû 
;
ûû 
[
°° 
StructLayout
°° 
(
°° 

LayoutKind
°° 
.
°° 

Sequential
°° '
)
°°' (
]
°°( )
public
¢¢ 

class
¢¢ 
ScanParameter
¢¢ 
{
££ 
public
•• 
PaperSourceType
•• 
paperSource
•• *
;
••* +
public
ßß 

Resolution
ßß 

resolution
ßß $
;
ßß$ %
public
©© 
	ColorType
©© 
	colorType
©© "
;
©©" #
public
´´ 
ScanArea
´´ 
scanArea
´´  
;
´´  !
public
≠≠ 
int
≠≠ 

brightness
≠≠ 
;
≠≠ 
public
ØØ 
int
ØØ 
contrast
ØØ 
;
ØØ 
public
±± 

DuplexType
±± 
duplex
±±  
;
±±  !
[
¥¥ 	
	MarshalAs
¥¥	 
(
¥¥ 
UnmanagedType
¥¥  
.
¥¥  !
U1
¥¥! #
)
¥¥# $
]
¥¥$ %
public
µµ 
bool
µµ 

autoDeskew
µµ 
;
µµ 
[
∑∑ 	
	MarshalAs
∑∑	 
(
∑∑ 
UnmanagedType
∑∑  
.
∑∑  !
U1
∑∑! #
)
∑∑# $
]
∑∑$ %
public
∏∏ 
bool
∏∏ 
detectEndOfPage
∏∏ #
;
∏∏# $
public
∫∫ 
MarginSettings
∫∫ 
marginSettings
∫∫ ,
;
∫∫, -
public
ºº 
RotateAngle
ºº 
rotateImageAngle
ºº +
;
ºº+ ,
[
ææ 	
	MarshalAs
ææ	 
(
ææ 
UnmanagedType
ææ  
.
ææ  !
U1
ææ! #
)
ææ# $
]
ææ$ %
public
øø 
bool
øø 
autoEdgeFill
øø  
;
øø  !
public
¡¡ 
CustomEdgeFill
¡¡ 
customEdgeFill
¡¡ ,
;
¡¡, -
public
√√ 
PunchHoleRemoval
√√ 
punchHoleRemoval
√√  0
;
√√0 1
public
≈≈ 
AutoColorLevel
≈≈ #
autoColorDetectAdjust
≈≈ 3
;
≈≈3 4
public
«« 
ImageProcessing
«« 
skipBlankPage
«« ,
;
««, -
public
…… !
DiffusionAdjustment
…… "&
diffusionAdjustment_Gray
……# ;
;
……; <
public
ÀÀ 
	ColorTone
ÀÀ !
colorToneAdjustment
ÀÀ ,
;
ÀÀ, -
public
ÕÕ "
BackgroundProcessing
ÕÕ #"
backgroundProcessing
ÕÕ$ 8
;
ÕÕ8 9
public
œœ 
	ColorDrop
œœ 
	colorDrop
œœ "
;
œœ" #
public
—— 
ImageProcessing
—— 
edgeEmphasis
—— +
;
——+ ,
[
”” 	
	MarshalAs
””	 
(
”” 
UnmanagedType
””  
.
””  !
U1
””! #
)
””# $
]
””$ %
public
‘‘ 
bool
‘‘ 
reduceNoise
‘‘ 
;
‘‘  
public
ÿÿ 
ImageProcessing
ÿÿ %
monoThresholdAdjustment
ÿÿ 6
;
ÿÿ6 7
[
⁄⁄ 	
	MarshalAs
⁄⁄	 
(
⁄⁄ 
UnmanagedType
⁄⁄  
.
⁄⁄  !
U1
⁄⁄! #
)
⁄⁄# $
]
⁄⁄$ %
public
€€ 
bool
€€ (
blurredCharacterCorrection
€€ .
;
€€. /
public
›› 
ImageProcessing
››  
boldfaceFormatting
›› 1
;
››1 2
public
ﬂﬂ 
	MergeType
ﬂﬂ 
mergeImages
ﬂﬂ $
;
ﬂﬂ$ %
[
·· 	
	MarshalAs
··	 
(
·· 
UnmanagedType
··  
.
··  !
U1
··! #
)
··# $
]
··$ %
public
‚‚ 
bool
‚‚ 
carrierSheetMode
‚‚ $
;
‚‚$ %
[
‰‰ 	
	MarshalAs
‰‰	 
(
‰‰ 
UnmanagedType
‰‰  
.
‰‰  !
U1
‰‰! #
)
‰‰# $
]
‰‰$ %
public
ÂÂ 
bool
ÂÂ 
plasticCardMode
ÂÂ #
;
ÂÂ# $
[
ÁÁ 	
	MarshalAs
ÁÁ	 
(
ÁÁ 
UnmanagedType
ÁÁ  
.
ÁÁ  !
U1
ÁÁ! #
)
ÁÁ# $
]
ÁÁ$ %
public
ËË 
bool
ËË 
singlePaperScan
ËË #
;
ËË# $
public
ÎÎ 
ContinuousScan
ÎÎ 
continuousScan
ÎÎ ,
;
ÎÎ, -
[
ÌÌ 	
	MarshalAs
ÌÌ	 
(
ÌÌ 
UnmanagedType
ÌÌ  
.
ÌÌ  !
U1
ÌÌ! #
)
ÌÌ# $
]
ÌÌ$ %
public
ÓÓ 
bool
ÓÓ  
multifeedDetection
ÓÓ &
;
ÓÓ& '
public
 
BarcodeDetection
 
barcodeDetection
  0
;
0 1
public
ÚÚ  
PatchcodeDetection
ÚÚ ! 
patchcodeDetection
ÚÚ" 4
;
ÚÚ4 5
}
ÛÛ 
;
ÛÛ 
public
¸¸ 

enum
¸¸ 

ScanStatus
¸¸ 
{
˝˝ 
Standby
˛˛ 
=
˛˛ 
$num
˛˛ 
,
˛˛ 
Scanning
ˇˇ 
,
ˇˇ 
AllEnd
ÄÄ 
,
ÄÄ 
Canceled
ÅÅ 
,
ÅÅ 
Error
ÇÇ 
}
ÉÉ 
;
ÉÉ 
public
ÖÖ 

class
ÖÖ 

SDKWrapper
ÖÖ 
:
ÖÖ 
IDisposable
ÖÖ )
{
ÜÜ 
private
áá 
const
áá 
string
áá 
dllname
áá $
=
áá% &
$str
áá' 9
;
áá9 :
[
àà 	
	DllImport
àà	 
(
àà 
dllname
àà 
,
àà 

EntryPoint
àà &
=
àà' (
$str
àà) K
,
ààK L
CallingConvention
ààM ^
=
àà_ `
CallingConvention
ààa r
.
ààr s
Cdecl
ààs x
)
ààx y
]
àày z
private
ââ 
static
ââ 
extern
ââ 
	ErrorCode
ââ '2
$EnumerateScanDeviceWithStructure_dll
ââ( L
(
ââL M
[
ââM N
Out
ââN Q
]
ââQ R
DeviceInfoList
ââS a
scanDeviceList
ââb p
)
ââp q
;
ââq r
[
ää 	
	DllImport
ää	 
(
ää 
dllname
ää 
,
ää 

EntryPoint
ää &
=
ää' (
$str
ää) 7
,
ää7 8
CallingConvention
ää9 J
=
ääK L
CallingConvention
ääM ^
.
ää^ _
Cdecl
ää_ d
)
ääd e
]
ääe f
private
ãã 
static
ãã 
extern
ãã 
	ErrorCode
ãã '
SelectDevice_dll
ãã( 8
(
ãã8 9
[
ãã9 :
In
ãã: <
]
ãã< =

DeviceInfo
ãã> H
device
ããI O
)
ããO P
;
ããP Q
[
åå 	
	DllImport
åå	 
(
åå 
dllname
åå 
,
åå 

EntryPoint
åå &
=
åå' (
$str
åå) =
,
åå= >
CallingConvention
åå? P
=
ååQ R
CallingConvention
ååS d
.
ååd e
Cdecl
ååe j
)
ååj k
]
ååk l
private
çç 
static
çç 
extern
çç 
	ErrorCode
çç '$
CheckDocumentExist_dll
çç( >
(
çç> ?
[
çç? @
	MarshalAs
çç@ I
(
ççI J
UnmanagedType
ççJ W
.
ççW X
U1
ççX Z
)
ççZ [
]
çç[ \
out
çç] `
bool
çça e
existDocument
ççf s
)
ççs t
;
ççt u
[
éé 	
	DllImport
éé	 
(
éé 
dllname
éé 
,
éé 

EntryPoint
éé &
=
éé' (
$str
éé) @
,
éé@ A
CallingConvention
ééB S
=
ééT U
CallingConvention
ééV g
.
éég h
Cdecl
ééh m
)
éém n
]
één o
private
èè 
static
èè 
extern
èè 
	ErrorCode
èè ''
GetSelectedDeviceInfo_dll
èè( A
(
èèA B
[
èèB C
Out
èèC F
]
èèF G

DeviceInfo
èèH R 
selectedDeviceInfo
èèS e
)
èèe f
;
èèf g
[
êê 	
	DllImport
êê	 
(
êê 
dllname
êê 
,
êê 

EntryPoint
êê &
=
êê' (
$str
êê) <
,
êê< =
CallingConvention
êê> O
=
êêP Q
CallingConvention
êêR c
.
êêc d
Cdecl
êêd i
)
êêi j
]
êêj k
private
ëë 
static
ëë 
extern
ëë 
	ErrorCode
ëë '#
QueryCapabilities_dll
ëë( =
(
ëë= >
[
ëë> ?
Out
ëë? B
]
ëëB C

Capability
ëëD N

deviceCaps
ëëO Y
)
ëëY Z
;
ëëZ [
[
íí 	
	DllImport
íí	 
(
íí 
dllname
íí 
,
íí 

EntryPoint
íí &
=
íí' (
$str
íí) ;
,
íí; <
CallingConvention
íí= N
=
ííO P
CallingConvention
ííQ b
.
ííb c
Cdecl
ííc h
)
ííh i
]
ííi j
private
ìì 
static
ìì 
extern
ìì 
	ErrorCode
ìì '"
SetScanParameter_dll
ìì( <
(
ìì< =
[
ìì= >
In
ìì> @
]
ìì@ A
ScanParameter
ììB O
scanParameter
ììP ]
)
ìì] ^
;
ìì^ _
[
îî 	
	DllImport
îî	 
(
îî 
dllname
îî 
,
îî 

EntryPoint
îî &
=
îî' (
$str
îî) ;
,
îî; <
CallingConvention
îî= N
=
îîO P
CallingConvention
îîQ b
.
îîb c
Cdecl
îîc h
)
îîh i
]
îîi j
private
ïï 
static
ïï 
extern
ïï 
	ErrorCode
ïï '"
GetScanParameter_dll
ïï( <
(
ïï< =
[
ïï= >
Out
ïï> A
]
ïïA B
ScanParameter
ïïC P
scanParameter
ïïQ ^
)
ïï^ _
;
ïï_ `
[
ññ 	
	DllImport
ññ	 
(
ññ 
dllname
ññ 
,
ññ 

EntryPoint
ññ &
=
ññ' (
$str
ññ) ;
,
ññ; <
CallingConvention
ññ= N
=
ññO P
CallingConvention
ññQ b
.
ññb c
Cdecl
ññc h
)
ññh i
]
ññi j
private
óó 
static
óó 
extern
óó 
	ErrorCode
óó '"
SetFileParameter_dll
óó( <
(
óó< =
[
óó= >
In
óó> @
]
óó@ A
FileParameter
óóB O
fileParameter
óóP ]
)
óó] ^
;
óó^ _
[
òò 	
	DllImport
òò	 
(
òò 
dllname
òò 
,
òò 

EntryPoint
òò &
=
òò' (
$str
òò) ;
,
òò; <
CallingConvention
òò= N
=
òòO P
CallingConvention
òòQ b
.
òòb c
Cdecl
òòc h
)
òòh i
]
òòi j
private
ôô 
static
ôô 
extern
ôô 
	ErrorCode
ôô '"
GetFileParameter_dll
ôô( <
(
ôô< =
[
ôô= >
Out
ôô> A
]
ôôA B
FileParameter
ôôC P
fileParameter
ôôQ ^
)
ôô^ _
;
ôô_ `
[
öö 	
	DllImport
öö	 
(
öö 
dllname
öö 
,
öö 

EntryPoint
öö &
=
öö' (
$str
öö) 3
,
öö3 4
CallingConvention
öö5 F
=
ööG H
CallingConvention
ööI Z
.
ööZ [
Cdecl
öö[ `
)
öö` a
]
ööa b
private
õõ 
static
õõ 
extern
õõ 
	ErrorCode
õõ '
ScanSync_dll
õõ( 4
(
õõ4 5
)
õõ5 6
;
õõ6 7
[
úú 	
	DllImport
úú	 
(
úú 
dllname
úú 
,
úú 

EntryPoint
úú &
=
úú' (
$str
úú) 4
,
úú4 5
CallingConvention
úú6 G
=
úúH I
CallingConvention
úúJ [
.
úú[ \
Cdecl
úú\ a
)
úúa b
]
úúb c
private
ùù 
static
ùù 
extern
ùù 
	ErrorCode
ùù '
ScanAsync_dll
ùù( 5
(
ùù5 6
)
ùù6 7
;
ùù7 8
[
ûû 	
	DllImport
ûû	 
(
ûû 
dllname
ûû 
,
ûû 

EntryPoint
ûû &
=
ûû' (
$str
ûû) 8
,
ûû8 9
CallingConvention
ûû: K
=
ûûL M
CallingConvention
ûûN _
.
ûû_ `
Cdecl
ûû` e
)
ûûe f
]
ûûf g
[
üü 	
return
üü	 
:
üü 
	MarshalAs
üü 
(
üü 
UnmanagedType
üü (
.
üü( )
U1
üü) +
)
üü+ ,
]
üü, -
private
†† 
static
†† 
extern
†† 
bool
†† "
AbortScanning_dll
††# 4
(
††4 5
)
††5 6
;
††6 7
[
°° 	
	DllImport
°°	 
(
°° 
dllname
°° 
,
°° 

EntryPoint
°° &
=
°°' (
$str
°°) 6
,
°°6 7
CallingConvention
°°8 I
=
°°J K
CallingConvention
°°L ]
.
°°] ^
Cdecl
°°^ c
)
°°c d
]
°°d e
private
¢¢ 
static
¢¢ 
extern
¢¢ 
IntPtr
¢¢ $
GetFileName_dll
¢¢% 4
(
¢¢4 5
[
¢¢5 6
In
¢¢6 8
]
¢¢8 9
UInt32
¢¢: @
fileNo
¢¢A G
)
¢¢G H
;
¢¢H I
[
££ 	
	DllImport
££	 
(
££ 
dllname
££ 
,
££ 

EntryPoint
££ &
=
££' (
$str
££) 6
,
££6 7
CallingConvention
££8 I
=
££J K
CallingConvention
££L ]
.
££] ^
Cdecl
££^ c
)
££c d
]
££d e
private
§§ 
static
§§ 
extern
§§ 
IntPtr
§§ $
GetFileList_dll
§§% 4
(
§§4 5
[
§§5 6
Out
§§6 9
]
§§9 :
out
§§; >
UInt32
§§? E
size
§§F J
)
§§J K
;
§§K L
[
•• 	
	DllImport
••	 
(
•• 
dllname
•• 
,
•• 

EntryPoint
•• &
=
••' (
$str
••) 8
,
••8 9
CallingConvention
••: K
=
••L M
CallingConvention
••N _
.
••_ `
Cdecl
••` e
)
••e f
]
••f g
private
¶¶ 
static
¶¶ 
extern
¶¶ 

ScanStatus
¶¶ (
GetScanStatus_dll
¶¶) :
(
¶¶: ;
)
¶¶; <
;
¶¶< =
[
ßß 	
	DllImport
ßß	 
(
ßß 
dllname
ßß 
,
ßß 

EntryPoint
ßß &
=
ßß' (
$str
ßß) 7
,
ßß7 8
CallingConvention
ßß9 J
=
ßßK L
CallingConvention
ßßM ^
.
ßß^ _
Cdecl
ßß_ d
)
ßßd e
]
ßße f
private
®® 
static
®® 
extern
®® 
	ErrorCode
®® '
GetScanError_dll
®®( 8
(
®®8 9
)
®®9 :
;
®®: ;
[
©© 	
	DllImport
©©	 
(
©© 
dllname
©© 
,
©© 

EntryPoint
©© &
=
©©' (
$str
©©) >
,
©©> ?
CallingConvention
©©@ Q
=
©©R S
CallingConvention
©©T e
.
©©e f
Cdecl
©©f k
)
©©k l
]
©©l m
private
™™ 
static
™™ 
extern
™™ 
UInt32
™™ $%
GetScannedPageCount_dll
™™% <
(
™™< =
)
™™= >
;
™™> ?
[
´´ 	
	DllImport
´´	 
(
´´ 
dllname
´´ 
,
´´ 

EntryPoint
´´ &
=
´´' (
$str
´´) <
,
´´< =
CallingConvention
´´> O
=
´´P Q
CallingConvention
´´R c
.
´´c d
Cdecl
´´d i
)
´´i j
]
´´j k
private
¨¨ 
static
¨¨ 
extern
¨¨ 
UInt32
¨¨ $#
GetSavedFileCount_dll
¨¨% :
(
¨¨: ;
)
¨¨; <
;
¨¨< =
[
≠≠ 	
	DllImport
≠≠	 
(
≠≠ 
dllname
≠≠ 
,
≠≠ 

EntryPoint
≠≠ &
=
≠≠' (
$str
≠≠) 3
,
≠≠3 4
CallingConvention
≠≠5 F
=
≠≠G H
CallingConvention
≠≠I Z
.
≠≠Z [
Cdecl
≠≠[ `
)
≠≠` a
]
≠≠a b
private
ÆÆ 
static
ÆÆ 
extern
ÆÆ 
void
ÆÆ "
Finalyze_dll
ÆÆ# /
(
ÆÆ/ 0
)
ÆÆ0 1
;
ÆÆ1 2
public
∞∞ 
static
∞∞ 

SDKWrapper
∞∞  
CreateInstance
∞∞! /
(
∞∞/ 0
)
∞∞0 1
{
±± 	
return
≤≤ 
new
≤≤ 

SDKWrapper
≤≤ !
(
≤≤! "
)
≤≤" #
;
≤≤# $
}
≥≥ 	
public
µµ 
void
µµ 
Dispose
µµ 
(
µµ 
)
µµ 
{
∂∂ 	
Finalyze_dll
∑∑ 
(
∑∑ 
)
∑∑ 
;
∑∑ 
}
∏∏ 	
public
∫∫ 

DeviceInfo
∫∫ 
[
∫∫ 
]
∫∫ !
EnumerateScanDevice
∫∫ /
(
∫∫/ 0
)
∫∫0 1
{
ªª 	
var
ºº 
list
ºº 
=
ºº 
new
ºº 
DeviceInfoList
ºº )
(
ºº) *
)
ºº* +
;
ºº+ ,
var
ΩΩ 
result
ΩΩ 
=
ΩΩ 2
$EnumerateScanDeviceWithStructure_dll
ΩΩ =
(
ΩΩ= >
list
ΩΩ> B
)
ΩΩB C
;
ΩΩC D
var
øø 
devices
øø 
=
øø 
new
øø 

DeviceInfo
øø (
[
øø( )
list
øø) -
.
øø- .
listSize
øø. 6
]
øø6 7
;
øø7 8
for
¿¿ 
(
¿¿ 
int
¿¿ 
idx
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
idx
¿¿ !
<
¿¿" #
list
¿¿$ (
.
¿¿( )
listSize
¿¿) 1
;
¿¿1 2
idx
¿¿3 6
++
¿¿6 8
)
¿¿8 9
{
¡¡ 
devices
¬¬ 
[
¬¬ 
idx
¬¬ 
]
¬¬ 
=
¬¬ 
(
¬¬  

DeviceInfo
¬¬  *
)
¬¬* +
Marshal
¬¬+ 2
.
¬¬2 3
PtrToStructure
¬¬3 A
(
¬¬A B
list
¬¬B F
.
¬¬F G
list
¬¬G K
+
¬¬L M
idx
¬¬N Q
*
¬¬R S
Marshal
¬¬T [
.
¬¬[ \
SizeOf
¬¬\ b
(
¬¬b c
typeof
¬¬c i
(
¬¬i j

DeviceInfo
¬¬j t
)
¬¬t u
)
¬¬u v
,
¬¬v w
typeof
¬¬x ~
(
¬¬~ 

DeviceInfo¬¬ â
)¬¬â ä
)¬¬ä ã
;¬¬ã å
}
√√ 
return
≈≈ 
devices
≈≈ 
;
≈≈ 
}
∆∆ 	
public
»» 
void
»» 
SelectDevice
»»  
(
»»  !

DeviceInfo
»»! +
device
»», 2
)
»»2 3
{
…… 	
var
   
result
   
=
   
SelectDevice_dll
   )
(
  ) *
device
  * 0
)
  0 1
;
  1 2
CheckResult
ÕÕ 
(
ÕÕ 
result
ÕÕ 
)
ÕÕ 
;
ÕÕ  
}
œœ 	
public
—— 

DeviceInfo
—— #
GetSelectedDeviceInfo
—— /
(
——/ 0
)
——0 1
{
““ 	
var
”” 
device
”” 
=
”” 
new
”” 

DeviceInfo
”” '
(
””' (
)
””( )
;
””) *
var
‘‘ 
result
‘‘ 
=
‘‘ '
GetSelectedDeviceInfo_dll
‘‘ 2
(
‘‘2 3
device
‘‘3 9
)
‘‘9 :
;
‘‘: ;
CheckResult
’’ 
(
’’ 
result
’’ 
)
’’ 
;
’’  
return
◊◊ 
device
◊◊ 
;
◊◊ 
}
ÿÿ 	
public
⁄⁄ 

Capability
⁄⁄ 
QueryCapabilities
⁄⁄ +
(
⁄⁄+ ,
)
⁄⁄, -
{
€€ 	
var
‹‹ 
caps
‹‹ 
=
‹‹ 
new
‹‹ 

Capability
‹‹ %
(
‹‹% &
)
‹‹& '
;
‹‹' (
var
›› 
result
›› 
=
›› #
QueryCapabilities_dll
›› .
(
››. /
caps
››/ 3
)
››3 4
;
››4 5
CheckResult
ﬁﬁ 
(
ﬁﬁ 
result
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ  
return
‡‡ 
caps
‡‡ 
;
‡‡ 
}
·· 	
public
„„ 
bool
„„  
CheckDocumentExist
„„ &
(
„„& '
)
„„' (
{
‰‰ 	
bool
ÂÂ 
exists
ÂÂ 
=
ÂÂ 
false
ÂÂ 
;
ÂÂ  
var
ÊÊ 
result
ÊÊ 
=
ÊÊ $
CheckDocumentExist_dll
ÊÊ /
(
ÊÊ/ 0
out
ÊÊ0 3
exists
ÊÊ4 :
)
ÊÊ: ;
;
ÊÊ; <
CheckResult
ÁÁ 
(
ÁÁ 
result
ÁÁ 
)
ÁÁ 
;
ÁÁ  
return
ÈÈ 
exists
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
public
ÏÏ 
void
ÏÏ 
SetScanParameter
ÏÏ $
(
ÏÏ$ %
ScanParameter
ÏÏ% 2
scanParameter
ÏÏ3 @
)
ÏÏ@ A
{
ÌÌ 	
var
ÓÓ 
result
ÓÓ 
=
ÓÓ "
SetScanParameter_dll
ÓÓ -
(
ÓÓ- .
scanParameter
ÓÓ. ;
)
ÓÓ; <
;
ÓÓ< =
CheckResult
ÔÔ 
(
ÔÔ 
result
ÔÔ 
)
ÔÔ 
;
ÔÔ  
}
 	
public
ÚÚ 
ScanParameter
ÚÚ 
GetScanParameter
ÚÚ -
(
ÚÚ- .
)
ÚÚ. /
{
ÛÛ 	
var
ÙÙ 
	parameter
ÙÙ 
=
ÙÙ 
new
ÙÙ 
ScanParameter
ÙÙ  -
(
ÙÙ- .
)
ÙÙ. /
;
ÙÙ/ 0
var
ıı 
result
ıı 
=
ıı "
GetScanParameter_dll
ıı -
(
ıı- .
	parameter
ıı. 7
)
ıı7 8
;
ıı8 9
CheckResult
ˆˆ 
(
ˆˆ 
result
ˆˆ 
)
ˆˆ 
;
ˆˆ  
return
¯¯ 
	parameter
¯¯ 
;
¯¯ 
}
˘˘ 	
public
˚˚ 
void
˚˚ 
SetFileParameter
˚˚ $
(
˚˚$ %
FileParameter
˚˚% 2
fileParameter
˚˚3 @
)
˚˚@ A
{
¸¸ 	
var
˝˝ 
result
˝˝ 
=
˝˝ "
SetFileParameter_dll
˝˝ -
(
˝˝- .
fileParameter
˝˝. ;
)
˝˝; <
;
˝˝< =
CheckResult
˛˛ 
(
˛˛ 
result
˛˛ 
)
˛˛ 
;
˛˛  
}
ˇˇ 	
public
ÅÅ 
FileParameter
ÅÅ 
GetFileParameter
ÅÅ -
(
ÅÅ- .
)
ÅÅ. /
{
ÇÇ 	
var
ÉÉ 
	parameter
ÉÉ 
=
ÉÉ 
new
ÉÉ 
FileParameter
ÉÉ  -
(
ÉÉ- .
)
ÉÉ. /
;
ÉÉ/ 0
var
ÑÑ 
result
ÑÑ 
=
ÑÑ "
GetFileParameter_dll
ÑÑ -
(
ÑÑ- .
	parameter
ÑÑ. 7
)
ÑÑ7 8
;
ÑÑ8 9
CheckResult
ÖÖ 
(
ÖÖ 
result
ÖÖ 
)
ÖÖ 
;
ÖÖ  
return
áá 
	parameter
áá 
;
áá 
}
àà 	
public
ää 
void
ää 
ScanSync
ää 
(
ää 
)
ää 
{
ãã 	
var
åå 
result
åå 
=
åå 
ScanSync_dll
åå %
(
åå% &
)
åå& '
;
åå' (
CheckResult
çç 
(
çç 
result
çç 
)
çç 
;
çç  
}
éé 	
public
êê 
void
êê 
	ScanAsync
êê 
(
êê 
)
êê 
{
ëë 	
var
íí 
result
íí 
=
íí 
ScanAsync_dll
íí &
(
íí& '
)
íí' (
;
íí( )
CheckResult
ìì 
(
ìì 
result
ìì 
)
ìì 
;
ìì  
}
îî 	
public
ññ 
bool
ññ 
AbortScanning
ññ !
(
ññ! "
)
ññ" #
{
óó 	
return
òò 
AbortScanning_dll
òò $
(
òò$ %
)
òò% &
;
òò& '
}
ôô 	
public
õõ 
string
õõ 
GetFileName
õõ !
(
õõ! "
UInt32
õõ" (
fileNo
õõ) /
)
õõ/ 0
{
úú 	
var
ùù 
ptr
ùù 
=
ùù 
GetFileName_dll
ùù %
(
ùù% &
fileNo
ùù& ,
)
ùù, -
;
ùù- .
var
ûû 
str
ûû 
=
ûû 
Marshal
ûû 
.
ûû 
PtrToStringAnsi
ûû -
(
ûû- .
ptr
ûû. 1
)
ûû1 2
;
ûû2 3
return
üü 
str
üü 
;
üü 
}
†† 	
public
¢¢ 
string
¢¢ 
[
¢¢ 
]
¢¢ 
GetFileList
¢¢ #
(
¢¢# $
)
¢¢$ %
{
££ 	
UInt32
§§ 
size
§§ 
=
§§ 
$num
§§ 
;
§§ 
var
•• 
pptr
•• 
=
•• 
GetFileList_dll
•• &
(
••& '
out
••' *
size
••+ /
)
••/ 0
;
••0 1
var
ßß 
files
ßß 
=
ßß 
new
ßß 
string
ßß "
[
ßß" #
size
ßß# '
]
ßß' (
;
ßß( )
for
®® 
(
®® 
int
®® 
idx
®® 
=
®® 
$num
®® 
;
®® 
idx
®® !
<
®®" #
size
®®$ (
;
®®( )
idx
®®* -
++
®®- /
)
®®/ 0
{
©© 
var
™™ 
ptr
™™ 
=
™™ 
Marshal
™™ !
.
™™! "

ReadIntPtr
™™" ,
(
™™, -
pptr
™™- 1
,
™™1 2
idx
™™3 6
*
™™7 8
Marshal
™™9 @
.
™™@ A
SizeOf
™™A G
(
™™G H
typeof
™™H N
(
™™N O
IntPtr
™™O U
)
™™U V
)
™™V W
)
™™W X
;
™™X Y
files
´´ 
[
´´ 
idx
´´ 
]
´´ 
=
´´ 
Marshal
´´ $
.
´´$ %
PtrToStringAnsi
´´% 4
(
´´4 5
ptr
´´5 8
)
´´8 9
;
´´9 :
}
¨¨ 
return
ÆÆ 
files
ÆÆ 
;
ÆÆ 
}
ØØ 	
public
±± 

ScanStatus
±± 
GetScanStatus
±± '
(
±±' (
)
±±( )
{
≤≤ 	
return
≥≥ 
GetScanStatus_dll
≥≥ $
(
≥≥$ %
)
≥≥% &
;
≥≥& '
}
¥¥ 	
public
∂∂ 
	ErrorCode
∂∂ 
GetScanError
∂∂ %
(
∂∂% &
)
∂∂& '
{
∑∑ 	
return
∏∏ 
GetScanError_dll
∏∏ #
(
∏∏# $
)
∏∏$ %
;
∏∏% &
}
ππ 	
public
ªª 
UInt32
ªª !
GetScannedPageCount
ªª )
(
ªª) *
)
ªª* +
{
ºº 	
return
ΩΩ %
GetScannedPageCount_dll
ΩΩ *
(
ΩΩ* +
)
ΩΩ+ ,
;
ΩΩ, -
}
ææ 	
public
¿¿ 
UInt32
¿¿ 
GetSavedFileCount
¿¿ '
(
¿¿' (
)
¿¿( )
{
¡¡ 	
return
¬¬ #
GetSavedFileCount_dll
¬¬ (
(
¬¬( )
)
¬¬) *
;
¬¬* +
}
√√ 	
private
≈≈ 
void
≈≈ 
CheckResult
≈≈  
(
≈≈  !
	ErrorCode
≈≈! *
error
≈≈+ 0
)
≈≈0 1
{
∆∆ 	
string
»» 
ScanDocuFilePath
»» #
=
»»$ %%
WebConfigurationManager
»»& =
.
»»= >
AppSettings
»»> I
[
»»I J
$str
»»J \
]
»»\ ]
.
»»] ^
ToString
»»^ f
(
»»f g
)
»»g h
;
»»h i
File
…… 
.
…… 
AppendAllText
…… 
(
…… 
ScanDocuFilePath
…… /
,
……/ 0
string
……1 7
.
……7 8
Format
……8 >
(
……> ?
$str
……? V
,
……V W
error
……X ]
,
……] ^
Environment
……_ j
.
……j k
NewLine
……k r
)
……r s
)
……s t
;
……t u
if
ÀÀ 
(
ÀÀ 
error
ÀÀ 
!=
ÀÀ 
	ErrorCode
ÀÀ "
.
ÀÀ" #
NoErrors
ÀÀ# +
)
ÀÀ+ ,
{
ÃÃ 
throw
ÕÕ 
new
ÕÕ 
SDKException
ÕÕ &
(
ÕÕ& '
error
ÕÕ' ,
)
ÕÕ, -
;
ÕÕ- .
}
ŒŒ 
}
œœ 	
}
–– 
public
““ 

class
““ 
SDKException
““ 
:
““ 
	Exception
““  )
{
”” 
public
‘‘ 
	ErrorCode
‘‘ 
_error
‘‘ 
{
‘‘  !
get
‘‘" %
;
‘‘% &
private
‘‘' .
set
‘‘/ 2
;
‘‘2 3
}
‘‘4 5
public
÷÷ 
SDKException
÷÷ 
(
÷÷ 
	ErrorCode
÷÷ %
error
÷÷& +
)
÷÷+ ,
:
÷÷- .
base
÷÷/ 3
(
÷÷3 4
)
÷÷4 5
{
◊◊ 	
this
ÿÿ 
.
ÿÿ 
_error
ÿÿ 
=
ÿÿ 
error
ÿÿ 
;
ÿÿ  
}
ŸŸ 	
}
⁄⁄ 
public
‹‹ 

class
‹‹ 

ScanDetail
‹‹ 
{
›› 
public
ﬁﬁ 
string
ﬁﬁ 
FileName
ﬁﬁ 
{
ﬁﬁ  
get
ﬁﬁ! $
;
ﬁﬁ$ %
set
ﬁﬁ& )
;
ﬁﬁ) *
}
ﬁﬁ+ ,
public
ﬂﬂ 
string
ﬂﬂ 
Error
ﬂﬂ 
{
ﬂﬂ 
get
ﬂﬂ !
;
ﬂﬂ! "
set
ﬂﬂ# &
;
ﬂﬂ& '
}
ﬂﬂ( )
}
‡‡ 
public
‚‚ 

class
‚‚ 
ScanRequestModel
‚‚ !
{
„„ 
public
‰‰ 
string
‰‰ 
connectionType
‰‰ $
{
‰‰% &
get
‰‰' *
;
‰‰* +
set
‰‰, /
;
‰‰/ 0
}
‰‰1 2
public
ÂÂ 
string
ÂÂ 
	ipAddress
ÂÂ 
{
ÂÂ  !
get
ÂÂ" %
;
ÂÂ% &
set
ÂÂ' *
;
ÂÂ* +
}
ÂÂ, -
public
ÊÊ 
string
ÊÊ 
nodename
ÊÊ 
{
ÊÊ  
get
ÊÊ! $
;
ÊÊ$ %
set
ÊÊ& )
;
ÊÊ) *
}
ÊÊ+ ,
public
ÁÁ 
string
ÁÁ 
usbModelName
ÁÁ "
{
ÁÁ# $
get
ÁÁ% (
;
ÁÁ( )
set
ÁÁ* -
;
ÁÁ- .
}
ÁÁ/ 0
public
ËË 
bool
ËË 
skipBlankPage
ËË !
{
ËË" #
get
ËË$ '
;
ËË' (
set
ËË) ,
;
ËË, -
}
ËË. /
public
ÈÈ 
int
ÈÈ  
skipBlankPageLevel
ÈÈ %
{
ÈÈ& '
get
ÈÈ( +
;
ÈÈ+ ,
set
ÈÈ- 0
;
ÈÈ0 1
}
ÈÈ2 3
public
ÍÍ 
bool
ÍÍ 
scanDocument
ÍÍ  
{
ÍÍ! "
get
ÍÍ# &
;
ÍÍ& '
set
ÍÍ( +
;
ÍÍ+ ,
}
ÍÍ- .
public
ÎÎ 
string
ÎÎ 
size
ÎÎ 
{
ÎÎ 
get
ÎÎ  
;
ÎÎ  !
set
ÎÎ" %
;
ÎÎ% &
}
ÎÎ' (
public
ÏÏ 
string
ÏÏ 
color
ÏÏ 
{
ÏÏ 
get
ÏÏ !
;
ÏÏ! "
set
ÏÏ# &
;
ÏÏ& '
}
ÏÏ( )
public
ÌÌ 
string
ÌÌ 

resolution
ÌÌ  
{
ÌÌ! "
get
ÌÌ# &
;
ÌÌ& '
set
ÌÌ( +
;
ÌÌ+ ,
}
ÌÌ- .
public
ÓÓ 
string
ÓÓ 
scanSide
ÓÓ 
{
ÓÓ  
get
ÓÓ! $
;
ÓÓ$ %
set
ÓÓ& )
;
ÓÓ) *
}
ÓÓ+ ,
public
ÔÔ 
string
ÔÔ 

filePrefix
ÔÔ  
{
ÔÔ! "
get
ÔÔ# &
;
ÔÔ& '
set
ÔÔ( +
;
ÔÔ+ ,
}
ÔÔ- .
public
 
int
 

refTransID
 
{
 
get
  #
;
# $
set
% (
;
( )
}
* +
}
ÒÒ 
}ÚÚ 