(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 0:
            /* **************************** New Script -> 13-11-2018  *********************************** */
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`)" +
                " VALUES (1,'2.00','V1',' Test first script file - dev branch'," + userid + ");"
            );
            break;
        case 1:
            /* **************************** New Script -> 16-11-2018  *********************************** */
            allDbChangesArray.push( 
                /* **************************** Add Script Version -> 16-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`)" +
                " VALUES (2,'2.00','V1',' Test merge script file - Vaibhav'," + userid + ");"
            );
            break;
        case 2:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-11-2018  *********************************** */
                "DROP VIEW IF EXISTS `vu_bom_report` ;  \n" +
                "CREATE VIEW `vu_bom_report` AS   \n" +
                "SELECT  \n" +
                "  (SELECT  \n" +
                "     `customers`.`companyName`  \n" +
                "   FROM `customers`  \n" +
                "   WHERE (`customers`.`id` = (SELECT  \n" +
                "                                `rfqforms`.`customerId`  \n" +
                "                              FROM `rfqforms`  \n" +
                "                              WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)))) AS `CustomerName`,  \n" +
                "  `ra`.`rfqrefID`            AS `QuoteNumber`,  \n" +
                "  (SELECT  \n" +
                "     `rfqforms`.`quoteindate`  \n" +
                "   FROM `rfqforms`  \n" +
                "   WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)) AS `RFQDate`,  \n" +
                "  `ra`.`assemblyNumber`      AS `assemblyNumber`,  \n" +
                "  `ra`.`assemblyDescription` AS `assemblyDescription`,  \n" +
                "  `ra`.`assemblyRev`         AS `assemblyRev`,  \n" +
                "  `ra`.`bomFCAVersion`       AS `Version`,  \n" +
                "  `rl`.`lineID`              AS `lineID`,  \n" +
                "  `rl`.`qpa`                 AS `qpa`,  \n" +
                "  `rl`.`refDesig`            AS `refDesig`,  \n" +
                "  `rl`.`custPN`              AS `custPN`,  \n" +
                "  `rl`.`customerRev`         AS `customerRev`,  \n" +
                "  `rl`.`customerDescription` AS `customerDescription`,  \n" +
                "  `rl`.`level`               AS `level`,  \n" +
                "  `rl`.`partclassID`         AS `partclassID`,  \n" +
                "  `rl`.`refRFQLineItemID`    AS `ParentLine`,  \n" +
                "  `rl`.`numOfPosition`       AS `Lead`,  \n" +
                "  `rl`.`uomID`               AS `uomID`,  \n" +
                "  `rl`.`dnpDesig`            AS `DNPREFDES`,  \n" +
                "  `rl`.`dnpQty`              AS `DNPQTY`,  \n" +
                "  `rl`.`isBuyDNPQty`         AS `BUYDNPQTY`,  \n" +
                "  `rl`.`isPurchase`          AS `IsBuy`,  \n" +
                "  `rl`.`isInstall`           AS `Populate`,  \n" +
                "  `rl`.`customerPartDesc`    AS `customerPartDesc`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`mfgPNDescription`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `InternalDescr`,  \n" +
                "  `rla`.`mfgCode`            AS `MFG`,  \n" +
                "  `rla`.`mfgPN`              AS `MFGPN`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`rohsComplient`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `RoHS`,  \n" +
                "  `rla`.`distributor`        AS `Distributor`,  \n" +
                "  `rla`.`distPN`             AS `DistributorPN`,  \n" +
                "  `rla`.`description`        AS `FlextronComment`,  \n" +
                "  (SELECT  \n" +
                "     `rfq_lineitems_approval_comment`.`comment`  \n" +
                "   FROM `rfq_lineitems_approval_comment`  \n" +
                "   WHERE (`rfq_lineitems_approval_comment`.`rfqLineItemsAlternatePartID` = `rla`.`id`)  \n" +
                "   ORDER BY `rfq_lineitems_approval_comment`.`approvalDate` DESC  \n" +
                "   LIMIT 0,1) AS `Approvalcomment`  \n" +
                "FROM ((`rfq_assemblies` `ra`  \n" +
                "    JOIN `rfq_lineitems` `rl`  \n" +
                "      ON ((`ra`.`id` = `rl`.`rfqAssyID`)))  \n" +
                "   JOIN `rfq_lineitems_alternatepart` `rla`  \n" +
                "     ON ((`rla`.`rfqLineItemsID` = `rl`.`id`)))  \n" +
                "WHERE (`rl`.`isDeleted` = 0);  \n" +

                "INSERT  INTO `chart_rawdata_category`(`name`,`dbViewName`,`isDeleted`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`deletedAt`,`deletedBy`) VALUES   \n" +
                "		('Bill Of Materials','vu_BOM_report',0,'2018-11-19 00:00:00','1',NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "INSERT  INTO `chart_rawdata_category_fields`(`chartRawdataCatID`,`field`,`displayName`,`aggregate`,`dataType`,`isActive`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`isDeleted`,`deletedBy`,`deletedAt`,`isStaticField`) VALUES   \n" +
                "						(8,'CustomerName','Customer Name',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'QuoteNumber','Quote #',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'RFQDate','RFQ Date',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'assemblyNumber','Assy. #',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'assemblyDescription','Assy. Description',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'assemblyRev','Assy. Rev',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'Version','Version',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'lineID','Item',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'qpa','QPA',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'refDesig','REF DES',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'custPN','CPN',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'customerRev','Rev',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'customerDescription','Customer Comment',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'level','Level',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'partclassID','Mounting Type',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'ParentLine','Parent Line',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'Lead','Lead',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'uomID','UOM',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'DNPREFDES','DNP REF. DES.',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'DNPQTY','DNP QTY',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'BUYDNPQTY','BUY DNP QTY',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'IsBuy','Is Buy',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'Populate','Populate',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'customerPartDesc','CPN Descr',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'InternalDescr','Internal Descr',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'MFG','MFG',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'MFGPN','MFG PN',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'RoHS','RoHS',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'Distributor','Distributor',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'DistributorPN','Distributor PN',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'FlextronComment','Flextron Comment',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1),  \n" +
                "						(8,'Approvalcomment','Customer Approval Comment',NULL,'varchar',1,'1','2018-11-19 00:00:00',NULL,NULL,0,NULL,NULL,1);  \n" +

                /* **************************** Add Script Version -> 20-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (3,'2.00','V1',' Create view for BOM Mis report - Jignesh '," + userid + ");"
            );
            break;
        case 3:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN rfqAssyID INT(11),                                \n" +
                "	IN puserID INT (11)                          \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "		ELSE                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                 \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                \n" +
                "			SET pWhereClause = '1=1' ;                                \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "		ELSE	                                \n" +
                "			SET rowNumWhere = '';                                \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                \n" +
                "					SELECT                                 \n" +
                "						rl.id,                  \n" +
                "						rl.isPurchase,                   \n" +
                "						rl.lineID,                  \n" +
                "						rl.rfqLineItemID,                  \n" +
                "						rl.rfqAssyBomID,                  \n" +
                "						rl.rfqAssyID,                                  \n" +
                "						rp.partTypeName,                  \n" +
                "						rm.name,                      \n" +
                "						rq.selectedPIDCode,                  \n" +
                "						(select rohsComplient from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,                  \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                      \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                      \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                      \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                  \n" +
                "						(SELECT GROUP_CONCAT(DISTINCT(REPLACE(PIDCode,'','',\"..\")),''@@@'', rohsComplient,''@@@'',replace(ifnull(feature,\"\"),\",\",\"\"))                  \n" +
                "						FROM component                   \n" +
                "						WHERE PIDCode <> rq.selectedPIDCode AND id IN                   \n" +
                "							(SELECT componentID                   \n" +
                "								FROM component_alternatepn                   \n" +
                "								WHERE aliasgroupID IN                   \n" +
                "								(SELECT altenetgroupID                   \n" +
                "									FROM component                   \n" +
                "									WHERE PIDCode = rq.selectedPIDCode                   \n" +
                "									AND deletedAt IS NULL AND isDeleted=0                  \n" +
                "								)                  \n" +
                "							)                  \n" +
                "						) AS AlternatePN                  \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem rl                                \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                        \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                         \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                              \n" +
                "						WHERE rl.isdeleted=0         \n" +
                "						AND rq.selectedMpn IS NOT NULL                  \n" +
                "						AND rl.rfqAssyID=',rfqAssyID,' AND                \n" +
                "  \n" +
                "						(CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN          \n" +
                "  \n" +
                "					GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))          \n" +
                "					ELSE          \n" +
                "					GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))          \n" +
                "				          END          \n" +
                "  \n" +
                "						OR rq.selectedMpn IN (SELECT mfgPN FROM component                       \n" +
                "							WHERE deletedAt IS NULL                   \n" +
                "							AND partstatus IN (                  \n" +
                "									SELECT gencCategoryID FROM genericcategory                   \n" +
                "									WHERE deletedAt IS NULL                   \n" +
                "									AND gencCategoryName IN (\"Not For New Design\",\"Obsolete\")                  \n" +
                "								)                  \n" +
                "							))                  \n" +
                "						GROUP BY rl.lineID');                                  \n" +
                "			PREPARE stmt FROM @SQLStatement;               \n" +
                "			EXECUTE stmt;	                                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                \n" +
                "			EXECUTE query1;                                \n" +
                "			DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                \n" +
                "			EXECUTE query2;                                \n" +
                "			DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                \n" +
                "			EXECUTE query3;                                \n" +
                "			DEALLOCATE PREPARE query3;                                \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                        \n" +
                "				SELECT ra.requestQty,                         \n" +
                "					rq.finalPrice,                         \n" +
                "					rq.unitPrice,                        \n" +
                "					rq.supplier,                         \n" +
                "					rq.selectedMpn,                         \n" +
                "					rq.selectionMode,                        \n" +
                "					rq.qtyID,                         \n" +
                "					rq.consolidateID,                    \n" +
                "					rq.selectedPIDCode,                        \n" +
                "					c.partStatus            \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                          \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                         \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                \n" +
                "			EXECUTE query4;                                \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	    SET @SQLString = NULL;                                    \n" +
                "	    SET @HavingClause = NULL;                        \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                  \n" +
                "		SELECT                                  \n" +
                "                      GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', rq.finalPrice, null))) AS ''',                                  \n" +
                "						ra.requestQty,''''                                  \n" +
                "					)                                  \n" +
                "					),                              \n" +
                "			GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                  \n" +
                "					) SEPARATOR ' OR '                                 \n" +
                "					)                              \n" +
                "				INTO @SQLString, @HavingClause                              \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                     \n" +
                "					  (SELECT gc.gencCategoryName FROM genericcategory gc                      \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                      \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                      \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                                     \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                      \n" +
                "					(SELECT                       \n" +
                "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                                \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                       \n" +
                "                                     component c ON rla.mfgpnid=c.id                       \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                        \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                              \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id              \n" +
                "						LEFT JOIN genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                    \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                  \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                       \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                       \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                            \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                       \n" +
                "			END IF;                               \n" +
                "			PREPARE stmt FROM @SQLStatement;                                  \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
                "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                          \n" +
                "				SELECT requestQty,                           \n" +
                "					finalPrice,                           \n" +
                "					unitPrice,                          \n" +
                "					supplier,                     \n" +
                "					rq.min,rq.mult,                         \n" +
                "					selectedMpn,                           \n" +
                "					selectionMode,                          \n" +
                "					selectedPIDCode,                        \n" +
                "					qtyID,                           \n" +
                "					consolidateID,                     \n" +
                "					currentStock,                    \n" +
                "					leadTime,                     \n" +
                "					supplierStock,                    \n" +
                "					grossStock,                      \n" +
                "					pricingSuppliers,                           \n" +
                "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus                          \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                               \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                           \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                              \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),                              \n" +
                "	IN rfqAssyID INT(11),                              \n" +
                "	IN puserID INT (11)                        \n" +
                "    )  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                              \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "	    SET @SQLString = NULL;                           \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "		ELSE                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                               \n" +
                "		END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                              \n" +
                "			SET pWhereClause = '1=1' ;                              \n" +
                "		END IF;	                              \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "		ELSE	                              \n" +
                "			SET rowNumWhere = '';                              \n" +
                "		END IF;	                              \n" +
                "		SELECT                      \n" +
                "                     GROUP_CONCAT(DISTINCT                      \n" +
                "				CONCAT(                      \n" +
                "					'Max((IF(ra.requestQty = ''',                      \n" +
                "						ra.requestQty,                      \n" +
                "					''', rq.finalPrice, null))) AS ''',                      \n" +
                "						ra.requestQty,''''                      \n" +
                "					)                      \n" +
                "					) INTO @SQLString                      \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                              \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                              \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                            \n" +
                "			IF(@SQLString IS NOT NULL) THEN                              \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                              \n" +
                "					SELECT                               \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                \n" +
                "						rp.partTypeName, rm.name,               \n" +
                "						rl.qpa,                  \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                    \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                    \n" +
                "						co.ltbDate AS LTBDate,            \n" +
                "						co.eolDate AS EOLDate,                     \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                            \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                 \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN      \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0             \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                               \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                              \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                              \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                      \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                       \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id              \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                              \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                     \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                     \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                     \n" +
                "						(SELECT gencCategoryID FROM genericcategory                     \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\"))))                    \n" +
                "					GROUP BY rl.lineID');                                \n" +
                "			END IF;                \n" +
                "			PREPARE stmt FROM @SQLStatement;                            \n" +
                "			EXECUTE stmt;	                              \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                              \n" +
                "			EXECUTE query1;                              \n" +
                "			DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "			PREPARE query2 FROM @SQLStatement2;                              \n" +
                "			EXECUTE query2;                              \n" +
                "			DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                              \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                              \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                              \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                              \n" +
                "			PREPARE query3 FROM @SQLStatement3;                              \n" +
                "			EXECUTE query3;                              \n" +
                "			DEALLOCATE PREPARE query3;                              \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                      \n" +
                "				SELECT ra.requestQty,                       \n" +
                "					rq.finalPrice,                       \n" +
                "					rq.unitPrice,                      \n" +
                "					rq.supplier,                       \n" +
                "					rq.selectedMpn,                       \n" +
                "					rq.selectionMode,                      \n" +
                "					rq.qtyID,                       \n" +
                "					rq.consolidateID,                  \n" +
                "					rq.selectedPIDCode,                    \n" +
                "					rq.min,        \n" +
                "					rq.mult,                      \n" +
                "					rq.qtyID,                         \n" +
                "					rq.consolidateID,                   \n" +
                "					rq.currentStock,                  \n" +
                "					rq.leadTime,                   \n" +
                "					rq.supplierStock,                  \n" +
                "					rq.grossStock,                    \n" +
                "					rq.pricingSuppliers,            \n" +
                "					c.noOfPosition ApiNoOfPosition,           \n" +
                "					c.partStatus        \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                        \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                        \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                       \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                              \n" +
                "			PREPARE query4 FROM @SQLStatement4;                              \n" +
                "			EXECUTE query4;                              \n" +
                "			DEALLOCATE PREPARE query4;                              \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                  \n" +
                "	    SET @SQLString = NULL;                               \n" +
                "	    SET @HavingClause = NULL;                                   \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                  \n" +
                "		SELECT                                  \n" +
                "                      GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                  \n" +
                "						ra.requestQty,''''                                  \n" +
                "					)                                  \n" +
                "					),                        \n" +
                "		GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'((Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                        \n" +
                "					) SEPARATOR ' OR '                                      \n" +
                "					)        \n" +
                "				INTO @SQLString,@HavingClause                             \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                       \n" +
                "					  rl.qpa, ra.requestQty, rq.currentStock, rq.apiLead, rq.mult, rq.min,          \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                  \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                       \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id  LEFT JOIN       \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                 \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                  \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>15 AND  (CASE WHEN (rq.apiLead IS NULL OR rl.numOfPosition IS NULL OR rq.apiLead < rl.numOfPosition)THEN            \n" +
                "  \n" +
                "					(GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > IFNULL(rq.currentStock,0))            \n" +
                "					ELSE            \n" +
                "					(GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))>IFNULL(rq.currentStock,0))            \n" +
                "				          END) AND  rl.rfqAssyID=',rfqAssyID,'                         \n" +
                "					GROUP BY rl.lineID');                           \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                  \n" +
                "			END IF;                         \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                  \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                          \n" +
                "				SELECT ra.requestQty,                            \n" +
                "					rq.finalPrice,                           \n" +
                "					rq.unitPrice,                          \n" +
                "					rq.supplier,                           \n" +
                "					rq.selectedMpn,                           \n" +
                "					rq.selectionMode,                         \n" +
                "					rq.selectedPIDCode,                        \n" +
                "					rq.min,            \n" +
                "					rq.mult,                          \n" +
                "					rq.qtyID,                             \n" +
                "					rq.consolidateID,                       \n" +
                "					rq.currentStock,                      \n" +
                "					rq.leadTime,                       \n" +
                "					rq.supplierStock,                      \n" +
                "					rq.grossStock ,                     \n" +
                "					rq.pricingSuppliers,            \n" +
                "					c.noOfPosition ApiNoOfPosition              \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                          \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                          \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                           \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN rfqAssyID INT(11),                                \n" +
                "	IN puserID INT (11)                          \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	    SET @SQLString = NULL;                           \n" +
                "	    SET @HavingClause = NULL;                           \n" +
                "	    SET SESSION group_concat_max_len = 150000;                            \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "		ELSE                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                                 \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                \n" +
                "			SET pWhereClause = '1=1' ;                                \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "		ELSE	                                \n" +
                "			SET rowNumWhere = '';                                \n" +
                "		END IF;	                                \n" +
                "		SELECT                                \n" +
                "                      GROUP_CONCAT(DISTINCT                                \n" +
                "				CONCAT(                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                \n" +
                "						ra.requestQty,                                \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN            \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))        \n" +
                "ELSE        \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))        \n" +
                "END), null))) AS ''',                                \n" +
                "						ra.requestQty,''''                                \n" +
                "					)                                \n" +
                "					),                          \n" +
                "  \n" +
                "                      GROUP_CONCAT(DISTINCT                                \n" +
                "				CONCAT(                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                \n" +
                "						ra.requestQty,                                \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN            \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))        \n" +
                "ELSE        \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))        \n" +
                "END), null))) > 0'                                   \n" +
                "					) SEPARATOR ' OR '                               \n" +
                "					)                          \n" +
                "				INTO @SQLString, @HavingClause                           \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                              \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                \n" +
                "					SELECT                                 \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                  \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                                \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                            \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                 \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id LEFT JOIN      \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                        \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                              \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                \n" +
                "			END IF;                            \n" +
                "			PREPARE stmt FROM @SQLStatement;                                \n" +
                "			EXECUTE stmt;	                                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                \n" +
                "			EXECUTE query1;                                \n" +
                "			DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                \n" +
                "			EXECUTE query2;                                \n" +
                "			DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                \n" +
                "			EXECUTE query3;                                \n" +
                "			DEALLOCATE PREPARE query3;                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT           \n" +
                "					ra.requestQty,           \n" +
                "					rq.finalPrice,           \n" +
                "					rq.unitPrice,          \n" +
                "					rq.supplier,           \n" +
                "					rq.selectedMpn,           \n" +
                "					rq.selectionMode,          \n" +
                "					rq.qtyID,                    \n" +
                "					rq.selectedPIDCode,                      \n" +
                "					rq.min,           \n" +
                "					rq.mult,                    \n" +
                "					rq.currentStock,                    \n" +
                "					rq.leadTime,                     \n" +
                "					rq.supplierStock,                    \n" +
                "					rq.grossStock,                   \n" +
                "					rq.pricingSuppliers,              \n" +
                "					c.noOfPosition ApiNoOfPosition,             \n" +
                "					c.partStatus,          \n" +
                "					rq.selectedPIDCode,                   \n" +
                "					rq.consolidateID           \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                             \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0          \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                \n" +
                "			EXECUTE query4;                                \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereColumnName VARCHAR(255),                            \n" +
                "	IN pWhereFilterValue VARCHAR(255),                           \n" +
                "	IN pCustomWhere INT(11),                            \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                                  \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "	    DECLARE defaultOrder INT(11);                \n" +
                "	    SET defaultOrder = 0;                \n" +
                "	    SET @PERString = NULL;                        \n" +
                "	    SET SESSION group_concat_max_len = 150000;                  \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	    ELSE                            \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                  \n" +
                "		IF(defaultOrder > 0) THEN                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                  \n" +
                "		ELSE                 \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                \n" +
                "		END IF;	                 \n" +
                "	    END IF;                \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                  \n" +
                "		SELECT                        \n" +
                "			GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                  \n" +
                "						ra.requestQty,''''                                  \n" +
                "					))                      \n" +
                "					INTO @PERString                      \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "  \n" +
                "			IF(@PERString IS NOT NULL) THEN                           \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                    \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,               \n" +
                "					(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                             \n" +
                "					(SELECT                               \n" +
                "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient)                                        \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                               \n" +
                "                                     component c ON rla.mfgpnid=c.id                               \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                    \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                               \n" +
                "                                component c ON rla.mfgpnid=c.id   LEFT JOIN           \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                             \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                   \n" +
                "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                               \n" +
                "  \n" +
                "			ELSE                                  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,                               \n" +
                "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient)                                        \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                               \n" +
                "                                     component c ON rla.mfgpnid=c.id                               \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"))AS mfgPn                                   \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                   \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                  \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                  \n" +
                "			END IF;                                        \n" +
                "			PREPARE stmt FROM @SQLStatement;                                  \n" +
                "			EXECUTE stmt;	                     \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                \n" +
                "			IF pCustomWhere IS NOT NULL THEN                       \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                  \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                  \n" +
                "				EXECUTE query_Temp;                       \n" +
                "				DEALLOCATE PREPARE query_Temp;                      \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                  \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                  \n" +
                "				EXECUTE query_Temp1;                         \n" +
                "				DEALLOCATE PREPARE query_Temp1;                       \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                  \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                  \n" +
                "				EXECUTE query_Temp2;                         \n" +
                "				DEALLOCATE PREPARE query_Temp2;                  \n" +
                "  \n" +
                "				# Concate                 \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                \n" +
                "			ELSE                 \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "			END IF;                      \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                           \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                 \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                  \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                  \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                              \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,               \n" +
                "					rq.finalPrice,               \n" +
                "					rq.unitPrice,              \n" +
                "					rq.supplier,              \n" +
                "					rq.min,              \n" +
                "					rq.mult,               \n" +
                "					rq.selectedMpn,               \n" +
                "					rq.selectionMode,              \n" +
                "					rq.qtyID,                             \n" +
                "					rq.currentStock,                            \n" +
                "					rq.leadTime,                             \n" +
                "					rq.supplierStock,                            \n" +
                "					rq.grossStock,                                \n" +
                "					rq.selectedPIDCode,                  \n" +
                "					rq.pricingSuppliers,              \n" +
                "					c.noOfPosition ApiNoOfPosition,                  \n" +
                "					ct.qpa,               \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                       \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                       \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0              \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                               \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                      \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                          \n" +
                "			EXECUTE query5;                                          \n" +
                "			DEALLOCATE PREPARE query5;                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                           \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                           \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                          \n" +
                "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice                        \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                              \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                              \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                      \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                          \n" +
                "			EXECUTE query6;                                          \n" +
                "			DEALLOCATE PREPARE query6;                                              \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                       \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                      \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                      \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                    \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                                    \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                    \n" +
                "	    SET @SQLString = NULL;                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                                    \n" +
                "                     GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					) INTO @SQLString                                    \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                    \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                      \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                  \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                    \n" +
                "					(SELECT                                 \n" +
                "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient)                                          \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                     component c ON rla.mfgpnid=c.id                                 \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                  \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                     \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN        \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                      \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                     \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                    \n" +
                "  \n" +
                "			ELSE                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,                   \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                    \n" +
                "					(select  GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient)                                           \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                     component c ON rla.mfgpnid=c.id                                 \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                  \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                      \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\".\"),\"N/A\"),''@@@'', c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                     \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                     \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                    \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                    \n" +
                "			END IF;                                    \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                    \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                    \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,               \n" +
                "					rq.finalPrice,               \n" +
                "					rq.unitPrice,              \n" +
                "					rq.supplier,              \n" +
                "					rq.min,              \n" +
                "					rq.mult,               \n" +
                "					rq.selectedMpn,               \n" +
                "					rq.selectionMode,              \n" +
                "					rq.qtyID,                               \n" +
                "					rq.currentStock,                              \n" +
                "					rq.leadTime,                               \n" +
                "					rq.supplierStock,                              \n" +
                "					rq.grossStock,                                  \n" +
                "					rq.selectedPIDCode,                                \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition,                  \n" +
                "					ct.qpa,               \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                         \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL              \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                 \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                 \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                        \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                            \n" +
                "			EXECUTE query5;                                            \n" +
                "			DEALLOCATE PREPARE query5;                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                             \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                             \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                            \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                 \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                 \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                  \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                  \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                    \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                        \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                            \n" +
                "			EXECUTE query6;                                            \n" +
                "			DEALLOCATE PREPARE query6;                                                \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +

                /* **************************** Add Script Version -> 20-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (4,'2.00','V1','Changes in Pricing-Review pricing sp-champak'," + userid + ");"
            );
            break;
        case 4:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	DECLARE pBomFCAVersion INT(11);       \n" +
                "	DECLARE pRfqAssID INT(11);       \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);      \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);      \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "  \n" +
                "	SELECT IFNULL(rfqAssyID,0) INTO pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;      \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = pRfqAssID;      \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'CompanyName';      \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor\",      \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor PN\",      \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG\",      \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;	      \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG PN\",      \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Deleted\",      \n" +
                "			\"\", CONCAT(\"MFG PN \",NEW.mfgPN,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.deletedBy);      \n" +
                "	END IF;	      \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Flextron Comment\",        \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN       \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL      \n" +
                "			THEN       \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;      \n" +
                "			ELSE       \n" +
                "				SET oldRfqAssyBom = '';      \n" +
                "		END IF;      \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL      \n" +
                "			THEN       \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;      \n" +
                "			ELSE       \n" +
                "				SET newRfqAssyBom = '';      \n" +
                "		END IF;      \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, \"RFQ Assembly BOM\",      \n" +
                "			oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Customer Approval\",      \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Bad MFG PN\",      \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (5,'2.00','V1',' Change trigger Trg_AU_RFQ_LineItem_AlternatePart_BOM_History - Jignesh '," + userid + ");"
            );
            break;
        case 5:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetGenericFolders` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetGenericFolders`(      \n" +
                "IN pRefTransId INT,      \n" +
                "IN pEntityId INT,      \n" +
                "IN pAccessLevel DECIMAL(6,2),      \n" +
                "IN pGencFileOwnerType VARCHAR(255),          \n" +
                "IN pIsTraveler TINYINT(1)          \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE whereClauseFolder VARCHAR(1000);          \n" +
                "	DECLARE whereClauseAllFolder VARCHAR(1000);     \n" +
                "	DECLARE CountFolder VARCHAR(1000);  \n" +
                "  \n" +
                "	SET pEntityId = IFNULL(pEntityId,0);          \n" +
                "  \n" +
                "	SET whereClauseFolder = CONCAT(\" IFNULL(gf.entityID,0) = IFNULL(\",pEntityId,\",0)           \n" +
                "			AND gf.refTransID = \", pRefTransId,          \n" +
                "			\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");          \n" +
                "	SET whereClauseAllFolder = CONCAT(\" gf.refTransID = \", 0,          \n" +
                "			\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");            \n" +
                "  \n" +
                "	SET CountFolder = CONCAT(\"(SELECT COUNT(*) FROM generic_folder a LEFT JOIN genericfiles b ON a.gencFolderID = b.refParentId AND b.deletedAt IS NULL   \n" +
                "				WHERE a.deletedAt IS NULL AND (a.refParentId = gf.gencFolderID OR b.refParentId = gf.gencFolderID) AND (a.refTransID = \", pRefTransId ,\" OR b.refTransID = \", pRefTransId ,\") AND a.roleID = gf.roleId) totalInnerFileFolder\");  \n" +
                "  \n" +
                "	-- if workorder operation then show operation data too          \n" +
                "	IF (pGencFileOwnerType = 'workorder_operation') THEN          \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR          \n" +
                "				(IFNULL(gf.entityID,0) = -1           \n" +
                "				AND gf.refTransID   \n" +
                "				IN (SELECT opID FROM workorder_operation   \n" +
                "				WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)           \n" +
                "				AND gf.gencFileOwnerType = 'operations')       \n" +
                "				AND gf.deletedAt IS NULL\");      \n" +
                "  \n" +
                "		SET CountFolder = CONCAT(\"(SELECT COUNT(*) FROM generic_folder a LEFT JOIN genericfiles b ON a.gencFolderID = b.refParentId AND b.deletedAt IS NULL   \n" +
                "					WHERE a.deletedAt IS NULL AND a.roleID = gf.roleId AND (a.refParentId = gf.gencFolderID OR b.refParentId = gf.gencFolderID)   \n" +
                "					AND ((a.refTransID = \", pRefTransId ,\"   \n" +
                "					OR b.refTransID = \", pRefTransId ,\")  \n" +
                "					OR (a.refTransID = \", pRefTransId ,\"   \n" +
                "					OR b.refTransID	IN (SELECT opID FROM workorder_operation   \n" +
                "					WHERE woOPID = \", pRefTransId ,\"   \n" +
                "					AND deletedAt IS NULL)) AND b.gencFileOwnerType = 'operations')) totalInnerFileFolder\");  \n" +
                "  \n" +
                "    END IF;          \n" +
                "	-- if traveler page than get data of operation, workorder, workorder operation          \n" +
                "    IF (pIsTraveler = 1) THEN          \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR          \n" +
                "				(IFNULL(gf.entityID,0) = -7          \n" +
                "				AND gf.refTransID IN   \n" +
                "				(SELECT woID FROM workorder_operation   \n" +
                "				WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)           \n" +
                "				AND gf.gencFileOwnerType = 'workorder')          \n" +
                "				AND gf.deletedAt IS NULL\");       \n" +
                "  \n" +
                "		SET CountFolder = CONCAT(\"(SELECT COUNT(*) FROM generic_folder a   \n" +
                "					LEFT JOIN genericfiles b ON a.gencFolderID = b.refParentId AND b.deletedAt IS NULL   \n" +
                "					WHERE a.deletedAt IS NULL AND a.roleID = gf.roleId   \n" +
                "					AND (a.refParentId = gf.gencFolderID OR b.refParentId = gf.gencFolderID)   \n" +
                "					AND ((a.refTransID = \", pRefTransId ,\" OR b.refTransID = \", pRefTransId ,\")  \n" +
                "					OR (a.refTransID = \", pRefTransId ,\" OR b.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \", pRefTransId ,\" AND deletedAt IS NULL))   \n" +
                "					OR (a.refTransID = \", pRefTransId ,\" OR b.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \", pRefTransId ,\" AND deletedAt IS NULL))   \n" +
                "					AND (b.gencFileOwnerType = 'workorder' OR b.gencFileOwnerType = 'operations'))) totalInnerFileFolder\");  \n" +
                "    END IF;      \n" +
                "  SET @SQLStatement1 = CONCAT(\"SELECT * FROM (SELECT       \n" +
                "gf.gencFolderName,      \n" +
                "gf.gencFolderID AS gencFolderID,      \n" +
                "gf.entityID,      \n" +
                "gf.refTransID,      \n" +
                "gf.gencFileOwnerType,      \n" +
                "gf.roleId,      \n" +
                "gf.refParentId AS folderParentID,        \n" +
                "rol.accessLevel,\",  \n" +
                "CountFolder,\"  \n" +
                "	FROM generic_folder gf      \n" +
                "	LEFT JOIN roles rol ON rol.id =  gf.roleId AND rol.deletedAt IS NULL     \n" +
                "    WHERE\", whereClauseFolder,\"      \n" +
                "UNION      \n" +
                "SELECT       \n" +
                "gf.gencFolderName,      \n" +
                "gf.gencFolderID AS gencFolderID,      \n" +
                "gf.entityID,      \n" +
                "gf.refTransID,      \n" +
                "gf.gencFileOwnerType,      \n" +
                "gf.roleId,      \n" +
                "gf.refParentId AS folderParentID,       \n" +
                "rol.accessLevel,\",  \n" +
                "CountFolder,\"  \n" +
                "	FROM generic_folder gf      \n" +
                "	LEFT JOIN roles rol ON rol.id =  gf.roleId AND rol.deletedAt IS NULL     \n" +
                "      WHERE\", whereClauseAllFolder,\")       \n" +
                "   q ORDER BY q.accessLevel,q.gencFolderID ASC\");      \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (6,'2.00','V1',' Sproc_GetGenericFolders - FENIL '," + userid + ");"
            );
            break;
        case 6:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "INSERT INTO systemconfigrations(`key`,`values`,isEncrypted,isActive,isEditable)VALUES  \n" +
                "('BarcodePreFix','ITL',0,1,1);  \n" +
                /* **************************** Add Script Version -> 23-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (7,'2.00','V1','Added barcode prefix configuration-Champak'," + userid + ");"
            );
            break;
        case 7:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "UPDATE systemconfigrations  \n" +
                "SET description='Component Update Time When it trigger XX:XX (in 24 Hrs Format), In Pricing Service Thread Runs Every 24 Hrs'  \n" +
                ",`key`='ComponentUpdateTimeInHrs'  \n" +
                "WHERE `key`='ComponentUpdateIntervalTime';  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET description='Component Update If more than X days'  \n" +
                "WHERE `key`='ComponentLastUpdateTime';  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET description='Prefix for Version in BOM at RFQ'  \n" +
                ",`key`='RFQInternalVersionPrefix'  \n" +
                "WHERE `key`='CompanyName';  \n" +
                "  \n" +
                "UPDATE systemconfigrations  \n" +
                "SET description='Ask user for password popup if access level below than X value'  \n" +
                ",`key`='AddMFGRoleAccessLevel'  \n" +
                "WHERE `key`='MfgAddAccess';  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` AFTER INSERT ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN    \n" +
                "	DECLARE pBomFCAVersion INT(11);     \n" +
                "	DECLARE pCompanyName VARCHAR(100);     \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = NEW.rfqAssyID;    \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';    \n" +
                "  \n" +
                "	IF NEW.description IS NOT NULL AND pBomFCAVersion > 0 THEN     \n" +
                "		INSERT INTO rfq_assembly_history     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,    \n" +
                "			oldValue,newValue,changeVersion,    \n" +
                "			createdAt,createdBy)     \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, \"Additional Comment\",    \n" +
                "			\"\", IFNULL(NEW.description,\"\"), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),    \n" +
                "			SYSDATE(),NEW.createdBy);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	DECLARE pBomFCAVersion INT(11);       \n" +
                "	DECLARE pRfqAssID INT(11);       \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);      \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "  \n" +
                "	SELECT IFNULL(rfqAssyID,0) INTO pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;      \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = pRfqAssID;      \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';      \n" +
                "  \n" +
                "	IF pBomFCAVersion > 0 THEN       \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN       \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor\",      \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN       \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor PN\",      \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN       \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG\",      \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Flextron Comment\",          \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN       \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG PN\",      \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;		      \n" +
                "  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL THEN       \n" +
                "			IF NEW.rfqAssyBomID IS NOT NULL      \n" +
                "				THEN       \n" +
                "					SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;      \n" +
                "				ELSE       \n" +
                "					SET newRfqAssyBom = '';      \n" +
                "			END IF;      \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, \"RFQ Assembly BOM\",      \n" +
                "				NULL,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN       \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Customer Approval\",      \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN       \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,createdBy)       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Bad MFG PN\",      \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),      \n" +
                "				SYSDATE(),NEW.createdBy);      \n" +
                "		END IF;      \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	DECLARE pBomFCAVersion INT(11);           \n" +
                "	DECLARE newPartTypeName VARCHAR(50);          \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);          \n" +
                "	DECLARE newUOM VARCHAR(50);          \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "  \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = NEW.rfqAssyID;          \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';      \n" +
                "	-- SET pBomFCAVersion = pBomFCAVersion + 1;          \n" +
                "	IF pBomFCAVersion > 0 THEN           \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Item\",          \n" +
                "				NULL, CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"QPA\",          \n" +
                "				NULL, CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"REF DES\",          \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"CPN\",          \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.level IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Level\",          \n" +
                "				NULL, CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Is Install\",          \n" +
                "				NULL, CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Is Buy\",          \n" +
                "				NULL, CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.isActive IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Is Active\",          \n" +
                "				NULL, CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.leadQty IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Lead Qty\",          \n" +
                "				NULL, CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.attritionRate IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Overage %\",          \n" +
                "				NULL, CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Rev\",          \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.partclassID IS NOT NULL THEN           \n" +
                "			IF NEW.partclassID != 0          \n" +
                "				THEN           \n" +
                "					SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;          \n" +
                "					SELECT `name` INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;          \n" +
                "				ELSE           \n" +
                "					SET newPartTypeName = '';          \n" +
                "					SET newMountingTypeName = '';          \n" +
                "			END IF;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Mounting Type\",          \n" +
                "				NULL,          \n" +
                "				CONCAT(newPartTypeName,' | ', newMountingTypeName),          \n" +
                "				CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Customer Comment\",          \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Lead\",          \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"DPN QTY\",          \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"DPN DES\",          \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN           \n" +
                "			IF NEW.uomID IS NOT NULL          \n" +
                "				THEN           \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;          \n" +
                "				ELSE           \n" +
                "					SET newUOM = '';          \n" +
                "			END IF;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"UOM\",          \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.refRFQLineItemID IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Parent Line\",          \n" +
                "				NULL, CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Customer Part Desc\",          \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN           \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"DNP Qty Buy\",          \n" +
                "				NULL, CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` AFTER UPDATE ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN    \n" +
                "	DECLARE pBomFCAVersion INT(11);     \n" +
                "	DECLARE pCompanyName VARCHAR(100);     \n" +
                "  \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = NEW.rfqAssyID;    \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';    \n" +
                "  \n" +
                "	IF IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0) THEN     \n" +
                "		INSERT INTO rfq_assembly_history     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,    \n" +
                "			oldValue,newValue,changeVersion,    \n" +
                "			createdAt,createdBy)     \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, \"Additional Comment\",    \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),    \n" +
                "			SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	DECLARE pBomFCAVersion INT(11);         \n" +
                "	DECLARE pRfqAssID INT(11);         \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);        \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);        \n" +
                "	DECLARE pCompanyName VARCHAR(100);         \n" +
                "  \n" +
                "	SELECT IFNULL(rfqAssyID,0) INTO pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;        \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = pRfqAssID;        \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';        \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor\",        \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor PN\",        \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG\",        \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;	        \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG PN\",        \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Deleted\",        \n" +
                "			\"\", CONCAT(\"MFG PN \",NEW.mfgPN,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.deletedBy);        \n" +
                "	END IF;	        \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Flextron Comment\",          \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN         \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL        \n" +
                "			THEN         \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;        \n" +
                "			ELSE         \n" +
                "				SET oldRfqAssyBom = '';        \n" +
                "		END IF;        \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL        \n" +
                "			THEN         \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;        \n" +
                "			ELSE         \n" +
                "				SET newRfqAssyBom = '';        \n" +
                "		END IF;        \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, \"RFQ Assembly BOM\",        \n" +
                "			oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Customer Approval\",        \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Bad MFG PN\",        \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	DECLARE pBomFCAVersion INT(11);         \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);        \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);        \n" +
                "	DECLARE newPartTypeName VARCHAR(50);        \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);        \n" +
                "	DECLARE oldUOM VARCHAR(50);        \n" +
                "	DECLARE newUOM VARCHAR(50);        \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "  \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = NEW.rfqAssyID;        \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';      \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Item\",        \n" +
                "			CAST(OLD.lineID AS CHAR), CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"QPA\",        \n" +
                "			CAST(OLD.qpa AS CHAR), CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"REF DES\",        \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"CPN\",        \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Level\",        \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Is Install\",        \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Is Buy\",        \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Is Active\",        \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Lead Qty\",        \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Overage %\",        \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Rev\",        \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN         \n" +
                "		IF OLD.partclassID != 0        \n" +
                "			THEN         \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;        \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;        \n" +
                "			ELSE         \n" +
                "				SET oldPartTypeName = '';        \n" +
                "				SET oldMountingTypeName = '';        \n" +
                "		END IF;        \n" +
                "		IF NEW.partclassID != 0        \n" +
                "			THEN         \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;        \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;        \n" +
                "			ELSE         \n" +
                "				SET newPartTypeName = '';        \n" +
                "				SET newMountingTypeName = '';        \n" +
                "		END IF;        \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Mounting Type\",        \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),        \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),        \n" +
                "			CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Customer Comment\",        \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Lead\",        \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"DPN QTY\",        \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"DPN DES\",        \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN         \n" +
                "		IF OLD.uomID IS NOT NULL        \n" +
                "			THEN         \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;        \n" +
                "			ELSE         \n" +
                "				SET oldUOM = '';        \n" +
                "		END IF;        \n" +
                "		IF NEW.uomID IS NOT NULL        \n" +
                "			THEN         \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;        \n" +
                "			ELSE         \n" +
                "				SET newUOM = '';        \n" +
                "		END IF;        \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"UOM\",        \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Parent Line\",        \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"Customer Part Desc\",        \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NEW.rfqAssyID, \"DNP Qty Buy\",        \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (8,'2.00','V1','Update description for system configuration - vaibhav'," + userid + ");"
            );
            break;
        case 8:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "UPDATE systemconfigrations  \n" +
                "SET description='Component update will trigger at specific time (in 24 Hrs Format), In Pricing Service Events Runs Every 24 Hrs'  \n" +
                "WHERE `key`='ComponentUpdateTimeInHrs';  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "UPDATE systemconfigrations  \n" +
                "SET description='While Scan label if no nickname added in Receiving Material than prefix should this'  \n" +
                "WHERE `key`='BarcodePreFix';  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "UPDATE systemconfigrations  \n" +
                "SET description='Component will be update if its older than specific day(s)'  \n" +
                ",`key`='ComponentUpdateTimeInterval'  \n" +
                "WHERE `key`='ComponentLastUpdateTime';  \n" +
                /* **************************** New Script -> 23-11-2018  *********************************** */
                /* **************************** Add Script Version -> 23-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (9,'2.00','V1','Update description for system configuration - vaibhav'," + userid + ");"
            );
            break;
        case 9:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveMasterTemplate` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMasterTemplate`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT mt.id, mt.masterTemplate,mt.description,  \n" +
                "			   (SELECT COUNT(*) FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateID = mt.id  \n" +
                "				AND operationId IN (SELECT opID FROM operations WHERE deletedAt IS NULL AND opStatus = 1)) AS operationCount /* 1 - published op */  \n" +
                "			FROM master_templates mt  \n" +
                "			WHERE mt.`deletedAt` IS NULL  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"masterTemplate ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (10,'2.00','V1',' sp - Sproc_RetrieveMasterTemplate - KETAN '," + userid + ");"
            );
            break;
        case 10:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2018  *********************************** */
                "UPDATE rfq_lineitems_errorcode  \n" +
                "SET displayName= 'Bad MFG Part'  \n" +
                "WHERE displayName='MFG Bad Part';  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode  \n" +
                "SET displayName= 'Invalid MFG PN'  \n" +
                "WHERE errorCode='MFGPNINVALID';  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode  \n" +
                "SET displayName= 'Obsolete Part Verification via API'  \n" +
                "WHERE errorCode='OBS';  \n" +
                /* **************************** Add Script Version -> 24-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (11,'2.00','V1',' Error Code Display name changes - Vaibhav '," + userid + ");"
            );
            break;
        case 11:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "Drop PROCEDURE if Exists `Sproc_RetriveCertificateStandards`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveCertificateStandards`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			  SELECT cs.*,   \n" +
                "				gcst.`gencCategoryID` AS `gencCategoryIDOfStandardType`, gcst.`gencCategoryName` AS `gencCategoryNameOfStandardType`,  \n" +
                "				(CASE WHEN (`cs`.`isCertified` = 0) THEN 'Compliant'   \n" +
                "					WHEN (`cs`.`isCertified` = 1) THEN 'Certificate' ELSE '' END) AS `isCertifiedConvertedValue` ,  \n" +
                "				(CASE WHEN (`cs`.`isRequired` = 0) THEN 'Optional'   \n" +
                "					WHEN (`cs`.`isRequired` = 1) THEN 'Required' ELSE '' END) AS `isRequiredConvertedValue` ,  \n" +
                "				(CASE WHEN (`cs`.`isActive` = 0) THEN 'Disable'   \n" +
                "					WHEN (`cs`.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "			  FROM `certificate_standards` AS cs   \n" +
                "				LEFT OUTER JOIN `genericcategory` AS gcst   \n" +
                "				ON cs.`standardTypeID` = gcst.`gencCategoryID`   \n" +
                "					AND gcst.`deletedAt` IS NULL   \n" +
                "			  WHERE cs.`deletedAt` IS NULL  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"shortName ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (12,'2.00','V1',' Sproc_RetriveCertificateStandards change - Mona '," + userid + ");"
            );
            break;
        case 12:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2018  *********************************** */
                "DELETE FROM component_sid_stock_location;  \n" +
                "  \n" +
                "ALTER TABLE component_sid_stock_location ADD woID INT;  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE component_sid_stock_location  \n" +
                "ADD CONSTRAINT FK_component_sid_stock_location_woID  \n" +
                "FOREIGN KEY (woID) REFERENCES workorder(woID);  \n" +
                /* **************************** Add Script Version -> 23-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (13,'2.00','V1','Alter component_sid_stock_location table-Champak '," + userid + ");"
            );
            break;
        case 13:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateStockLocation` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateStockLocation`(        \n" +
                "	IN prefsid INT(11),        \n" +
                "	IN plocation VARCHAR(255),    \n" +
                "	IN pqty INT,  \n" +
                "	IN pwid INT,    \n" +
                "	IN puserid INT      \n" +
                ")  \n" +
                "BEGIN       \n" +
                "DECLARE rlocation VARCHAR(255) ;    \n" +
                "DECLARE rqty INT;   \n" +
                "DECLARE pworkId INT;     \n" +
                "         SELECT location,qty,woID INTO rlocation,rqty,pworkId FROM component_sid_stock_location WHERE  refsidid=prefsid AND isDeleted=0 AND isActive=1 LIMIT 1;    \n" +
                "  \n" +
                "         IF( (rlocation IS NOT NULL && plocation IS NULL) || ((pworkId IS NOT NULL && pwid IS NULL)) ||(rqty IS NOT NULL && pqty IS NULL) ||  (plocation!=rlocation || rqty!=pqty || pworkId!=pwid))THEN    \n" +
                "	 UPDATE component_sid_stock_location SET isActive=0,isDeleted=0,updatedBy=puserid WHERE refsidid=prefsid AND isDeleted=0;    \n" +
                "	 END IF;    \n" +
                "	IF((rlocation IS NULL && plocation IS NOT NULL)||(pworkId IS NULL && pwid IS NOT NULL)||(rqty IS NULL && pqty IS NOT NULL)||(((plocation IS NOT NULL ||pqty IS NOT NULL) && (rlocation!=plocation || rqty!=pqty || pworkId!=pwid))))THEN    \n" +
                "	INSERT INTO component_sid_stock_location (refsidid,isActive,location,isInovex,createdBy,qty,woID)VALUES    \n" +
                "	(prefsid,1,plocation,0,puserid,pqty,pwid);    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (14,'2.00','V1','Update sp Sproc_UpdateStockLocation-Champak'," + userid + ");"
            );
            break;
        case 14:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2018  *********************************** */
                "CREATE TABLE `component_customer_loa` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `customerID` int(11) NOT NULL,  \n" +
                "  `componentID` int(11) NOT NULL,  \n" +
                "  `rfqAssyID` int(11) DEFAULT NULL,  \n" +
                "  `refLineitemID` int(11) DEFAULT NULL,  \n" +
                "  `isDocumentUpload` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_component_customer_loa_customerID` (`customerID`),  \n" +
                "  KEY `FK_component_customer_loa_rfqAssyID` (`rfqAssyID`),  \n" +
                "  KEY `FK_component_customer_loa_componentID` (`componentID`),  \n" +
                "  KEY `FK_component_customer_loa_refLineitemID` (`refLineitemID`),  \n" +
                "  CONSTRAINT `FK_component_customer_loa_customerID` FOREIGN KEY (`customerID`) REFERENCES `customers` (`id`),  \n" +
                "  CONSTRAINT `FK_component_customer_loa_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`),  \n" +
                "  CONSTRAINT `FK_component_customer_loa_componentID` FOREIGN KEY (`componentID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_component_customer_loa_refLineitemID` FOREIGN KEY (`refLineitemID`) REFERENCES `rfq_lineitems` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN rfqAssyID INT(11),                                      \n" +
                "	IN puserID INT (11)                                      \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                      \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	    SET @SQLString = NULL;                                      \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                          \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "		ELSE                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                       \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                      \n" +
                "			SET pWhereClause = '1=1' ;                                      \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "		ELSE	                                      \n" +
                "			SET rowNumWhere = '';                                      \n" +
                "		END IF;	                                      \n" +
                "		SELECT                                      \n" +
                "                     GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', rq.finalPrice, null))) AS ''',                                      \n" +
                "						ra.requestQty,''''                                      \n" +
                "					)                                      \n" +
                "					) INTO @SQLString                                      \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                      \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                      \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                      \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                      \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                      \n" +
                "					SELECT                                       \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                        \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                    \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                      \n" +
                "					(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                      \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                       \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN          \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                        \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                       \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                      \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                      \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                      \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                      \n" +
                "  \n" +
                "			ELSE                                      \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                      \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,refDesig                     \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                      \n" +
                "					(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                                \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\".\"),\"N/A\"),''@@@'', c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                       \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                       \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                      \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                      \n" +
                "			END IF;                                      \n" +
                "			PREPARE stmt FROM @SQLStatement;                                      \n" +
                "			EXECUTE stmt;	                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                      \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "			EXECUTE query1;                                      \n" +
                "			DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "			EXECUTE query2;                                      \n" +
                "			DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "			EXECUTE query3;                                      \n" +
                "			DEALLOCATE PREPARE query3;                                      \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                      \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                      \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                      \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                      \n" +
                "			EXECUTE query4;                                      \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                 \n" +
                "					rq.finalPrice,                 \n" +
                "					rq.unitPrice,                \n" +
                "					rq.supplier,                \n" +
                "					rq.min,                \n" +
                "					rq.mult,                 \n" +
                "					rq.selectedMpn,                 \n" +
                "					rq.selectionMode,                \n" +
                "					rq.qtyID,                                 \n" +
                "					rq.currentStock,                                \n" +
                "					rq.leadTime,                                 \n" +
                "					rq.supplierStock,                                \n" +
                "					rq.grossStock,                                    \n" +
                "					rq.selectedPIDCode,                                  \n" +
                "					rq.pricingSuppliers,                  \n" +
                "					c.noOfPosition ApiNoOfPosition,                    \n" +
                "					ct.qpa,                 \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                           \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                   \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                   \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                          \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                              \n" +
                "			EXECUTE query5;                                              \n" +
                "			DEALLOCATE PREPARE query5;                                     \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                               \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                               \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                              \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                  \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                   \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                   \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                    \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                    \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                      \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                          \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                              \n" +
                "			EXECUTE query6;                                              \n" +
                "			DEALLOCATE PREPARE query6;                                                  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereColumnName VARCHAR(255),                              \n" +
                "	IN pWhereFilterValue VARCHAR(255),                             \n" +
                "	IN pCustomWhere INT(11),                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                                    \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "	    DECLARE defaultOrder INT(11);                  \n" +
                "	    SET defaultOrder = 0;                  \n" +
                "	    SET @PERString = NULL;                          \n" +
                "	    SET SESSION group_concat_max_len = 150000;                    \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	    ELSE                              \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                    \n" +
                "		IF(defaultOrder > 0) THEN                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                    \n" +
                "		ELSE                   \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                  \n" +
                "		END IF;	                   \n" +
                "	    END IF;                  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                          \n" +
                "			GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					))                        \n" +
                "					INTO @PERString                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                    \n" +
                "  \n" +
                "			IF(@PERString IS NOT NULL) THEN                             \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                      \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                 \n" +
                "					(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                               \n" +
                "					(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                      \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                component c ON rla.mfgpnid=c.id   LEFT JOIN             \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                               \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                     \n" +
                "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                 \n" +
                "  \n" +
                "			ELSE                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,                                 \n" +
                "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID)                                          \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                     component c ON rla.mfgpnid=c.id                                 \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                  \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                      \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"))AS mfgPn                                     \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                     \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                    \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                    \n" +
                "			END IF;                                          \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                       \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                  \n" +
                "			IF pCustomWhere IS NOT NULL THEN                         \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                  \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                    \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                    \n" +
                "				EXECUTE query_Temp;                         \n" +
                "				DEALLOCATE PREPARE query_Temp;                        \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                  \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                  \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                    \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                    \n" +
                "				EXECUTE query_Temp1;                           \n" +
                "				DEALLOCATE PREPARE query_Temp1;                         \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                  \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                  \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                    \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                    \n" +
                "				EXECUTE query_Temp2;                           \n" +
                "				DEALLOCATE PREPARE query_Temp2;                    \n" +
                "  \n" +
                "				# Concate                   \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                  \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                  \n" +
                "			ELSE                   \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			END IF;                        \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                             \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                   \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                    \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                    \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                 \n" +
                "					rq.finalPrice,                 \n" +
                "					rq.unitPrice,                \n" +
                "					rq.supplier,                \n" +
                "					rq.min,                \n" +
                "					rq.mult,                 \n" +
                "					rq.selectedMpn,                 \n" +
                "					rq.selectionMode,                \n" +
                "					rq.qtyID,                               \n" +
                "					rq.currentStock,                              \n" +
                "					rq.leadTime,                               \n" +
                "					rq.supplierStock,                              \n" +
                "					rq.grossStock,                                  \n" +
                "					rq.selectedPIDCode,                    \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition,                    \n" +
                "					ct.qpa,                 \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                         \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                         \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                 \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                        \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                            \n" +
                "			EXECUTE query5;                                            \n" +
                "			DEALLOCATE PREPARE query5;                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                             \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                             \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                            \n" +
                "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice                          \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                                \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                        \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                            \n" +
                "			EXECUTE query6;                                            \n" +
                "			DEALLOCATE PREPARE query6;                                                \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                         \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentCustomerLOA`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustomerLOA`(    \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "    IN pWhereClause VARCHAR(16383),                  \n" +
                "    IN pComponentID INT,              \n" +
                "    IN pCustomerID INT              \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "	IF(pComponentID IS NOT NULL) THEN                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "			select cst.id as CustomerID, cst.companyName, loa.id, loa.componentID   \n" +
                "			from component_customer_loa loa                  \n" +
                "			join customers cst on cst.id = loa.customerID AND IFNULL(cst.isDeleted,0) = 0               \n" +
                "			where loa.componentID = pComponentID AND IFNULL(loa.isDeleted,0) = 0;     \n" +
                "	END IF;                  \n" +
                "	IF(pCustomerID IS NOT NULL) THEN                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "		select com.id as ComponentID, com.mfgPN, com.PIDCode, loa.id, loa.customerID   \n" +
                "		from component_customer_loa loa                  \n" +
                "		join component com on com.id = loa.componentID AND IFNULL(com.isDeleted,0) = 0               \n" +
                "		where loa.customerID = pCustomerID AND IFNULL(loa.isDeleted,0) = 0;     \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "		SET pWhereClause = '1=1' ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "	ELSE	                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                  \n" +
                "	EXECUTE query1;                  \n" +
                "	DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	    SET @SQLString = NULL;                                      \n" +
                "	    SET @HavingClause = NULL;                          \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                          \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                                    \n" +
                "                      GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					),                                \n" +
                "			GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                    \n" +
                "					) SEPARATOR ' OR '                                   \n" +
                "					)                                \n" +
                "				INTO @SQLString, @HavingClause                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                       \n" +
                "					  (SELECT gc.gencCategoryName FROM genericcategory gc                        \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                        \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                        \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                                       \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                        \n" +
                "						(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                       \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                     \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id                \n" +
                "						LEFT JOIN genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                      \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                    \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                  \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                         \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                         \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                              \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                         \n" +
                "			END IF;                                 \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                        \n" +
                "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                            \n" +
                "				SELECT requestQty,                             \n" +
                "					finalPrice,                             \n" +
                "					unitPrice,                            \n" +
                "					supplier,                       \n" +
                "					rq.min,rq.mult,                           \n" +
                "					selectedMpn,                             \n" +
                "					selectionMode,                            \n" +
                "					selectedPIDCode,                          \n" +
                "					qtyID,                             \n" +
                "					consolidateID,                       \n" +
                "					currentStock,                      \n" +
                "					leadTime,                       \n" +
                "					supplierStock,                      \n" +
                "					grossStock,                        \n" +
                "					pricingSuppliers,                             \n" +
                "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus                            \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                 \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                             \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN rfqAssyID INT(11),                                \n" +
                "	IN puserID INT (11)                          \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	    SET @SQLString = NULL;                             \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "		ELSE                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                 \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                \n" +
                "			SET pWhereClause = '1=1' ;                                \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "		ELSE	                                \n" +
                "			SET rowNumWhere = '';                                \n" +
                "		END IF;	                                \n" +
                "		SELECT                        \n" +
                "                     GROUP_CONCAT(DISTINCT                        \n" +
                "				CONCAT(                        \n" +
                "					'Max((IF(ra.requestQty = ''',                        \n" +
                "						ra.requestQty,                        \n" +
                "					''', rq.finalPrice, null))) AS ''',                        \n" +
                "						ra.requestQty,''''                        \n" +
                "					)                        \n" +
                "					) INTO @SQLString                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                              \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                \n" +
                "					SELECT                                 \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                  \n" +
                "						rp.partTypeName, rm.name,                 \n" +
                "						rl.qpa,                    \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                      \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                      \n" +
                "						co.ltbDate AS LTBDate,              \n" +
                "						co.eolDate AS EOLDate,      \n" +
                "                        	(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,   \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                              \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN        \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0               \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                 \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                        \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                         \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                       \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                       \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                       \n" +
                "						(SELECT gencCategoryID FROM genericcategory                       \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\"))))                      \n" +
                "					GROUP BY rl.lineID');                                  \n" +
                "			END IF;                  \n" +
                "			PREPARE stmt FROM @SQLStatement;                              \n" +
                "			EXECUTE stmt;	                                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                \n" +
                "			EXECUTE query1;                                \n" +
                "			DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                \n" +
                "			EXECUTE query2;                                \n" +
                "			DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                \n" +
                "			EXECUTE query3;                                \n" +
                "			DEALLOCATE PREPARE query3;                                \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                        \n" +
                "				SELECT ra.requestQty,                         \n" +
                "					rq.finalPrice,                         \n" +
                "					rq.unitPrice,                        \n" +
                "					rq.supplier,                         \n" +
                "					rq.selectedMpn,                         \n" +
                "					rq.selectionMode,                        \n" +
                "					rq.qtyID,                         \n" +
                "					rq.consolidateID,                    \n" +
                "					rq.selectedPIDCode,                      \n" +
                "					rq.min,          \n" +
                "					rq.mult,                        \n" +
                "					rq.qtyID,                           \n" +
                "					rq.consolidateID,                     \n" +
                "					rq.currentStock,                    \n" +
                "					rq.leadTime,                     \n" +
                "					rq.supplierStock,                    \n" +
                "					rq.grossStock,                      \n" +
                "					rq.pricingSuppliers,              \n" +
                "					c.noOfPosition ApiNoOfPosition,             \n" +
                "					c.partStatus          \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                          \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                          \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                         \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                \n" +
                "			EXECUTE query4;                                \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                    \n" +
                "	    SET @SQLString = NULL;                                 \n" +
                "	    SET @HavingClause = NULL;                                     \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                                    \n" +
                "                      GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					),                          \n" +
                "		GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'((Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                          \n" +
                "					) SEPARATOR ' OR '                                        \n" +
                "					)          \n" +
                "				INTO @SQLString,@HavingClause                               \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                         \n" +
                "					  rl.qpa, ra.requestQty, rq.currentStock, rq.apiLead, rq.mult, rq.min,   \n" +
                "                      	(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,             \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                    \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                         \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id  LEFT JOIN         \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                  \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                   \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>15 AND  (CASE WHEN (rq.apiLead IS NULL OR rl.numOfPosition IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "  \n" +
                "					(GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > IFNULL(rq.currentStock,0))              \n" +
                "					ELSE              \n" +
                "					(GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))>IFNULL(rq.currentStock,0))              \n" +
                "				          END) AND  rl.rfqAssyID=',rfqAssyID,'                           \n" +
                "					GROUP BY rl.lineID');                             \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                    \n" +
                "			END IF;                           \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                            \n" +
                "				SELECT ra.requestQty,                              \n" +
                "					rq.finalPrice,                             \n" +
                "					rq.unitPrice,                            \n" +
                "					rq.supplier,                             \n" +
                "					rq.selectedMpn,                             \n" +
                "					rq.selectionMode,                           \n" +
                "					rq.selectedPIDCode,                          \n" +
                "					rq.min,              \n" +
                "					rq.mult,                            \n" +
                "					rq.qtyID,                               \n" +
                "					rq.consolidateID,                         \n" +
                "					rq.currentStock,                        \n" +
                "					rq.leadTime,                         \n" +
                "					rq.supplierStock,                        \n" +
                "					rq.grossStock ,                       \n" +
                "					rq.pricingSuppliers,              \n" +
                "					c.noOfPosition ApiNoOfPosition                \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                            \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                             \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	    SET @SQLString = NULL;                             \n" +
                "	    SET @HavingClause = NULL;                             \n" +
                "	    SET SESSION group_concat_max_len = 150000;                              \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                  \n" +
                "		SELECT                                  \n" +
                "                      GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "ELSE          \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "END), null))) AS ''',                                  \n" +
                "						ra.requestQty,''''                                  \n" +
                "					)                                  \n" +
                "					),                            \n" +
                "  \n" +
                "                      GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "ELSE          \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "END), null))) > 0'                                     \n" +
                "					) SEPARATOR ' OR '                                 \n" +
                "					)                            \n" +
                "				INTO @SQLString, @HavingClause                             \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                    \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,  \n" +
                "                 	(SELECT                                   \n" +
                "GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID, ''###'',ccl.isDocumentUpload)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                              \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id LEFT JOIN        \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                          \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                  \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                  \n" +
                "			END IF;                              \n" +
                "			PREPARE stmt FROM @SQLStatement;                                  \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT             \n" +
                "					ra.requestQty,             \n" +
                "					rq.finalPrice,             \n" +
                "					rq.unitPrice,            \n" +
                "					rq.supplier,             \n" +
                "					rq.selectedMpn,             \n" +
                "					rq.selectionMode,            \n" +
                "					rq.qtyID,                      \n" +
                "					rq.selectedPIDCode,                        \n" +
                "					rq.min,             \n" +
                "					rq.mult,                      \n" +
                "					rq.currentStock,                      \n" +
                "					rq.leadTime,                       \n" +
                "					rq.supplierStock,                      \n" +
                "					rq.grossStock,                     \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition,               \n" +
                "					c.partStatus,            \n" +
                "					rq.selectedPIDCode,                     \n" +
                "					rq.consolidateID             \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                               \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0            \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(    \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "    IN pWhereClause VARCHAR(16383),                  \n" +
                "    IN prfqAssyID INT,              \n" +
                "    IN prfqAssyBOMID INT              \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "	IF(prfqAssyBOMID IS NOT NULL) THEN                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "			select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                  \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,                  \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                     \n" +
                "			com.PIDCode,group_concat(distinct(com.PIDCode),'@@@',com.rohsComplient)as mfgPN,    \n" +
                "            GROUP_CONCAT(distinct(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',ccl.isDocumentUpload) as component     \n" +
                "			from rfq_lineitems_alternatepart ra                  \n" +
                "			left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0              \n" +
                "			left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id              \n" +
                "			left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                  \n" +
                "			left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                  \n" +
                "			left join uoms um on um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                \n" +
                "			left join component com on com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0     \n" +
                "            left join rfq_assemblies ras on ras.id = prfqAssyID and ras.isDeleted = 0  \n" +
                "            left join rfqforms rf on rf.id = ras.rfqrefID and rf.isDeleted = 0  \n" +
                "            left join customers cst on cst.id = rf.customerId and cst.isDeleted = 0  \n" +
                "            left join component_customer_loa ccl on ccl.customerID = cst.id and ccl.componentID = com.id and ccl.isDeleted = 0  \n" +
                "			where rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 and ra.rfqAssyID = prfqAssyID                 \n" +
                "			group by ra.rfqLineItemsID order by rl.lineID;                  \n" +
                "	ELSE                  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "			select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                  \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,                  \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                  \n" +
                "			com.PIDCode,group_concat(distinct(com.PIDCode),'@@@',com.rohsComplient)as mfgPN,     \n" +
                "            GROUP_CONCAT(distinct(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',ccl.isDocumentUpload) as component       \n" +
                "			from rfq_lineitems_alternatepart ra                  \n" +
                "			left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0              \n" +
                "			left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id              \n" +
                "			left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                  \n" +
                "			left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                 \n" +
                "			left join uoms um on um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0               \n" +
                "			left join component com on com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0               \n" +
                "			left join rfq_assemblies ras on ras.id = prfqAssyID and ras.isDeleted = 0  \n" +
                "            left join rfqforms rf on rf.id = ras.rfqrefID and rf.isDeleted = 0  \n" +
                "            left join customers cst on cst.id = rf.customerId and cst.isDeleted = 0  \n" +
                "            left join component_customer_loa ccl on ccl.customerID = cst.id and ccl.componentID = com.id and ccl.isDeleted = 0  \n" +
                "			where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0                  \n" +
                "			group by ra.rfqLineItemsID order by rl.lineID;      \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "		SET pWhereClause = '1=1' ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "	ELSE	                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                  \n" +
                "	EXECUTE query1;                  \n" +
                "	DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (15,'2.00','V1','import component LOA table and sp changes  - shirish'," + userid + ");"
            );
            break;
        case 15:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "    IN pWhereClause VARCHAR(16383)          \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	/* DECLARE SQLStatement varchar(255); */      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "		SELECT wo.*, am.assemblyName, am.assemblyNickName, arm.revision,       \n" +
                "        (SELECT SUM(ws.poQty) FROM workorder_salesorder_details ws WHERE wo.woID = ws.woID AND IFNULL(ws.isDeleted,0) = 0 AND ws.deletedAt IS NULL) soPOQty ,      \n" +
                "        (CASE WHEN (`wo`.`woStatus` = 0) THEN 'Draft'       \n" +
                "		WHEN (`wo`.`woStatus` = 1) THEN 'Published' WHEN (`wo`.`woStatus` = 2) THEN 'Completed'      \n" +
                "		WHEN (`wo`.`woStatus` = 4) THEN 'Void' WHEN (`wo`.`woStatus` = 5) THEN 'Draft Review'      \n" +
                "		WHEN (`wo`.`woStatus` = 6) THEN 'Under Termination' WHEN (`wo`.`woStatus` = 7) THEN 'Terminated'      \n" +
                "		WHEN (`wo`.`woStatus` = 8) THEN 'Published Draft'      \n" +
                "		ELSE '' END) AS `woStatusConvertedValue` ,      \n" +
                "	(CASE WHEN (`wo`.`isLeadFree` = 0) THEN 'No'       \n" +
                "					WHEN (`wo`.`isLeadFree` = 1) THEN 'Yes' ELSE '' END) AS `isLeadFreeConvertedValue` ,      \n" +
                "	(CASE WHEN (`wo`.`isSampleAvailable` = 0) THEN 'No'       \n" +
                "					WHEN (`wo`.`isSampleAvailable` = 1) THEN 'Yes' ELSE '' END) AS `isSampleAvailableConvertedValue` ,      \n" +
                "	(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'       \n" +
                "					WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,      \n" +
                "	(CASE WHEN (`wo`.`woType` = 1) THEN 'New'       \n" +
                "		WHEN (`wo`.`woType` = 2) THEN 'Repeat order with same revision' WHEN (`wo`.`woType` = 3) THEN 'Revision change'      \n" +
                "		WHEN (`wo`.`woType` = 4) THEN 'I-ECO' WHEN (`wo`.`woType` = 5) THEN 'C-ECO'      \n" +
                "		ELSE '' END) AS `woTypeConvertedText`,    \n" +
                "	(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'    \n" +
                "		ELSE 'No' END) AS `isHalt`,    \n" +
                "	(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN     \n" +
                "		(SELECT CONCAT(whu.reason, ' - Halt by ',     \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),     \n" +
                "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))     \n" +
                "			FROM workorder_trans_hold_unhold whu     \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0     \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL    \n" +
                "			ORDER BY whu.startDate DESC LIMIT 1)     \n" +
                "		ELSE      \n" +
                "		(SELECT CONCAT(whu.resumeReason, ' - Resume by ',     \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),     \n" +
                "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))    \n" +
                "			FROM workorder_trans_hold_unhold whu     \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0     \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL    \n" +
                "			ORDER BY whu.endDate DESC LIMIT 1)     \n" +
                "		END) AS reasonDetails,    \n" +
                "	(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0     \n" +
                "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount    \n" +
                "	FROM workorder wo      \n" +
                "        JOIN assemblymst am ON wo.assyID = am.id AND IFNULL(am.isdeleted,0) = 0      \n" +
                "        JOIN assembly_revisionmst arm ON wo.assyRevID = arm.id AND IFNULL(arm.isdeleted,0) = 0              \n" +
                "		WHERE IFNULL(wo.isdeleted,0) = 0;           \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyNickName DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;       \n" +
                "  \n" +
                "	/* to get total count of rows of workorder table */      \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM workorder where deletedAt IS NULL \" );      \n" +
                "	PREPARE query3 FROM @SQLStatement3;      \n" +
                "	EXECUTE query3;      \n" +
                "	DEALLOCATE PREPARE query3;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (16,'2.00','V1',' Sproc_GetWorkorder - KETAN '," + userid + ");"
            );
            break;
        case 16:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ValidateWorkorderAndPublish` ;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(      \n" +
                "	IN pwoID INT,      \n" +
                "	IN pwoStatus INT,      \n" +
                "	IN pupdatedBy INT      \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/      \n" +
                "  \n" +
                "	-- create temporary table for error      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;       \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error      \n" +
                "	(      \n" +
                "	     errorText NVARCHAR(2000)      \n" +
                "	);      \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/      \n" +
                "	block1: BEGIN      \n" +
                "		DECLARE current_opnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "		DECLARE current_previousopnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;      \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;      \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;      \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;      \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;      \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;      \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;      \n" +
                "  \n" +
                "		DECLARE current_opname NVARCHAR(500) DEFAULT '';      \n" +
                "		DECLARE current_woopid NVARCHAR(500) DEFAULT '';      \n" +
                "  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table      \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;      \n" +
                "  \n" +
                "		-- 2 declare the cursor operation      \n" +
                "		DECLARE operation_cursor CURSOR FOR      \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;      \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows      \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;      \n" +
                "  \n" +
                "		-- get first operation workorder      \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo       \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL;      \n" +
                "  \n" +
                "		-- get inspection process type id      \n" +
                "		SET InspectionOperationTypeID := 0;      \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory       \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation type' LIMIT 1;      \n" +
                "  \n" +
                "  \n" +
                "		 -- open the cursor      \n" +
                "		OPEN operation_cursor;      \n" +
                "  \n" +
                "		 -- start looping      \n" +
                "		operation_loop: LOOP      \n" +
                "  \n" +
                "			-- read the name from next row into the variables       \n" +
                "			FETCH operation_cursor INTO current_opnumber;      \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,       \n" +
                "			-- close the cursor and exit the loop if it has.      \n" +
                "			IF exit_loop THEN      \n" +
                "				 CLOSE operation_cursor;      \n" +
                "				 LEAVE operation_loop;      \n" +
                "			END IF;      \n" +
                "  \n" +
                "			SET current_opname:= '';      \n" +
                "			SET current_woopid:= 0;      \n" +
                "			SET current_operationTypeID:= 0;      \n" +
                "			SET current_qtyControl:= 0;      \n" +
                "			SET current_isIssueQty:= 0;      \n" +
                "			-- get opname and woopid from operation number      \n" +
                "			SELECT opname, woopid, operationTypeID, qtyControl, isIssueQty      \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl, current_isIssueQty      \n" +
                "			FROM workorder_operation WHERE opnumber = current_opnumber       \n" +
                "			AND deletedat IS NULL AND woid=pwoid LIMIT 1;      \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/      \n" +
                "			IF first_opnumber=current_opnumber THEN      \n" +
                "				SET @stmt_op = CONCAT('<b>', current_opname,' (', current_opnumber, ')', '</b> is rework operation, it cannot be set as first operation of work order.');       \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "			END IF;				      \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/      \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/      \n" +
                "			SET IsInspectionProcess:=0;      \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN      \n" +
                "				SET IsInspectionProcess := 1;      \n" +
                "			END IF;      \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN      \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b> is rework operation, it cannot be inspection process.');       \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "			END IF;	      \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/      \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/      \n" +
                "			SET IsInValidReworkOperation:=0;      \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN      \n" +
                "				SET IsInValidReworkOperation := 1;      \n" +
                "			END IF;      \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN      \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b>  is rework operation, it must have manufacturer and issue qty set as true.');       \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "			END IF;	      \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/      \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/      \n" +
                "			SET found_in_paralleloperation:= 0;      \n" +
                "  \n" +
                "			SELECT COUNT(*) INTO found_in_paralleloperation FROM workorder_operation_cluster       \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (      \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1      \n" +
                "			) AND woopid=current_woopid;      \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN      \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');       \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "			END IF;      \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/      \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/      \n" +
                "			-- get previous operation of rework operation      \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo       \n" +
                "				WHERE opnumber < current_opnumber       \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;      \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not      \n" +
                "			IF current_previousopnumber > 0 THEN      \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;      \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process      \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation      \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)      \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;       \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process       \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN      \n" +
                "					SET @stmt_op = CONCAT('Previous operation of ','<b>',current_opname,' (', current_opnumber, ')', '</b> must be inspection operation or rework operation.');       \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "				END IF;      \n" +
                "			ELSE      \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>',current_opname,' (', current_opnumber, ')', '</b> must be inspection operation or rework operation.');       \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "			END IF;      \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/      \n" +
                "		END LOOP operation_loop;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/      \n" +
                "		block2: BEGIN      \n" +
                "			-- 1 get list of inspection operation in workorder      \n" +
                "			DECLARE c_opnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "			DECLARE c_checkopnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "			DECLARE c_reworkopnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "			DECLARE temp_opname NVARCHAR(500) DEFAULT 0;      \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;      \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;      \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;      \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;      \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;      \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;      \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table      \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;      \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation      \n" +
                "			DECLARE inspection_cursor CURSOR FOR      \n" +
                "			SELECT opnumber FROM workorder_operation      \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID      \n" +
                "			AND woid=pwoid AND deletedat IS NULL;       \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows      \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;      \n" +
                "  \n" +
                "			-- open the cursor      \n" +
                "			OPEN inspection_cursor;      \n" +
                "  \n" +
                "			 -- start looping      \n" +
                "			inspection_loop: LOOP      \n" +
                "  \n" +
                "				-- read the name from next row into the variables       \n" +
                "				FETCH inspection_cursor INTO c_opnumber;      \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,       \n" +
                "				-- close the cursor and exit the loop if it has.      \n" +
                "				IF exit_inspection_loop THEN      \n" +
                "					 CLOSE inspection_cursor;      \n" +
                "					 LEAVE inspection_loop;      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				SET temp_opname:= '';      \n" +
                "				SET temp_woopid:= 0;      \n" +
                "				SET temp_isRework:= 0;      \n" +
                "				SET temp_qtyControl:= 0;      \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl      \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl      \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber       \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;      \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/      \n" +
                "				SET IsReworkInspectionOperation:= 0;      \n" +
                "				IF (temp_isRework = 1) THEN      \n" +
                "					SET IsReworkInspectionOperation := 1;      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN      \n" +
                "					SET @stmt_op = CONCAT('<b>',temp_opname,' (', c_opnumber, ')', '</b> is inspection process, it cannot be rework operation.');       \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "				END IF;	      \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/      \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/      \n" +
                "				SET IsInValidInspectionOperation:= 0;      \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN      \n" +
                "					SET IsInValidInspectionOperation := 1;      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN      \n" +
                "					SET @stmt_op = CONCAT('<b>',temp_opname,' (', c_opnumber, ')', '</b> is inspection process, it must have manufacturer qty set as true.');       \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "				END IF;	      \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/      \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/      \n" +
                "				SET IsParallelClusterOperation:= 0;			      \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation       \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (      \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL       \n" +
                "				 			AND clusterid IN (      \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL       \n" +
                "								AND woid=pwoid AND isparelleloperation=1      \n" +
                "				 	)      \n" +
                "				);      \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/      \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/      \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster      \n" +
                "				IF (IsParallelClusterOperation = 0) THEN      \n" +
                "					SET c_checkopnumber:= 0;      \n" +
                "					-- get next operation of inspection operation      \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo       \n" +
                "						WHERE opnumber > c_opnumber       \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;      \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not      \n" +
                "					IF c_checkopnumber > 0 THEN      \n" +
                "						SET c_reworkopnumber:= 0;      \n" +
                "						-- set checked operation number if found as rework process      \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation      \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1      \n" +
                "						AND woid=pwoid AND deletedat IS NULL;       \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process       \n" +
                "						IF c_reworkopnumber = 0 THEN      \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>',temp_opname,' (', c_opnumber, ')','</b> must be rework operation.');       \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "						END IF;      \n" +
                "					ELSE      \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>',temp_opname,' (', c_opnumber, ')','</b> must be rework operation.');       \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);      \n" +
                "					END IF;	      \n" +
                "				END IF;      \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/      \n" +
                "			END LOOP inspection_loop;      \n" +
                "		END block2;      \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/      \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/      \n" +
                "		block3: BEGIN      \n" +
                "			-- 1 get list of cluster in workorder      \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;      \n" +
                "			DECLARE current_minopnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "			DECLARE current_maxopnumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "  \n" +
                "			DECLARE temp_clustername NVARCHAR(100) DEFAULT '';      \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;      \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(6,2) DEFAULT 0;      \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;      \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;      \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(6,2) DEFAULT 0;      \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;      \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;      \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;      \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table      \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;      \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster      \n" +
                "			DECLARE cluster_cursor CURSOR FOR      \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster       \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;      \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows      \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;      \n" +
                "  \n" +
                "			-- open the cursor      \n" +
                "			OPEN cluster_cursor;      \n" +
                "  \n" +
                "			 -- start looping      \n" +
                "			cluster_loop: LOOP      \n" +
                "  \n" +
                "				-- read the name from next row into the variables       \n" +
                "				FETCH cluster_cursor INTO current_clusterid;      \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,       \n" +
                "				-- close the cursor and exit the loop if it has.      \n" +
                "				IF exit_cluster_loop THEN      \n" +
                "					 CLOSE cluster_cursor;      \n" +
                "					 LEAVE cluster_loop;      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN	      \n" +
                "					SET temp_clustername:= '';      \n" +
                "					SET temp_isParellelOperation:= 0;      \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;      \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN      \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/      \n" +
                "						SET IsReworkParallelCluster:=0;      \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation       \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (      \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid      \n" +
                "						);      \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN      \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');      \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);      \n" +
                "						END IF;      \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/      \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/      \n" +
                "						SET IsPregrorammingParallelCluster:=0;      \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation       \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (      \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid      \n" +
                "						);      \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN      \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');      \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);      \n" +
                "						END IF;      \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/      \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/      \n" +
                "						SET found_mismatchoperations:= 0;      \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (      \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid      \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;      \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN      \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');      \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);      \n" +
                "						ELSE      \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/      \n" +
                "							IF (found_mismatchoperations = 1) THEN      \n" +
                "								SET found_operationTypeID:= 0;      \n" +
                "								SET cluster_maxOpNumber:= 0;      \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (      \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid      \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;      \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN      \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;      \n" +
                "  \n" +
                "									SELECT isRework INTO next_operation_to_cluster_is_rework FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND       \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND      \n" +
                "									opNumber > cluster_maxOpNumber);      \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN      \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');      \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);      \n" +
                "									END IF;      \n" +
                "								END IF;      \n" +
                "							END IF;		      \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/      \n" +
                "						END IF;	      \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/						      \n" +
                "					END IF;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/      \n" +
                "					SET current_minopnumber:= 0;      \n" +
                "					SET current_maxopnumber:= 0;      \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation      \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN       \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)      \n" +
                "					AND woid = pwoid AND deletedat IS NULL;      \n" +
                "					SET found_invalidsequenceoperation:= 0;      \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid      \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE       \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)      \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN      \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)      \n" +
                "					ORDER BY opnumber;	      \n" +
                "					IF found_invalidsequenceoperation > 0 THEN      \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');       \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);      \n" +
                "					END IF;      \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/      \n" +
                "				END IF;      \n" +
                "			END LOOP cluster_loop;      \n" +
                "		END block3;      \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/      \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/      \n" +
                "		block4: BEGIN      \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/      \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;      \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;      \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;      \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;      \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;    \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;      \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;      \n" +
                "  \n" +
                "			SET found_invalid_rework_operation:= 0;      \n" +
                "			SELECT COUNT(*) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;      \n" +
                "			IF found_invalid_rework_operation > 0 THEN      \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');      \n" +
                "			END IF;      \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/      \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/      \n" +
                "  \n" +
                "			SET found_invalid_inspection_operation:= 0;      \n" +
                "			SELECT COUNT(*) INTO found_invalid_inspection_operation FROM workorder_operation WHERE      \n" +
                "			operationTypeID IN (      \n" +
                "					SELECT genccategoryid FROM genericcategory WHERE genccategoryname='inspection process'       \n" +
                "					AND deletedat IS NULL AND categorytype = 'operation type'      \n" +
                "			) AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;      \n" +
                "			IF found_invalid_inspection_operation > 0 THEN      \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');      \n" +
                "			END IF;      \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/      \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/      \n" +
                "			SET check_workorder_isrevised:= 0;      \n" +
                "			SELECT COUNT(*) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;      \n" +
                "			IF check_workorder_isrevised > 0 THEN      \n" +
                "				SET first_OpTypeID:=0;      \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;      \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN       \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');      \n" +
                "				END IF;      \n" +
                "			END IF;      \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/      \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/      \n" +
                "			SET preprogramming_operation_count:= 0;      \n" +
                "			SELECT COUNT(*) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;      \n" +
                "			IF preprogramming_operation_count > 1 THEN      \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only have one pre-programming operation !!');      \n" +
                "			END IF;      \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/      \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/      \n" +
                "			-- set flag 1 for standard count ok      \n" +
                "			-- SET certificate_standard_count:= 0;      \n" +
                "			-- SELECT COUNT(*) INTO certificate_standard_count FROM certificate_standards       \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND       \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);      \n" +
                "			-- IF certificate_standard_count > 0 THEN      \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');      \n" +
                "			-- END IF;      \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/      \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/      \n" +
                "			-- set flag 1 for standard count ok      \n" +
                "			SET invalid_wo_count:= 0;      \n" +
                "			SELECT COUNT(*) INTO invalid_wo_count FROM workorder_operation       \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;      \n" +
                "			IF invalid_wo_count > 0 THEN      \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published !!');      \n" +
                "			END IF;      \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/      \n" +
                "  \n" +
                "		END block4;      \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/      \n" +
                "  \n" +
                "		SELECT errorText FROM temp_operation_error;      \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/      \n" +
                "		IF (SELECT COUNT(*) FROM temp_operation_error) = 0 THEN      \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,      \n" +
                "			updatedat=CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') WHERE woid=pwoid;      \n" +
                "		END IF;      \n" +
                "	END block1;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (17,'2.00','V1',' Workorder Verify SP Change - VAIBHAV '," + userid + ");"
            );
            break;
        case 17:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_assembly_revisionmst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		    UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempassembly_revisionmst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempassembly_revisionmst;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempassembly_revisionmst;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_br_label_template`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "    SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempbr_label_template;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempbr_label_template;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempbr_label_template;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_certificate_standards`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                                                        \n" +
                "  \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempCertificateStandards;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempCertificateStandards;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempCertificateStandards;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_chart_rawdata_category`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                                                         \n" +
                "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                                                        \n" +
                "            UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                                                         \n" +
                "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempChartRawdataCategory;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempChartRawdataCategory;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempChartRawdataCategory;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_chart_templatemst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		    ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');                              \n" +
                "		SET @SQl2 = CONCAT('update chart_template_access set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL'); 		                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                              \n" +
                "		PREPARE stmt2 FROM @SQL2;                                                                                  \n" +
                "		EXECUTE stmt1;                              \n" +
                "		EXECUTE stmt2;                                                                                  \n" +
                "  \n" +
                "			SELECT * FROM tempcharttemplatemst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempcharttemplatemst;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempcharttemplatemst;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_chartypemst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQl1 = CONCAT('update chart_typemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTypeID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "		EXECUTE stmt1;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias_rev_pn\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_goodbadpartmapping\" else \"\" end as msg FROM component_goodbadpartmapping WHERE deletedAt IS NULL AND (goodComponentID IN(',IDs,') OR badComponentID IN(',IDs,')) LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_requiremapping_parts\" else \"\" end as msg FROM component_requiremapping_parts WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "  \n" +
                "	  ) q');                                                        \n" +
                "	  PREPARE stmt FROM @SQL;                                                        \n" +
                "	   EXECUTE stmt;                                                        \n" +
                "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                                                        \n" +
                "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempComponent;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempComponent;    \n" +
                "        END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_component_sid_stock`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                                                        \n" +
                "			UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                                                            \n" +
                "		    ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	                                                \n" +
                "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock                                                \n" +
                "			WHERE FIND_IN_SET(id,IDs);	                                                \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	                                                \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentsidstock;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempcomponentsidstock;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempcomponentsidstock;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_component_sid_stock_dataelement_values`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                    \n" +
                "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                                                \n" +
                "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                                                   \n" +
                "			FROM component_sid_stock_dataelement_values                                                \n" +
                "			WHERE FIND_IN_SET(id,IDs);                                                \n" +
                "  \n" +
                "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;                                                \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames                                                \n" +
                "			FROM dataelement                                                 \n" +
                "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	                                                \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_component_standard`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "    SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                                                         \n" +
                "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandard;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempcomponentStandard;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempcomponentStandard;   \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_component_standard_class`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                                                         \n" +
                "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                                                        \n" +
                "           /*  UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                                                         \n" +
                "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandardClass;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempcomponentStandardClass;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempcomponentStandardClass;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_cost_category`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQl1 = CONCAT('update cost_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "		EXECUTE stmt1;                   \n" +
                "		SELECT COUNT(1) TotalCount FROM cost_category WHERE id IN (IDs) AND isdeleted=0 AND deletedat=NULL;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_countrymst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCountryMst as                                                        \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "			FROM                                                         \n" +
                "			(                                                        \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND countryID IN(',IDs,') LIMIT 1)                                                        \n" +
                "				UNION ALL                                                        \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND countryID IN(',IDs,') LIMIT 1)                                                         \n" +
                "			) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "	IF (SELECT TotalCount FROM tempCountryMst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update countrymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where countryID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "		EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "		SELECT                                                         \n" +
                "			*                                                        \n" +
                "		FROM                                                        \n" +
                "			tempCountryMst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempCountryMst;                                                        \n" +
                "	END IF;                                                        \n" +
                "	DROP TABLE tempCountryMst;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                                                        \n" +
                "			UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                                                         \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempcustomer_addresses;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempcustomer_addresses;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_customers`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                         \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                         \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			SELECT                                                         \n" +
                "    *                                                        \n" +
                "FROM                                                        \n" +
                "    tempCustomers;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempCustomers;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempCustomers;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_dataelement_transactionvalues_manual`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                         \n" +
                "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                                                        \n" +
                "				and deletedAt IS NULL');		                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_department`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                                                        \n" +
                "  \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempDepartment;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempDepartment;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempDepartment;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_eco_type_category`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN                                                        \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                                                         \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;  \n" +
                "            SELECT                                                         \n" +
                "    *                                                        \n" +
                "FROM                                                        \n" +
                "    tempEcoTypeCategory;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempEcoTypeCategory;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempEcoTypeCategory;     \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_eco_type_values`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT                                                         \n" +
                "    *                                                        \n" +
                "FROM                                                        \n" +
                "    tempEcoTypeValues;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempEcoTypeValues;                                                        \n" +
                "		END IF;                                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_employees`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	   UNION ALL                                                                              \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "           UNION ALL                                                         \n" +
                "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                                                        \n" +
                "	   UNION ALL                                                        \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	UNION ALL                                                        \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                        \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                         \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                                                         \n" +
                "	  UNION ALL                                                            \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                                                        \n" +
                "	  UNION ALL                                                           \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                         \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                         \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                         \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                                                        \n" +
                "	UNION ALL                                                         \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                         \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                         \n" +
                "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	 UNION ALL                                                         \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                                                        \n" +
                "  \n" +
                "        ) q');                                                        \n" +
                "    PREPARE stmt FROM @SQL;                                                        \n" +
                "    EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                                                        \n" +
                "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                                                        \n" +
                "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "			EXECUTE stmt4;                                                        \n" +
                "			SELECT                                                         \n" +
                "    *                                                        \n" +
                "FROM                                                        \n" +
                "    tempEmp;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempEmp;                                                        \n" +
                "		END IF;                                                        \n" +
                "  \n" +
                "    DROP TABLE tempEmp;   \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_entity`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		    UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;          \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('update dynamicreportaccess set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID IN(',IDs,') and refTableName=\"entity\" and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;                                                	                                                      \n" +
                "  \n" +
                "			SELECT * FROM tempEntity;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempEntity;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempEntity;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_equipment`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                                                        \n" +
                "  \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                                                        \n" +
                "			IF entityID IS NOT NULL THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			ELSE                                                        \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			END IF;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempEquipment;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempEquipment;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempEquipment;     \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	        UNION ALL                \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)   \n" +
                "            UNION ALL                \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)  \n" +
                "	        UNION ALL                                                      \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)     \n" +
                "  \n" +
                "	      ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT                                                         \n" +
                "    *                                                        \n" +
                "FROM                                                        \n" +
                "    tempGenericCategory;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempGenericCategory;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempGenericCategory;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_jobtypes`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                                                         \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempJobTypess;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempJobTypess;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempJobTypess;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_master_templates`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempMasterTemplate;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempMasterTemplate;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempMasterTemplate;   \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_measurement_types`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempMeasurement_types;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempMeasurement_types;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempMeasurement_types;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                                                            \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "			 UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "			 UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)                                                        \n" +
                "			UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)                                                        \n" +
                "			UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                \n" +
                "		SET @SQl2 =CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');                \n" +
                "           PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;                   \n" +
                "			SELECT * FROM tempMFGCodeMst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempMFGCodeMst;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempMFGCodeMst;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_operations`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                        \n" +
                "  \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempOperations;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempOperations;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempOperations;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_parts`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempParts)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempParts;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempParts;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempParts;     \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_quotecharges_dynamic_fields_mst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assy_quotations_additionalcost\" else \"\" end as msg                                                         \n" +
                "            FROM rfq_assy_quotations_additionalcost WHERE deletedAt IS NULL AND quoteChargeDynamicFieldID IN (',IDs,') LIMIT 1) ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempQuotecharges_dynamic_fields_mst;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_reasonmst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_requirement`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                                                         \n" +
                "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM temprequirements;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM temprequirements;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE temprequirements;    \n" +
                "        END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_lineitems`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SELECT 0 TotalCount, '' Message;                                                        \n" +
                "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "		EXECUTE stmt1;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_lineitems_errorcode`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_lineitems_keywords`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_mountingtypemst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                                                         \n" +
                "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)                                                \n" +
                "             UNION ALL                                                      \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)                          \n" +
                "            UNION ALL                             \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_fields_genericalias_mst\" else \"\" end as msg FROM component_fields_genericalias_mst WHERE deletedAt IS NULL AND refTableName = ''rfq_mountingtypemst'' AND refId IN(',IDs,') LIMIT 1)                          \n" +
                "            ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM temprfqpartcategory;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM temprfqpartcategory;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE temprfqpartcategory;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_parttypemst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                                                        \n" +
                "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "			    FROM                                                         \n" +
                "			    (                                                   \n" +
                "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM                                                 \n" +
                "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)                          \n" +
                "                 UNION ALL                             \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_fields_genericalias_mst\" else \"\" end as msg FROM component_fields_genericalias_mst WHERE deletedAt IS NULL AND refTableName = ''rfq_parttypemst'' AND refId IN(',IDs,') LIMIT 1)                          \n" +
                "                ) q');                                                        \n" +
                "	  	        PREPARE stmt FROM @SQL;                                                        \n" +
                "		        EXECUTE stmt;                                                  \n" +
                "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                                                    \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',                                                 \n" +
                "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "	  				PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "						EXECUTE stmt1;                                                  \n" +
                "	            	SELECT * FROM temprfqparttypemst;                                                        \n" +
                "			ELSE                                                        \n" +
                "				SELECT * FROM temprfqparttypemst;                                                        \n" +
                "  \n" +
                "			END IF;                                                        \n" +
                "            DROP TABLE temprfqparttypemst;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfqforms`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                                                         \n" +
                "            from rfq_lineitems rl where deletedAt IS NULL and rl.rfqAssyID in (',IDs,')) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                                                        \n" +
                "			SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\" where rb.id in           \n" +
                "							   (select rab.id from	(select b.id from rfq_assy_bom b where b.reqAssyID in (',IDs,') and b.deletedAt IS NULL)as rab)');          \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                                                         \n" +
                "							   (select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as rar)');          \n" +
                "			SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in          \n" +
                "								(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as rat)');          \n" +
                "			SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in          \n" +
                "								(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as raq)');          \n" +
                "  \n" +
                "			SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\"           \n" +
                "								where ra.id in (',IDs,') and ra.deletedAt IS NULL');          \n" +
                "  \n" +
                "			SET @SQl6 = CONCAT('update rfq_assy_standard_class_detail rs set rs.deletedBy = ',deletedBy,', rs.isDeleted=',1,',rs.deletedAt= \"',NOW(),'\"  where rs.id in          \n" +
                "								(select ras.id from (select b.id from rfq_assy_standard_class_detail b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as ras)');          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl7 = CONCAT('update rfq_assemblies_quotation_status rqs set rqs.deletedBy = ',deletedBy,', rqs.isDeleted=',1,',rqs.deletedAt= \"',NOW(),'\" where rqs.id in          \n" +
                "								(select raq.id from (select b.id from rfq_assemblies_quotation_status b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as raq)');                      \n" +
                "  \n" +
                "		    SET @SQl8 = CONCAT('update rfqforms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN           \n" +
                "								(select id from (select rf.id, count(ra.id) from rfqforms rf left outer join rfq_assemblies ra on ra.rfqrefID = rf.id and ra.isDeleted=0 where rf.isDeleted = 0          \n" +
                "								group by rf.id having count(ra.id)=0)as rfq)  and deletedAt IS NULL');	          \n" +
                "  \n" +
                "            PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                       \n" +
                "            PREPARE stmt6 FROM @SQL6;                 \n" +
                "			PREPARE stmt7 FROM @SQL7;             \n" +
                "            PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                        \n" +
                "            PREPARE stmt5 FROM @SQL5;                                                        \n" +
                "			PREPARE stmt8 FROM @SQL8;                                                        \n" +
                "  \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                       \n" +
                "            EXECUTE stmt6;            \n" +
                "            EXECUTE stmt7;            \n" +
                "            EXECUTE stmt3;                                                        \n" +
                "			EXECUTE stmt4;                                                        \n" +
                "            EXECUTE stmt5;                                                        \n" +
                "			EXECUTE stmt8;                                                        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM temprfqformss;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM temprfqformss;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE temprfqformss;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_rfqtype`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRfqTypes as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                                                         \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND rfqtypeID IN (',IDs,') LIMIT 1) ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempRfqTypes)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update rfqtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempRfqTypes;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempRfqTypes;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempRfqTypes;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_roles`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                                                        \n" +
                "         UNION ALL                                                        \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                                                        \n" +
                "         UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempRoles;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempRoles;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempRoles;     \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete sales order mst */ 	                                                \n" +
                "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber                                                \n" +
                "			FROM salesordermst                                                \n" +
                "			WHERE FIND_IN_SET(id,IDs);                                                \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete sales order mst */	                                                \n" +
                "  \n" +
                "			SELECT * FROM tempSalesOrderMst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempSalesOrderMst;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempSalesOrderMst;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_shippedassembly`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "   	SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                \n" +
                "			/* [S] - Add Time line log for delete shipped assembly */                                                 \n" +
                "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                                                \n" +
                "			FROM shippedassembly                                                \n" +
                "			WHERE FIND_IN_SET(id,IDs);                                                \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                                                \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete shipped assembly */ 		  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_shipping_request`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                                                         \n" +
                "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                                                        \n" +
                "            UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                                                         \n" +
                "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                  \n" +
                "			/* [S] - Add Time line log for delete shipment request */                                                 \n" +
                "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request                                                \n" +
                "			WHERE FIND_IN_SET(id,IDs);	                                                \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete shipment request */                                                 \n" +
                "  \n" +
                "			SELECT * FROM tempShippingRequest;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempShippingRequest;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempShippingRequest;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_standard_class`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND CONCAT(\",\",classIDs,\",\") REGEXP CONCAT(\",\", REPLACE(\"',IDs,'\",\",\",\"|\") , \",\") LIMIT 1)                                                        \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                     \n" +
                "	EXECUTE stmt;                                                  \n" +
                "  \n" +
                "  \n" +
                "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');                                    \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempStandardClass;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempStandardClass;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempStandardClass;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_uoms`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                                                         \n" +
                "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                                                        \n" +
                "            UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                                                         \n" +
                "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)                                                \n" +
                "              UNION ALL                          \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)                          \n" +
                "             UNION ALL                          \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_fields_genericalias_mst\" else \"\" end as msg FROM component_fields_genericalias_mst WHERE deletedAt IS NULL AND refTableName = ''uoms'' AND refId IN(',IDs,') LIMIT 1)                          \n" +
                "            ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempUOMs;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempUOMs;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempUOMs;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_who_bought_who`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL		                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                                                        \n" +
                "  \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                                                        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete work order */                                                        \n" +
                "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                                                         \n" +
                "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                                                        \n" +
                "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                                                        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                                                        \n" +
                "			/* [E] - Add Time line log for delete work order */			                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "			EXECUTE stmt4;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorder;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorder;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempWorkorder;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_cluster`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "   SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                                                        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete cluster */                                                        \n" +
                "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                                                        \n" +
                "		WHERE clusterID = IDs AND deletedAt IS NULL;                                                        \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder                                                        \n" +
                "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                                                        \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                                                        \n" +
                "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                                                        \n" +
                "		/* [E] - Add Time line log for delete cluster */                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderCluster;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderCluster;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderCluster;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                                                        \n" +
                "			 UNION ALL                                                        \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                                                         \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                                                        \n" +
                "			 /* [S] - Add Time line log for delete work order operation */                                                        \n" +
                "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                                                        \n" +
                "			FROM workorder_operation                                                         \n" +
                "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                        \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                                                        \n" +
                "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                                                        \n" +
                "			/* [E] - Add Time line log for delete work order operation */                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                        \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                        \n" +
                "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                        \n" +
                "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                        \n" +
                "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                        \n" +
                "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                        \n" +
                "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                                                        \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                                                        \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                                                        \n" +
                "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                                                        \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                                                        \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                        \n" +
                "			PREPARE stmt5 FROM @SQL5;                                                        \n" +
                "			PREPARE stmt6 FROM @SQL6;                                                        \n" +
                "			PREPARE stmt7 FROM @SQl7;                                                        \n" +
                "			PREPARE stmt8 FROM @SQl7;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "			EXECUTE stmt4;                                                        \n" +
                "			EXECUTE stmt5;                                                        \n" +
                "			EXECUTE stmt6;                                                        \n" +
                "			EXECUTE stmt7;                                                        \n" +
                "			EXECUTE stmt8;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperation;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderOperation;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderOperation;  \n" +
                "        END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_cluster`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                                                        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete operations from cluster */                                                        \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                        \n" +
                "		FROM workorder_operation                                                         \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                        \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                                                        \n" +
                "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                                                        \n" +
                "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                        \n" +
                "		/* [E] -  Add Time line log for delete operations from cluster */		                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                        \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                                                        \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                                                        \n" +
                "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                                                        \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                                                        \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderOperationCluster;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_employee`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                                                        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Employees from work order */                                                        \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                        \n" +
                "		FROM workorder_operation                                                         \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                        \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                                                        \n" +
                "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                                                        \n" +
                "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                        \n" +
                "		/* [E] -  Add Time line log for delete Employee from work order */                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEmployee;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderEmployee;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderEmployee;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_preprogcomp`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                        \n" +
                "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                                                        \n" +
                "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                                                        \n" +
                "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                                                        \n" +
                "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "    SELECT * FROM  tempComponent;                                                        \n" +
                "    SELECT TotalCount FROM  tempComponent;                                                        \n" +
                "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                                                        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete pre program component */                                                  \n" +
                "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),                                                \n" +
                "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)                                                \n" +
                "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName                                                \n" +
                "			FROM workorder_preprogcomp woppc                                                  \n" +
                "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                                                   \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete pre program component */                                                 \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "  \n" +
                "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                                                         \n" +
                "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                                                        \n" +
                "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "		SELECT                                                         \n" +
                "			*                                                        \n" +
                "		FROM                                                        \n" +
                "			tempComponent;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempComponent;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempComponent;     \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_trans_packagingdetail`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "/* [S] - Add Time line log for delete work order transaction packing details */                                                  \n" +
                "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),                                                \n" +
                "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),                                                \n" +
                "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)                                                \n" +
                "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID                                                 \n" +
                "		FROM workorder_trans_packagingdetail wtpd                                                 \n" +
                "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;                                                \n" +
                "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                                                  \n" +
                "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "		/* [E] - Add Time line log for delete work order transaction packing details */                                                 \n" +
                "  \n" +
                "		SELECT 0 TotalCount, '' Message;                                                        \n" +
                "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "		EXECUTE stmt1;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_trans_serialno`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "DECLARE vWoID1 INT(11);                                                        \n" +
                "	DECLARE vOpID1 INT(11);                                                        \n" +
                "	DECLARE vSerialNo1 VARCHAR(50);                                                        \n" +
                "	DECLARE vProdStatus1 VARCHAR(5);                                                        \n" +
                "	DECLARE vWoTransID1 INT(11);                                                        \n" +
                "	DECLARE vQty1 INT(11);                                                        \n" +
                "	DECLARE vOpID2 INT(11);                                                        \n" +
                "	DECLARE vProdstatus2 VARCHAR(5);   \n" +
                "  \n" +
                "  \n" +
                "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                                                         \n" +
                "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "  \n" +
                "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                                                        \n" +
                "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                                                         \n" +
                "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                                                         \n" +
                "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "	/* condition to check total serials of type greater than actual production qty */                                                        \n" +
                "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                                                        \n" +
                "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                                                         \n" +
                "		> IFNULL(vQty1,0)) THEN                                                        \n" +
                "  \n" +
                "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                                                        \n" +
                "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                                                         \n" +
                "  \n" +
                "			/* condition to check curr opis and status match with given delete serial */                                                        \n" +
                "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                                                        \n" +
                "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                                                        \n" +
                "  \n" +
                "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                                                        \n" +
                "				WHERE woTransSerialID = IDs;	                                                        \n" +
                "  \n" +
                "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                                                         \n" +
                "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                                                        \n" +
                "				ORDER BY woTransSerialID DESC LIMIT 1;                                                        \n" +
                "  \n" +
                "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                                                        \n" +
                "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	                                                  \n" +
                "				/* [S] - Add Time line log for delete production serial from work order operation */ 	                                                \n" +
                "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                                                  \n" +
                "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "				/* [E] - Add Time line log for delete production serial from work order operation */ 				                                                \n" +
                "  \n" +
                "			ELSE                                                         \n" +
                "				SELECT 'not allowed';                                                        \n" +
                "			END IF;                                                        \n" +
                "  \n" +
                "  \n" +
                "		ELSE                                                         \n" +
                "  \n" +
                "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                                                        \n" +
                "			WHERE woTransSerialID = IDs;	                                                        \n" +
                "  \n" +
                "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                                                         \n" +
                "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                                                        \n" +
                "			ORDER BY woTransSerialID DESC LIMIT 1;                                                        \n" +
                "  \n" +
                "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                                                        \n" +
                "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;                                                \n" +
                "			/* [S] - Add Time line log for delete production serial from work order operation */ 	                                                \n" +
                "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                                                  \n" +
                "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                  \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                                                  \n" +
                "			/* [E] - Add Time line log for delete production serial from work order operation */                                                    \n" +
                "  \n" +
                "		END IF;	                                                        \n" +
                "  \n" +
                "  \n" +
                "	ELSE                                                         \n" +
                "		SELECT 'not allowed';		                                                        \n" +
                "	END IF;	   \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "Drop PROCEDURE if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN                                                        \n" +
                "IF tableName=\"employees\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                             \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"eco_type_category\" THEN                                                        \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"eco_type_values\" THEN                                                        \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"customers\" THEN                                                        \n" +
                "     CAll Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"certificate_standards\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"department\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"genericcategory\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"equipment\" THEN                                                        \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                          \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"parts\" THEN                                                       \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"master_templates\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                   \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"operations\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"roles\" THEN                                                       \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"standard_class\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"dataelement\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                   \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"component\" THEN                                                        \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                       \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                         \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_operation\" THEN                                                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"entity\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"salesordermst\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                        \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"shippedassembly\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"assemblymst\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                        \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);   \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"br_label_template\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);   \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"measurement_types\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"uoms\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"jobtypes\" THEN                                                        \n" +
                "   CAll Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfqtype\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"reasonmst\" THEN                                                        \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                        \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                        \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                        \n" +
                "	call Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                        \n" +
                "	call Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"shipping_request\" THEN                                                        \n" +
                "    call Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                        \n" +
                "     call Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"component_standard\" THEN                                                        \n" +
                "    call Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"component_standard_class\" THEN                                                        \n" +
                "      call  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                 \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                        \n" +
                "	  call Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                   \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"requirement\" THEN                                                        \n" +
                "	call Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                   \n" +
                "	call Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"customer_addresses\" THEN                                                        \n" +
                "   call Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfqforms\" THEN                                                        \n" +
                "	call Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                        \n" +
                "	call Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"who_bought_who\" THEN                                                        \n" +
                "  call Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                        \n" +
                "   call Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                        \n" +
                "  call Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                        \n" +
                "  call Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                        \n" +
                "  call Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                    \n" +
                "IF tableName=\"cost_category\" THEN                                                        \n" +
                "	call Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                    \n" +
                "END IF;                     \n" +
                "IF tableName=\"chartypemst\" THEN                                                        \n" +
                "	call Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                 \n" +
                "END IF;    \n" +
                "IF tableName=\"countrymst\" THEN    \n" +
                "	 call Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (18,'2.00','V1',' Delete Sp Change - Mona '," + userid + ");"
            );
            break;
        case 18:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "CREATE PROCEDURE `Sproc_checkDelete_dataelement`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		-- UNION ALL                                                        \n" +
                "		-- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                                                        \n" +
                "		UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                             \n" +
                "        UNION ALL                            \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND fieldType=1 and  dataElementId IN(',IDs,') LIMIT 1)                             \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "  \n" +
                "  \n" +
                "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                                                        \n" +
                "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                                                        \n" +
                "			FROM dataelement dl WHERE dl.dataElementID = IDs;                                                        \n" +
                "  \n" +
                "  \n" +
                "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                                                        \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                         \n" +
                "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                                                        \n" +
                "				PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "				EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                                                        \n" +
                "  \n" +
                "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                                                        \n" +
                "  \n" +
                "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                                                         \n" +
                "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                                                        \n" +
                "  \n" +
                "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                         \n" +
                "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                                                         \n" +
                "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                                                        \n" +
                "							 and deletedAt IS NULL ');		                                                        \n" +
                "					     PREPARE stmt4 FROM @SQL4;                                                        \n" +
                "				             EXECUTE stmt4;                                                        \n" +
                "					END IF;	                                                        \n" +
                "				END IF;                                                        \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                                                        \n" +
                "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                                                         \n" +
                "						    AND deletedAt IS NULL');		                                                        \n" +
                "				PREPARE stmt5 FROM @SQL5;                                                        \n" +
                "				EXECUTE stmt5;                                                        \n" +
                "  \n" +
                "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                         \n" +
                "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                                                        \n" +
                "				PREPARE stmt6 FROM @SQL6;                                                        \n" +
                "				EXECUTE stmt6;                                                        \n" +
                "  \n" +
                "  \n" +
                "			END IF;                                                        \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM tempDataElement;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempDataElement;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempDataElement;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (19,'2.00','V1',' create Sproc_checkDelete_dataelement - Mona '," + userid + ");"
            );
            break;
        case 19:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2018  *********************************** */
                "ALTER TABLE component_sid_stock MODIFY uid  VARCHAR(14);  \n" +
                "UPDATE genericcategory SET gencCategoryCode=NULL WHERE categoryType='Equipment Ownership';  \n" +
                "update genericcategory set gencCategoryCode=NULL where categoryType='Operation Type';  \n" +
                "update genericcategory set gencCategoryCode=NULL where categoryType='Standard Type';  \n" +
                "update genericcategory set gencCategoryCode=NULL where categoryType='Equipment Possession';  \n" +
                /* **************************** Add Script Version -> 26-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (20,'2.00','V1',' Update script - Vaibhav '," + userid + ");"
            );
            break;
        case 20:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "Drop PROCEDURE if exists `Sproc_GetShippingRequest`;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippingRequest`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT sr.id, sr.requestDate, sr.requestedBy, sr.note,  \n" +
                "        CONCAT(emp.firstName , ' ' , emp.lastName) fullName,   \n" +
                "        CASE WHEN sr.status = 'P' THEN 'Published' ELSE 'Draft' END `status`,  \n" +
                "        CASE WHEN EXISTS(SELECT 1 FROM shipping_request_empdet sred WHERE sred.shippingRequestID = sr.id AND IFNULL(sred.isDeleted, 0) = 0  \n" +
                "        AND IFNULL(sred.isAck, 0) = 1) THEN 'Verified' ELSE 'Pending' END 'verificationStatus'  \n" +
                "        FROM shipping_request sr  \n" +
                "        JOIN employees emp ON sr.requestedBy = emp.id and IFNULL(emp.isDeleted, 0) = 0  \n" +
                "        WHERE IFNULL(sr.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"requestDate DESC\");  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (21,'2.00','V1','change in Sproc_GetShippingRequest sp- Mona '," + userid + ");"
            );
            break;
        case 21:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		          \n" +
                "    IN pWhereClause VARCHAR(16383),          \n" +
                "    IN puserID VARCHAR(50),    \n" +
                "    IN pnickName VARCHAR(20),    \n" +
                "    IN pprefix VARCHAR(20),    \n" +
                "    IN puid VARCHAR(20)    \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;          \n" +
                "	DECLARE v_delimiter VARCHAR(10);          \n" +
                "	DECLARE v_length INT;           \n" +
                "	DECLARE v_fieldType INT;               \n" +
                "	DECLARE v_entityId INT;          \n" +
                "	DECLARE v_dataElementId INT;          \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);          \n" +
                "	DECLARE delimiter_value VARCHAR(1000);          \n" +
                "	DECLARE strLabel VARCHAR(2000);          \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);          \n" +
                "	DECLARE StaticField VARCHAR(100);          \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';          \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');          \n" +
                "	DECLARE plen,slen INT;          \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;          \n" +
                "	DECLARE pbr_Separator VARCHAR(10);      \n" +
                "	DECLARE barcode_type_id INT;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;           \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error          \n" +
                "	(          \n" +
                "	     errorText NVARCHAR(2000),          \n" +
                "	     IsSuccess VARCHAR (2)               \n" +
                "	);          \n" +
                "	-- get data from barcode templates with seprator          \n" +
                "	block1: BEGIN     \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND           \n" +
                "		pWhereClause REGEXP tempregexp;    \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    \n" +
                "		SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID        \n" +
                "                WHERE b.deletedAt IS NULL AND `status`=1 AND          \n" +
                "		pWhereClause REGEXP tempregexp;     \n" +
                "		ELSE    \n" +
                "		SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template         \n" +
                "                WHERE deletedAt IS NULL AND `status`=1 AND           \n" +
                "		pWhereClause REGEXP tempregexp;     \n" +
                "		END IF;    \n" +
                "  \n" +
                "	END block1;          \n" +
                "  \n" +
                "	block2: BEGIN          \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found          \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR          \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter       \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND           \n" +
                "			pWhereClause REGEXP tempregexp) AND deletedAt IS NULL;          \n" +
                "  \n" +
                "		-- declare exit loop if data not found          \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;          \n" +
                "  \n" +
                "	        -- if any record match found than  check for delimiter and its value          \n" +
                "		IF (pbr_template_ID > 0) THEN          \n" +
                "			-- create temporary table for deliemeter and component dataelement          \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(          \n" +
                "				v_entityId INT,          \n" +
                "				v_dataElementId INT,          \n" +
                "				delimiter_value VARCHAR(200)          \n" +
                "			);          \n" +
                "  \n" +
                "			-- create temporary table for separator string values          \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					          \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255) );          \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string          \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND           \n" +
                "				pWhereClause REGEXP tempregexp;          \n" +
                "  \n" +
                "			-- open cursor          \n" +
                "			OPEN barcodeMatch_cursor;          \n" +
                "  \n" +
                "			-- set str label as whereclause          \n" +
                "			SET strLabel=pWhereClause;          \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match          \n" +
                "			IF(@pprefixlength > 0) THEN				          \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));          \n" +
                " 			 END IF;          \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match           \n" +
                "			 IF(@psuffixlength > 0) THEN          \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);          \n" +
                "			 END IF;			          \n" +
                "  \n" +
                "			-- insert all values after seprator split           \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");          \n" +
                "			PREPARE stmt1 FROM @SQL;	          \n" +
                "			EXECUTE stmt1;          \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material          \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';          \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template          \n" +
                "			barcodeMatch_loop:LOOP          \n" +
                "				-- get all five selected values          \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType,v_dataElementId,v_displayOrder;          \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match          \n" +
                "				IF exit_loop THEN          \n" +
                "					CLOSE barcodeMatch_cursor;          \n" +
                "					LEAVE barcodeMatch_loop;          \n" +
                "				END IF;          \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string          \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT SeparateValue into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');          \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	          \n" +
                "				EXECUTE stmtdelimiter;          \n" +
                "  \n" +
                "				-- get delimiter values from string          \n" +
                "			        SET delimiter_value=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));          \n" +
                "  \n" +
                "				-- check for field type is static or dynamic          \n" +
                "				-- if static field than check for mfg code and mfg part number          \n" +
                "				IF v_fieldType = 0  THEN          \n" +
                "					-- component_sid_stock           \n" +
                "					-- get static field name from barcode table delimiter data element id          \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);            \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys          \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN          \n" +
                "						SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value AND deletedAt IS NULL ;                          \n" +
                "						IF  @componentCount > 0 THEN          \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				          \n" +
                "						END IF;          \n" +
                "					END IF;           \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys          \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN          \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value AND deletedAt IS NULL;                          \n" +
                "					END IF;           \n" +
                "  \n" +
                "					SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);          \n" +
                "					SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');           \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;          \n" +
                "  \n" +
                "				ELSE             \n" +
                "					-- component_sid_stock_dataelement_Values            \n" +
                "					-- dynamic fields              \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE           \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;          \n" +
                "  \n" +
                "					INSERT INTO tempDelimiterTbl (v_dataElementId,v_entityId,delimiter_value)           \n" +
                "						VALUES (v_dataElementId,v_entityId,delimiter_value);           \n" +
                "  \n" +
                "				END IF;          \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;          \n" +
                "  \n" +
                "			-- check if mfg and component both found than           \n" +
                "			IF (@mfgCount > 0 AND @componentCount > 0) THEN          \n" +
                "  \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;          \n" +
                "                                   IF @Mfgmatched = 0  THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2);							          \n" +
                "				   END IF;									          \n" +
                "			 ELSE 			          \n" +
                "				IF @mfgCount = 0 THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess) VALUES ('Mfgcode is not found',3);          \n" +
                "		                END IF;	          \n" +
                "				IF @componentCount = 0 THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess) VALUES ('Mfg partNO is not found',4);          \n" +
                "				END IF;	          \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN            \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess) VALUES ('Mfgcode and MfgpartNO is not Found',0);          \n" +
                "			        END IF;						          \n" +
                "			END IF;				          \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN          \n" +
                "  \n" +
                "				-- must call statements in sequence          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		          \n" +
                "  \n" +
                "				 PREPARE stmt1 FROM @SQL1;          \n" +
                "				 EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @sql2 = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"',',nickName=','\"',pnickName,'\"',' where id=',LAST_INSERT_ID());	           \n" +
                "  \n" +
                "			          PREPARE stmt2 FROM @SQL2;          \n" +
                "				  EXECUTE stmt2;	          \n" +
                "				-- select @sql1,@sql2;          \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess) VALUES (LAST_INSERT_ID(),1);          \n" +
                "  \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN			             \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)           \n" +
                "					SELECT LAST_INSERT_ID(),t.v_entityId,t.v_dataElementId,t.delimiter_value,puserID FROM tempDelimiterTbl t; 			          \n" +
                "					-- select * from tempDelimiterTbl;          \n" +
                "				END IF;            \n" +
                "  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess FROM temp_MfgCodeAndPartNO_error;          \n" +
                "  \n" +
                "  \n" +
                "			ELSE           \n" +
                "				SELECT errorText,IsSuccess FROM temp_MfgCodeAndPartNO_error;          \n" +
                "			END IF;          \n" +
                "  \n" +
                "		ELSE          \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess) VALUES           \n" +
                "				('Barcode template is not matched please, add new template',0);	          \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess FROM temp_MfgCodeAndPartNO_error;			          \n" +
                "  \n" +
                "		END IF;          \n" +
                "  \n" +
                "	END block2;                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (22,'2.00','V1','Update sp Sproc_MatchBarCodeAndSaveDelimiters-Champak'," + userid + ");"
            );
            break;
        case 22:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`,isEncrypted,isActive,createdBy,isEditable,description) VALUES  \n" +
                "('BartenderServer','192.168.0.247','Printer',0,1,'1',1,'Bartender Published Server IP');  \n" +
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`,isEncrypted,isActive,createdBy,isEditable,description) VALUES  \n" +
                "('BartenderServerPort','9031','Printer',0,1,'1',1,'Bartender Published Server Port');  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (23,'2.00','V1','Added configuration param for Printer-Champak'," + userid + ");"
            );
            break;
        case 23:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`,isEncrypted,isActive,createdBy,isEditable,description) VALUES  \n" +
                "('PricingStatusUpdateTime','30',NULL,0,1,'1',1,'Pricing status upadte time in minutes');  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_UpdatePendingAutoPricingStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePendingAutoPricingStatus`(      \n" +
                "	IN pstatus INT(11),      \n" +
                "	IN message TEXT,  \n" +
                "	IN statustime INT(11)    \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	# rfq_assy_autopricingstatus    \n" +
                "	UPDATE rfq_assy_autopricingstatus     \n" +
                "	SET `status`=pstatus,    \n" +
                "		`msg`=message,    \n" +
                "		`statusChangeDate`=UTC_TIMESTAMP()     \n" +
                "	WHERE statusChangeDate < DATE_SUB(UTC_TIMESTAMP(),INTERVAL statustime MINUTE) AND `status`=0;  \n" +
                "	#select record to update on ui screen  \n" +
                "	SELECT rfqAssyID AssyID,pricingApiName PricingAPIName,`status` `Status`,userID UserID,consolidateID ConsolidateID    FROM     \n" +
                "	 rfq_lineitem_autopricingstatus WHERE statusChangeDate < DATE_SUB(UTC_TIMESTAMP(),INTERVAL statustime MINUTE) AND `status`=0;    \n" +
                "  \n" +
                "	# rfq_lineitem_autopricingstatus    \n" +
                "	UPDATE rfq_lineitem_autopricingstatus     \n" +
                "		SET `status`=pstatus,    \n" +
                "		msg=message,    \n" +
                "		statusChangeDate=UTC_TIMESTAMP()     \n" +
                "	WHERE statusChangeDate < DATE_SUB(UTC_TIMESTAMP(),INTERVAL statustime MINUTE) AND `status`=0;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (24,'2.00','V1','Update sp Sproc_UpdatePendingAutoPricingStatus-Champak '," + userid + ");"
            );
            break;
        case 24:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                        \n" +
                "	IN ppageIndex INT(11),                                        \n" +
                "	IN precordPerPage INT(11),                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN rfqAssyID INT(11),                                        \n" +
                "	IN puserID INT (11)                                        \n" +
                "    )  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                        \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "	    SET @SQLString = NULL;                                        \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                            \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "		ELSE                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                         \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                        \n" +
                "			SET pWhereClause = '1=1' ;                                        \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "		ELSE	                                        \n" +
                "			SET rowNumWhere = '';                                        \n" +
                "		END IF;	                                        \n" +
                "		SELECT                                        \n" +
                "                     GROUP_CONCAT(DISTINCT                                        \n" +
                "				CONCAT(                                        \n" +
                "					'Max((IF(ra.requestQty = ''',                                        \n" +
                "						ra.requestQty,                                        \n" +
                "					''', rq.finalPrice, null))) AS ''',                                        \n" +
                "						ra.requestQty,''''                                        \n" +
                "					)                                        \n" +
                "					) INTO @SQLString                                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                        \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                        \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                        \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                        \n" +
                "					SELECT                                         \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                          \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                      \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                        \n" +
                "					(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                             \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0   \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId   \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                        \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                         \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN            \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                          \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                         \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                        \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                        \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                        \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                        \n" +
                "  \n" +
                "			ELSE                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                        \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,refDesig,                       \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                        \n" +
                "					(SELECT                                     \n" +
                "						(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'','''') END)     \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "						component c ON rla.mfgpnid=c.id                                     \n" +
                "						LEFT JOIN mfgcodemst mg ON                                      \n" +
                "						c.mfgCodeID=mg.id     \n" +
                "						left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                "						LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "						left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "						right outer join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "						WHERE rla.isdeleted=0) AS component,                                                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\".\"),\"N/A\"),''@@@'', c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                         \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                         \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                        \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                        \n" +
                "			END IF;                                        \n" +
                "			PREPARE stmt FROM @SQLStatement;                                        \n" +
                "			EXECUTE stmt;	                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                        \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "			EXECUTE query1;                                        \n" +
                "			DEALLOCATE PREPARE query1;                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "			EXECUTE query2;                                        \n" +
                "			DEALLOCATE PREPARE query2;                                        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                        \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                        \n" +
                "			EXECUTE query3;                                        \n" +
                "			DEALLOCATE PREPARE query3;                                        \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                        \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                        \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                        \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                        \n" +
                "			EXECUTE query4;                                        \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                   \n" +
                "					rq.finalPrice,                   \n" +
                "					rq.unitPrice,                  \n" +
                "					rq.supplier,                  \n" +
                "					rq.min,                  \n" +
                "					rq.mult,                   \n" +
                "					rq.selectedMpn,                   \n" +
                "					rq.selectionMode,                  \n" +
                "					rq.qtyID,                                   \n" +
                "					rq.currentStock,                                  \n" +
                "					rq.leadTime,                                   \n" +
                "					rq.supplierStock,                                  \n" +
                "					rq.grossStock,                                      \n" +
                "					rq.selectedPIDCode,                                    \n" +
                "					rq.pricingSuppliers,                    \n" +
                "					c.noOfPosition ApiNoOfPosition,                      \n" +
                "					ct.qpa,                   \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                             \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                  \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                     \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                     \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                            \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                \n" +
                "			EXECUTE query5;                                                \n" +
                "			DEALLOCATE PREPARE query5;                                       \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                                 \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                                 \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                                \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                    \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                     \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                     \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                      \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                      \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                        \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                            \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                \n" +
                "			EXECUTE query6;                                                \n" +
                "			DEALLOCATE PREPARE query6;                                                    \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	    SET @SQLString = NULL;                             \n" +
                "	    SET @HavingClause = NULL;                             \n" +
                "	    SET SESSION group_concat_max_len = 150000;                              \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                  \n" +
                "		SELECT                                  \n" +
                "                      GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "ELSE          \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "END), null))) AS ''',                                  \n" +
                "						ra.requestQty,''''                                  \n" +
                "					)                                  \n" +
                "					),                            \n" +
                "  \n" +
                "                      GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "ELSE          \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))          \n" +
                "END), null))) > 0'                                     \n" +
                "					) SEPARATOR ' OR '                                 \n" +
                "					)                            \n" +
                "				INTO @SQLString, @HavingClause                             \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                    \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,  \n" +
                "                 	(SELECT                                   \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                     \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                              \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id LEFT JOIN        \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                          \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                  \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                  \n" +
                "			END IF;                              \n" +
                "			PREPARE stmt FROM @SQLStatement;                                  \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT             \n" +
                "					ra.requestQty,             \n" +
                "					rq.finalPrice,             \n" +
                "					rq.unitPrice,            \n" +
                "					rq.supplier,             \n" +
                "					rq.selectedMpn,             \n" +
                "					rq.selectionMode,            \n" +
                "					rq.qtyID,                      \n" +
                "					rq.selectedPIDCode,                        \n" +
                "					rq.min,             \n" +
                "					rq.mult,                      \n" +
                "					rq.currentStock,                      \n" +
                "					rq.leadTime,                       \n" +
                "					rq.supplierStock,                      \n" +
                "					rq.grossStock,                     \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition,               \n" +
                "					c.partStatus,            \n" +
                "					rq.selectedPIDCode,                     \n" +
                "					rq.consolidateID             \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                               \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0            \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN rfqAssyID INT(11),                                \n" +
                "	IN puserID INT (11)                          \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	    SET @SQLString = NULL;                             \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "		ELSE                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                 \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                \n" +
                "			SET pWhereClause = '1=1' ;                                \n" +
                "		END IF;	                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "		ELSE	                                \n" +
                "			SET rowNumWhere = '';                                \n" +
                "		END IF;	                                \n" +
                "		SELECT                        \n" +
                "                     GROUP_CONCAT(DISTINCT                        \n" +
                "				CONCAT(                        \n" +
                "					'Max((IF(ra.requestQty = ''',                        \n" +
                "						ra.requestQty,                        \n" +
                "					''', rq.finalPrice, null))) AS ''',                        \n" +
                "						ra.requestQty,''''                        \n" +
                "					)                        \n" +
                "					) INTO @SQLString                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                              \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                \n" +
                "					SELECT                                 \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                  \n" +
                "						rp.partTypeName, rm.name,                 \n" +
                "						rl.qpa,                    \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                      \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                      \n" +
                "						co.ltbDate AS LTBDate,              \n" +
                "						co.eolDate AS EOLDate,      \n" +
                "                        	(SELECT                                   \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                            \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,   \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                              \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN        \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0               \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                 \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                        \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                         \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                       \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                       \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                       \n" +
                "						(SELECT gencCategoryID FROM genericcategory                       \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\"))))                      \n" +
                "					GROUP BY rl.lineID');                                  \n" +
                "			END IF;                  \n" +
                "			PREPARE stmt FROM @SQLStatement;                              \n" +
                "			EXECUTE stmt;	                                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                \n" +
                "			EXECUTE query1;                                \n" +
                "			DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                \n" +
                "			EXECUTE query2;                                \n" +
                "			DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                \n" +
                "			EXECUTE query3;                                \n" +
                "			DEALLOCATE PREPARE query3;                                \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                        \n" +
                "				SELECT ra.requestQty,                         \n" +
                "					rq.finalPrice,                         \n" +
                "					rq.unitPrice,                        \n" +
                "					rq.supplier,                         \n" +
                "					rq.selectedMpn,                         \n" +
                "					rq.selectionMode,                        \n" +
                "					rq.qtyID,                         \n" +
                "					rq.consolidateID,                    \n" +
                "					rq.selectedPIDCode,                      \n" +
                "					rq.min,          \n" +
                "					rq.mult,                        \n" +
                "					rq.qtyID,                           \n" +
                "					rq.consolidateID,                     \n" +
                "					rq.currentStock,                    \n" +
                "					rq.leadTime,                     \n" +
                "					rq.supplierStock,                    \n" +
                "					rq.grossStock,                      \n" +
                "					rq.pricingSuppliers,              \n" +
                "					c.noOfPosition ApiNoOfPosition,             \n" +
                "					c.partStatus          \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                          \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                          \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                         \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                \n" +
                "			EXECUTE query4;                                \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	    SET @SQLString = NULL;                                      \n" +
                "	    SET @HavingClause = NULL;                          \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                          \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                                    \n" +
                "                      GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					),                                \n" +
                "			GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                    \n" +
                "					) SEPARATOR ' OR '                                   \n" +
                "					)                                \n" +
                "				INTO @SQLString, @HavingClause                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                       \n" +
                "					  (SELECT gc.gencCategoryName FROM genericcategory gc                        \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                        \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                        \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                                       \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                        \n" +
                "						(SELECT                                   \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                             \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                       \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                     \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id                \n" +
                "						LEFT JOIN genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                      \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                    \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                  \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                         \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                         \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                              \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                         \n" +
                "			END IF;                                 \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                        \n" +
                "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                            \n" +
                "				SELECT requestQty,                             \n" +
                "					finalPrice,                             \n" +
                "					unitPrice,                            \n" +
                "					supplier,                       \n" +
                "					rq.min,rq.mult,                           \n" +
                "					selectedMpn,                             \n" +
                "					selectionMode,                            \n" +
                "					selectedPIDCode,                          \n" +
                "					qtyID,                             \n" +
                "					consolidateID,                       \n" +
                "					currentStock,                      \n" +
                "					leadTime,                       \n" +
                "					supplierStock,                      \n" +
                "					grossStock,                        \n" +
                "					pricingSuppliers,                             \n" +
                "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus                            \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                 \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                             \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereColumnName VARCHAR(255),                              \n" +
                "	IN pWhereFilterValue VARCHAR(255),                             \n" +
                "	IN pCustomWhere INT(11),                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                                    \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "	    DECLARE defaultOrder INT(11);                  \n" +
                "	    SET defaultOrder = 0;                  \n" +
                "	    SET @PERString = NULL;                          \n" +
                "	    SET SESSION group_concat_max_len = 150000;                    \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	    ELSE                              \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                    \n" +
                "		IF(defaultOrder > 0) THEN                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                    \n" +
                "		ELSE                   \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                  \n" +
                "		END IF;	                   \n" +
                "	    END IF;                  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                          \n" +
                "			GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					))                        \n" +
                "					INTO @PERString                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                    \n" +
                "  \n" +
                "			IF(@PERString IS NOT NULL) THEN                             \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                      \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                 \n" +
                "					(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                               \n" +
                "					(SELECT                                   \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                          \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                      \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                component c ON rla.mfgpnid=c.id   LEFT JOIN             \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                               \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                     \n" +
                "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                 \n" +
                "  \n" +
                "			ELSE                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,                                 \n" +
                "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID)                                          \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                 \n" +
                "                                     component c ON rla.mfgpnid=c.id                                 \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                  \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                      \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"))AS mfgPn                                     \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                     \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                    \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                    \n" +
                "			END IF;                                          \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                       \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                  \n" +
                "			IF pCustomWhere IS NOT NULL THEN                         \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                  \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                    \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                    \n" +
                "				EXECUTE query_Temp;                         \n" +
                "				DEALLOCATE PREPARE query_Temp;                        \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                  \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                  \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                    \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                    \n" +
                "				EXECUTE query_Temp1;                           \n" +
                "				DEALLOCATE PREPARE query_Temp1;                         \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                  \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                  \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                    \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                    \n" +
                "				EXECUTE query_Temp2;                           \n" +
                "				DEALLOCATE PREPARE query_Temp2;                    \n" +
                "  \n" +
                "				# Concate                   \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                  \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                  \n" +
                "			ELSE                   \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			END IF;                        \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                             \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                   \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                    \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                    \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                 \n" +
                "					rq.finalPrice,                 \n" +
                "					rq.unitPrice,                \n" +
                "					rq.supplier,                \n" +
                "					rq.min,                \n" +
                "					rq.mult,                 \n" +
                "					rq.selectedMpn,                 \n" +
                "					rq.selectionMode,                \n" +
                "					rq.qtyID,                               \n" +
                "					rq.currentStock,                              \n" +
                "					rq.leadTime,                               \n" +
                "					rq.supplierStock,                              \n" +
                "					rq.grossStock,                                  \n" +
                "					rq.selectedPIDCode,                    \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition,                    \n" +
                "					ct.qpa,                 \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                         \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                         \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                 \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                        \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                            \n" +
                "			EXECUTE query5;                                            \n" +
                "			DEALLOCATE PREPARE query5;                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                             \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                             \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                            \n" +
                "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice                          \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                                \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                        \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                            \n" +
                "			EXECUTE query6;                                            \n" +
                "			DEALLOCATE PREPARE query6;                                                \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                         \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                    \n" +
                "	    SET @SQLString = NULL;                                 \n" +
                "	    SET @HavingClause = NULL;                                     \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                                    \n" +
                "                      GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					),                          \n" +
                "		GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'((Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                          \n" +
                "					) SEPARATOR ' OR '                                        \n" +
                "					)          \n" +
                "				INTO @SQLString,@HavingClause                               \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                         \n" +
                "					  rl.qpa, ra.requestQty, rq.currentStock, rq.apiLead, rq.mult, rq.min,   \n" +
                "                      	(SELECT                                   \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)   \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                           \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "component c ON rla.mfgpnid=c.id                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0  \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,             \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                    \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                         \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id  LEFT JOIN         \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                                  \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                   \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>15 AND  (CASE WHEN (rq.apiLead IS NULL OR rl.numOfPosition IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "  \n" +
                "					(GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > IFNULL(rq.currentStock,0))              \n" +
                "					ELSE              \n" +
                "					(GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))>IFNULL(rq.currentStock,0))              \n" +
                "				          END) AND  rl.rfqAssyID=',rfqAssyID,'                           \n" +
                "					GROUP BY rl.lineID');                             \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                    \n" +
                "			END IF;                           \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                            \n" +
                "				SELECT ra.requestQty,                              \n" +
                "					rq.finalPrice,                             \n" +
                "					rq.unitPrice,                            \n" +
                "					rq.supplier,                             \n" +
                "					rq.selectedMpn,                             \n" +
                "					rq.selectionMode,                           \n" +
                "					rq.selectedPIDCode,                          \n" +
                "					rq.min,              \n" +
                "					rq.mult,                            \n" +
                "					rq.qtyID,                               \n" +
                "					rq.consolidateID,                         \n" +
                "					rq.currentStock,                        \n" +
                "					rq.leadTime,                         \n" +
                "					rq.supplierStock,                        \n" +
                "					rq.grossStock ,                       \n" +
                "					rq.pricingSuppliers,              \n" +
                "					c.noOfPosition ApiNoOfPosition                \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                            \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                             \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "						rl.id,                    \n" +
                "						rl.isPurchase,                     \n" +
                "						rl.lineID,                    \n" +
                "						rl.rfqLineItemID,                    \n" +
                "						rl.rfqAssyBomID,                    \n" +
                "						rl.rfqAssyID,                                    \n" +
                "						rp.partTypeName,                    \n" +
                "						rm.name,                        \n" +
                "						rq.selectedPIDCode,                    \n" +
                "						(select rohsComplient from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,                    \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                        \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                        \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                        \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                    \n" +
                "						(SELECT GROUP_CONCAT(DISTINCT(REPLACE(c.PIDCode,'','',\"..\")),''@@@'', c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',c.id)                    \n" +
                "						FROM component c  \n" +
                "						WHERE PIDCode <> rq.selectedPIDCode AND c.id IN                     \n" +
                "							(SELECT componentID                     \n" +
                "								FROM component_alternatepn                     \n" +
                "								WHERE aliasgroupID IN                     \n" +
                "								(SELECT altenetgroupID                     \n" +
                "									FROM component                     \n" +
                "									WHERE PIDCode = rq.selectedPIDCode                     \n" +
                "									AND deletedAt IS NULL AND isDeleted=0                    \n" +
                "								)                    \n" +
                "							)                    \n" +
                "						) AS AlternatePN                    \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                          \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                           \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                                \n" +
                "						WHERE rl.isdeleted=0           \n" +
                "						AND rq.selectedMpn IS NOT NULL                    \n" +
                "						AND rl.rfqAssyID=',rfqAssyID,' AND                  \n" +
                "  \n" +
                "						(CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN            \n" +
                "  \n" +
                "					GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))            \n" +
                "					ELSE            \n" +
                "					GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))            \n" +
                "				          END            \n" +
                "  \n" +
                "						OR rq.selectedMpn IN (SELECT mfgPN FROM component                         \n" +
                "							WHERE deletedAt IS NULL                     \n" +
                "							AND partstatus IN (                    \n" +
                "									SELECT gencCategoryID FROM genericcategory                     \n" +
                "									WHERE deletedAt IS NULL                     \n" +
                "									AND gencCategoryName IN (\"Not For New Design\",\"Obsolete\")                    \n" +
                "								)                    \n" +
                "							))                    \n" +
                "						GROUP BY rl.lineID');                                    \n" +
                "			PREPARE stmt FROM @SQLStatement;                 \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                          \n" +
                "				SELECT ra.requestQty,                           \n" +
                "					rq.finalPrice,                           \n" +
                "					rq.unitPrice,                          \n" +
                "					rq.supplier,                           \n" +
                "					rq.selectedMpn,                           \n" +
                "					rq.selectionMode,                          \n" +
                "					rq.qtyID,                           \n" +
                "					rq.consolidateID,                      \n" +
                "					rq.selectedPIDCode,                          \n" +
                "					c.partStatus              \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                           \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(    \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "    IN pWhereClause VARCHAR(16383),                  \n" +
                "    IN prfqAssyID INT,              \n" +
                "    IN prfqAssyBOMID INT              \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "	IF(prfqAssyBOMID IS NOT NULL) THEN                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "			select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                  \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,                  \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                     \n" +
                "			com.PIDCode,group_concat(distinct(com.PIDCode),'@@@',com.rohsComplient)as mfgPN,    \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN group_concat(distinct(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',ccl.isDocumentUpload)   \n" +
                "			ELSE group_concat(distinct(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',0) END) as component     \n" +
                "			from rfq_lineitems_alternatepart ra                  \n" +
                "			left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0              \n" +
                "			left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id              \n" +
                "			left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                  \n" +
                "			left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                  \n" +
                "			left join uoms um on um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                \n" +
                "			left join component com on com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0      \n" +
                "			LEFT join rfq_assemblies ras on ras.id= prfqAssyID and ras.isDeleted = 0    \n" +
                "			left join rfqforms rf on rf.id = ras.rfqrefID and rf.isDeleted = 0   \n" +
                "			left join component_customer_loa ccl on ccl.componentID = com.id and ccl.customerID = rf.customerId   \n" +
                "			where rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 and ra.rfqAssyID = prfqAssyID                 \n" +
                "			group by ra.rfqLineItemsID order by rl.lineID;                  \n" +
                "	ELSE                  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "			select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                  \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,                  \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                  \n" +
                "			com.PIDCode,group_concat(distinct(com.PIDCode),'@@@',com.rohsComplient)as mfgPN,     \n" +
                "            (CASE WHEN ccl.isDocumentUpload = 1 THEN group_concat(distinct(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',ccl.isDocumentUpload)   \n" +
                "			ELSE group_concat(distinct(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',0) END) as component    \n" +
                "			from rfq_lineitems_alternatepart ra                  \n" +
                "			left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0              \n" +
                "			left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id              \n" +
                "			left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                  \n" +
                "			left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                 \n" +
                "			left join uoms um on um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0               \n" +
                "			left join component com on com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0   \n" +
                "			LEFT join rfq_assemblies ras on ras.id= prfqAssyID and ras.isDeleted = 0    \n" +
                "			left join rfqforms rf on rf.id = ras.rfqrefID and rf.isDeleted = 0   \n" +
                "			left join component_customer_loa ccl on ccl.componentID = com.id and ccl.customerID = rf.customerId               \n" +
                "			where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0                  \n" +
                "			group by ra.rfqLineItemsID order by rl.lineID;      \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "		SET pWhereClause = '1=1' ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "	ELSE	                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                  \n" +
                "	EXECUTE query1;                  \n" +
                "	DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (25,'2.00','V1','import component LOA table and sp changes  - shirish'," + userid + ");"
            );
            break;
        case 25:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-11-2018  *********************************** */
                "DROP TABLE IF EXISTS `rfq_connectertypemst`;  \n" +
                "CREATE TABLE `rfq_connectertypemst` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `name` varchar(255) NOT NULL,  \n" +
                "  `description` varchar(255) DEFAULT NULL,  \n" +
                "  `isActive` tinyint(1) DEFAULT '1',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `systemGenerated` tinyint(1) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;  \n" +

                "ALTER TABLE component ADD connecterTypeID INT NULL;  \n" +
                "ALTER TABLE component  \n" +
                "ADD CONSTRAINT FK_component_connecterTypeID  \n" +
                "FOREIGN KEY (connecterTypeID) REFERENCES rfq_connectertypemst(id);  \n" +

                "INSERT INTO page_detail(pageName,RO,RW,menuRoute,pageRoute,pageURL,menuName,hasChild,orderBy,tabLevel,iconClass,isActive,createdBy,parentPageID) VALUES  \n" +
                "('Connecter Type',0,0,'admin.rfqsetting.connectertype','app.connectertype','rfqsetting/connectertype','Connecter Type',0,'5.00',2,'mdi mdi-ethernet',1,'1',  \n" +
                "(SELECT a.pageID FROM page_detail a WHERE pagename='RFQ Setting' LIMIT 1));  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfq_connectertypemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_connectertypemst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                 \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND connecterTypeID IN(',IDs,') LIMIT 1)                            \n" +
                "            UNION ALL                               \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_fields_genericalias_mst\" else \"\" end as msg FROM component_fields_genericalias_mst WHERE deletedAt IS NULL AND refTableName = ''rfq_connectertypemst'' AND refId IN(',IDs,') LIMIT 1)                            \n" +
                "            ) q');                                                          \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                                                          \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update   rfq_connectertypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',UTC_DATE(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM temprfqpartcategory;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM temprfqpartcategory;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE temprfqpartcategory;      \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveConnecterTypeList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveConnecterTypeList`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "			SELECT * ,     \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive'         \n" +
                "					WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`,    \n" +
                "		  (SELECT GROUP_CONCAT(alias) AS aliaslist FROM component_fields_genericalias_mst WHERE IFNULL(isdeleted,0) = 0 AND  refTableName ='rfq_connectertypemst' AND refId=`rfq_connectertypemst`.`id` GROUP BY refId ) AS aliaslist    \n" +
                "			FROM `rfq_connectertypemst`        \n" +
                "			WHERE `deletedAt` IS NULL        \n" +
                "		;        \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;        \n" +
                "		ELSE        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "			SET pWhereClause = '1=1' ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "		ELSE	        \n" +
                "			SET rowNumWhere = '';        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* to get total count of rows */        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN                                                          \n" +
                "IF tableName=\"employees\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                               \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"eco_type_category\" THEN                                                          \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"eco_type_values\" THEN                                                          \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"customers\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"certificate_standards\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"department\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"genericcategory\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"equipment\" THEN                                                          \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                            \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"parts\" THEN                                                         \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"master_templates\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"operations\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"roles\" THEN                                                         \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"standard_class\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"dataelement\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"component\" THEN                                                          \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                         \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                           \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_operation\" THEN                                                         \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"entity\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"salesordermst\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                          \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"shippedassembly\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"assemblymst\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);     \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"br_label_template\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);     \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"measurement_types\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"uoms\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"jobtypes\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfqtype\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"reasonmst\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                          \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                          \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                          \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                  \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                          \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"shipping_request\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"component_standard\" THEN                                                          \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"component_standard_class\" THEN                                                          \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                   \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                          \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                     \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"requirement\" THEN                                                          \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                     \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"customer_addresses\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfqforms\" THEN                                                          \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                          \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"who_bought_who\" THEN                                                          \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                          \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                          \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                          \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;                                                    \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                          \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                      \n" +
                "IF tableName=\"cost_category\" THEN                                                          \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                      \n" +
                "END IF;                       \n" +
                "IF tableName=\"chartypemst\" THEN                                                          \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                   \n" +
                "END IF;      \n" +
                "IF tableName=\"countrymst\" THEN      \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN      \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;          \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(        \n" +
                " IN tabquery LONGTEXT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "   SET @sqlQ=tabquery;        \n" +
                "   PREPARE stmt1 FROM @sqlQ;         \n" +
                "   EXECUTE stmt1;          \n" +
                "   DEALLOCATE PREPARE stmt1;         \n" +
                "  \n" +
                "  SELECT '1';        \n" +
                "  \n" +
                "    block1:BEGIN        \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table          \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;        \n" +
                "        DECLARE current_mfgpn VARCHAR (50);          \n" +
                "	DECLARE  current_mfgcode INT ;        \n" +
                "	DECLARE current_Ismfg TINYINT;          \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);          \n" +
                "        DECLARE current_component INT ;        \n" +
                "        DECLARE current_ComponentID INT;        \n" +
                "	DECLARE maxvalueid INT;        \n" +
                "        DECLARE aliasgroup INT;        \n" +
                "  \n" +
                "     -- 2 declare the cursor operation          \n" +
                "    DECLARE component_cursor CURSOR FOR          \n" +
                "    SELECT id FROM tempComponent ORDER BY id;        \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows          \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;          \n" +
                "     -- open the cursor          \n" +
                "    OPEN component_cursor;        \n" +
                "     -- start looping          \n" +
                "     component_loop: LOOP            \n" +
                "     -- read the name from next row into the variables           \n" +
                "     FETCH component_cursor INTO current_ComponentID;          \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,           \n" +
                "     -- close the cursor and exit the loop if it has.          \n" +
                "       IF exit_loop THEN	         \n" +
                "				 LEAVE component_loop;          \n" +
                "			END IF;          \n" +
                "        SELECT '1';        \n" +
                "  \n" +
                "	SET current_mfgpn='';        \n" +
                "	SET current_mfgcode=1;        \n" +
                "	SET current_mfgPartNumber='';        \n" +
                "	SET current_Ismfg=1;        \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;        \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN        \n" +
                "	 -- insert new component         \n" +
                "	INSERT INTO component (PID,categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,        \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,maxQty,mfgcodeID,mfgPN,mfgPNDescription,        \n" +
                "	minimum,minOperatingTemp,minQty,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,        \n" +
                "	partStatusText,partTypeID,PIDCode,rohsComplient,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID)        \n" +
                "	SELECT RAND(),categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,        \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,maxQty,mfgcodeID,mfgPN,mfgPNDescription,        \n" +
                "	minimum,minOperatingTemp,minQty,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,        \n" +
                "	partStatusText,partTypeID,PIDCode,rohsComplient,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID        \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;        \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;        \n" +
                "	 -- check component is manufacturer part or distributor part        \n" +
                "                   IF(current_Ismfg=1) THEN        \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;        \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)        \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');        \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,pid=current_component,updatedBy='Auto' WHERE id=current_component;        \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;        \n" +
                "                    ELSE        \n" +
                "  \n" +
                "			UPDATE component SET pid=current_component,updatedBy='Auto' WHERE id=current_component;        \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;        \n" +
                "			IF(aliasgroup IS NOT NULL) THEN        \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)        \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');        \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;        \n" +
                "		        END IF;        \n" +
                "		    END IF;        \n" +
                "      END IF;        \n" +
                "  \n" +
                "    END LOOP component_loop;        \n" +
                "      CLOSE component_cursor;        \n" +
                "    END  block1;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (26,'2.00','V1','Task #4300 related db changes-Champak'," + userid + ");"
            );
            break;
        case 26:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2018  *********************************** */
                "ALTER TABLE users ADD printerID INT;  \n" +
                "  \n" +
                "ALTER TABLE users  \n" +
                "ADD CONSTRAINT FK_users_printerID  \n" +
                "FOREIGN KEY (printerID) REFERENCES genericcategory(gencCategoryID);  \n" +
                "  \n" +
                "ALTER TABLE users ADD printFormatID INT;  \n" +
                "  \n" +
                "ALTER TABLE users  \n" +
                "ADD CONSTRAINT FK_users_printFormatID  \n" +
                "FOREIGN KEY (printFormatID) REFERENCES genericcategory(gencCategoryID);  \n" +
                /* **************************** Add Script Version -> 30-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (27,'2.00','V1','Alter table user-Champak'," + userid + ");"
            );
            break;
        case 27:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "UPDATE `rfq_lineitems_headers` SET `isAvlMfgField`='1' WHERE `name`='Rev';  \n" +
                "UPDATE `rfq_lineitems_headers` SET `isAvlField`='1' WHERE `name`='UOM';  \n" +
                "UPDATE `rfq_lineitems_headers` SET `isAvlField`='1' WHERE `name`='CPN Descr';  \n" +
                /* **************************** Add Script Version -> 03-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (28,'2.00','V1','rfq_lineitems_headers field changes for CustomerAVL import - shirish'," + userid + ");"
            );
            break;
        case 28:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "ALTER TABLE rfq_assemblies ADD COLUMN bomStatus INT(11);   \n" +
                "ALTER TABLE `rfq_rohsmst` ADD COLUMN rohsIcon VARCHAR(255);  \n" +
                "DELETE FROM rfq_rohsmst;  \n" +
                "INSERT INTO `rfq_rohsmst` (`id`,`name`, `description`, `isActive`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `deletedBy`, `deletedAt`, `isDeleted`, `systemGenerated`, `rohsIcon`) VALUES(0,'Non-RoHS',NULL,'1','1','2018-10-09 00:00:00',NULL,'2018-11-24 05:55:42',NULL,NULL,'0','1','non-rohs-big.png');  \n" +
                "INSERT INTO `rfq_rohsmst` (`id`,`name`, `description`, `isActive`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `deletedBy`, `deletedAt`, `isDeleted`, `systemGenerated`, `rohsIcon`) VALUES(1,'RoHS',NULL,'1','1','2018-10-09 00:00:00',NULL,'2018-11-24 05:56:05',NULL,NULL,'0','1','rohs-big.png');  \n" +
                "INSERT INTO `rfq_rohsmst` (`id`,`name`, `description`, `isActive`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `deletedBy`, `deletedAt`, `isDeleted`, `systemGenerated`, `rohsIcon`) VALUES(2,'RoHS-Exempt',NULL,'1','1','2018-10-09 00:00:00',NULL,'2018-11-24 05:56:15',NULL,NULL,'0','1','rohs-exempt-big.png');  \n" +
                "UPDATE rfq_rohsmst SET id = 0 WHERE NAME='Non-RoHS';  \n" +
                "ALTER TABLE rfq_assemblies CHANGE `isRoHS` `RoHSStatusID` INT(11);  \n" +
                "ALTER TABLE rfq_assemblies   \n" +
                "ADD CONSTRAINT FK_rfq_assemblies_RoHSStatusID   \n" +
                "FOREIGN KEY (RoHSStatusID) REFERENCES rfq_rohsmst(id);  \n" +
                "ALTER TABLE component CHANGE `rohsComplient` `RoHSStatusID` INT(11);  \n" +
                "ALTER TABLE component   \n" +
                "ADD CONSTRAINT FK_component_RoHSStatusID   \n" +
                "FOREIGN KEY (RoHSStatusID) REFERENCES rfq_rohsmst(id);  \n" +
                "ALTER TABLE Workorder CHANGE `isLeadFree` `RoHSStatusID` INT(11);  \n" +
                "ALTER TABLE Workorder   \n" +
                "ADD CONSTRAINT FK_Workorder_RoHSStatusID   \n" +
                "FOREIGN KEY (RoHSStatusID) REFERENCES rfq_rohsmst(id);  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                    \n" +
                "	IN ppageIndex INT(11),                    \n" +
                "	IN precordPerPage INT(11),                    \n" +
                "	IN pOrderBy VARCHAR(255),	                    \n" +
                "    IN pWhereClause VARCHAR(16383)                        \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "	/* DECLARE SQLStatement varchar(255); */                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "  \n" +
                "    SELECT COUNT(rl.id) AS lineItemCount, rf.id,             \n" +
                "    (SELECT asb.id FROM rfq_assy_bom asb WHERE IFNULL(asb.isdeleted,0) = 0 AND asb.reqAssyID = ra.id  GROUP BY rf.id) AS assyBomID,                   \n" +
                "	ra.assemblyDescription, ra.assemblyNumber, ra.assemblyRev,          \n" +
                "	(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,         \n" +
                "	ro.name AS `rohsComplientConvertedValue`,  \n" +
                "    -- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'                       \n" +
                "	-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,              \n" +
                "	(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'No'                       \n" +
                "	WHEN (`ra`.`isRepeat` = 1) THEN 'Yes' ELSE '' END) AS `isRepeat`,              \n" +
                "	job.name AS JobType, rt.name AS OrderType, cu.companyName AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,                    \n" +
                "	rf.quoteindate, rf.quoteduedate, ra.id rfqAssyID, ra.quotePriority                \n" +
                "    FROM rfqforms rf                    \n" +
                "	INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0                    \n" +
                "	INNER JOIN jobtype job ON job.id = rf.jobtypeID AND IFNULL(job.isdeleted,0) = 0                    \n" +
                "	INNER JOIN rfqtype rt ON rt.id = rf.rfqtypeID AND IFNULL(rt.isdeleted,0) = 0                    \n" +
                "	INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0                    \n" +
                "	INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0   \n" +
                "	INNER JOIN rfq_rohsmst ro ON ra.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                    \n" +
                "	JOIN rfq_assy_bom ab ON ab.reqAssyID = ra.id AND IFNULL(ab.isdeleted,0) = 0 AND ab.bomNumber IS NULL                \n" +
                "    LEFT OUTER JOIN rfq_lineitems rl ON rl.rfqAssyID = ra.id AND rl.isDeleted = 0                 \n" +
                "	WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id ;                    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "	ELSE                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "	ELSE	                    \n" +
                "		SET rowNumWhere = '';                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;         \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                    \n" +
                "	PREPARE query3 FROM @SQLStatement3;                    \n" +
                "	EXECUTE query3;                    \n" +
                "	DEALLOCATE PREPARE query3;         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(	              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),	              \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pIsMFG TINYINT(1)            \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "	/* DECLARE SQLStatement varchar(255); */              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "		SELECT DISTINCT co.*, mf.mfgCode,            \n" +
                "		gc.gencCategoryName AS partStatusValue,              \n" +
                "		mf.mfgType,            \n" +
                "		vu_co.MFGPN AS AliasMFGPN,            \n" +
                "		vu_co.mfgcode AS AliasMFGCode,            \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,     \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 0) THEN 'No'               \n" +
                "					WHEN (`co`.`isGoodPart` = 1) THEN 'Yes' ELSE '' END) AS `isGoodPartValue`      \n" +
                "		FROM component co                \n" +
                "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0             \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus         \n" +
                "		 LEFT JOIN component_alias ca ON ca.aliasgroupID = co.aliasgroupID AND IFNULL(ca.isDeleted,0)=0 AND ca.deletedAt IS NULL      \n" +
                "		LEFT JOIN vu_component_dist_comp_details vu_co ON ca.aliasgroupID = vu_co.aliasgroupID            \n" +
                "		LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0    \n" +
                "	-- LEFT JOIN vu_component_dist_comp_details vu_co ON co.id = vu_co.compID             \n" +
                "		WHERE IFNULL(co.isdeleted,0) = 0;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF pIsMFG THEN            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );              \n" +
                "	ELSE            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );              \n" +
                "	END IF;            \n" +
                "  \n" +
                "	/* to get total count of rows */              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );              \n" +
                "	PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);           \n" +
                "    PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;              \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(    \n" +
                "IN pGoodPart VARCHAR(100),    \n" +
                "IN pSearch VARCHAR(100),    \n" +
                "IN pId INT(11),    \n" +
                "IN pMfgType VARCHAR(50),    \n" +
                "IN pRoHSStatusID VARCHAR(100),    \n" +
                "IN pMfgCodeId INT(11)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                " SELECT * FROM    \n" +
                " (  \n" +
                "	 SELECT `com`.`id`,     \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,    \n" +
                "		`com`.`PID`,   \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		`com`.`altenetgroupID`,   \n" +
                "		`com`.`isGoodPart`,   \n" +
                "		`com`.`RoHSStatusID`,   \n" +
                "		`com`.`rohsgroupID`,    \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,   \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`    \n" +
                "	FROM `component` AS `com`   \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND     \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))     \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))    \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))    \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a    \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))  \n" +
                ");    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                \n" +
                "	IN prfqAssyID INT        \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                        \n" +
                "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,                     \n" +
                "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                    \n" +
                "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription, a.customerPartDesc,                     \n" +
                "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,          \n" +
                "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,a.qpaDesignatorColorPriority, a.mergeLines, a.lineMergeStep, a.isBuyDNPQty          \n" +
                "            FROM rfq_lineitems a          \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0          \n" +
                "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0          \n" +
                "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id AND IFNULL(c.isDeleted,0) = 0              \n" +
                "    WHERE IFNULL(a.isDeleted,0) = 0 AND a.rfqAssyID = prfqAssyID;                    \n" +
                "  \n" +
                "	SELECT b.id, b.lineID, b.qpa, b.refDesig,                 \n" +
                "			(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                \n" +
                "            a.mfgCodeID, a.mfgPN, a.mfgPNID,                    \n" +
                "			(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                \n" +
                "            a.distMfgCodeID, a.distPN, a.distMfgPNID,                     \n" +
                "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription, b.customerPartDesc,              \n" +
                "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,                     \n" +
                "            b.dnpQty, b.dnpDesig, a.id AS rfqAlternatePartID, b.qpaDesignatorStep,b.qpaDesignatorColorPriority, b.isBuyDNPQty,          \n" +
                "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,                  \n" +
                "            a.org_distributor, a.org_distPN,                  \n" +
                "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.mfgGoodPartMappingStep, a.mfgPNStep, a.distPNStep,                \n" +
                "            a.badMfgPN, a.distGoodPartMappingStep, a.nonRohsStep, a.oneRohsComponentStep, a.epoxyStep,            \n" +
                "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,              \n" +
                "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,            \n" +
                "            (SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,          \n" +
                "            CASE WHEN           \n" +
                "            (co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR          \n" +
                "            EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)          \n" +
                "            THEN 1 ELSE 0 END isObsolete,          \n" +
                "            co.mfgPNDescription,      \n" +
                "            (SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment      \n" +
                "            FROM rfq_lineitems_alternatepart a                      \n" +
                "			LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                       \n" +
                "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                \n" +
                "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0                \n" +
                "			JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                              \n" +
                "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                    \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(              \n" +
                "	IN pRfqAssyID INT(11)         \n" +
                "	)  \n" +
                "BEGIN                  \n" +
                "	DECLARE pValidCount INT(11);              \n" +
                "	DECLARE pInValidCount INT(11);              \n" +
                "	DECLARE pTotalCount INT(11);          \n" +
                "	DECLARE pProgress INT(11);              \n" +
                "	SET pProgress = 0;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS             \n" +
                "	SELECT  p.rfqLineItemsID,         \n" +
                "	CASE         \n" +
                "		WHEN         \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND         \n" +
                "			IFNULL(l.miscStep,0) = 1 AND         \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND         \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND         \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND         \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND         \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND         \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND         \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND         \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND         \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND         \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND         \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND         \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND        \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND  \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1        \n" +
                "		THEN 1        \n" +
                "		ELSE 0        \n" +
                "	END AS ProgressCount        \n" +
                "	FROM rfq_lineitems l        \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id        \n" +
                "	WHERE l.rfqAssyID = pRfqAssyID AND l.isDeleted = 0 AND p.isDeleted = 0;        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;        \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;        \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN        \n" +
                "		SET pProgress = 0;        \n" +
                "	ELSE         \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SELECT pProgress;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(      \n" +
                "	IN ppageIndex INT(11),                    \n" +
                "	IN precordPerPage INT(11),                    \n" +
                "	IN pOrderBy VARCHAR(255),                    \n" +
                "    IN pWhereClause VARCHAR(16383),                    \n" +
                "    IN prfqAssyID INT,                \n" +
                "    IN prfqAssyBOMID INT                \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE pOffset INT(11);                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "  \n" +
                "	IF(prfqAssyBOMID IS NOT NULL) THEN                  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                    \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                    \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                       \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,      \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',ccl.isDocumentUpload)     \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component     \n" +
                "			FROM rfq_lineitems_alternatepart ra                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                    \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                    \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                  \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0        \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0      \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0    \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0   \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0   \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0    \n" +
                "			WHERE rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 AND ra.rfqAssyID = prfqAssyID                   \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;                    \n" +
                "	ELSE                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                    \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                    \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                    \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,    \n" +
                "            (CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.rohsComplient,'###',com.id,'###',ccl.isDocumentUpload)     \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component     \n" +
                "			FROM rfq_lineitems_alternatepart ra                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                    \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                   \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                 \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0     \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0      \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0     \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0    \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0   \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0    \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0                    \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;        \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "	ELSE                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "		SET pWhereClause = '1=1' ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "	ELSE	                    \n" +
                "		SET rowNumWhere = '';                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                        \n" +
                "	IN ppageIndex INT(11),                                        \n" +
                "	IN precordPerPage INT(11),                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN rfqAssyID INT(11),                                        \n" +
                "	IN puserID INT (11)                                        \n" +
                "    )  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                        \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "	    SET @SQLString = NULL;                                        \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                            \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "		ELSE                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                         \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                        \n" +
                "			SET pWhereClause = '1=1' ;                                        \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "		ELSE	                                        \n" +
                "			SET rowNumWhere = '';                                        \n" +
                "		END IF;	                                        \n" +
                "		SELECT                                        \n" +
                "                     GROUP_CONCAT(DISTINCT                                        \n" +
                "				CONCAT(                                        \n" +
                "					'Max((IF(ra.requestQty = ''',                                        \n" +
                "						ra.requestQty,                                        \n" +
                "					''', rq.finalPrice, null))) AS ''',                                        \n" +
                "						ra.requestQty,''''                                        \n" +
                "					)                                        \n" +
                "					) INTO @SQLString                                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                        \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                        \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                        \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                        \n" +
                "					SELECT                                         \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                          \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                      \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                        \n" +
                "					(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                              \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                " LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0        \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                        \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                         \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN            \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0   \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                          \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                         \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                        \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                        \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                        \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                        \n" +
                "  \n" +
                "			ELSE                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                        \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,refDesig                       \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                        \n" +
                "					(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'','''') END)                                               \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0    \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\".\"),\"N/A\"),''@@@'', c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                         \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                         \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                        \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                        \n" +
                "			END IF;                                        \n" +
                "			PREPARE stmt FROM @SQLStatement;                                        \n" +
                "			EXECUTE stmt;	                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                        \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "			EXECUTE query1;                                        \n" +
                "			DEALLOCATE PREPARE query1;                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "			EXECUTE query2;                                        \n" +
                "			DEALLOCATE PREPARE query2;                                        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                        \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                        \n" +
                "			EXECUTE query3;                                        \n" +
                "			DEALLOCATE PREPARE query3;                                        \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                        \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                        \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                        \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                        \n" +
                "			EXECUTE query4;                                        \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                   \n" +
                "					rq.finalPrice,                   \n" +
                "					rq.unitPrice,                  \n" +
                "					rq.supplier,                  \n" +
                "					rq.min,                  \n" +
                "					rq.mult,                   \n" +
                "					rq.selectedMpn,                   \n" +
                "					rq.selectionMode,                  \n" +
                "					rq.qtyID,                                   \n" +
                "					rq.currentStock,                                  \n" +
                "					rq.leadTime,                                   \n" +
                "					rq.supplierStock,                                  \n" +
                "					rq.grossStock,                                      \n" +
                "					rq.selectedPIDCode,                                    \n" +
                "					rq.pricingSuppliers,                    \n" +
                "					c.noOfPosition ApiNoOfPosition,                      \n" +
                "					ct.qpa,                   \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                             \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                  \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                     \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                     \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                            \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                \n" +
                "			EXECUTE query5;                                                \n" +
                "			DEALLOCATE PREPARE query5;                                       \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                                 \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                                 \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                                \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                    \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                     \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                     \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                      \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                      \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                        \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                            \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                \n" +
                "			EXECUTE query6;                                                \n" +
                "			DEALLOCATE PREPARE query6;                                                    \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                          \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSummaryTermsAndCondition` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSummaryTermsAndCondition`(	    \n" +
                "	    IN prfqAssyID INT       \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	SELECT (SELECT `name` FROM rfq_rohsmst  WHERE id = RoHSStatusID) AS additional     \n" +
                "        FROM rfq_assemblies    \n" +
                "        WHERE id=prfqAssyID    \n" +
                "        UNION     \n" +
                "        SELECT    \n" +
                "        rt.name  additional    \n" +
                "        FROM rfq_assemblies_requirement rr     \n" +
                "        LEFT JOIN requirement rt ON rr.requirementID=rt.id AND rr.rfqassyid=prfqAssyID AND rr.isdeleted=0    \n" +
                "         UNION    \n" +
                "      SELECT CONCAT(cs.fullName,'|',rc.classname) additional FROM standard_class rc     \n" +
                "LEFT JOIN certificate_standards cs ON rc.certificateStandardID=cs.certificatestandardid    \n" +
                "AND rc.isdeleted=0 WHERE FIND_IN_SET(rc.classid,(SELECT GROUP_CONCAT(standardClassIds) FROM rfq_assy_standard_class_detail WHERE rfqassyid=prfqAssyID AND isdeleted=0))    \n" +
                "UNION    \n" +
                "SELECT CONCAT('Main Standard','|',cs.fullName) additional FROM rfq_assy_standard_class_detail ras     \n" +
                "LEFT JOIN certificate_standards cs ON ras.standardid=cs.certificatestandardid AND cs.isdeleted=0    \n" +
                "WHERE ras.rfqassyid=prfqAssyID AND ras.standardClassIds IS NULL AND ras.isdeleted=0;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(          \n" +
                " IN tabquery LONGTEXT          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "   SET @sqlQ=tabquery;          \n" +
                "   PREPARE stmt1 FROM @sqlQ;           \n" +
                "   EXECUTE stmt1;            \n" +
                "   DEALLOCATE PREPARE stmt1;           \n" +
                "  \n" +
                "  SELECT '1';          \n" +
                "  \n" +
                "    block1:BEGIN          \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table            \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;          \n" +
                "        DECLARE current_mfgpn VARCHAR (50);            \n" +
                "	DECLARE  current_mfgcode INT ;          \n" +
                "	DECLARE current_Ismfg TINYINT;            \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);            \n" +
                "        DECLARE current_component INT ;          \n" +
                "        DECLARE current_ComponentID INT;          \n" +
                "	DECLARE maxvalueid INT;          \n" +
                "        DECLARE aliasgroup INT;          \n" +
                "  \n" +
                "     -- 2 declare the cursor operation            \n" +
                "    DECLARE component_cursor CURSOR FOR            \n" +
                "    SELECT id FROM tempComponent ORDER BY id;          \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows            \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;            \n" +
                "     -- open the cursor            \n" +
                "    OPEN component_cursor;          \n" +
                "     -- start looping            \n" +
                "     component_loop: LOOP              \n" +
                "     -- read the name from next row into the variables             \n" +
                "     FETCH component_cursor INTO current_ComponentID;            \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,             \n" +
                "     -- close the cursor and exit the loop if it has.            \n" +
                "       IF exit_loop THEN	           \n" +
                "				 LEAVE component_loop;            \n" +
                "			END IF;            \n" +
                "        SELECT '1';          \n" +
                "  \n" +
                "	SET current_mfgpn='';          \n" +
                "	SET current_mfgcode=1;          \n" +
                "	SET current_mfgPartNumber='';          \n" +
                "	SET current_Ismfg=1;          \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;          \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN          \n" +
                "	 -- insert new component           \n" +
                "	INSERT INTO component (PID,categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,          \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,maxQty,mfgcodeID,mfgPN,mfgPNDescription,          \n" +
                "	minimum,minOperatingTemp,minQty,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,          \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID)          \n" +
                "	SELECT RAND(),categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,          \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,maxQty,mfgcodeID,mfgPN,mfgPNDescription,          \n" +
                "	minimum,minOperatingTemp,minQty,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,          \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID          \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;          \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;          \n" +
                "	 -- check component is manufacturer part or distributor part          \n" +
                "                   IF(current_Ismfg=1) THEN          \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;          \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)          \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');          \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,pid=current_component,updatedBy='Auto' WHERE id=current_component;          \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;          \n" +
                "                    ELSE          \n" +
                "  \n" +
                "			UPDATE component SET pid=current_component,updatedBy='Auto' WHERE id=current_component;          \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;          \n" +
                "			IF(aliasgroup IS NOT NULL) THEN          \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)          \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');          \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;          \n" +
                "		        END IF;          \n" +
                "		    END IF;          \n" +
                "      END IF;          \n" +
                "  \n" +
                "    END LOOP component_loop;          \n" +
                "      CLOSE component_cursor;          \n" +
                "    END  block1;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN rfqAssyID INT(11),                                      \n" +
                "	IN puserID INT (11)                                \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                      \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                  \n" +
                "	    SET @SQLString = NULL;                                        \n" +
                "	    SET @HavingClause = NULL;                            \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                            \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "		ELSE                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                       \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                      \n" +
                "			SET pWhereClause = '1=1' ;                                      \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "		ELSE	                                      \n" +
                "			SET rowNumWhere = '';                                      \n" +
                "		END IF;	                                      \n" +
                "		SELECT                                      \n" +
                "                      GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', rq.finalPrice, null))) AS ''',                                      \n" +
                "						ra.requestQty,''''                                      \n" +
                "					)                                      \n" +
                "					),                                  \n" +
                "			GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                      \n" +
                "					) SEPARATOR ' OR '                                     \n" +
                "					)                                  \n" +
                "				INTO @SQLString, @HavingClause                                  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                      \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                      \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                    \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                      \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                      \n" +
                "					SELECT                                       \n" +
                "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                         \n" +
                "					  (SELECT gc.gencCategoryName FROM genericcategory gc                          \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                          \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                          \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                                         \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                          \n" +
                "						(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                             \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id  \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0   \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0     \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                         \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'',ro.name,''@@@'',ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                  \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                       \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id                  \n" +
                "						LEFT JOIN genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                        \n" +
                "						LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0      						  \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                      \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                      \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                      \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                      \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                    \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                           \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                           \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                                \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                           \n" +
                "			END IF;                                   \n" +
                "			PREPARE stmt FROM @SQLStatement;                                      \n" +
                "			EXECUTE stmt;	                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                      \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "			EXECUTE query1;                                      \n" +
                "			DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "			EXECUTE query2;                                      \n" +
                "			DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                          \n" +
                "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                                      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "			EXECUTE query3;                                      \n" +
                "			DEALLOCATE PREPARE query3;                                      \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                              \n" +
                "				SELECT requestQty,                               \n" +
                "					finalPrice,                               \n" +
                "					unitPrice,                              \n" +
                "					supplier,                         \n" +
                "					rq.min,rq.mult,                             \n" +
                "					selectedMpn,                               \n" +
                "					selectionMode,                              \n" +
                "					selectedPIDCode,                            \n" +
                "					qtyID,                               \n" +
                "					consolidateID,                         \n" +
                "					currentStock,                        \n" +
                "					leadTime,                         \n" +
                "					supplierStock,                        \n" +
                "					grossStock,                          \n" +
                "					pricingSuppliers,                               \n" +
                "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus                              \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                   \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                               \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                      \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                      \n" +
                "			EXECUTE query4;                                      \n" +
                "			DEALLOCATE PREPARE query4;                                      \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                        \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereColumnName VARCHAR(255),                                \n" +
                "	IN pWhereFilterValue VARCHAR(255),                               \n" +
                "	IN pCustomWhere INT(11),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN rfqAssyID INT(11),                                      \n" +
                "	IN puserID INT (11)                                      \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "	    DECLARE pOffset INT(11);                                      \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "	    DECLARE defaultOrder INT(11);                    \n" +
                "	    SET defaultOrder = 0;                    \n" +
                "	    SET @PERString = NULL;                            \n" +
                "	    SET SESSION group_concat_max_len = 150000;                      \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	    ELSE                                \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                      \n" +
                "		IF(defaultOrder > 0) THEN                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                      \n" +
                "		ELSE                     \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                    \n" +
                "		END IF;	                     \n" +
                "	    END IF;                    \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                      \n" +
                "			SET pWhereClause = '1=1' ;                                      \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "		ELSE	                                      \n" +
                "			SET rowNumWhere = '';                                      \n" +
                "		END IF;	                                      \n" +
                "		SELECT                            \n" +
                "			GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                      \n" +
                "						ra.requestQty,''''                                      \n" +
                "					))                          \n" +
                "					INTO @PERString                          \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                      \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                      \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                      \n" +
                "  \n" +
                "			IF(@PERString IS NOT NULL) THEN                               \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                      \n" +
                "					SELECT                                       \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                        \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                   \n" +
                "					(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                 \n" +
                "					(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                           \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0        \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                      \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                        \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "                                component c ON rla.mfgpnid=c.id   LEFT JOIN               \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0  \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                                      \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                       \n" +
                "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                      \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                      \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                      \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                   \n" +
                "  \n" +
                "			ELSE                                      \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                      \n" +
                "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,                                   \n" +
                "					(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'','''') END)                                   \n" +
                "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                   \n" +
                "                                     component c ON rla.mfgpnid=c.id    \n" +
                "                                     LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                   \n" +
                "                                     LEFT JOIN mfgcodemst mg ON                                    \n" +
                "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                        \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"))AS mfgPn                                       \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                       \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                      \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                      \n" +
                "			END IF;                                            \n" +
                "			PREPARE stmt FROM @SQLStatement;                                      \n" +
                "			EXECUTE stmt;	                         \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                    \n" +
                "			IF pCustomWhere IS NOT NULL THEN                           \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                    \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                      \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                      \n" +
                "				EXECUTE query_Temp;                           \n" +
                "				DEALLOCATE PREPARE query_Temp;                          \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                    \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                    \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                      \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                      \n" +
                "				EXECUTE query_Temp1;                             \n" +
                "				DEALLOCATE PREPARE query_Temp1;                           \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                    \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                    \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                      \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                      \n" +
                "				EXECUTE query_Temp2;                             \n" +
                "				DEALLOCATE PREPARE query_Temp2;                      \n" +
                "  \n" +
                "				# Concate                     \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                    \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                    \n" +
                "			ELSE                     \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidatetemp where \", pWhereClause );                                      \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			END IF;                          \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                               \n" +
                "			EXECUTE query1;                                      \n" +
                "			DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                     \n" +
                "			EXECUTE query2;                                      \n" +
                "			DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "			EXECUTE query3;                                      \n" +
                "			DEALLOCATE PREPARE query3;                                      \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                      \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                      \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                      \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                      \n" +
                "			EXECUTE query4;                                      \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                   \n" +
                "					rq.finalPrice,                   \n" +
                "					rq.unitPrice,                  \n" +
                "					rq.supplier,                  \n" +
                "					rq.min,                  \n" +
                "					rq.mult,                   \n" +
                "					rq.selectedMpn,                   \n" +
                "					rq.selectionMode,                  \n" +
                "					rq.qtyID,                                 \n" +
                "					rq.currentStock,                                \n" +
                "					rq.leadTime,                                 \n" +
                "					rq.supplierStock,                                \n" +
                "					rq.grossStock,                                    \n" +
                "					rq.selectedPIDCode,                      \n" +
                "					rq.pricingSuppliers,                  \n" +
                "					c.noOfPosition ApiNoOfPosition,                      \n" +
                "					ct.qpa,                   \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                           \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                           \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                  \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                   \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                          \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                              \n" +
                "			EXECUTE query5;                                              \n" +
                "			DEALLOCATE PREPARE query5;                                     \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                               \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                               \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                              \n" +
                "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice                            \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                                  \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                          \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                              \n" +
                "			EXECUTE query6;                                              \n" +
                "			DEALLOCATE PREPARE query6;                                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                           \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                          \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                          \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                        \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	    SET @SQLString = NULL;                               \n" +
                "	    SET @HavingClause = NULL;                               \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                                    \n" +
                "                      GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN                \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))            \n" +
                "ELSE            \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))            \n" +
                "END), null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					),                              \n" +
                "  \n" +
                "                      GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', (CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN                \n" +
                "	((GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1))* IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))            \n" +
                "ELSE            \n" +
                "	((GREATEST(CEIL(((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)) )/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0)))            \n" +
                "END), null))) > 0'                                       \n" +
                "					) SEPARATOR ' OR '                                   \n" +
                "					)                              \n" +
                "				INTO @SQLString, @HavingClause                               \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "					  rl.id,rl.isPurchase, rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                      \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,    \n" +
                "                 	(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                               \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0     \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                     \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id LEFT JOIN          \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                            \n" +
                "					 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0  						  \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                    \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                  \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                    \n" +
                "			END IF;                                \n" +
                "			PREPARE stmt FROM @SQLStatement;                                    \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT               \n" +
                "					ra.requestQty,               \n" +
                "					rq.finalPrice,               \n" +
                "					rq.unitPrice,              \n" +
                "					rq.supplier,               \n" +
                "					rq.selectedMpn,               \n" +
                "					rq.selectionMode,              \n" +
                "					rq.qtyID,                        \n" +
                "					rq.selectedPIDCode,                          \n" +
                "					rq.min,               \n" +
                "					rq.mult,                        \n" +
                "					rq.currentStock,                        \n" +
                "					rq.leadTime,                         \n" +
                "					rq.supplierStock,                        \n" +
                "					rq.grossStock,                       \n" +
                "					rq.pricingSuppliers,                  \n" +
                "					c.noOfPosition ApiNoOfPosition,                 \n" +
                "					c.partStatus,              \n" +
                "					rq.selectedPIDCode,                       \n" +
                "					rq.consolidateID               \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                 \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0              \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	    SET @SQLString = NULL;                               \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                  \n" +
                "		SELECT                          \n" +
                "                     GROUP_CONCAT(DISTINCT                          \n" +
                "				CONCAT(                          \n" +
                "					'Max((IF(ra.requestQty = ''',                          \n" +
                "						ra.requestQty,                          \n" +
                "					''', rq.finalPrice, null))) AS ''',                          \n" +
                "						ra.requestQty,''''                          \n" +
                "					)                          \n" +
                "					) INTO @SQLString                          \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                    \n" +
                "						rp.partTypeName, rm.name,                   \n" +
                "						rl.qpa,                      \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                        \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                        \n" +
                "						co.ltbDate AS LTBDate,                \n" +
                "						co.eolDate AS EOLDate,        \n" +
                "                        	(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.rohsComplient,''###'',rla.mfgPNID,''###'',''0'') END)                                              \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0    \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,     \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.rohsComplient,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                     \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN          \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                 \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                   \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                          \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                           \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                  \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                         \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                         \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                         \n" +
                "						(SELECT gencCategoryID FROM genericcategory                         \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\"))))                        \n" +
                "					GROUP BY rl.lineID');                                    \n" +
                "			END IF;                    \n" +
                "			PREPARE stmt FROM @SQLStatement;                                \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                          \n" +
                "				SELECT ra.requestQty,                           \n" +
                "					rq.finalPrice,                           \n" +
                "					rq.unitPrice,                          \n" +
                "					rq.supplier,                           \n" +
                "					rq.selectedMpn,                           \n" +
                "					rq.selectionMode,                          \n" +
                "					rq.qtyID,                           \n" +
                "					rq.consolidateID,                      \n" +
                "					rq.selectedPIDCode,                        \n" +
                "					rq.min,            \n" +
                "					rq.mult,                          \n" +
                "					rq.qtyID,                             \n" +
                "					rq.consolidateID,                       \n" +
                "					rq.currentStock,                      \n" +
                "					rq.leadTime,                       \n" +
                "					rq.supplierStock,                      \n" +
                "					rq.grossStock,                        \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition,               \n" +
                "					c.partStatus            \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                            \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                           \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN rfqAssyID INT(11),                                      \n" +
                "	IN puserID INT (11)                                \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                      \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                      \n" +
                "	    SET @SQLString = NULL;                                   \n" +
                "	    SET @HavingClause = NULL;                                       \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "		ELSE                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                       \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                      \n" +
                "			SET pWhereClause = '1=1' ;                                      \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "		ELSE	                                      \n" +
                "			SET rowNumWhere = '';                                      \n" +
                "		END IF;	                                      \n" +
                "		SELECT                                      \n" +
                "                      GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                      \n" +
                "						ra.requestQty,''''                                      \n" +
                "					)                                      \n" +
                "					),                            \n" +
                "		GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'((Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                            \n" +
                "					) SEPARATOR ' OR '                                          \n" +
                "					)            \n" +
                "				INTO @SQLString,@HavingClause                                 \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                      \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                      \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                    \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                      \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                      \n" +
                "					SELECT                                       \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                           \n" +
                "					  rl.qpa, ra.requestQty, rq.currentStock, rq.apiLead, rq.mult, rq.min,     \n" +
                "                      	(SELECT                                     \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)     \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                               \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                     \n" +
                "component c ON rla.mfgpnid=c.id                                     \n" +
                "LEFT JOIN mfgcodemst mg ON                                      \n" +
                "c.mfgCodeID=mg.id     \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0   \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0         \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0    \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0    \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,               \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                      \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                           \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id  LEFT JOIN           \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0     \n" +
                "						  LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                        \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                     \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                      \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                      \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                      \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>15 AND  (CASE WHEN (rq.apiLead IS NULL OR rl.numOfPosition IS NULL OR rq.apiLead < rl.numOfPosition)THEN                \n" +
                "  \n" +
                "					(GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > IFNULL(rq.currentStock,0))                \n" +
                "					ELSE                \n" +
                "					(GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1))>IFNULL(rq.currentStock,0))                \n" +
                "				          END) AND  rl.rfqAssyID=',rfqAssyID,'                             \n" +
                "					GROUP BY rl.lineID');                               \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                      \n" +
                "			END IF;                             \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                      \n" +
                "			EXECUTE stmt;	                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                      \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "			EXECUTE query1;                                      \n" +
                "			DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "			EXECUTE query2;                                      \n" +
                "			DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                      \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                      \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                      \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "			EXECUTE query3;                                      \n" +
                "			DEALLOCATE PREPARE query3;                                      \n" +
                "  \n" +
                "  			SET @SQLStatement4 = CONCAT(\"                              \n" +
                "				SELECT ra.requestQty,                                \n" +
                "					rq.finalPrice,                               \n" +
                "					rq.unitPrice,                              \n" +
                "					rq.supplier,                               \n" +
                "					rq.selectedMpn,                               \n" +
                "					rq.selectionMode,                             \n" +
                "					rq.selectedPIDCode,                            \n" +
                "					rq.min,                \n" +
                "					rq.mult,                              \n" +
                "					rq.qtyID,                                 \n" +
                "					rq.consolidateID,                           \n" +
                "					rq.currentStock,                          \n" +
                "					rq.leadTime,                           \n" +
                "					rq.supplierStock,                          \n" +
                "					rq.grossStock ,                         \n" +
                "					rq.pricingSuppliers,                \n" +
                "					c.noOfPosition ApiNoOfPosition                  \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                              \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                              \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                               \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                      \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                      \n" +
                "			EXECUTE query4;                                      \n" +
                "			DEALLOCATE PREPARE query4;                                      \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                        \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN rfqAssyID INT(11),                                  \n" +
                "	IN puserID INT (11)                            \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "		ELSE                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                   \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "			SET pWhereClause = '1=1' ;                                  \n" +
                "		END IF;	                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "		ELSE	                                  \n" +
                "			SET rowNumWhere = '';                                  \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                  \n" +
                "					SELECT                                   \n" +
                "						rl.id,                    \n" +
                "						rl.isPurchase,                     \n" +
                "						rl.lineID,                    \n" +
                "						rl.rfqLineItemID,                    \n" +
                "						rl.rfqAssyBomID,                    \n" +
                "						rl.rfqAssyID,                                    \n" +
                "						rp.partTypeName,                    \n" +
                "						rm.name,                        \n" +
                "						rq.selectedPIDCode,                    \n" +
                "						(select RoHSStatusID from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,                    \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                        \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                        \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                        \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                    \n" +
                "						(SELECT GROUP_CONCAT(DISTINCT(REPLACE(c.PIDCode,'','',\"..\")),''@@@'', c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"))                    \n" +
                "						FROM component c     \n" +
                "						LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                       \n" +
                "						WHERE c.PIDCode <> rq.selectedPIDCode AND c.id IN                     \n" +
                "							(SELECT componentID                     \n" +
                "								FROM component_alternatepn                     \n" +
                "								WHERE aliasgroupID IN                     \n" +
                "								(SELECT altenetgroupID                     \n" +
                "									FROM component                     \n" +
                "									WHERE PIDCode = rq.selectedPIDCode                     \n" +
                "									AND deletedAt IS NULL AND isDeleted=0                    \n" +
                "								)                    \n" +
                "							)                    \n" +
                "						) AS AlternatePN                    \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem rl                                  \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                  \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                          \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                           \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                                \n" +
                "						WHERE rl.isdeleted=0           \n" +
                "						AND rq.selectedMpn IS NOT NULL                    \n" +
                "						AND rl.rfqAssyID=',rfqAssyID,' AND                  \n" +
                "  \n" +
                "						(CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN            \n" +
                "  \n" +
                "					GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))            \n" +
                "					ELSE            \n" +
                "					GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))            \n" +
                "				          END            \n" +
                "  \n" +
                "						OR rq.selectedMpn IN (SELECT mfgPN FROM component                         \n" +
                "							WHERE deletedAt IS NULL                     \n" +
                "							AND partstatus IN (                    \n" +
                "									SELECT gencCategoryID FROM genericcategory                     \n" +
                "									WHERE deletedAt IS NULL                     \n" +
                "									AND gencCategoryName IN (\"Not For New Design\",\"Obsolete\")                    \n" +
                "								)                    \n" +
                "							))                    \n" +
                "						GROUP BY rl.lineID');                                    \n" +
                "			PREPARE stmt FROM @SQLStatement;                 \n" +
                "			EXECUTE stmt;	                                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "			EXECUTE query1;                                  \n" +
                "			DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "			EXECUTE query2;                                  \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                  \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                  \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                  \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "			EXECUTE query3;                                  \n" +
                "			DEALLOCATE PREPARE query3;                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                          \n" +
                "				SELECT ra.requestQty,                           \n" +
                "					rq.finalPrice,                           \n" +
                "					rq.unitPrice,                          \n" +
                "					rq.supplier,                           \n" +
                "					rq.selectedMpn,                           \n" +
                "					rq.selectionMode,                          \n" +
                "					rq.qtyID,                           \n" +
                "					rq.consolidateID,                      \n" +
                "					rq.selectedPIDCode,                          \n" +
                "					c.partStatus              \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                           \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "			EXECUTE query4;                                  \n" +
                "			DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),	        \n" +
                "    IN pWhereClause VARCHAR(16383)            \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	/* DECLARE SQLStatement varchar(255); */        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "		SELECT wo.*, am.assemblyName, am.assemblyNickName, arm.revision,         \n" +
                "        (SELECT SUM(ws.poQty) FROM workorder_salesorder_details ws WHERE wo.woID = ws.woID AND IFNULL(ws.isDeleted,0) = 0 AND ws.deletedAt IS NULL) soPOQty ,        \n" +
                "        (CASE WHEN (`wo`.`woStatus` = 0) THEN 'Draft'         \n" +
                "		WHEN (`wo`.`woStatus` = 1) THEN 'Published' WHEN (`wo`.`woStatus` = 2) THEN 'Completed'        \n" +
                "		WHEN (`wo`.`woStatus` = 4) THEN 'Void' WHEN (`wo`.`woStatus` = 5) THEN 'Draft Review'        \n" +
                "		WHEN (`wo`.`woStatus` = 6) THEN 'Under Termination' WHEN (`wo`.`woStatus` = 7) THEN 'Terminated'        \n" +
                "		WHEN (`wo`.`woStatus` = 8) THEN 'Published Draft'        \n" +
                "		ELSE '' END) AS `woStatusConvertedValue` ,        \n" +
                "	`ro`.`name` AS `isLeadFreeConvertedValue` ,        \n" +
                "	(CASE WHEN (`wo`.`isSampleAvailable` = 0) THEN 'No'         \n" +
                "					WHEN (`wo`.`isSampleAvailable` = 1) THEN 'Yes' ELSE '' END) AS `isSampleAvailableConvertedValue` ,        \n" +
                "	(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'         \n" +
                "					WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,        \n" +
                "	(CASE WHEN (`wo`.`woType` = 1) THEN 'New'         \n" +
                "		WHEN (`wo`.`woType` = 2) THEN 'Repeat order with same revision' WHEN (`wo`.`woType` = 3) THEN 'Revision change'        \n" +
                "		WHEN (`wo`.`woType` = 4) THEN 'I-ECO' WHEN (`wo`.`woType` = 5) THEN 'C-ECO'        \n" +
                "		ELSE '' END) AS `woTypeConvertedText`,      \n" +
                "	(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'      \n" +
                "		ELSE 'No' END) AS `isHalt`,      \n" +
                "	(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN       \n" +
                "		(SELECT CONCAT(whu.reason, ' - Halt by ',       \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),       \n" +
                "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))       \n" +
                "			FROM workorder_trans_hold_unhold whu       \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0       \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL      \n" +
                "			ORDER BY whu.startDate DESC LIMIT 1)       \n" +
                "		ELSE        \n" +
                "		(SELECT CONCAT(whu.resumeReason, ' - Resume by ',       \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),       \n" +
                "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))      \n" +
                "			FROM workorder_trans_hold_unhold whu       \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0       \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL      \n" +
                "			ORDER BY whu.endDate DESC LIMIT 1)       \n" +
                "		END) AS reasonDetails,      \n" +
                "	(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0       \n" +
                "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount      \n" +
                "	FROM workorder wo        \n" +
                "        JOIN assemblymst am ON wo.assyID = am.id AND IFNULL(am.isdeleted,0) = 0        \n" +
                "        JOIN assembly_revisionmst arm ON wo.assyRevID = arm.id AND IFNULL(arm.isdeleted,0) = 0  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                \n" +
                "		WHERE IFNULL(wo.isdeleted,0) = 0;             \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyNickName DESC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;         \n" +
                "  \n" +
                "	/* to get total count of rows of workorder table */        \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM workorder where deletedAt IS NULL \" );        \n" +
                "	PREPARE query3 FROM @SQLStatement3;        \n" +
                "	EXECUTE query3;        \n" +
                "	DEALLOCATE PREPARE query3;        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	DECLARE pBomFCAVersion INT(11);           \n" +
                "	DECLARE pRfqAssID INT(11);           \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);          \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);          \n" +
                "	DECLARE pCompanyName VARCHAR(100);           \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT IFNULL(rfqAssyID,0) INTO pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;          \n" +
                "	SELECT IFNULL(bomFCAVersion,0) INTO pBomFCAVersion FROM rfq_assemblies WHERE id = pRfqAssID;          \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor\",          \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor PN\",          \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG\",          \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;	          \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG PN\",          \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN      \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MFG PN \";     \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);    \n" +
                "		END IF;  \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Deleted\",          \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.deletedBy);          \n" +
                "	END IF;	          \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Flextron Comment\",            \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN           \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL          \n" +
                "			THEN           \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;          \n" +
                "			ELSE           \n" +
                "				SET oldRfqAssyBom = '';          \n" +
                "		END IF;          \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL          \n" +
                "			THEN           \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;          \n" +
                "			ELSE           \n" +
                "				SET newRfqAssyBom = '';          \n" +
                "		END IF;    \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, \"RFQ Assembly BOM\",          \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.updatedBy);          \n" +
                "		END IF;  \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Customer Approval\",          \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Bad MFG PN\",          \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_WorkOrder` ;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder`   \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'WONUMBER',  \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ASSYID, 0) != IFNULL(NEW.ASSYID, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ASSYID',  \n" +
                "			CAST(OLD.assyID AS CHAR),CAST(NEW.assyID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ASSYREVID, 0) != IFNULL(NEW.ASSYREVID, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ASSYREVID',  \n" +
                "			CAST(OLD.assyRevID AS CHAR),CAST(NEW.assyRevID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;	  \n" +
                "	IF IFNULL(OLD.PODATE, 0) != IFNULL(NEW.PODATE, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'PODATE',  \n" +
                "			CAST(OLD.poDate AS CHAR),CAST(NEW.poDate AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PONUMBER, 0) != IFNULL(NEW.PONUMBER, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'PONUMBER',  \n" +
                "			CAST(OLD.poNumber AS CHAR),CAST(NEW.poNumber AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.POQTY, 0) != IFNULL(NEW.POQTY , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'POQTY',  \n" +
                "			CAST(OLD.poQty AS CHAR),CAST(NEW.poQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'EXCESSQTY',  \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'BUILDQTY',  \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'STARTTIME',  \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ENDTIME',  \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'MASTERTEMPLATEID',  \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'REFRENCEWOID',  \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'WOVERSION',  \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISSAMPLEAVAILABLE, 0) != IFNULL(NEW.ISSAMPLEAVAILABLE, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISSAMPLEAVAILABLE',  \n" +
                "			CAST(OLD.ISSAMPLEAVAILABLE AS CHAR),CAST(NEW.ISSAMPLEAVAILABLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISCLUSTERAPPLIED',  \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ROHSSTATUSID',  \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISNOCLEAN',  \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISWATERSOLUBLE',  \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',  \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.WOSTATUS, 0) != IFNULL(NEW.WOSTATUS , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'WOSTATUS',  \n" +
                "			CAST(OLD.WOSTATUS AS CHAR),CAST(NEW.WOSTATUS AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'CUSTOMERID',  \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ECOREMARK',  \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'FCOREMARK',  \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.LOCATIONSAMPLEDETAILS , 0)!= IFNULL(NEW.LOCATIONSAMPLEDETAILS , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'LOCATIONSAMPLEDETAILS',  \n" +
                "			CAST(OLD.LocationSampleDetails AS CHAR),CAST(NEW.LocationSampleDetails AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISDELETED',  \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISSTOPWORKORDER',  \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISREVISEDWO',  \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'ISOPERATIONSVERIFIED',  \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN   \n" +
                "		INSERT INTO DataEntryChange_auditLog   \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )   \n" +
                "		VALUES (\"WORKORDER\",  \n" +
                "			CAST(NEW.woID AS CHAR),  \n" +
                "			'TERMINATEWOID',  \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP VIEW IF EXISTS `vu_bom_report` ;  \n" +
                "CREATE VIEW `vu_bom_report` AS   \n" +
                "SELECT  \n" +
                "  (SELECT  \n" +
                "     `customers`.`companyName`  \n" +
                "   FROM `customers`  \n" +
                "   WHERE (`customers`.`id` = (SELECT  \n" +
                "                                `rfqforms`.`customerId`  \n" +
                "                              FROM `rfqforms`  \n" +
                "                              WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)))) AS `CustomerName`,  \n" +
                "  `ra`.`rfqrefID`            AS `QuoteNumber`,  \n" +
                "  (SELECT  \n" +
                "     `rfqforms`.`quoteindate`  \n" +
                "   FROM `rfqforms`  \n" +
                "   WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)) AS `RFQDate`,  \n" +
                "  `ra`.`assemblyNumber`      AS `assemblyNumber`,  \n" +
                "  `ra`.`assemblyDescription` AS `assemblyDescription`,  \n" +
                "  `ra`.`assemblyRev`         AS `assemblyRev`,  \n" +
                "  `ra`.`bomFCAVersion`       AS `Version`,  \n" +
                "  `rl`.`lineID`              AS `lineID`,  \n" +
                "  `rl`.`qpa`                 AS `qpa`,  \n" +
                "  `rl`.`refDesig`            AS `refDesig`,  \n" +
                "  `rl`.`custPN`              AS `custPN`,  \n" +
                "  `rl`.`customerRev`         AS `customerRev`,  \n" +
                "  `rl`.`customerDescription` AS `customerDescription`,  \n" +
                "  `rl`.`level`               AS `level`,  \n" +
                "  `rl`.`partclassID`         AS `partclassID`,  \n" +
                "  `rl`.`refRFQLineItemID`    AS `ParentLine`,  \n" +
                "  `rl`.`numOfPosition`       AS `Lead`,  \n" +
                "  `rl`.`uomID`               AS `uomID`,  \n" +
                "  `rl`.`dnpDesig`            AS `DNPREFDES`,  \n" +
                "  `rl`.`dnpQty`              AS `DNPQTY`,  \n" +
                "  `rl`.`isBuyDNPQty`         AS `BUYDNPQTY`,  \n" +
                "  `rl`.`isPurchase`          AS `IsBuy`,  \n" +
                "  `rl`.`isInstall`           AS `Populate`,  \n" +
                "  `rl`.`customerPartDesc`    AS `customerPartDesc`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`mfgPNDescription`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `InternalDescr`,  \n" +
                "  `rla`.`mfgCode`            AS `MFG`,  \n" +
                "  `rla`.`mfgPN`              AS `MFGPN`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`RoHSStatusID`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `RoHS`,  \n" +
                "  `rla`.`distributor`        AS `Distributor`,  \n" +
                "  `rla`.`distPN`             AS `DistributorPN`,  \n" +
                "  `rla`.`description`        AS `FlextronComment`,  \n" +
                "  (SELECT  \n" +
                "     `rfq_lineitems_approval_comment`.`comment`  \n" +
                "   FROM `rfq_lineitems_approval_comment`  \n" +
                "   WHERE (`rfq_lineitems_approval_comment`.`rfqLineItemsAlternatePartID` = `rla`.`id`)  \n" +
                "   ORDER BY `rfq_lineitems_approval_comment`.`approvalDate` DESC  \n" +
                "   LIMIT 0,1) AS `Approvalcomment`  \n" +
                "FROM ((`rfq_assemblies` `ra`  \n" +
                "    JOIN `rfq_lineitems` `rl`  \n" +
                "      ON ((`ra`.`id` = `rl`.`rfqAssyID`)))  \n" +
                "   JOIN `rfq_lineitems_alternatepart` `rla`  \n" +
                "     ON ((`rla`.`rfqLineItemsID` = `rl`.`id`)))  \n" +
                "WHERE (`rl`.`isDeleted` = 0);  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP VIEW IF EXISTS `vu_rfq_consolidate_lineitem_details` ;  \n" +
                "CREATE VIEW `vu_rfq_consolidate_lineitem_details` AS   \n" +
                "SELECT  \n" +
                "  `rl`.`id`            AS `id`,  \n" +
                "  `rl`.`isPurchase`    AS `isPurchase`,  \n" +
                "  `rl`.`lineID`        AS `lineID`,  \n" +
                "  `rl`.`rfqLineItemID` AS `rfqLineItemID`,  \n" +
                "  `rl`.`rfqAssyBomID`  AS `rfqAssyBomID`,  \n" +
                "  `rl`.`rfqAssyID`     AS `rfqAssyID`,  \n" +
                "  IFNULL(`rl`.`leadQty`,0) AS `leadQty`,  \n" +
                "  IFNULL(`rl`.`attritionRate`,0) AS `attritionRate`,  \n" +
                "  `rl`.`qpa`           AS `qpa`,  \n" +
                "  `rq`.`finalPrice`    AS `finalPrice`,  \n" +
                "  `ra`.`id`            AS `rfqAssyQtyID`,  \n" +
                "  `ra`.`requestQty`    AS `requestQty`,  \n" +
                "  (SELECT  \n" +
                "     GROUP_CONCAT(`rla`.`mfgPN`,'###',`mg`.`mfgCode` SEPARATOR ',')  \n" +
                "   FROM ((`rfq_consolidated_mfgpn_lineitem_alternate` `rla`  \n" +
                "       LEFT JOIN `component` `c`  \n" +
                "         ON ((`rla`.`mfgPNID` = `c`.`id`)))  \n" +
                "      LEFT JOIN `mfgcodemst` `mg`  \n" +
                "        ON ((`c`.`mfgcodeID` = `mg`.`id`)))  \n" +
                "   WHERE ((`rla`.`consolidateID` = `rl`.`id`)  \n" +
                "          AND (`rla`.`isDeleted` = 0))) AS `component`,  \n" +
                "  (SELECT  \n" +
                "     GROUP_CONCAT(IFNULL(`rla`.`PIDCode`,'N/A'),'@@@',`c`.`RoHSStatusID` SEPARATOR ',') AS `mfgPn`  \n" +
                "   FROM (`rfq_consolidated_mfgpn_lineitem_alternate` `rla`  \n" +
                "      LEFT JOIN `component` `c`  \n" +
                "        ON ((`rla`.`mfgPNID` = `c`.`id`)))  \n" +
                "   WHERE ((`rla`.`consolidateID` = `rl`.`id`)  \n" +
                "          AND (`rla`.`isDeleted` = 0))) AS `mfgPN`  \n" +
                "FROM ((`rfq_consolidated_mfgpn_lineitem` `rl`  \n" +
                "    LEFT JOIN `rfq_consolidate_mfgpn_lineitem_quantity` `rq`  \n" +
                "      ON ((`rl`.`id` = `rq`.`consolidateID`)))  \n" +
                "   LEFT JOIN `rfq_assy_quantity` `ra`  \n" +
                "     ON ((`rq`.`qtyID` = `ra`.`id`)))  \n" +
                "WHERE (`rl`.`isDeleted` = 0)  \n" +
                "GROUP BY `rl`.`lineID`;  \n" +
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (29,'2.00','V1',' DB Changes for Task# - 4261 - Jignesh '," + userid + ");"
            );
            break;
        case 29:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2018  *********************************** */
                "DROP VIEW IF EXISTS `vu_bom_report` ;  \n" +
                "CREATE VIEW `vu_bom_report` AS   \n" +
                "SELECT  \n" +
                "  (SELECT  \n" +
                "     `customers`.`companyName`  \n" +
                "   FROM `customers`  \n" +
                "   WHERE (`customers`.`id` = (SELECT  \n" +
                "                                `rfqforms`.`customerId`  \n" +
                "                              FROM `rfqforms`  \n" +
                "                              WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)))) AS `CustomerName`,  \n" +
                "  `ra`.`rfqrefID`            AS `QuoteNumber`,  \n" +
                "  (SELECT  \n" +
                "     `rfqforms`.`quoteindate`  \n" +
                "   FROM `rfqforms`  \n" +
                "   WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)) AS `RFQDate`,  \n" +
                "  `ra`.`assemblyNumber`      AS `assemblyNumber`,  \n" +
                "  `ra`.`assemblyDescription` AS `assemblyDescription`,  \n" +
                "  `ra`.`assemblyRev`         AS `assemblyRev`,  \n" +
                "  `ra`.`bomFCAVersion`       AS `Version`,  \n" +
                "  `rl`.`lineID`              AS `lineID`,  \n" +
                "  `rl`.`qpa`                 AS `qpa`,  \n" +
                "  `rl`.`refDesig`            AS `refDesig`,  \n" +
                "  `rl`.`custPN`              AS `custPN`,  \n" +
                "  `rl`.`customerRev`         AS `customerRev`,  \n" +
                "  `rl`.`customerDescription` AS `customerDescription`,  \n" +
                "  `rl`.`level`               AS `level`,  \n" +
                "  `rl`.`partclassID`         AS `partclassID`,  \n" +
                "  `rl`.`refRFQLineItemID`    AS `ParentLine`,  \n" +
                "  `rl`.`numOfPosition`       AS `Lead`,  \n" +
                "  `rl`.`uomID`               AS `uomID`,  \n" +
                "  `rl`.`dnpDesig`            AS `DNPREFDES`,  \n" +
                "  `rl`.`dnpQty`              AS `DNPQTY`,  \n" +
                "  `rl`.`isBuyDNPQty`         AS `BUYDNPQTY`,  \n" +
                "  `rl`.`isPurchase`          AS `IsBuy`,  \n" +
                "  `rl`.`isInstall`           AS `Populate`,  \n" +
                "  `rl`.`customerPartDesc`    AS `customerPartDesc`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`mfgPNDescription`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `InternalDescr`,  \n" +
                "  `rla`.`mfgCode`            AS `MFG`,  \n" +
                "  `rla`.`mfgPN`              AS `MFGPN`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`RoHSStatusID`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `RoHS`,  \n" +
                "  `rla`.`distributor`        AS `Distributor`,  \n" +
                "  `rla`.`distPN`             AS `DistributorPN`,  \n" +
                "  `rla`.`description`        AS `FlextronComment`,  \n" +
                "  (SELECT  \n" +
                "     `rfq_lineitems_approval_comment`.`comment`  \n" +
                "   FROM `rfq_lineitems_approval_comment`  \n" +
                "   WHERE (`rfq_lineitems_approval_comment`.`rfqLineItemsAlternatePartID` = `rla`.`id`)  \n" +
                "   ORDER BY `rfq_lineitems_approval_comment`.`approvalDate` DESC  \n" +
                "   LIMIT 0,1) AS `Approvalcomment`  \n" +
                "FROM ((`rfq_assemblies` `ra`  \n" +
                "    JOIN `rfq_lineitems` `rl`  \n" +
                "      ON ((`ra`.`id` = `rl`.`rfqAssyID`)))  \n" +
                "   JOIN `rfq_lineitems_alternatepart` `rla`  \n" +
                "     ON ((`rla`.`rfqLineItemsID` = `rl`.`id`)))  \n" +
                "WHERE (`rl`.`isDeleted` = 0 AND `rla`.`isDeleted` = 0);  \n" +
                /* **************************** Add Script Version -> 03-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (30,'2.00','V1',' Bug 4329: Bill of material detail is not proper at mis report - Jignesh '," + userid + ");"
            );
            break;
        case 30:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyComponent`(            \n" +
                "	IN BuyByID INT(1),            \n" +
                "	IN BuyToID INT(1),          \n" +
                "    IN UserID INT(1)          \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "  BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "    START TRANSACTION;            \n" +
                "  \n" +
                "				SET @rank = (SELECT id FROM component ORDER BY id DESC LIMIT 1);          \n" +
                "				INSERT INTO `component`          \n" +
                "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `RoHSStatusID`,          \n" +
                "				`isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`,          \n" +
                "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,           \n" +
                "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,          \n" +
                "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,           \n" +
                "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,          \n" +
                "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)          \n" +
                "				SELECT  @rank:=@rank+1 AS `PID`,          \n" +
                "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,           \n" +
                "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`RoHSStatusID`,       \n" +
                "                com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,          \n" +
                "				com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,           \n" +
                "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,           \n" +
                "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,           \n" +
                "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,           \n" +
                "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,          \n" +
                "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,          \n" +
                "				(SELECT LEFT(CONCAT((SELECT mfgCode FROM mfgcodemst WHERE id = BuyByID),'+',c.mfgPN),30) `PIDCode`          \n" +
                "				 FROM component c JOIN mfgcodemst m ON m.id = c.mfgcodeID  WHERE c.mfgcodeID = BuyToID AND c.id = com.id AND IFNULL(c.isDeleted,0) = 0) `PIDCode`          \n" +
                "				FROM component com           \n" +
                "				WHERE com.mfgcodeID = BuyToID AND IFNULL(com.isDeleted,0) = 0;         \n" +
                "  \n" +
                "                /*   As per discussion with Dixitbhai not require to insert alias, packeging alias, and alternate alias for component.(04-10-2028)      \n" +
                "				INSERT INTO `component_alias`          \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)          \n" +
                "				select          \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,           \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`          \n" +
                "				from component_alias ca join component c on c.id = ca.componentID          \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;          \n" +
                "				INSERT INTO `component_alternatepn`          \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)          \n" +
                "				select          \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,           \n" +
                "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`          \n" +
                "				from component_alternatepn ca join component c on c.id = ca.componentID          \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);          \n" +
                "				INSERT INTO `component_packagingalias`          \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)          \n" +
                "				select          \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,          \n" +
                "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`          \n" +
                "				from component_packagingalias ca join component c on c.id = ca.componentID          \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;          \n" +
                "  \n" +
                "                */      \n" +
                "				INSERT INTO `component_rohsalternatepn`          \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)          \n" +
                "				SELECT          \n" +
                "				ca.`aliasgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`          \n" +
                "				FROM component_rohsalternatepn ca JOIN component c ON c.id = ca.componentID          \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;          \n" +
                "				INSERT INTO `component_goodbadpartmapping`          \n" +
                "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)          \n" +
                "				SELECT      \n" +
                "                (IFNULL((SELECT id FROM component WHERE mfgPN = cG.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,           \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cB.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,          \n" +
                "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`          \n" +
                "				FROM component_goodbadpartmapping ca JOIN component cB ON cB.id = ca.badComponentID          \n" +
                "				JOIN component cG ON cG.id	= ca.goodComponentID          \n" +
                "				WHERE ca.badComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) OR       \n" +
                "                ca.goodComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;          \n" +
                "  \n" +
                "  \n" +
                "				INSERT INTO `component_standard_details`          \n" +
                "				(`standardClassID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)          \n" +
                "				SELECT          \n" +
                "				ca.`standardClassID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,          \n" +
                "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`          \n" +
                "				FROM component_standard_details ca JOIN component c ON c.id = ca.componentID          \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;          \n" +
                "				INSERT INTO `component_drivetools`          \n" +
                "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)          \n" +
                "				SELECT          \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`          \n" +
                "				FROM component_drivetools ca JOIN component c ON c.id = ca.refComponentID          \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;          \n" +
                "				INSERT INTO `component_requiremapping_parts`          \n" +
                "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)          \n" +
                "				SELECT          \n" +
                "				ca.`requiredMatingPartgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,          \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`          \n" +
                "				FROM component_requiremapping_parts ca JOIN component c ON c.id = ca.refComponentID          \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;          \n" +
                "				INSERT INTO `component_dataelement`          \n" +
                "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)          \n" +
                "				SELECT          \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,          \n" +
                "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`          \n" +
                "				FROM component_dataelement ca JOIN component c ON c.id = ca.componentID          \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;          \n" +
                "  COMMIT;            \n" +
                "SELECT * FROM component WHERE mfgcodeID = BuyByID;          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "        IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "               SELECT css.id,css.scanlabel,css.scanmfgcode,css.pkgQty,css.price,css.uid,    \n" +
                "			css.printStatus,css.priceCategoryID,css.lotCode,css.dateCode,    \n" +
                "			c.mfgcodeID,c.mfgPN,c.PIDCode,c.pid,c.packaginggroupID,    \n" +
                "			mfg.id AS mfgID,mfg.mfgCode, ro.name AS rohs,c.mfgPNDescription     \n" +
                "               FROM component_sid_stock css    \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0   \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0    \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0    \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(        \n" +
                "	IN ppageIndex INT(11),                      \n" +
                "	IN precordPerPage INT(11),                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "    IN pWhereClause VARCHAR(16383),                      \n" +
                "    IN prfqAssyID INT,                  \n" +
                "    IN prfqAssyBOMID INT                  \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE pOffset INT(11);                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "  \n" +
                "	IF(prfqAssyBOMID IS NOT NULL) THEN                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                      \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                      \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                         \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,        \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',ccl.isDocumentUpload)       \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component       \n" +
                "			FROM rfq_lineitems_alternatepart ra                      \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                  \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                  \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                      \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                      \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                    \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0          \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0        \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0      \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0     \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0     \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0      \n" +
                "			WHERE rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 AND ra.rfqAssyID = prfqAssyID                     \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;                      \n" +
                "	ELSE                      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                      \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                      \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                      \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,      \n" +
                "            (CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',ccl.isDocumentUpload)       \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component       \n" +
                "			FROM rfq_lineitems_alternatepart ra                      \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                  \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                  \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                      \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                     \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                   \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0       \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0        \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0       \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0      \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0     \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0      \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0                      \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "	ELSE                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "		SET pWhereClause = '1=1' ;                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "	ELSE	                      \n" +
                "		SET rowNumWhere = '';                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	    SET @SQLString = NULL;                                 \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "		SELECT                            \n" +
                "                     GROUP_CONCAT(DISTINCT                            \n" +
                "				CONCAT(                            \n" +
                "					'Max((IF(ra.requestQty = ''',                            \n" +
                "						ra.requestQty,                            \n" +
                "					''', rq.finalPrice, null))) AS ''',                            \n" +
                "						ra.requestQty,''''                            \n" +
                "					)                            \n" +
                "					) INTO @SQLString                            \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                    \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                      \n" +
                "						rp.partTypeName, rm.name,                     \n" +
                "						rl.qpa,                        \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                          \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                          \n" +
                "						co.ltbDate AS LTBDate,                  \n" +
                "						co.eolDate AS EOLDate,          \n" +
                "                        	(SELECT                                       \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.RoHSStatusID,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)       \n" +
                "ELSE GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode,''###'',c.RoHSStatusID,''###'',rla.mfgPNID,''###'',''0'') END)                                                \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                       \n" +
                "component c ON rla.mfgpnid=c.id                                       \n" +
                "LEFT JOIN mfgcodemst mg ON                                        \n" +
                "c.mfgCodeID=mg.id       \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0      \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0      \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0      \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0      \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,       \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(rla.PIDCode,'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                  \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                       \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN            \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                   \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                     \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                            \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                             \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                    \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                           \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                           \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                           \n" +
                "						(SELECT gencCategoryID FROM genericcategory                           \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\"))))                          \n" +
                "					GROUP BY rl.lineID');                                      \n" +
                "			END IF;                      \n" +
                "			PREPARE stmt FROM @SQLStatement;                                  \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                            \n" +
                "				SELECT ra.requestQty,                             \n" +
                "					rq.finalPrice,                             \n" +
                "					rq.unitPrice,                            \n" +
                "					rq.supplier,                             \n" +
                "					rq.selectedMpn,                             \n" +
                "					rq.selectionMode,                            \n" +
                "					rq.qtyID,                             \n" +
                "					rq.consolidateID,                        \n" +
                "					rq.selectedPIDCode,                          \n" +
                "					rq.min,              \n" +
                "					rq.mult,                            \n" +
                "					rq.qtyID,                               \n" +
                "					rq.consolidateID,                         \n" +
                "					rq.currentStock,                        \n" +
                "					rq.leadTime,                         \n" +
                "					rq.supplierStock,                        \n" +
                "					rq.grossStock,                          \n" +
                "					rq.pricingSuppliers,                  \n" +
                "					c.noOfPosition ApiNoOfPosition,                 \n" +
                "					c.partStatus              \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                              \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                              \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                             \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllQtyPricing` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllQtyPricing`(	    \n" +
                "	IN prfqAssyID INT(11)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "					SELECT   rl.id, rl.lineID,rl.rfqAssyBomID, rl.rfqAssyID,rq.qtyID, ra.requestQty,     \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,rq.selectedMPN,    \n" +
                "					rq.unitPrice,rq.supplier,    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN,\"|\",c.RoHSStatusID)AS mfgPn     \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON rla.mfgCodeID=mf.id    \n" +
                "                                LEFT JOIN  component c ON rla.mfgpnid=c.id AND c.isdeleted=0    \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN    \n" +
                "					 FROM rfq_consolidated_mfgpn_lineitem rl    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=prfqAssyID AND rl.isPurchase=1 ORDER BY rl.lineID;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (31,'2.00','V1',' Check in pending SP for RoHS - Jignesh '," + userid + ");"
            );
            break;
        case 31:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-12-2018  *********************************** */
                "ALTER TABLE component ADD connectorTypeText VARCHAR(100);  \n" +
                "INSERT INTO rfq_connectertypemst (`name`,isActive,createdBy,systemGenerated)VALUES  \n" +
                "('None',1,'1',1);  \n" +
                "UPDATE rfq_connectertypemst SET id=-1 WHERE `name`='None';  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(            \n" +
                " IN tabquery LONGTEXT            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "   SET @sqlQ=tabquery;            \n" +
                "   PREPARE stmt1 FROM @sqlQ;             \n" +
                "   EXECUTE stmt1;              \n" +
                "   DEALLOCATE PREPARE stmt1;             \n" +
                "  \n" +
                "  SELECT '1';            \n" +
                "  \n" +
                "    block1:BEGIN            \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table              \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;            \n" +
                "        DECLARE current_mfgpn VARCHAR (50);              \n" +
                "	DECLARE  current_mfgcode INT ;            \n" +
                "	DECLARE current_Ismfg TINYINT;              \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);              \n" +
                "        DECLARE current_component INT ;            \n" +
                "        DECLARE current_ComponentID INT;            \n" +
                "	DECLARE maxvalueid INT;            \n" +
                "        DECLARE aliasgroup INT;            \n" +
                "  \n" +
                "     -- 2 declare the cursor operation              \n" +
                "    DECLARE component_cursor CURSOR FOR              \n" +
                "    SELECT id FROM tempComponent ORDER BY id;            \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows              \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;              \n" +
                "     -- open the cursor              \n" +
                "    OPEN component_cursor;            \n" +
                "     -- start looping              \n" +
                "     component_loop: LOOP                \n" +
                "     -- read the name from next row into the variables               \n" +
                "     FETCH component_cursor INTO current_ComponentID;              \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,               \n" +
                "     -- close the cursor and exit the loop if it has.              \n" +
                "       IF exit_loop THEN	             \n" +
                "				 LEAVE component_loop;              \n" +
                "			END IF;              \n" +
                "        SELECT '1';            \n" +
                "  \n" +
                "	SET current_mfgpn='';            \n" +
                "	SET current_mfgcode=1;            \n" +
                "	SET current_mfgPartNumber='';            \n" +
                "	SET current_Ismfg=1;            \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;            \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN            \n" +
                "	 -- insert new component             \n" +
                "	INSERT INTO component (PID,categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,            \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,maxQty,mfgcodeID,mfgPN,mfgPNDescription,            \n" +
                "	minimum,minOperatingTemp,minQty,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,            \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID,connectorTypeText)            \n" +
                "	SELECT RAND(),categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,            \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,maxQty,mfgcodeID,mfgPN,mfgPNDescription,            \n" +
                "	minimum,minOperatingTemp,minQty,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,            \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID,connectorTypeText            \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;            \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;            \n" +
                "	 -- check component is manufacturer part or distributor part            \n" +
                "                   IF(current_Ismfg=1) THEN            \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;            \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)            \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');            \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,pid=current_component,updatedBy='Auto' WHERE id=current_component;            \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;            \n" +
                "                    ELSE            \n" +
                "  \n" +
                "			UPDATE component SET pid=current_component,updatedBy='Auto' WHERE id=current_component;            \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;            \n" +
                "			IF(aliasgroup IS NOT NULL) THEN            \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)            \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');            \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;            \n" +
                "		        END IF;            \n" +
                "		    END IF;            \n" +
                "      END IF;            \n" +
                "  \n" +
                "    END LOOP component_loop;            \n" +
                "      CLOSE component_cursor;            \n" +
                "    END  block1;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (32,'2.00','V1','Added field in component and api verification sp-champak'," + userid + ");"
            );
            break;
        case 32:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "UPDATE page_detail SET pageName='Connector Type',menuName='Connector Type' WHERE pageRoute='app.connectertype';  \n" +
                /* **************************** Add Script Version -> 05-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (33,'2.00','V1','Update connector spell -Champak'," + userid + ");"
            );
            break;
        case 33:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "UPDATE workorder_serialmst SET SerialNo = REPLACE(SerialNo, '_', '');  \n" +
                "UPDATE workorder_operation_firstpiece SET serialno = REPLACE(serialno, '_', '');  \n" +
                "UPDATE workorder_trans_firstpcsdet SET serialno = REPLACE(serialno, '_', '');  \n" +
                "UPDATE workorder_trans_serialno SET serialNo = REPLACE(serialNo, '_', '');  \n" +
                /* **************************** Add Script Version -> 05-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (34,'2.00','V1',' Updated serial entry - KETAN '," + userid + ");"
            );
            break;
        case 34:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "UPDATE genericcategory SET gencCategoryCode=NULL WHERE categoryType='Equipment Ownership';  \n" +
                "update genericcategory set gencCategoryCode=NULL where categoryType='Operation Type';  \n" +
                "update genericcategory set gencCategoryCode=NULL where categoryType='Standard Type';  \n" +
                "update genericcategory set gencCategoryCode=NULL where categoryType='Equipment Possession';  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveOperation`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT * ,  \n" +
                "			fun_getOpStatusNameByID(opStatus) AS `opStatusConvertedValue`  \n" +
                "			FROM `operations`  \n" +
                "			WHERE `deletedAt` IS NULL  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"opID DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),	          \n" +
                "    IN pWhereClause VARCHAR(16383)              \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "	/* DECLARE SQLStatement varchar(255); */          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "		SELECT wo.*, am.assemblyName, am.assemblyNickName, arm.revision,           \n" +
                "        (SELECT SUM(ws.poQty) FROM workorder_salesorder_details ws WHERE wo.woID = ws.woID AND IFNULL(ws.isDeleted,0) = 0 AND ws.deletedAt IS NULL) soPOQty ,          \n" +
                "        fun_getWoStatusNameByID(`wo`.`woStatus`) AS `woStatusConvertedValue` ,          \n" +
                "	`ro`.`name` AS `isLeadFreeConvertedValue` ,          \n" +
                "	(CASE WHEN (`wo`.`isSampleAvailable` = 0) THEN 'No'           \n" +
                "					WHEN (`wo`.`isSampleAvailable` = 1) THEN 'Yes' ELSE '' END) AS `isSampleAvailableConvertedValue` ,          \n" +
                "	(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'           \n" +
                "					WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,          \n" +
                "	fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,  \n" +
                "	(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'        \n" +
                "		ELSE 'No' END) AS `isHalt`,        \n" +
                "	(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN         \n" +
                "		(SELECT CONCAT(whu.reason, ' - Halt by ',         \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),         \n" +
                "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))         \n" +
                "			FROM workorder_trans_hold_unhold whu         \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0         \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL        \n" +
                "			ORDER BY whu.startDate DESC LIMIT 1)         \n" +
                "		ELSE          \n" +
                "		(SELECT CONCAT(whu.resumeReason, ' - Resume by ',         \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),         \n" +
                "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))        \n" +
                "			FROM workorder_trans_hold_unhold whu         \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0         \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL        \n" +
                "			ORDER BY whu.endDate DESC LIMIT 1)         \n" +
                "		END) AS reasonDetails,        \n" +
                "	(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0         \n" +
                "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount        \n" +
                "	FROM workorder wo          \n" +
                "        JOIN assemblymst am ON wo.assyID = am.id AND IFNULL(am.isdeleted,0) = 0          \n" +
                "        JOIN assembly_revisionmst arm ON wo.assyRevID = arm.id AND IFNULL(arm.isdeleted,0) = 0    \n" +
                "        LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                  \n" +
                "		WHERE IFNULL(wo.isdeleted,0) = 0;               \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyNickName DESC\") ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;           \n" +
                "  \n" +
                "	/* to get total count of rows of workorder table */          \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM workorder where deletedAt IS NULL \" );          \n" +
                "	PREPARE query3 FROM @SQLStatement3;          \n" +
                "	EXECUTE query3;          \n" +
                "	DEALLOCATE PREPARE query3;          \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getOpStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getOpStatusNameByID`(  \n" +
                "	popstatus INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(50);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (popstatus = 0) THEN 'Draft'   \n" +
                "      WHEN (popstatus = 1) THEN 'Published'   \n" +
                "      WHEN (popstatus = 2) THEN 'Disabled' ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getWoStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getWoStatusNameByID`(  \n" +
                "	pwostatus INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(50);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwostatus = 0) THEN 'Draft'   \n" +
                "      WHEN (pwostatus = 1) THEN 'Published'   \n" +
                "      WHEN (pwostatus = 2) THEN 'Completed'   \n" +
                "      WHEN (pwostatus = 4) THEN 'Void'   \n" +
                "      WHEN (pwostatus = 5) THEN 'Draft Under Review'   \n" +
                "      WHEN (pwostatus = 6) THEN 'Under Termination'   \n" +
                "      WHEN (pwostatus = 7) THEN 'Terminated'   \n" +
                "      WHEN (pwostatus = 8) THEN 'Published Draft & Review' ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getStatusNameByColumnAndID` ;  \n" +
                "CREATE FUNCTION `fun_getStatusNameByColumnAndID`(  \n" +
                "	pcolname VARCHAR(50),  \n" +
                "	pval INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(50);  \n" +
                "	IF (pcolname = \"WOSTATUS\") THEN  \n" +
                "		SELECT (CASE WHEN (pval = 0) THEN 'Draft'   \n" +
                "		      WHEN (pval = 1) THEN 'Published'   \n" +
                "		      WHEN (pval = 2) THEN 'Completed'   \n" +
                "		      WHEN (pval = 4) THEN 'Void'   \n" +
                "		      WHEN (pval = 5) THEN 'Draft Under Review'   \n" +
                "		      WHEN (pval = 6) THEN 'Under Termination'   \n" +
                "		      WHEN (pval = 7) THEN 'Terminated'   \n" +
                "		      WHEN (pval = 8) THEN 'Published Draft & Review' ELSE pval END) INTO @result;  \n" +
                "		SET result = @result;  \n" +
                "		RETURN result;  \n" +
                "	 ELSE   \n" +
                "		RETURN pval;  \n" +
                "	END IF;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getwoTypeNameByType` ;  \n" +
                "CREATE FUNCTION `fun_getwoTypeNameByType`(  \n" +
                "	pwoType INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(50);  \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwoType = 1) THEN 'New'           \n" +
                "		WHEN (pwoType = 2) THEN 'Repeat order with same revision'   \n" +
                "		WHEN (pwoType = 3) THEN 'Revision change'          \n" +
                "		WHEN (pwoType = 4) THEN 'I-ECO'   \n" +
                "		WHEN (pwoType = 5) THEN 'C-ECO'          \n" +
                "		ELSE '' END) INTO @result;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_WOChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_WOChangeHistory`(    \n" +
                "	IN pWoID INT(11),    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN pwoOPID INT,    \n" +
                "    -- If woOPID is passed then it is from operation version else from woVersion    \n" +
                "    IN fromVersion VARCHAR(255),    \n" +
                "    -- If woOPID is passed then it is to operation version else to woVersion    \n" +
                "    IN toVersion VARCHAR(255)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "  \n" +
                "    /* [S] Get ID for given WO or WOOP versiob */    \n" +
                "    DECLARE fromWOVersionID INT;    \n" +
                "    DECLARE toWoVersionID INT;    \n" +
                "    DECLARE fromOPVersionID INT;    \n" +
                "    DECLARE toOPVersionID INT;    \n" +
                "    IF (pwoOPID IS NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN    \n" +
                "		SELECT a.ID INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'    \n" +
                "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;    \n" +
                "		SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'    \n" +
                "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;    \n" +
                "  \n" +
                "        SET fromWOVersionID = IFNULL(fromWOVersionID, 0);    \n" +
                "        SET toWoVersionID = IFNULL(toWoVersionID, 0);    \n" +
                "  \n" +
                "	ELSEIF (pwoOPID IS NOT NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN    \n" +
                "		SELECT a.ID INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'    \n" +
                "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;    \n" +
                "		SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'    \n" +
                "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;    \n" +
                "  \n" +
                "        SET fromOPVersionID = IFNULL(fromOPVersionID, 0);    \n" +
                "        SET toOPVersionID = IFNULL(toOPVersionID, 0);    \n" +
                "    END IF;    \n" +
                "	/* [E] Get ID for given WO or WOOP versiob */    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "	   SELECT * FROM    \n" +
                "		   (    \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,   \n" +
                "			(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Oldval`)) Oldval1,  \n" +
                "			(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Newval`)) Newval1,   \n" +
                "        updatedAt,Updatedby,    \n" +
                "        (SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            NULL opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE Tablename = 'WORKORDER' AND RefTransID = pWoID    \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            (    \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo     \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_employee woe WHERE woe.woOpEmployeeID = dca.RefTransID)    \n" +
                "            ) opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EMPLOYEE'     \n" +
                "			AND RefTransID IN (SELECT woOpEmployeeID FROM workorder_operation_employee WHERE  woID =  pWoID )			    \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            (    \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo     \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_equipment woe WHERE woe.woOpEqpID = dca.RefTransID)    \n" +
                "            ) opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EQUIPMENT'     \n" +
                "			AND RefTransID IN (SELECT woOpEqpID FROM workorder_operation_equipment WHERE  woID =  pWoID )    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "		    (    \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo     \n" +
                "                WHERE wo.woOPID = (SELECT wop.woOPID FROM workorder_operation_part wop WHERE wop.woOPPartID = dca.RefTransID)    \n" +
                "            ) opName    \n" +
                "			FROM dataentrychange_auditlog dca WHERE TableName = 'WORKORDER_OPERATION_PART'     \n" +
                "			AND RefTransID IN (SELECT woOPPartID FROM workorder_operation_part WHERE  woID =  pWoID )    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            NULL opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CLUSTER'     \n" +
                "			AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            NULL opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_CLUSTER'     \n" +
                "			AND RefTransID IN (SELECT woClusterID FROM workorder_operation_cluster     \n" +
                "						WHERE  clusterID IN (SELECT RefTransID    \n" +
                "									 FROM dataentrychange_auditlog WHERE TableName = 'WORKORDER_CLUSTER'     \n" +
                "									 AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )    \n" +
                "									 )    \n" +
                "						)    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            NULL opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_DATAELEMENT'     \n" +
                "			AND RefTransID IN (SELECT woOpDataElementID FROM workorder_operation_dataelement WHERE  woID =  pWoID )    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            (    \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo     \n" +
                "                WHERE wo.woOPID = RefTransID    \n" +
                "            ) opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION'     \n" +
                "			AND RefTransID IN (SELECT woOPID FROM workorder_operation WHERE  woID =  pWoID )    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            NULL opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CERTIFICATION'     \n" +
                "			AND RefTransID IN (SELECT woCertificationID FROM workorder_certification WHERE  woID =  pWoID )	    \n" +
                "  \n" +
                "			UNION ALL     \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby    \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,    \n" +
                "            NULL opName    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'DATAELEMENT_TRANSACTIONVALUES'     \n" +
                "			AND RefTransID IN (SELECT dataElementTransID FROM dataelement_transactionvalues    \n" +
                "						WHERE  entityID = 7 AND RefTransID =  pWoID )    \n" +
                "		) AS a    \n" +
                "		WHERE CASE WHEN fromWOVersionID IS NOT NULL THEN a.ID BETWEEN fromWOVersionID AND toWoVersionID ELSE TRUE END    \n" +
                "		AND CASE WHEN fromOPVersionID IS NOT NULL THEN a.ID BETWEEN fromOPVersionID AND toOPVersionID ELSE TRUE END;    \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (35,'2.00','V1','WO and OP Status Changes - Vaibhav '," + userid + ");"
            );
            break;
        case 35:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "UPDATE genericcategory SET gencCategoryName='Not For New Designs' WHERE gencCategoryName='Not For New Design';  \n" +
                "INSERT INTO rfq_rohsmst (`name`,isActive,createdBy,systemGenerated)VALUES   \n" +
                "       ('None',1,'1',1);   \n" +
                "UPDATE rfq_rohsmst SET id=-1 WHERE `name`='None';  \n" +
                "INSERT INTO rfq_connectertypemst(`name`,isActive,createdBy,systemGenerated)VALUES  \n" +
                "('Header, Breakaway',1,'1',1);  \n" +
                "UPDATE rfq_connectertypemst SET id=0 where`name`='Header, Breakaway';  \n" +
                "UPDATE component SET mountingTypeText=NULL WHERE mountingTypeText='None';  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetNoneTypeComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetNoneTypeComponent`(	      \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "SELECT c.id,c.mfgPN,c.connecterTypeID,c.connectorTypeText,c.mountingTypetext,c.mountingTypeID,c.uomText,c.uom,c.rohsText,c.RoHSStatusID FROM component c LEFT JOIN mfgcodemst mg  \n" +
                "ON mg.id=c.mfgcodeID   \n" +
                "WHERE  mg.mfgType='MFG' AND c.isdeleted=0 AND c.isCustomCPN=0 AND ((c.connecterTypeID=-1 AND c.connectorTypeText IS NOT NULL)  \n" +
                " OR (c.mountingTypeID=-1 AND c.mountingTypetext IS NOT NULL) OR (c.RoHSStatusID=-1 AND c.rohsText IS NOT NULL) OR (c.uom=0 AND c.uomText IS NOT NULL));      \n" +
                "END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_refreshComponentStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_refreshComponentStatus`(	      \n" +
                "	 IN tableName VARCHAR(255),  \n" +
                "         IN typetext VARCHAR(255)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  DECLARE dataid INT;  \n" +
                "  IF(tableName='rfq_connectertypemst')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id  FROM rfq_connectertypemst WHERE `name`=typetext AND isDeleted=0    \n" +
                "  UNION    \n" +
                "  SELECT refid    FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_connectertypemst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET connecterTypeID=dataid WHERE connectorTypeText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  IF(tableName='rfq_mountingtypemst')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id FROM rfq_mountingtypemst WHERE `name`=typetext AND isDeleted=0    \n" +
                "   UNION    \n" +
                "   SELECT refid   FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_mountingtypemst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET mountingTypeID=dataid WHERE mountingTypeText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(tableName='uoms')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id  FROM uoms WHERE `unitName`=typetext AND isDeleted=0    \n" +
                "  UNION    \n" +
                "  SELECT refid FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='uoms' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET uom=dataid WHERE uomText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  IF(tableName='rfq_rohsmst')THEN  \n" +
                "  SELECT id INTO dataid FROM(SELECT id  FROM rfq_rohsmst WHERE `name`=typetext AND isDeleted=0    \n" +
                "  UNION    \n" +
                "  SELECT refid    FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_rohsmst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET RoHSStatusID=dataid WHERE rohsText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "SELECT dataid;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (36,'2.00','V1','#4339 task related db changes-Champak'," + userid + ");"
            );
            break;
        case 36:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-12-2018  *********************************** */
                "DROP VIEW IF EXISTS `vu_barcode_label` ;  \n" +
                "CREATE VIEW `vu_barcode_label` AS   \n" +
                "SELECT  \n" +
                "  `css`.`uid`             AS `uid`,  \n" +
                "  `css`.`priceCategoryID` AS `costID`,  \n" +
                "  `css`.`dateCode`        AS `dateCode`,  \n" +
                "  `c`.`mfgPNDescription`  AS `mfgPNDescription`,  \n" +
                "  `c`.`PIDCode`           AS `PIDCode`,  \n" +
                "  `r`.`name` AS `RoHS`  \n" +
                "FROM (`component_sid_stock` `css`  \n" +
                "   LEFT JOIN `component` `c`  \n" +
                "     ON (((`c`.`id` = `css`.`refcompid`)  \n" +
                "          AND (`c`.`isCustomCPN` = 0)  \n" +
                "          AND (`c`.`isDeleted` = 0)))  \n" +
                "          LEFT JOIN rfq_rohsmst r ON r.id=c.RoHSStatusID  \n" +
                "          )  \n" +
                "WHERE (`css`.`isDeleted` = 0);  \n" +
                /* **************************** Add Script Version -> 05-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (37,'2.00','V1','Create view vu_barcode_label-Champak'," + userid + ");"
            );
            break;
        case 37:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "ALTER TABLE rfq_consolidated_mfgpn_lineitem_alternate ADD customerApproval VARCHAR(1);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                \n" +
                "	IN rfqAssyID INT(1),                \n" +
                "	IN userID INT(1)                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                \n" +
                "  \n" +
                "    START TRANSACTION;        \n" +
                "  \n" +
                "    #consoliadte select         \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS         \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID=rfqAssyID;          \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "		SELECT rfqLineItemsID AS rfqLineItemsID,attritionRate,isInstall,GROUP_CONCAT(refDesig) AS refDesig,                 \n" +
                "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,                \n" +
                "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,                \n" +
                "		SUM(qpa2) qpa, CAST((SUM(adcost1)/SUM(qpa2)) AS DECIMAL(10,5)) AS valueAddedCost,                \n" +
                "		mfg,COUNT(*)AS multiple,GROUP_CONCAT(rfqLineItemsID) AS consolidatedLineItemIDs                \n" +
                "		FROM                 \n" +
                "		(SELECT *,(qpa1*valueAddedCost)AS adcost1, qpa1 AS qpa2, GROUP_CONCAT(DISTINCT(part)) mfg                \n" +
                "		FROM                \n" +
                "		(SELECT b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID, a.refDesig,                \n" +
                "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)AS qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)AS addCost,                 \n" +
                "		CONCAT(b.mfgCodeID,' | ', b.mfgPNID ) AS part,a.attritionRate,a.isInstall,                 \n" +
                "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,                \n" +
                "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID                \n" +
                "		FROM rfq_lineitems_alternatepart b                 \n" +
                "        JOIN rfq_lineitems a ON b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0               \n" +
                "        WHERE IFNULL(b.isDeleted,0) = 0 AND b.mfgPNID != 0 AND (b.mfgPNID IS NOT NULL OR b.mfgPN IS NOT NULL)              \n" +
                "		GROUP BY b.rfqLineItemsID, b.mfgPN, CONCAT(b.mfgCode,' | ', b.mfgPN)) aa                \n" +
                "		GROUP BY aa.rfqLineItemsID) ab                 \n" +
                "		GROUP BY numOfPosition,isPurchase,mfg;       \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                \n" +
                "			SET                 \n" +
                "			cl.isDeleted = TRUE,                \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                \n" +
                "			cl.deletedBy = userID                \n" +
                "			WHERE cl.rfqAssyID = rfqAssyID AND cl.id NOT IN (                \n" +
                "            SELECT * FROM(                     \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                 \n" +
                "			WHERE rcl.rfqAssyID = rfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                 \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`)                \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,                \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                \n" +
                "		userID `createdBy`, R.`numOfPosition`,                \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`refDesig`                 \n" +
                "        FROM Results R                \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                \n" +
                "		 WHERE cl.id IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                 \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                 \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.id  IS NOT NULL                 \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                 \n" +
                "		SET                 \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                \n" +
                "        rq.updatedBy = userID,                \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# Update Consilidated LineItems                \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                 \n" +
                "		SET                 \n" +
                "		cl.isInstall = R.isInstall ,                \n" +
                "		cl.isPurchase = R.isPurchase,                \n" +
                "		cl.numOfPosition = R.numOfPosition,                \n" +
                "		cl.attritionRate = R.attritionRate,                \n" +
                "		cl.leadQty = R.leadQty,                \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                \n" +
                "        cl.qpa = R.qpa,                \n" +
                "        cl.uomID = R.uomID,      \n" +
                "        cl.refDesig = R.refDesig,      \n" +
                "        cl.lineID = R.lineID,                \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,                \n" +
                "        cl.updatedBy = userID                \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                \n" +
                "  \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                \n" +
                "		SET                 \n" +
                "        cap.isDeleted = TRUE,                \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cap.deletedBy = userID                \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL                  \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                     \n" +
                "  \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                \n" +
                "  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                 \n" +
                "		SET                 \n" +
                "        isDeleted = TRUE,                \n" +
                "        deletedAt = UTC_TIMESTAMP(),                \n" +
                "		deletedBy = userID                \n" +
                "        WHERE id IN(                 \n" +
                "        SELECT capID FROM (                \n" +
                "		SELECT DISTINCT(cap.id)AS capID                \n" +
                "		FROM rfq_lineitems_alternatepart ap                 \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID                \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                 \n" +
                "		JOIN rfq_parttypemst pt ON pt.id = rl.partTypeID AND pt.category != 3                \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                 \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = rfqAssyID AND isDeleted = 1) rq              \n" +
                "		SET                 \n" +
                "        cq.isDeleted = TRUE,                \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cq.deletedBy = userID                \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL                  \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                     \n" +
                "  \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove              \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = rfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq              \n" +
                "		SET                 \n" +
                "        cq.isDeleted = TRUE,                \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cq.deletedBy = userID                \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = rfqAssyID AND IFNULL(isDeleted, 0) = 0)                  \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                  \n" +
                "  \n" +
                "# delete Consolidate lineItems                 \n" +
                "  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                \n" +
                "		SET                 \n" +
                "        cl.isDeleted = TRUE,                \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cl.deletedBy = userID                \n" +
                "		WHERE  cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                        \n" +
                "  \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                 \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                \n" +
                "		SELECT DISTINCT(ap.`mfgPN`),(SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = rfqAssyID AND rcl.lineID = rl.lineID AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                \n" +
                "		FROM rfq_lineitems_alternatepart ap                 \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID            \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;              \n" +
                "  \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed            \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = rfqAssyID AND a.isDeleted = 0) rcl            \n" +
                "		SET                 \n" +
                "        cap.isDeleted = TRUE,                \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cap.deletedBy = userID            \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (             \n" +
                "        SELECT  DISTINCT(cap.id)                \n" +
                "		FROM rfq_lineitems_alternatepart ap                 \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID            \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove              \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,             \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,            \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                  \n" +
                "		SET                 \n" +
                "        cq.finalPrice = NULL,            \n" +
                "        cq.selectedPIDCode = NULL,            \n" +
                "        cq.selectedMpn = NULL,            \n" +
                "        cq.selectionMode = NULL,            \n" +
                "        cq.supplier = NULL,            \n" +
                "        cq.supplierStock = NULL,            \n" +
                "        cq.currentStock = NULL,            \n" +
                "        cq.grossStock = NULL,            \n" +
                "        cq.leadTime = NULL,            \n" +
                "        cq.min = NULL,            \n" +
                "        cq.mult = NULL,            \n" +
                "        cq.unitPrice = NULL,            \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                \n" +
                "		cq.updatedBy = userID                \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                  \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;               \n" +
                "  \n" +
                "  # update rfq assembly pricing status    \n" +
                "  \n" +
                "    UPDATE rfq_assemblies SET isReadyForPricing = TRUE, updatedAt = UTC_TIMESTAMP(), updatedBy = userID WHERE isDeleted = 0 AND id = rfqAssyID;    \n" +
                "  \n" +
                "    COMMIT;            \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId=rfqAssyID AND isdeleted=0)          \n" +
                "    UNION        \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id         \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID=rfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);        \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;         \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (38,'2.00','V1','Added column in rfq_consolidated_mfgpn_lineitem_alternate-Champak'," + userid + ");"
            );
            break;
        case 38:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentPackagingAlias`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPackagingAlias`(      \n" +
                "IN ppageIndex INT(11),    \n" +
                "IN precordPerPage INT(11),    \n" +
                "IN pOrderBy VARCHAR(255),    \n" +
                "IN pWhereClause VARCHAR(16383),    \n" +
                "IN pId INT(11)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		 SELECT com.id,com.mfgPN,mfg.mfgCode,mfg.mfgName,com.PIDCode,ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`  \n" +
                "         FROM component com  \n" +
                "		 left join mfgcodemst mfg on mfg.id = com.mfgcodeID and mfg.isDeleted = 0  \n" +
                "         LEFT JOIN rfq_rohsmst ro ON com.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0      \n" +
                "		 where com.isDeleted = 0 and com.id !=pId and com.packaginggroupID = (select aliasgroupID from component_packagingalias where componentID = pId and isDeleted = 0);  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (39,'2.00','V1','get list of packaging alias of selected component - shirish'," + userid + ");"
            );
            break;
        case 39:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "DELETE FROM agreement WHERE agreementTypeID=2 AND isPublished=0;  \n" +
                /* **************************** Add Script Version -> 06-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (40,'2.00','V1','DB Script Updated for Mail Template - Vaibhav'," + userid + ");"
            );
            break;
        case 40:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "ALTER TABLE workorder_serialmst ADD COLUMN refMFGSerialNo VARCHAR(50) ;  \n" +
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveAllMappedFinalProductSerials` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveAllMappedFinalProductSerials`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWoID INT(11),  \n" +
                "	IN pSerialType INT(1)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT *  \n" +
                "			FROM `workorder_serialmst`  \n" +
                "			WHERE `deletedAt` IS NULL   \n" +
                "			AND `woID` = pWoID AND `serialType` = pSerialType  \n" +
                "			AND refMFGSerialNo IS NOT NULL  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (41,'2.00','V1',' New field refMFGSerialNo for serial mapping - KETAN '," + userid + ");"
            );
            break;
        case 41:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(        \n" +
                "	IN poldAssyID int(1),        \n" +
                "	IN pnewAssyID INT(1),      \n" +
                "    IN UserID int(1),      \n" +
                "    IN pIsCopyPricing tinyint      \n" +
                ")  \n" +
                "BEGIN        \n" +
                "DECLARE pCount int(11);      \n" +
                "DECLARE pisBOMVarified tinyint(1);    \n" +
                "DECLARE pisReadyForPricing tinyint(1);    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION        \n" +
                "BEGIN        \n" +
                "	ROLLBACK;        \n" +
                "	RESIGNAL;        \n" +
                "END;        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING        \n" +
                "  BEGIN        \n" +
                "	ROLLBACK;        \n" +
                "	RESIGNAL;        \n" +
                "END;        \n" +
                "  \n" +
                "  \n" +
                "    START TRANSACTION;        \n" +
                "  \n" +
                "    select isBOMVerified, isReadyForPricing INTO pisBOMVarified, pisReadyForPricing from rfq_assemblies where id = poldAssyID;    \n" +
                "  \n" +
                "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = pnewAssyID;      \n" +
                "# Remove existing BOM data from newAssembly      \n" +
                "		IF(pCount>0) THEN      \n" +
                "  \n" +
                "			update rfq_assy_bom set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where reqAssyID = pnewAssyID and bomNumber IS NOT NULL;      \n" +
                "			update rfq_assy_bom_relationship set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;      \n" +
                "			update rfq_lineitems set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;      \n" +
                "			update rfq_lineitems_alternatepart set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;      \n" +
                "			update rfq_consolidated_mfgpn_lineitem set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;      \n" +
                "			update rfq_consolidated_mfgpn_lineitem_alternate set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);      \n" +
                "			update rfq_consolidate_mfgpn_lineitem_quantity set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);      \n" +
                "			update rfq_assy_quotations set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;      \n" +
                "			update rfq_assy_quantity_price_selection_setting set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where qtyID in (select id from rfq_assy_quantity where rfqAssyID = pnewAssyID);      \n" +
                "        END IF;      \n" +
                "# update isverifiedBOM and isReadyforPricing flag in rfq_assemblies table      \n" +
                "	IF(pIsCopyPricing) THEN      \n" +
                "		IF(pisReadyForPricing and pisBOMVarified) THEN    \n" +
                "			update rfq_assemblies set       \n" +
                "			isBOMVerified = true,       \n" +
                "			isReadyForPricing = true,      \n" +
                "			updatedAt = UTC_TIMESTAMP(),      \n" +
                "			updatedBy = UserID      \n" +
                "			where id = pnewAssyID;      \n" +
                "		ELSE     \n" +
                "			IF(pisBOMVarified) THEN    \n" +
                "				update rfq_assemblies set       \n" +
                "				isBOMVerified = true,       \n" +
                "				isReadyForPricing = false,      \n" +
                "				updatedAt = UTC_TIMESTAMP(),      \n" +
                "				updatedBy = UserID      \n" +
                "				where id = pnewAssyID;    \n" +
                "  \n" +
                "			END IF;    \n" +
                "        END IF;    \n" +
                "  	ELSE       \n" +
                "		IF(pisBOMVarified) THEN    \n" +
                "			update rfq_assemblies set       \n" +
                "			isBOMVerified = true,       \n" +
                "			isReadyForPricing = false,      \n" +
                "			updatedAt = UTC_TIMESTAMP(),      \n" +
                "			updatedBy = UserID      \n" +
                "			where id = pnewAssyID;      \n" +
                "		END IF;    \n" +
                "	END IF;      \n" +
                "  \n" +
                "# Copy rfq lineItems data of old assy to new Assy      \n" +
                "			INSERT INTO `rfq_lineitems`      \n" +
                "			(`rfqAssyBomID`, `rfqAssyID`, `lineID`, `qpa`, `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,      \n" +
                "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,       \n" +
                "			`manualAdj`, `createdBy`, `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`, `valueAddedCost`,       \n" +
                "			`refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`, `org_uomName`, `org_level`,       \n" +
                "			`org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`, `org_numOfPosition`, `org_refLineID`,       \n" +
                "			`qpaDesignatorStep`,`qpaDesignatorColorPriority`,`miscStep`,`lineMergeStep`)      \n" +
                "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and bomNumber IS NULL) `rfqAssyBomID`,pnewAssyID `rfqAssyID`, `lineID`, `qpa`,      \n" +
                "			 `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,      \n" +
                "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,       \n" +
                "			`manualAdj`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`,       \n" +
                "			`valueAddedCost`, `refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`,      \n" +
                "			`org_uomName`, `org_level`, `org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`,       \n" +
                "			`org_numOfPosition`, `org_refLineID`, `qpaDesignatorStep`,`qpaDesignatorColorPriority`,`miscStep`,`lineMergeStep`      \n" +
                "			 from rfq_lineitems where rfqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0;      \n" +
                "# Copy rfq lineitems alternatepart data of old assy to new Assy      \n" +
                "			INSERT INTO `rfq_lineitems_alternatepart`      \n" +
                "			( `rfqLineItemsID`, `distributor`, `distMfgCodeID`, `distPN`, `distMfgPNID`, `mfgCode`, `mfgCodeID`, `mfgPN`, `mfgPNID`,      \n" +
                "			`description`, `isActive`, `isApproved`, `isNoBidsPN`, `isDraft`, `isROHS`, `copyAlternetPartID`, `createdBy`, `createdAt`,      \n" +
                "			`mfgVerificationStep`, `mfgDistMappingStep`, `mfgCodeStep`, `distVerificationStep`, `distCodeStep`,      \n" +
                "			`getMFGPNStep`, `obsoletePartStep`, `mfgGoodPartMappingStep`, `rfqAssyID`, `mfgPNStep`, `distPNStep`,`distGoodPartMappingStep`,  \n" +
                "            `nonRohsStep`,`epoxyStep`,`oneRohsComponentStep`)      \n" +
                "			select rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, ra.`distPN`, ra.`distMfgPNID`, ra.`mfgCode`, ra.`mfgCodeID`, ra.`mfgPN`, ra.`mfgPNID`,      \n" +
                "			ra.`description`, ra.`isActive`, ra.`isApproved`, ra.`isNoBidsPN`, ra.`isDraft`, ra.`isROHS`, ra.`copyAlternetPartID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,      \n" +
                "			ra.`mfgVerificationStep`, ra.`mfgDistMappingStep`, ra.`mfgCodeStep`, ra.`distVerificationStep`, ra.`distCodeStep`,      \n" +
                "			ra.`getMFGPNStep`, ra.`obsoletePartStep`, ra.`mfgGoodPartMappingStep`,pnewAssyID `rfqAssyID`, ra.`mfgPNStep`, ra.`distPNStep`,ra.`distGoodPartMappingStep`,  \n" +
                "            ra.`nonRohsStep`,ra.`epoxyStep`,ra.`oneRohsComponentStep`  \n" +
                "			 from rfq_lineitems_alternatepart ra      \n" +
                "			 join rfq_lineitems ral on ral.id = ra.rfqLineItemsID and ral.rfqAssyID = poldAssyID and ifnull(ral.isDeleted,0) = 0      \n" +
                "			 join rfq_lineitems rl on rl.lineID = ral.lineID and rl.rfqAssyID = pnewAssyID and ifnull(rl.isDeleted,0) = 0      \n" +
                "			 where ra.rfqAssyID = poldAssyID and IFNULL(ra.isDeleted, 0) = 0;      \n" +
                "		IF(pisBOMVarified) THEN    \n" +
                "# Copy Assy BOM data of old assy to new Assy      \n" +
                "			INSERT INTO `rfq_assy_bom`      \n" +
                "			(`reqAssyID`, `isActive`, `description`, `createdBy`, `createdAt`, `bomNumber`,`rfqLineItemsID`)      \n" +
                "			select pnewAssyID `reqAssyID`, `isActive`, `description`,UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `bomNumber`,      \n" +
                "			(select id from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0 and lineID = (select lineID from rfq_lineitems where id = rfqLineItemsID)) `rfqLineItemsID` from rfq_assy_bom       \n" +
                "			where reqAssyID = poldAssyID and isDeleted = 0 and bomNumber is not null;      \n" +
                "# update sub assy id in rfq lineItems data of old assy to new Assy      \n" +
                "  \n" +
                "			update rfq_lineitems rl, (select id,rfqLineItemsID,(select lineID from rfq_lineitems where id = rfqLineItemsID) as lineID      \n" +
                "										from rfq_assy_bom where reqAssyID = pnewAssyID and isDeleted = 0 and bomNumber is not null) rbl      \n" +
                "			set      \n" +
                "			rl.rfqAssyBomID = rbl.id      \n" +
                "			where rl.refRFQLineItemID = rbl.lineID and rl.isDeleted = 0 and rfqAssyID = pnewAssyID;       \n" +
                "# update sub assy id in rfq lineItems data of old assy to new Assy      \n" +
                "			update rfq_lineitems_alternatepart rap, (select rl.id, rl.rfqAssyBomID, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl       \n" +
                "														join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id       \n" +
                "														where ra.rfqAssyID = pnewAssyID and rl.isDeleted = 0) rab       \n" +
                "			set rap.rfqAssyBomID = rab.rfqAssyBomID      \n" +
                "			where       \n" +
                "			rab.rfqLineItemsID = rap.rfqLineItemsID and rap.rfqAssyID = pnewAssyID;      \n" +
                "  \n" +
                "# Copy Assy BOM relationship data of old assy to new Assy                  \n" +
                "			INSERT INTO `rfq_assy_bom_relationship`      \n" +
                "			(`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`, `rfqAssyID`, `createdBy`, `createdAt`)      \n" +
                "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and isDeleted = 0 and rfqLineItemsID = (select id from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0 and lineID in (select lineID from rfq_lineitems where id = ab1.rfqLineItemsID))) `rfqAssyBomID`,       \n" +
                "			(select rfqAssyBomID from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0 and lineID in (select lineID from rfq_lineitems where id = ab1.rfqLineItemsID)) `parentRFQAssyBOMID`,       \n" +
                "			(select id from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0 and lineID in (select lineID from rfq_lineitems where id = ab1.rfqLineItemsID)) `parentLineitemsID`,      \n" +
                "			pnewAssyID `rfqAssyID`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`      \n" +
                "			from rfq_assy_bom ab1      \n" +
                "			where reqAssyID = poldAssyID and bomNumber is not null;      \n" +
                "# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy      \n" +
                "			IF(pisReadyForPricing) THEN    \n" +
                "				IF(pIsCopyPricing) THEN      \n" +
                "  \n" +
                "					INSERT INTO `rfq_consolidated_mfgpn_lineitem`      \n" +
                "					(`rfqAssyBomID`, `lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,      \n" +
                "					`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,       \n" +
                "					`numOfPosition`,`consolidatedLineItemIDs`)      \n" +
                "					select rl.`rfqAssyBomID`, rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, rl.`rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,      \n" +
                "					rcl.`isActive`, rl.id `rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,       \n" +
                "					rcl.`qpa`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,      \n" +
                "					fun_getconsolidatedlineitems(rcl.id,poldAssyID,pnewAssyID) `consolidatedLineItemIDs`       \n" +
                "					from rfq_consolidated_mfgpn_lineitem rcl      \n" +
                "					join rfq_lineitems rl on rl.lineID = rcl.lineID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0      \n" +
                "					 where rcl.rfqAssyID = poldAssyID and IFNULL(rcl.isDeleted,0) = 0;      \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy      \n" +
                "					INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`      \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`)      \n" +
                "					select rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, rap.`mfgCodeID`, com.PIDCode `PIDCode`       \n" +
                "					from rfq_lineitems_alternatepart rap      \n" +
                "					join rfq_consolidated_mfgpn_lineitem rcl on rcl.rfqAssyID = rap.rfqAssyID and rcl.rfqLineItemID = rap.rfqLineItemsID      \n" +
                "					join component com on com.id = rap.mfgPNID and IFNULL(com.isDeleted,0) = 0      \n" +
                "					where rap.rfqAssyID = pnewAssyID      \n" +
                "					group by rap.mfgPNID,rap.rfqLineItemsID;      \n" +
                "		# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy      \n" +
                "				# create temporary table for rfq_consolidate_mfgpn_lineitem_quantity of old assembly      \n" +
                "					drop temporary table if exists result;      \n" +
                "					create temporary table result       \n" +
                "					select rcl.lineID, raq.requestQty, rcl.qpa,rlq.* from rfq_consolidate_mfgpn_lineitem_quantity rlq       \n" +
                "					left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rlq.consolidateID and rcl.rfqAssyID = poldAssyID      \n" +
                "					left join rfq_assy_quantity raq on raq.id = rlq.qtyID  and raq.rfqAssyID = poldAssyID      \n" +
                "					where rlq.isDeleted = 0 and rcl.isDeleted = 0 and raq.isDeleted = 0 and raq.rfqAssyID = poldAssyID;      \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly      \n" +
                "  \n" +
                "					drop temporary table if exists mapping;      \n" +
                "					create temporary table mapping      \n" +
                "					select a.requestQty, ifNull((select Max(b.requestqty)  from rfq_assy_quantity b       \n" +
                "					where b.rfqAssyID = poldAssyID and b.requestqty <= a.requestQty and b.isDeleted = 0),      \n" +
                "					(select Min(b.requestqty)  from rfq_assy_quantity b       \n" +
                "					where b.rfqAssyID = poldAssyID and b.requestqty > a.requestQty and b.isDeleted = 0))mappingQty      \n" +
                "					from rfq_assy_quantity a       \n" +
                "					where a.rfqAssyID = pnewAssyID;      \n" +
                "				# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy      \n" +
                "  \n" +
                "					INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`      \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,      \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`)      \n" +
                "					select rq.id `qtyID`, cast(((R.finalPrice /(R.requestQty*R.qpa))*(cl.qpa*rq.requestQty)) as decimal(16,6)) `finalPrice`, cl.id `consolidateID`,       \n" +
                "					UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, cast((R.finalPrice /(R.requestQty*R.qpa)) as decimal(16,6))  `unitPrice`, R.`supplier`, R.`selectedMpn`,      \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`             \n" +
                "					from rfq_consolidated_mfgpn_lineitem cl          \n" +
                "					join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID and rq.isDeleted = 0      \n" +
                "					left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id       \n" +
                "					left join result R on R.lineID = cl.lineID       \n" +
                "					left join mapping m on  rq.requestQty = m.requestQty       \n" +
                "					where cl.rfqAssyID = pnewAssyID and cl.isDeleted = 0 and m.mappingQty = R.requestQty AND IFNULL(rq.isDeleted,0) = 0;      \n" +
                "  \n" +
                "					 drop temporary table if exists mapping;      \n" +
                "					 drop temporary table if exists result;      \n" +
                "				END IF;      \n" +
                "			END IF;    \n" +
                "		END IF;    \n" +
                "     COMMIT;        \n" +
                "	select * from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (42,'2.00','V1','Copy BOM sp changes - shirish'," + userid + ");"
            );
            break;
        case 42:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2018  *********************************** */
                "ALTER TABLE master_templates ADD isMasterTemplate TINYINT (1);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveMasterTemplate` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMasterTemplate`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "		SET @SQL = NULL;    \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT mt.id, mt.masterTemplate,mt.description,mt.isMasterTemplate,    \n" +
                "			   (SELECT COUNT(*) FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateID = mt.id    \n" +
                "				AND operationId IN (SELECT opID FROM operations WHERE deletedAt IS NULL AND opStatus = 1)) AS operationCount /* 1 - published op */    \n" +
                "			FROM master_templates mt    \n" +
                "			WHERE mt.`deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"masterTemplate ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (43,'2.00','V1',' alter table master_templates-Champak '," + userid + ");"
            );
            break;
        case 43:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_WOChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_WOChangeHistory`(      \n" +
                "	IN pWoID INT(11),      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "    IN pwoOPID INT,      \n" +
                "    -- If woOPID is passed then it is from operation version else from woVersion      \n" +
                "    IN fromVersion VARCHAR(255),      \n" +
                "    -- If woOPID is passed then it is to operation version else to woVersion      \n" +
                "    IN toVersion VARCHAR(255)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "  \n" +
                "    /* [S] Get ID for given WO or WOOP versiob */      \n" +
                "    DECLARE fromWOVersionID INT;      \n" +
                "    DECLARE toWoVersionID INT;      \n" +
                "    DECLARE fromOPVersionID INT;      \n" +
                "    DECLARE toOPVersionID INT;      \n" +
                "    DECLARE woversioncheck VARCHAR(50);      \n" +
                "    IF (pwoOPID IS NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN      \n" +
                "		SELECT a.ID INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'      \n" +
                "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;      \n" +
                "		SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'      \n" +
                "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;    \n" +
                "/* code for new changes */  \n" +
                "IF(fromWOVersionID=toWoVersionID)THEN  \n" +
                "    SET fromWOVersionID= (NULL);  \n" +
                "    END IF;  \n" +
                "    SELECT woVersion INTO woversioncheck FROM workorder WHERE woid=pWoID LIMIT 1;  \n" +
                "  IF (fromWOVersionID IS NULL AND toWoVersionID IS NULL)THEN  \n" +
                "        IF(woversioncheck=fromVersion AND woversioncheck=toVersion)THEN  \n" +
                "		SELECT MIN(a.ID) INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID ;     \n" +
                "  \n" +
                "		SELECT MAX(a.ID) INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID;      \n" +
                "        ELSE   \n" +
                "         SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'      \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;     \n" +
                "        IF(toWoVersionID IS NOT NULL)THEN  \n" +
                "        SELECT MIN(a.ID) INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID ;     \n" +
                "        END IF;   \n" +
                "         END IF;  \n" +
                "      END IF;  \n" +
                "      IF(fromWOVersionID IS NOT NULL AND toWoVersionID IS NULL AND fromVersion=toVersion)THEN  \n" +
                "      IF(woversioncheck=fromVersion)THEN  \n" +
                "           SELECT MAX(a.ID) INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID;       \n" +
                "	ELSE  \n" +
                "        SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'      \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "        END IF;   \n" +
                "      END IF;  \n" +
                "  \n" +
                "      IF(toWoVersionID IS NOT NULL AND fromWOVersionID IS NULL AND fromVersion=toVersion)THEN  \n" +
                "      SET fromWOVersionID = IFNULL(toWoVersionID, 0);   \n" +
                "      IF(woversioncheck=fromVersion)THEN  \n" +
                "           SELECT MAX(a.ID) INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID;       \n" +
                "	ELSE  \n" +
                "        SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'      \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "        END IF;     \n" +
                "  \n" +
                "      END IF;  \n" +
                "  \n" +
                "  /*  code end        */      \n" +
                "  \n" +
                "        SET fromWOVersionID = IFNULL(fromWOVersionID, 0);      \n" +
                "        SET toWoVersionID = IFNULL(toWoVersionID, 0);    \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF (pwoOPID IS NOT NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN      \n" +
                "		SELECT a.ID INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'      \n" +
                "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;      \n" +
                "		SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'      \n" +
                "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;      \n" +
                "  \n" +
                "/* code for new changes */  \n" +
                "IF(fromOPVersionID=toOPVersionID)THEN  \n" +
                "    SET fromOPVersionID= (NULL);  \n" +
                "    END IF;  \n" +
                "    SELECT opVersion INTO woversioncheck FROM workorder_operation WHERE woOPID=pwoOPID LIMIT 1;  \n" +
                "  IF (fromOPVersionID IS NULL AND toOPVersionID IS NULL)THEN  \n" +
                "        IF(woversioncheck=fromVersion AND woversioncheck=toVersion)THEN  \n" +
                "		SELECT MIN(a.ID) INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID ;     \n" +
                "  \n" +
                "		SELECT MAX(a.ID) INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID;      \n" +
                "        ELSE   \n" +
                "         SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'      \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;     \n" +
                "        IF(toOPVersionID IS NOT NULL)THEN  \n" +
                "        SELECT MIN(a.ID) INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID ;     \n" +
                "        END IF;   \n" +
                "         END IF;  \n" +
                "      END IF;  \n" +
                "      IF(fromOPVersionID IS NOT NULL AND toOPVersionID IS NULL AND fromVersion=toVersion)THEN  \n" +
                "      IF(woversioncheck=fromVersion)THEN  \n" +
                "           SELECT MAX(a.ID) INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID;       \n" +
                "	ELSE  \n" +
                "        SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'      \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "        END IF;   \n" +
                "      END IF;  \n" +
                "  \n" +
                "      IF(toOPVersionID IS NOT NULL AND fromOPVersionID IS NULL AND fromVersion=toVersion)THEN  \n" +
                "      SET fromOPVersionID = IFNULL(toOPVersionID, 0);   \n" +
                "      IF(woversioncheck=fromVersion)THEN  \n" +
                "           SELECT MAX(a.ID) INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID;       \n" +
                "	ELSE  \n" +
                "        SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'      \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "        END IF;     \n" +
                "  \n" +
                "      END IF;  \n" +
                "  \n" +
                "  /*  code end        */          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        SET fromOPVersionID = IFNULL(fromOPVersionID, 0);      \n" +
                "        SET toOPVersionID = IFNULL(toOPVersionID, 0);      \n" +
                "    END IF;     \n" +
                "	/* [E] Get ID for given WO or WOOP versiob */      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "	   SELECT * FROM      \n" +
                "		   (      \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,     \n" +
                "			(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Oldval`)) Oldval,    \n" +
                "			(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Newval`)) Newval,     \n" +
                "        updatedAt,Updatedby,      \n" +
                "        (SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            NULL opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE Tablename = 'WORKORDER' AND RefTransID = pWoID      \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            (      \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo       \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_employee woe WHERE woe.woOpEmployeeID = dca.RefTransID)      \n" +
                "            ) opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EMPLOYEE'       \n" +
                "			AND RefTransID IN (SELECT woOpEmployeeID FROM workorder_operation_employee WHERE  woID =  pWoID )			      \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            (      \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo       \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_equipment woe WHERE woe.woOpEqpID = dca.RefTransID)      \n" +
                "            ) opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EQUIPMENT'       \n" +
                "			AND RefTransID IN (SELECT woOpEqpID FROM workorder_operation_equipment WHERE  woID =  pWoID )      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "		    (      \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo       \n" +
                "                WHERE wo.woOPID = (SELECT wop.woOPID FROM workorder_operation_part wop WHERE wop.woOPPartID = dca.RefTransID)      \n" +
                "            ) opName      \n" +
                "			FROM dataentrychange_auditlog dca WHERE TableName = 'WORKORDER_OPERATION_PART'       \n" +
                "			AND RefTransID IN (SELECT woOPPartID FROM workorder_operation_part WHERE  woID =  pWoID )      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            NULL opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CLUSTER'       \n" +
                "			AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            NULL opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_CLUSTER'       \n" +
                "			AND RefTransID IN (SELECT woClusterID FROM workorder_operation_cluster       \n" +
                "						WHERE  clusterID IN (SELECT RefTransID      \n" +
                "									 FROM dataentrychange_auditlog WHERE TableName = 'WORKORDER_CLUSTER'       \n" +
                "									 AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )      \n" +
                "									 )      \n" +
                "						)      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            NULL opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_DATAELEMENT'       \n" +
                "			AND RefTransID IN (SELECT woOpDataElementID FROM workorder_operation_dataelement WHERE  woID =  pWoID )      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            (      \n" +
                "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo       \n" +
                "                WHERE wo.woOPID = RefTransID      \n" +
                "            ) opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION'       \n" +
                "			AND RefTransID IN (SELECT woOPID FROM workorder_operation WHERE  woID =  pWoID )      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            NULL opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CERTIFICATION'       \n" +
                "			AND RefTransID IN (SELECT woCertificationID FROM workorder_certification WHERE  woID =  pWoID )	      \n" +
                "  \n" +
                "			UNION ALL       \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby      \n" +
                "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,      \n" +
                "            NULL opName      \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'DATAELEMENT_TRANSACTIONVALUES'       \n" +
                "			AND RefTransID IN (SELECT dataElementTransID FROM dataelement_transactionvalues      \n" +
                "						WHERE  entityID = 7 AND RefTransID =  pWoID )      \n" +
                "		) AS a      \n" +
                "		WHERE CASE WHEN fromWOVersionID IS NOT NULL THEN a.ID BETWEEN fromWOVersionID AND toWoVersionID ELSE TRUE END      \n" +
                "		AND CASE WHEN fromOPVersionID IS NOT NULL THEN a.ID BETWEEN fromOPVersionID AND toOPVersionID ELSE TRUE END;      \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP FUNCTION IF EXISTS `fun_getStatusNameByColumnAndID` ;  \n" +
                "CREATE FUNCTION `fun_getStatusNameByColumnAndID`(    \n" +
                "	pcolname VARCHAR(50),    \n" +
                "	pval VARCHAR(100)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(50);    \n" +
                "	IF (pcolname = \"WOSTATUS\") THEN    \n" +
                "		SELECT (CASE WHEN (pval = '0') THEN 'Draft'     \n" +
                "		      WHEN (pval = '1') THEN 'Published'     \n" +
                "		      WHEN (pval = '2') THEN 'Completed'     \n" +
                "		      WHEN (pval = '4') THEN 'Void'     \n" +
                "		      WHEN (pval = '5') THEN 'Draft Under Review'     \n" +
                "		      WHEN (pval = '6') THEN 'Under Termination'     \n" +
                "		      WHEN (pval = '7') THEN 'Terminated'     \n" +
                "		      WHEN (pval = '8') THEN 'Published Draft & Review' ELSE pval END) INTO @result;    \n" +
                "		SET result = @result;    \n" +
                "		RETURN result;    \n" +
                "	 ELSE     \n" +
                "		RETURN pval;    \n" +
                "	END IF;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (44,'2.00','V1','Update sp Sproc_WOChangeHistory and change function fun_getStatusNameByColumnAndID-Champak'," + userid + ");"
            );
            break;
        case 44:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCountry` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCountry`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT `country`.*,    \n" +
                "			(CASE WHEN (`country`.`isActive` = 0) THEN 'Inactive'     \n" +
                "				WHEN (`country`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,  \n" +
                "				(SELECT GROUP_CONCAT(cd.alias) FROM component_fields_genericalias_mst cd WHERE 	cd.refTableName='countrymst' AND cd.refId=countryId AND cd.isdeleted=0) aliaslist	    \n" +
                "		FROM `countrymst` AS `country`    \n" +
                "		WHERE `deletedAt` IS NULL    \n" +
                "	;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"countryName ASC\") ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (45,'2.00','V1','update sp Sproc_RetrieveCountry-champak'," + userid + ");"
            );
            break;
        case 45:
            allDbChangesArray.push(
                /* **************************** new script -> 10-12-2018  *********************************** */
                "ALTER TABLE rfq_lineitems_alternatepart CHANGE `isROHS` `RoHSStatusID` INT(11);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart   \n" +
                "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_RoHSStatusID   \n" +
                "FOREIGN KEY (RoHSStatusID) REFERENCES rfq_rohsmst(id);  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (20,'LEADMISMATCH','#d24673','Connector type is invalid','','1','2018-10-25',NULL,NULL,NULL,NULL,NULL,'Lead Mismatch');  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `invalidConnectorTypeStep` TINYINT(1);  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_headers`(`name`,`field`,`displayOrder`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`isAvlField`,`isAvlMfgField`,`isActive`)   \n" +
                "	VALUES ('Part Lead','componentLead',33 ,'1','2018-12-10',NULL,'2018-12-10',NULL,NULL,0,NULL,NULL,0);  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_headers`(`name`,`field`,`displayOrder`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`isAvlField`,`isAvlMfgField`,`isActive`)   \n" +
                "	VALUES ('Connector Type','connectorType',34 ,'1','2018-12-10',NULL,'2018-12-10',NULL,NULL,0,NULL,NULL,0);  \n" +
                /* **************************** add script version -> 10-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(          \n" +
                "	IN poldAssyID INT(1),          \n" +
                "	IN pnewAssyID INT(1),        \n" +
                "    IN UserID INT(1),        \n" +
                "    IN pIsCopyPricing TINYINT        \n" +
                ")  \n" +
                "BEGIN          \n" +
                "DECLARE pCount INT(11);        \n" +
                "DECLARE pisBOMVarified TINYINT(1);      \n" +
                "DECLARE pisReadyForPricing TINYINT(1);      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION          \n" +
                "BEGIN          \n" +
                "	ROLLBACK;          \n" +
                "	RESIGNAL;          \n" +
                "END;          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING          \n" +
                "  BEGIN          \n" +
                "	ROLLBACK;          \n" +
                "	RESIGNAL;          \n" +
                "END;          \n" +
                "  \n" +
                "  \n" +
                "    START TRANSACTION;          \n" +
                "  \n" +
                "    SELECT isBOMVerified, isReadyForPricing INTO pisBOMVarified, pisReadyForPricing FROM rfq_assemblies WHERE id = poldAssyID;      \n" +
                "  \n" +
                "		SELECT COUNT(*) INTO pCount FROM rfq_lineItems WHERE rfqAssyID = pnewAssyID;        \n" +
                "# Remove existing BOM data from newAssembly        \n" +
                "		IF(pCount>0) THEN        \n" +
                "  \n" +
                "			UPDATE rfq_assy_bom SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE reqAssyID = pnewAssyID AND bomNumber IS NOT NULL;        \n" +
                "			UPDATE rfq_assy_bom_relationship SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE rfqAssyID = pnewAssyID;        \n" +
                "			UPDATE rfq_lineitems SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE rfqAssyID = pnewAssyID;        \n" +
                "			UPDATE rfq_lineitems_alternatepart SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE rfqAssyID = pnewAssyID;        \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE rfqAssyID = pnewAssyID;        \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem_alternate SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = pnewAssyID);        \n" +
                "			UPDATE rfq_consolidate_mfgpn_lineitem_quantity SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = pnewAssyID);        \n" +
                "			UPDATE rfq_assy_quotations SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE rfqAssyID = pnewAssyID;        \n" +
                "			UPDATE rfq_assy_quantity_price_selection_setting SET isDeleted = TRUE, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID WHERE qtyID IN (SELECT id FROM rfq_assy_quantity WHERE rfqAssyID = pnewAssyID);        \n" +
                "        END IF;        \n" +
                "# update isverifiedBOM and isReadyforPricing flag in rfq_assemblies table        \n" +
                "	IF(pIsCopyPricing) THEN        \n" +
                "		IF(pisReadyForPricing AND pisBOMVarified) THEN      \n" +
                "			UPDATE rfq_assemblies SET         \n" +
                "			isBOMVerified = TRUE,         \n" +
                "			isReadyForPricing = TRUE,        \n" +
                "			updatedAt = UTC_TIMESTAMP(),        \n" +
                "			updatedBy = UserID        \n" +
                "			WHERE id = pnewAssyID;        \n" +
                "		ELSE       \n" +
                "			IF(pisBOMVarified) THEN      \n" +
                "				UPDATE rfq_assemblies SET         \n" +
                "				isBOMVerified = TRUE,         \n" +
                "				isReadyForPricing = FALSE,        \n" +
                "				updatedAt = UTC_TIMESTAMP(),        \n" +
                "				updatedBy = UserID        \n" +
                "				WHERE id = pnewAssyID;      \n" +
                "  \n" +
                "			END IF;      \n" +
                "        END IF;      \n" +
                "  	ELSE         \n" +
                "		IF(pisBOMVarified) THEN      \n" +
                "			UPDATE rfq_assemblies SET         \n" +
                "			isBOMVerified = TRUE,         \n" +
                "			isReadyForPricing = FALSE,        \n" +
                "			updatedAt = UTC_TIMESTAMP(),        \n" +
                "			updatedBy = UserID        \n" +
                "			WHERE id = pnewAssyID;        \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "# Copy rfq lineItems data of old assy to new Assy        \n" +
                "			INSERT INTO `rfq_lineitems`        \n" +
                "			(`rfqAssyBomID`, `rfqAssyID`, `lineID`, `qpa`, `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,        \n" +
                "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,         \n" +
                "			`manualAdj`, `createdBy`, `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`, `valueAddedCost`,         \n" +
                "			`refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`, `org_uomName`, `org_level`,         \n" +
                "			`org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`, `org_numOfPosition`, `org_refLineID`,         \n" +
                "			`qpaDesignatorStep`,`qpaDesignatorColorPriority`,`miscStep`,`lineMergeStep`)        \n" +
                "			SELECT (SELECT id FROM rfq_assy_bom WHERE reqAssyID = pnewAssyID AND bomNumber IS NULL) `rfqAssyBomID`,pnewAssyID `rfqAssyID`, `lineID`, `qpa`,        \n" +
                "			 `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,        \n" +
                "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,         \n" +
                "			`manualAdj`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`,         \n" +
                "			`valueAddedCost`, `refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`,        \n" +
                "			`org_uomName`, `org_level`, `org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`,         \n" +
                "			`org_numOfPosition`, `org_refLineID`, `qpaDesignatorStep`,`qpaDesignatorColorPriority`,`miscStep`,`lineMergeStep`        \n" +
                "			 FROM rfq_lineitems WHERE rfqAssyID = poldAssyID AND IFNULL(isDeleted,0) = 0;        \n" +
                "# Copy rfq lineitems alternatepart data of old assy to new Assy        \n" +
                "			INSERT INTO `rfq_lineitems_alternatepart`        \n" +
                "			( `rfqLineItemsID`, `distributor`, `distMfgCodeID`, `distPN`, `distMfgPNID`, `mfgCode`, `mfgCodeID`, `mfgPN`, `mfgPNID`,        \n" +
                "			`description`, `isActive`, `isApproved`, `isNoBidsPN`, `isDraft`, `RoHSStatusID`, `copyAlternetPartID`, `createdBy`, `createdAt`,        \n" +
                "			`mfgVerificationStep`, `mfgDistMappingStep`, `mfgCodeStep`, `distVerificationStep`, `distCodeStep`,        \n" +
                "			`getMFGPNStep`, `obsoletePartStep`, `mfgGoodPartMappingStep`, `rfqAssyID`, `mfgPNStep`, `distPNStep`,`distGoodPartMappingStep`,    \n" +
                "            `nonRohsStep`,`epoxyStep`,`oneRohsComponentStep`)        \n" +
                "			SELECT rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, ra.`distPN`, ra.`distMfgPNID`, ra.`mfgCode`, ra.`mfgCodeID`, ra.`mfgPN`, ra.`mfgPNID`,        \n" +
                "			ra.`description`, ra.`isActive`, ra.`isApproved`, ra.`isNoBidsPN`, ra.`isDraft`, ra.`RoHSStatusID`, ra.`copyAlternetPartID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,        \n" +
                "			ra.`mfgVerificationStep`, ra.`mfgDistMappingStep`, ra.`mfgCodeStep`, ra.`distVerificationStep`, ra.`distCodeStep`,        \n" +
                "			ra.`getMFGPNStep`, ra.`obsoletePartStep`, ra.`mfgGoodPartMappingStep`,pnewAssyID `rfqAssyID`, ra.`mfgPNStep`, ra.`distPNStep`,ra.`distGoodPartMappingStep`,    \n" +
                "            ra.`nonRohsStep`,ra.`epoxyStep`,ra.`oneRohsComponentStep`    \n" +
                "			 FROM rfq_lineitems_alternatepart ra        \n" +
                "			 JOIN rfq_lineitems ral ON ral.id = ra.rfqLineItemsID AND ral.rfqAssyID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0        \n" +
                "			 JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.rfqAssyID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0        \n" +
                "			 WHERE ra.rfqAssyID = poldAssyID AND IFNULL(ra.isDeleted, 0) = 0;        \n" +
                "		IF(pisBOMVarified) THEN      \n" +
                "# Copy Assy BOM data of old assy to new Assy        \n" +
                "			INSERT INTO `rfq_assy_bom`        \n" +
                "			(`reqAssyID`, `isActive`, `description`, `createdBy`, `createdAt`, `bomNumber`,`rfqLineItemsID`)        \n" +
                "			SELECT pnewAssyID `reqAssyID`, `isActive`, `description`,UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `bomNumber`,        \n" +
                "			(SELECT id FROM rfq_lineitems WHERE rfqAssyID = pnewAssyID AND isDeleted = 0 AND lineID = (SELECT lineID FROM rfq_lineitems WHERE id = rfqLineItemsID)) `rfqLineItemsID` FROM rfq_assy_bom         \n" +
                "			WHERE reqAssyID = poldAssyID AND isDeleted = 0 AND bomNumber IS NOT NULL;        \n" +
                "# update sub assy id in rfq lineItems data of old assy to new Assy        \n" +
                "  \n" +
                "			UPDATE rfq_lineitems rl, (SELECT id,rfqLineItemsID,(SELECT lineID FROM rfq_lineitems WHERE id = rfqLineItemsID) AS lineID        \n" +
                "										FROM rfq_assy_bom WHERE reqAssyID = pnewAssyID AND isDeleted = 0 AND bomNumber IS NOT NULL) rbl        \n" +
                "			SET        \n" +
                "			rl.rfqAssyBomID = rbl.id        \n" +
                "			WHERE rl.refRFQLineItemID = rbl.lineID AND rl.isDeleted = 0 AND rfqAssyID = pnewAssyID;         \n" +
                "# update sub assy id in rfq lineItems data of old assy to new Assy        \n" +
                "			UPDATE rfq_lineitems_alternatepart rap, (SELECT rl.id, rl.rfqAssyBomID, ra.rfqLineItemsID, rl.lineID FROM rfq_lineitems rl         \n" +
                "														JOIN  rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id         \n" +
                "														WHERE ra.rfqAssyID = pnewAssyID AND rl.isDeleted = 0) rab         \n" +
                "			SET rap.rfqAssyBomID = rab.rfqAssyBomID        \n" +
                "			WHERE         \n" +
                "			rab.rfqLineItemsID = rap.rfqLineItemsID AND rap.rfqAssyID = pnewAssyID;        \n" +
                "  \n" +
                "# Copy Assy BOM relationship data of old assy to new Assy                    \n" +
                "			INSERT INTO `rfq_assy_bom_relationship`        \n" +
                "			(`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`, `rfqAssyID`, `createdBy`, `createdAt`)        \n" +
                "			SELECT (SELECT id FROM rfq_assy_bom WHERE reqAssyID = pnewAssyID AND isDeleted = 0 AND rfqLineItemsID = (SELECT id FROM rfq_lineitems WHERE rfqAssyID = pnewAssyID AND isDeleted = 0 AND lineID IN (SELECT lineID FROM rfq_lineitems WHERE id = ab1.rfqLineItemsID))) `rfqAssyBomID`,         \n" +
                "			(SELECT rfqAssyBomID FROM rfq_lineitems WHERE rfqAssyID = pnewAssyID AND isDeleted = 0 AND lineID IN (SELECT lineID FROM rfq_lineitems WHERE id = ab1.rfqLineItemsID)) `parentRFQAssyBOMID`,         \n" +
                "			(SELECT id FROM rfq_lineitems WHERE rfqAssyID = pnewAssyID AND isDeleted = 0 AND lineID IN (SELECT lineID FROM rfq_lineitems WHERE id = ab1.rfqLineItemsID)) `parentLineitemsID`,        \n" +
                "			pnewAssyID `rfqAssyID`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`        \n" +
                "			FROM rfq_assy_bom ab1        \n" +
                "			WHERE reqAssyID = poldAssyID AND bomNumber IS NOT NULL;        \n" +
                "# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy        \n" +
                "			IF(pisReadyForPricing) THEN      \n" +
                "				IF(pIsCopyPricing) THEN        \n" +
                "  \n" +
                "					INSERT INTO `rfq_consolidated_mfgpn_lineitem`        \n" +
                "					(`rfqAssyBomID`, `lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,        \n" +
                "					`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,         \n" +
                "					`numOfPosition`,`consolidatedLineItemIDs`)        \n" +
                "					SELECT rl.`rfqAssyBomID`, rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, rl.`rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,        \n" +
                "					rcl.`isActive`, rl.id `rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,         \n" +
                "					rcl.`qpa`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,        \n" +
                "					fun_getconsolidatedlineitems(rcl.id,poldAssyID,pnewAssyID) `consolidatedLineItemIDs`         \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "					JOIN rfq_lineitems rl ON rl.lineID = rcl.lineID AND rl.rfqAssyID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0        \n" +
                "					 WHERE rcl.rfqAssyID = poldAssyID AND IFNULL(rcl.isDeleted,0) = 0;        \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy        \n" +
                "					INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`        \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`)        \n" +
                "					SELECT rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, rap.`mfgCodeID`, com.PIDCode `PIDCode`         \n" +
                "					FROM rfq_lineitems_alternatepart rap        \n" +
                "					JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqAssyID = rap.rfqAssyID AND rcl.rfqLineItemID = rap.rfqLineItemsID        \n" +
                "					JOIN component com ON com.id = rap.mfgPNID AND IFNULL(com.isDeleted,0) = 0        \n" +
                "					WHERE rap.rfqAssyID = pnewAssyID        \n" +
                "					GROUP BY rap.mfgPNID,rap.rfqLineItemsID;        \n" +
                "		# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy        \n" +
                "				# create temporary table for rfq_consolidate_mfgpn_lineitem_quantity of old assembly        \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;        \n" +
                "					CREATE TEMPORARY TABLE result         \n" +
                "					SELECT rcl.lineID, raq.requestQty, rcl.qpa,rlq.* FROM rfq_consolidate_mfgpn_lineitem_quantity rlq         \n" +
                "					LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rlq.consolidateID AND rcl.rfqAssyID = poldAssyID        \n" +
                "					LEFT JOIN rfq_assy_quantity raq ON raq.id = rlq.qtyID  AND raq.rfqAssyID = poldAssyID        \n" +
                "					WHERE rlq.isDeleted = 0 AND rcl.isDeleted = 0 AND raq.isDeleted = 0 AND raq.rfqAssyID = poldAssyID;        \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly        \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;        \n" +
                "					CREATE TEMPORARY TABLE mapping        \n" +
                "					SELECT a.requestQty, IFNULL((SELECT MAX(b.requestqty)  FROM rfq_assy_quantity b         \n" +
                "					WHERE b.rfqAssyID = poldAssyID AND b.requestqty <= a.requestQty AND b.isDeleted = 0),        \n" +
                "					(SELECT MIN(b.requestqty)  FROM rfq_assy_quantity b         \n" +
                "					WHERE b.rfqAssyID = poldAssyID AND b.requestqty > a.requestQty AND b.isDeleted = 0))mappingQty        \n" +
                "					FROM rfq_assy_quantity a         \n" +
                "					WHERE a.rfqAssyID = pnewAssyID;        \n" +
                "				# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy        \n" +
                "  \n" +
                "					INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`        \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,        \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`)        \n" +
                "					SELECT rq.id `qtyID`, CAST(((R.finalPrice /(R.requestQty*R.qpa))*(cl.qpa*rq.requestQty)) AS DECIMAL(16,6)) `finalPrice`, cl.id `consolidateID`,         \n" +
                "					UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, CAST((R.finalPrice /(R.requestQty*R.qpa)) AS DECIMAL(16,6))  `unitPrice`, R.`supplier`, R.`selectedMpn`,        \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`               \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem cl            \n" +
                "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0        \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id         \n" +
                "					LEFT JOIN result R ON R.lineID = cl.lineID         \n" +
                "					LEFT JOIN mapping m ON  rq.requestQty = m.requestQty         \n" +
                "					WHERE cl.rfqAssyID = pnewAssyID AND cl.isDeleted = 0 AND m.mappingQty = R.requestQty AND IFNULL(rq.isDeleted,0) = 0;        \n" +
                "  \n" +
                "					 DROP TEMPORARY TABLE IF EXISTS mapping;        \n" +
                "					 DROP TEMPORARY TABLE IF EXISTS result;        \n" +
                "				END IF;        \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "     COMMIT;          \n" +
                "	SELECT * FROM rfq_lineitems WHERE rfqAssyID = pnewAssyID AND isDeleted = 0;        \n" +
                "END;  \n" +
                /* **************************** add script version -> 10-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE pOffset INT(11);            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'             \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'             \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                           \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'    \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,             \n" +
                "              description, systemVariable,logicID, displayName            \n" +
                "			FROM `rfq_lineitems_errorcode`            \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;            \n" +
                "		ELSE            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "			SET pWhereClause = '1=1' ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "		ELSE	            \n" +
                "			SET rowNumWhere = '';            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		/* to get total count of rows */            \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );            \n" +
                "		PREPARE query1 FROM @SQLStatement1;            \n" +
                "		EXECUTE query1;            \n" +
                "		DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "		PREPARE query2 FROM @SQLStatement2;            \n" +
                "		EXECUTE query2;            \n" +
                "		DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** add script version -> 10-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                  \n" +
                "	IN prfqAssyID INT          \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                          \n" +
                "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,                       \n" +
                "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                      \n" +
                "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription, a.customerPartDesc,                       \n" +
                "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,            \n" +
                "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,a.qpaDesignatorColorPriority, a.mergeLines, a.lineMergeStep, a.isBuyDNPQty            \n" +
                "            FROM rfq_lineitems a            \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0            \n" +
                "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0            \n" +
                "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id AND IFNULL(c.isDeleted,0) = 0                \n" +
                "    WHERE IFNULL(a.isDeleted,0) = 0 AND a.rfqAssyID = prfqAssyID;                      \n" +
                "  \n" +
                "	SELECT b.id, b.lineID, b.qpa, b.refDesig,                   \n" +
                "			(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                  \n" +
                "            a.mfgCodeID, a.mfgPN, a.mfgPNID,                      \n" +
                "			(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                  \n" +
                "            a.distMfgCodeID, a.distPN, a.distMfgPNID,                       \n" +
                "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription, b.customerPartDesc,                \n" +
                "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,                       \n" +
                "            b.dnpQty, b.dnpDesig, a.id AS rfqAlternatePartID, b.qpaDesignatorStep,b.qpaDesignatorColorPriority, b.isBuyDNPQty,            \n" +
                "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,                    \n" +
                "            a.org_distributor, a.org_distPN,                    \n" +
                "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.mfgGoodPartMappingStep, a.mfgPNStep, a.distPNStep,                  \n" +
                "            a.badMfgPN, a.distGoodPartMappingStep, a.nonRohsStep, a.oneRohsComponentStep, a.epoxyStep, a.invalidConnectorTypeStep,              \n" +
                "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                \n" +
                "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,              \n" +
                "            (SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,            \n" +
                "            CASE WHEN             \n" +
                "            (co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR            \n" +
                "            EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)            \n" +
                "            THEN 1 ELSE 0 END isObsolete,            \n" +
                "            co.mfgPNDescription,        \n" +
                "            (SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment        \n" +
                "            FROM rfq_lineitems_alternatepart a                        \n" +
                "			LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                         \n" +
                "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                  \n" +
                "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0                  \n" +
                "			JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                \n" +
                "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                      \n" +
                "END;  \n" +
                /* **************************** add script version -> 10-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                \n" +
                "	IN pRfqAssyID INT(11)           \n" +
                "	)  \n" +
                "BEGIN                    \n" +
                "	DECLARE pValidCount INT(11);                \n" +
                "	DECLARE pInValidCount INT(11);                \n" +
                "	DECLARE pTotalCount INT(11);            \n" +
                "	DECLARE pProgress INT(11);                \n" +
                "	SET pProgress = 0;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS               \n" +
                "	SELECT  p.rfqLineItemsID,           \n" +
                "	CASE           \n" +
                "		WHEN           \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND           \n" +
                "			IFNULL(l.miscStep,0) = 1 AND           \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND           \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND           \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND           \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND           \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND           \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND           \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND           \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND           \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND           \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND           \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND           \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND          \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND    \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND  \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1          \n" +
                "		THEN 1          \n" +
                "		ELSE 0          \n" +
                "	END AS ProgressCount          \n" +
                "	FROM rfq_lineitems l          \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id          \n" +
                "	WHERE l.rfqAssyID = pRfqAssyID AND l.isDeleted = 0 AND p.isDeleted = 0;          \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;          \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;          \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;          \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN          \n" +
                "		SET pProgress = 0;          \n" +
                "	ELSE           \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SELECT pProgress;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** add script version -> 10-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(              \n" +
                "	IN woID INT(1),              \n" +
                "	IN woNumber VARCHAR(11),              \n" +
                "	IN assyID INT,              \n" +
                "	IN assyRevID INT,              \n" +
                "	IN poQty INT(1),              \n" +
                "	IN excessQty INT(1),              \n" +
                "	IN buildQty INT(1),              \n" +
                "	IN userID INT(1),              \n" +
                "	IN ECORemark VARCHAR(100),              \n" +
                "	IN FCORemark VARCHAR(100),              \n" +
                "	IN isRevision INT(1),        \n" +
                "	IN woType INT(11),      \n" +
                "	IN ecoReqID INT(11)             \n" +
                ")  \n" +
                "BEGIN              \n" +
                "DECLARE insertedWOID INT(1);            \n" +
                "DECLARE insertedSubFormTransID INT(11);            \n" +
                "DECLARE lv_subFormTransID_from INT(11);            \n" +
                "DECLARE lv_parentDataElementID_from INT(11);            \n" +
                "DECLARE lv_rowNumber_from INT(11);            \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION              \n" +
                "BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING              \n" +
                "  BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))              \n" +
                "THEN SELECT 'woNumber' errorCode;              \n" +
                "ELSE              \n" +
                "	START TRANSACTION;              \n" +
                "  \n" +
                "    # copy workorder               \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`assyID`,`customerID`,`assyRevID`,`poNumber`,              \n" +
                "	`poQty`,`buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`              \n" +
                "	,`woStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`,`LocationSampleDetails`              \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`)              \n" +
                "	SELECT woNumber `woNumber`, assyID `assyID`,`customerID`,assyRevID `assyRevID`,`poNumber`,              \n" +
                "	poQty `poQty`,buildQty `buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,woID,              \n" +
                "	UTC_DATE() `createdAt`, userID `createdBy`,0 `woStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`,              \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`LocationSampleDetails`,`isOperationTrackBySerialNo`,`isNoClean`,              \n" +
                "	`isWatersoluble`,`isRevisedWO` , woType `woType` , ecoReqID `ecoReqID`            \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;              \n" +
                "	SET	insertedWOID = LAST_INSERT_ID();              \n" +
                "  \n" +
                "    # copy workorder_certification              \n" +
                "  \n" +
                "	INSERT INTO workorder_certification              \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)              \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,UTC_DATE() `createdAt`,userID `createdBy`,`classIDs`, `isDeleted` FROM workorder_certification wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;              \n" +
                "  \n" +
                "    # copy workorder_operation              \n" +
                "  \n" +
                "    INSERT INTO workorder_operation              \n" +
                "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,              \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,              \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,              \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,`colorcode`)              \n" +
                "	SELECT insertedWOID `woID`,`opID`,UTC_DATE() `createdAt`,userID `createdBy`,`opName`,`opNumber`,              \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,              \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,              \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,              \n" +
                "    'A' opVersion, `colorCode`              \n" +
                "	 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;              \n" +
                "  \n" +
                "	# copy workorder_cluster              \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster              \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)              \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, UTC_DATE() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;              \n" +
                "  \n" +
                "    # copy workorder_operation_cluster              \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)              \n" +
                "	SELECT               \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID               \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID               \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,               \n" +
                "	woc.opID, woc.displayOrder, UTC_DATE() `createdAt`, userID `createdBy`,              \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`              \n" +
                "	FROM workorder_operation_cluster woc              \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)              \n" +
                "	AND woc.deletedAt IS NULL;              \n" +
                "  \n" +
                "    # copy workorder_operation_part              \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part              \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)              \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,UTC_DATE() `createdAt`,userID `createdBy`,              \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	              \n" +
                "	, `isDeleted` FROM workorder_operation_part wop WHERE wop.woID = woID AND wop.deletedAt IS NULL;              \n" +
                "  \n" +
                "    # copy workorder_operation_equipment              \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment              \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)              \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,UTC_DATE() `createdAt`,userID `createdBy`,              \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`              \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;              \n" +
                "  \n" +
                "    # copy workorder_operation_employee              \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee              \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)              \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,UTC_DATE() `createdAt`,userID `createdBy`,              \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`               \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;              \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields             \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues              \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)              \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,UTC_DATE() `createdAt`,              \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`           \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID              \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)              \n" +
                "	AND dt.deletedAt IS NULL;              \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form	          \n" +
                "  \n" +
                "	block1:BEGIN               \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)          \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR           \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`          \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL          \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL              \n" +
                "						AND entityID = (SELECT entityID FROM entity en           \n" +
                "									WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)          \n" +
                "						AND refTransID = woID           \n" +
                "						ORDER BY refSubFormTransID ASC		          \n" +
                "					);            \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;               \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;                \n" +
                "	-- loop item till all records found in string match of sub-form data element          \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP            \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;            \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN          \n" +
                "			LEAVE wo_sub_Form_loop;              \n" +
                "		 END IF;                  \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */	          \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)          \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);          \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	          \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */          \n" +
                "		UPDATE dataelement_transactionvalues          \n" +
                "		SET refSubFormTransID = insertedSubFormTransID          \n" +
                "		WHERE deletedAt IS NULL          \n" +
                "		AND refTransID = insertedWOID          \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;          \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;          \n" +
                "		SET lv_parentDataElementID_from = NULL;          \n" +
                "		SET lv_rowNumber_from = NULL;          \n" +
                "		SET insertedSubFormTransID = NULL;          \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;	          \n" +
                "	CLOSE subform_wo_from_data_cursor;	          \n" +
                "  \n" +
                "	END  block1;   				            \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement              \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`              \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)              \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,              \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`              \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement              \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`              \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)              \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,              \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`              \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;             \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields             \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues              \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)              \n" +
                "	SELECT `dataElementID`,`value`,          \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo            \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom               \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )          \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,          \n" +
                "	`entityID`,UTC_DATE() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`           \n" +
                "	FROM dataelement_transactionvalues dt           \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL          \n" +
                "					AND wop.woID = woID )          \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)              \n" +
                "	AND dt.deletedAt IS NULL;           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form	          \n" +
                "  \n" +
                "	block2:BEGIN               \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)          \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR           \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`          \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL          \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL              \n" +
                "					AND entityID = (SELECT entityID FROM entity en           \n" +
                "						WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)          \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation           \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )           \n" +
                "					ORDER BY refSubFormTransID ASC		    	          \n" +
                "			);           \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;               \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;                \n" +
                "	-- loop item till all records found in string match of sub-form data element          \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP            \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;            \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN          \n" +
                "			LEAVE woop_sub_Form_loop;                  \n" +
                "		 END IF;                  \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */	          \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)          \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);          \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	          \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */          \n" +
                "		SET @SQl1 = CONCAT('          \n" +
                "				UPDATE dataelement_transactionvalues          \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,          \n" +
                "				' WHERE deletedAt IS NULL          \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation          \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )          \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';		          \n" +
                "			');		                                              \n" +
                "		PREPARE stmt1 FROM @SQL1;                                              \n" +
                "		EXECUTE stmt1;     		          \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;          \n" +
                "		SET lv_parentDataElementID_from = NULL;          \n" +
                "		SET lv_rowNumber_from = NULL;          \n" +
                "		SET insertedSubFormTransID = NULL;          \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;	          \n" +
                "	CLOSE subform_woop_from_data_cursor;	          \n" +
                "  \n" +
                "	END  block2;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp              \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery              \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`              \n" +
                "    (`woID`,`partNumber`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)              \n" +
                "	SELECT               \n" +
                "    insertedWOID `woID`,`partNumber`,`woMultiplier`,`displayOrder`,userID `createdBy`,UTC_DATE() `createdAt`,`programName`,              \n" +
                "    (SELECT woOPID FROM               \n" +
                "    workorder_operation wop               \n" +
                "	WHERE wop.opID IN (              \n" +
                "		SELECT opID FROM workorder_operation wo               \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID              \n" +
                "		)              \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID              \n" +
                "	FROM workorder_preprogcomp wp               \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator              \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`              \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)              \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,              \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.partNumber =               \n" +
                "	(SELECT swp.partNumber FROM workorder_preprogcomp swp WHERE swp.woID = woID AND              \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,              \n" +
                "	userID `createdBy`,UTC_DATE() `createdAt`              \n" +
                "	FROM workorder_preprogcomp_designator wpd               \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;              \n" +
                "  \n" +
                "    IF IFNULL(isRevision,0) = 0 THEN              \n" +
                "	    # copy generic_folder              \n" +
                "	    INSERT INTO generic_folder              \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,              \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`)              \n" +
                "			SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,              \n" +
                "			0 isDeleted, UTC_DATE() createdAt, userID createdBy, a.gencFolderID copyGencFolderID              \n" +
                "			FROM generic_folder a WHERE a.refTransID = woID AND a.gencFileOwnerType = 'workorder'  AND a.deletedAt IS NULL;              \n" +
                "		UPDATE generic_folder gf1,              \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID              \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'              \n" +
                "			) gf2              \n" +
                "			SET gf1.refParentId = gf2.gencFolderID              \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';              \n" +
                "    END IF;              \n" +
                "	COMMIT;              \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;              \n" +
                "END IF;              \n" +
                "END;  \n" +
                /* **************************** add script version -> 10-12-2018 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`) " +
                "values (46,'2.00','v1','Task 4343: Connector Type Validation - Jignesh '," + userid + ");"
            );
            break;
        case 46:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerAliasByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerAliasByID`(        \n" +
                "	IN pRefComponentID INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "select      \n" +
                "CASE WHEN a.revision IS NULL THEN    \n" +
                "concat(a.custpn,'-',a.flextronRevision,IFNULL(concat('(',c.customerCode,')'),''))  \n" +
                "ELSE    \n" +
                "concat(a.custpn,'-', a.revision,'-' ,a.flextronRevision, IFNULL(concat('(',c.customerCode,')'),''))END  \n" +
                "As customerAlias        \n" +
                "from ((component_cust_alias_rev as a    \n" +
                "join component_cust_alias_rev_pn as cust on  cust.refComponentCustAliasRevID= a.id)        \n" +
                "join customers as c on a.customerID = c.id ) where refComponentID = pRefComponentID;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (47,'2.00','V1','get customer alias list sp change - shirish'," + userid + ");"
            );
            break;
        case 47:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                  \n" +
                "	IN rfqAssyID INT(1),                  \n" +
                "	IN userID INT(1)                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "  BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                  \n" +
                "  \n" +
                "    START TRANSACTION;          \n" +
                "  \n" +
                "    #consoliadte select           \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS           \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID=rfqAssyID;            \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "		SELECT rfqLineItemsID AS rfqLineItemsID,attritionRate,isInstall,GROUP_CONCAT(refDesig) AS refDesig,                   \n" +
                "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,                  \n" +
                "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,                  \n" +
                "		SUM(qpa2) qpa, CAST((SUM(adcost1)/SUM(qpa2)) AS DECIMAL(10,5)) AS valueAddedCost,                  \n" +
                "		mfg,COUNT(*)AS multiple,GROUP_CONCAT(rfqLineItemsID) AS consolidatedLineItemIDs ,customerApproval                 \n" +
                "		FROM                   \n" +
                "		(SELECT *,(qpa1*valueAddedCost)AS adcost1, qpa1 AS qpa2, GROUP_CONCAT(DISTINCT(part)) mfg                  \n" +
                "		FROM                  \n" +
                "		(SELECT b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID, a.refDesig,                  \n" +
                "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)AS qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)AS addCost,                   \n" +
                "		CONCAT(b.mfgCodeID,' | ', b.mfgPNID ) AS part,a.attritionRate,a.isInstall,                   \n" +
                "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,                  \n" +
                "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID,b.customerApproval                  \n" +
                "		FROM rfq_lineitems_alternatepart b                   \n" +
                "		JOIN rfq_lineitems a ON b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0                 \n" +
                "		WHERE IFNULL(b.isDeleted,0) = 0 AND b.mfgPNID != 0 AND (b.mfgPNID IS NOT NULL OR b.mfgPN IS NOT NULL)                \n" +
                "		GROUP BY b.rfqLineItemsID, b.mfgPN, CONCAT(b.mfgCode,' | ', b.mfgPN)) aa                  \n" +
                "		GROUP BY aa.rfqLineItemsID, aa.customerApproval) ab                   \n" +
                "		GROUP BY numOfPosition,isPurchase,mfg,customerApproval;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                  \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "			SET                   \n" +
                "			cl.isDeleted = TRUE,                  \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "			cl.deletedBy = userID                  \n" +
                "			WHERE cl.rfqAssyID = rfqAssyID AND cl.id NOT IN (                  \n" +
                "            SELECT * FROM(                       \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                  \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                   \n" +
                "			WHERE rcl.rfqAssyID = rfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                  \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                   \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                  \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                  \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                  \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`)                  \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,                  \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                  \n" +
                "		userID `createdBy`, R.`numOfPosition`,                  \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`refDesig`                   \n" +
                "        FROM Results R                  \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                  \n" +
                "		 WHERE cl.id IS NULL;                  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                  \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                  \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                  \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                  \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                   \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                  \n" +
                "  \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                  \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                   \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.id  IS NOT NULL                   \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                   \n" +
                "		SET                   \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                  \n" +
                "        rq.updatedBy = userID,                  \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                  \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# Update Consilidated LineItems                  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                   \n" +
                "		SET                   \n" +
                "		cl.isInstall = R.isInstall ,                  \n" +
                "		cl.isPurchase = R.isPurchase,                  \n" +
                "		cl.numOfPosition = R.numOfPosition,                  \n" +
                "		cl.attritionRate = R.attritionRate,                  \n" +
                "		cl.leadQty = R.leadQty,                  \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                  \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                  \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                  \n" +
                "        cl.qpa = R.qpa,                  \n" +
                "        cl.uomID = R.uomID,        \n" +
                "        cl.refDesig = R.refDesig,        \n" +
                "        cl.lineID = R.lineID,                  \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,                  \n" +
                "        cl.updatedBy = userID                  \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                  \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                  \n" +
                "  \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                  \n" +
                "		SET                   \n" +
                "        cap.isDeleted = TRUE,                  \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cap.deletedBy = userID                  \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL                    \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                       \n" +
                "  \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                  \n" +
                "  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                   \n" +
                "		SET                   \n" +
                "        isDeleted = TRUE,                  \n" +
                "        deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		deletedBy = userID                  \n" +
                "        WHERE id IN(                   \n" +
                "        SELECT capID FROM (                  \n" +
                "		SELECT DISTINCT(cap.id)AS capID                  \n" +
                "		FROM rfq_lineitems_alternatepart ap                   \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID                  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                   \n" +
                "		JOIN rfq_parttypemst pt ON pt.id = rl.partTypeID AND pt.category != 3                  \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                  \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                   \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = rfqAssyID AND isDeleted = 1) rq                \n" +
                "		SET                   \n" +
                "        cq.isDeleted = TRUE,                  \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cq.deletedBy = userID                  \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL                    \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                       \n" +
                "  \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove                \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = rfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                \n" +
                "		SET                   \n" +
                "        cq.isDeleted = TRUE,                  \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cq.deletedBy = userID                  \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = rfqAssyID AND IFNULL(isDeleted, 0) = 0)                    \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                    \n" +
                "  \n" +
                "# delete Consolidate lineItems                   \n" +
                "  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "		SET                   \n" +
                "        cl.isDeleted = TRUE,                  \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cl.deletedBy = userID                  \n" +
                "		WHERE  cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                  \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                          \n" +
                "  \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                   \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                  \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                  \n" +
                "		SELECT DISTINCT(ap.`mfgPN`),(SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = rfqAssyID AND rcl.lineID = rl.lineID AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                  \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                  \n" +
                "		FROM rfq_lineitems_alternatepart ap                   \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID              \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0              \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                  \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed              \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = rfqAssyID AND a.isDeleted = 0) rcl              \n" +
                "		SET                   \n" +
                "        cap.isDeleted = TRUE,                  \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cap.deletedBy = userID              \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (               \n" +
                "        SELECT  DISTINCT(cap.id)                  \n" +
                "		FROM rfq_lineitems_alternatepart ap                   \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID              \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove                \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,               \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,              \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                    \n" +
                "		SET                   \n" +
                "        cq.finalPrice = NULL,              \n" +
                "        cq.selectedPIDCode = NULL,              \n" +
                "        cq.selectedMpn = NULL,              \n" +
                "        cq.selectionMode = NULL,              \n" +
                "        cq.supplier = NULL,              \n" +
                "        cq.supplierStock = NULL,              \n" +
                "        cq.currentStock = NULL,              \n" +
                "        cq.grossStock = NULL,              \n" +
                "        cq.leadTime = NULL,              \n" +
                "        cq.min = NULL,              \n" +
                "        cq.mult = NULL,              \n" +
                "        cq.unitPrice = NULL,              \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                  \n" +
                "		cq.updatedBy = userID                  \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                    \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                 \n" +
                "  \n" +
                "  # update rfq assembly pricing status      \n" +
                "  \n" +
                "    UPDATE rfq_assemblies SET isReadyForPricing = TRUE, updatedAt = UTC_TIMESTAMP(), updatedBy = userID WHERE isDeleted = 0 AND id = rfqAssyID;      \n" +
                "  \n" +
                "    COMMIT;              \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId=rfqAssyID AND isdeleted=0)            \n" +
                "    UNION          \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id           \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID=rfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;           \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (48,'2.00','V1','Consolidated lineItems sp change - shirish'," + userid + ");"
            );
            break;
        case 48:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderStatus`(	  \n" +
                "	IN psalesId INT(11)	   \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT w.woID,w.woNumber FROM workorder_salesorder_details ws LEFT JOIN salesorderdet sd ON sd.id=ws.salesOrderDetailID AND sd.isDeleted=0  \n" +
                "LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isDeleted=0  \n" +
                "LEFT JOIN workorder w ON w.woID=ws.woID AND w.isdeleted=0  \n" +
                "WHERE sm.id=psalesId AND w.woStatus=1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (49,'2.00','V1','Create sp Sproc_GetSalesOrderStatus-Champak'," + userid + ");"
            );
            break;
        case 49:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2018  *********************************** */
                "ALTER TABLE userpagedetail ADD COLUMN roleID INT NOT NULL;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "TRUNCATE TABLE userpagedetail;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "ALTER TABLE userpagedetail  \n" +
                "   ADD CONSTRAINT FK_userpagedetail_role_roleID  \n" +
                "   FOREIGN KEY (roleID) REFERENCES roles(id);  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "INSERT INTO userpagedetail (userID, pageID, RO, RW, isActive, isDeleted, createdBy, IsShortcut, roleID)  \n" +
                "   SELECT 1 AS userID, pageID, 0 AS RO, 0 AS RW, 1 AS isActive, 0 AS isDeleted, 1 AS createdBy, 0 AS IsShortcut, 1 AS roleID FROM rolepagedetail   \n" +
                "   WHERE RoleID = (SELECT id FROM roles WHERE `name`='Super Admin' LIMIT 1) AND PageID NOT IN (SELECT PageID FROM page_detail WHERE hasChild = 1 and deletedAt IS NULL);  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "ALTER TABLE feature_user_mapping ADD COLUMN roleID INT NOT NULL;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "TRUNCATE TABLE feature_user_mapping;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "ALTER TABLE feature_user_mapping  \n" +
                "   ADD CONSTRAINT FK_feature_user_mapping_roleID  \n" +
                "   FOREIGN KEY (roleID) REFERENCES roles(id);  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "INSERT INTO feature_user_mapping (featureID, userID, isActive, isDeleted, createdBy, roleID)  \n" +
                "   SELECT featureID, 1 AS userID, 1 AS isActive, 0 AS isDeleted, 1 AS createdBy, 1 AS roleID FROM feature_role_mapping WHERE RoleID = (SELECT id FROM roles WHERE `name`='Super Admin' and deletedAt IS NULL LIMIT 1);  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "ALTER TABLE page_detail ADD COLUMN isDisplay TINYINT NOT NULL DEFAULT 0;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "	SELECT pageID FROM page_detail WHERE parentPageID IN (SELECT pageID FROM page_detail WHERE (pageRoute IS NULL OR pageRoute = '') and deletedAt IS NULL);  \n" +
                "	UPDATE page_detail SET isDisplay = 1 WHERE pageID IN (SELECT pageID FROM Results);  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "DELETE FROM users_roles WHERE deletedAt IS NOT NULL;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "UPDATE page_detail SET isActive = 0 WHERE pageName = '{{UserName}}' OR pageName = 'User';  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "ALTER TABLE Users ADD COLUMN defaultLoginRoleID INT;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "ALTER TABLE Users  \n" +
                "    ADD CONSTRAINT FK_user_defaultRoleID  \n" +
                "    FOREIGN KEY (defaultLoginRoleID) REFERENCES roles(id);  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "CREATE TEMPORARY TABLE IF NOT EXISTS tempuser AS   \n" +
                "  \n" +
                "	SELECT roleId, userId FROM users_roles WHERE deletedAt IS NULL AND userId IN (SELECT id FROM Users WHERE deletedAt IS NULL) GROUP BY userId;  \n" +
                "  \n" +
                "	UPDATE Users SET defaultLoginRoleID = (SELECT roleId FROM tempuser WHERE userId = id);  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempuser;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "DROP PROCEDURE IF EXISTS `Sproc_GetPermissionsPageListByRole` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pUserId INT(11),  \n" +
                "	IN pRoleId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);   \n" +
                "  \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (@result1 = 0) THEN  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
                "			SELECT `rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay` FROM `rolepagedetail` AS `rp`  \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`  \n" +
                "			WHERE `rp`.`roleID` = pRoleId AND `rp`.`deletedAt` IS NULL AND `pd`.`deletedAt` IS NULL AND `pd`.`isActive` = 1;  \n" +
                "  \n" +
                "			INSERT INTO PageResults (roleID, pageID, pageName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay)  \n" +
                "			SELECT pRoleId AS roleID, pageID, pageName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay   \n" +
                "			FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM rolepagedetail WHERE roleID = pRoleId AND deletedAt IS NULL);  \n" +
                "	ELSE  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
                "			SELECT `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`, `up`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay` FROM `userpagedetail` AS `up`  \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`  \n" +
                "			WHERE `up`.`userID` = pUserId AND `up`.`roleID` = pRoleId AND `up`.`deletedAt` IS NULL AND `pd`.`deletedAt` IS NULL AND `pd`.`isActive` = 1;  \n" +
                "  \n" +
                "		INSERT INTO PageResults (roleID, userID, pageID, pageName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay)  \n" +
                "		SELECT pRoleId AS roleID, pUserId AS userID, pageID, pageName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay   \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
                "END;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "DROP PROCEDURE IF EXISTS `Sproc_GetUserPageFeaturesDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetUserPageFeaturesDetails`(  \n" +
                "	IN ppageID VARCHAR(1000),  \n" +
                "	IN puserID INT(11),  \n" +
                "	IN proleID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('select featureName from feature_mst where featureID in   \n" +
                "	(SELECT featureID   \n" +
                "		FROM feature_user_mapping   \n" +
                "	WHERE userid=',puserID,' AND roleid=',proleID,' AND deletedAt IS NULL AND isActive=1 AND featureID IN   \n" +
                "		(SELECT featureID   \n" +
                "			FROM feature_page_details WHERE pageid IN (',ppageID,') AND deletedAt IS NULL AND isActive=1))   \n" +
                "	AND deletedAt IS NULL AND isActive=1');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "END;  \n" +
                /****************************************************** 11/12/2018 ************************************************/
                "DROP PROCEDURE IF EXISTS `Sproc_GetFeaturesPageListByRole` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetFeaturesPageListByRole`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pUserId INT(11),  \n" +
                "	IN pRoleId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);   \n" +
                "  \n" +
                "	SELECT COUNT(*) INTO @result1 FROM feature_user_mapping WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (@result1 = 0) THEN  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
                "			SELECT `frm`.`roleID`, `frm`.`featureID`, `fm`.`featureName`, `frm`.`isActive` FROM `feature_role_mapping` AS `frm`  \n" +
                "			LEFT JOIN `feature_mst` AS `fm` ON `frm`.`featureID` = `fm`.`featureID`  \n" +
                "			WHERE `frm`.`roleID` = pRoleId AND `frm`.`deletedAt` IS NULL AND `fm`.`deletedAt` IS NULL AND `fm`.`isActive` = 1;  \n" +
                "  \n" +
                "			INSERT INTO PageResults (roleID, featureID, featureName, isActive)  \n" +
                "			SELECT pRoleId AS roleID, featureID, featureName, 0 AS isActive   \n" +
                "			FROM feature_mst WHERE deletedAt IS NULL AND isActive = 1 AND featureID NOT IN (SELECT featureID FROM feature_role_mapping WHERE roleID = pRoleId AND deletedAt IS NULL);  \n" +
                "	ELSE  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
                "			SELECT `fum`.`roleID`, `fum`.`userID`, `fum`.`featureID`, `fm`.`featureName`, `fum`.`isActive` FROM `feature_user_mapping` AS `fum`  \n" +
                "			LEFT JOIN `feature_mst` AS `fm` ON `fum`.`featureID` = `fm`.`featureID`  \n" +
                "			WHERE `fum`.`userID` = pUserId AND `fum`.`roleID` = pRoleId AND `fum`.`deletedAt` IS NULL AND `fm`.`deletedAt` IS NULL AND `fm`.`isActive` = 1;  \n" +
                "  \n" +
                "			INSERT INTO PageResults (roleID, userID, featureID, featureName, isActive)  \n" +
                "			SELECT pRoleId AS roleID, pUserId AS userID, featureID, featureName, 0 AS isActive   \n" +
                "			FROM feature_mst WHERE deletedAt IS NULL AND isActive = 1 AND featureID NOT IN (SELECT featureID FROM feature_user_mapping WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"featureName ASC\");    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (50,'2.00','V1','User Role and Permission Changes - Fenil'," + userid + ");"
            );
            break;
        case 50:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2018  *********************************** */
                "CREATE TEMPORARY TABLE IF NOT EXISTS tempuser AS   \n" +
                "  \n" +
                "	SELECT pageID FROM page_detail WHERE parentPageID IN (SELECT pageID FROM page_detail WHERE pageName = \"User\");  \n" +
                "  \n" +
                "	SELECT pageID INTO @result1 FROM page_detail WHERE pageName = \"Admin\";  \n" +
                "  \n" +
                "	UPDATE page_detail SET parentPageID = @result1 WHERE pageID IN (SELECT pageID FROM tempuser);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempuser;  \n" +
                /* **************************** Add Script Version -> 11-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (51,'2.00','V1',' Change DB entry of page-detail table for Role menu - FENIL '," + userid + ");"
            );
            break;
        case 51:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2018  *********************************** */
                "UPDATE feature_mst  \n" +
                "SET isActive=0  \n" +
                "WHERE featureName = 'Change Traveler History';  \n" +
                /* **************************** Add Script Version -> 11-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (52,'2.00','V1','Page Rights Changes - Vaibhav'," + userid + ");"
            );
            break;
        case 52:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-12-2018  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getFolderCountByParentID` ;  \n" +
                "CREATE FUNCTION `fun_getFolderCountByParentID`(  \n" +
                "	pAccessLevel INT(11),  \n" +
                "	prefTransID INT(11),  \n" +
                "	prefParentID INT(11),  \n" +
                "	pGencFileOwnerType VARCHAR(100),  \n" +
                "	pIsTraveler TINYINT(11)) RETURNS VARCHAR(50) CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE totalCount INT(11);  \n" +
                "	SELECT COUNT(*) INTO @totalCount   \n" +
                "		FROM (SELECT refParentID ,refTransID, gencFileOwnerType  \n" +
                "			FROM generic_folder a  \n" +
                "			WHERE a.deletedAt IS NULL  \n" +
                "			AND a.roleID IN (SELECT id FROM roles WHERE accessLevel >= pAccessLevel AND deletedAt IS NULL)  \n" +
                "			UNION ALL  \n" +
                "			SELECT refParentID,refTransID, gencFileOwnerType FROM genericfiles b   \n" +
                "			WHERE b.deletedAt IS NULL) AS t   \n" +
                "			WHERE t.refTransID=prefTransID   \n" +
                "			AND t.refParentID=prefParentID  \n" +
                "			AND t.gencFileOwnerType = pGencFileOwnerType;  \n" +
                "  \n" +
                "	IF (pGencFileOwnerType = 'workorder_operation') THEN    \n" +
                "		SELECT COUNT(*) INTO @totalCount   \n" +
                "			FROM (SELECT refParentID ,refTransID, gencFileOwnerType  \n" +
                "				FROM generic_folder a  \n" +
                "				WHERE a.deletedAt IS NULL  \n" +
                "				AND a.roleID IN (SELECT id FROM roles WHERE accessLevel >= pAccessLevel AND deletedAt IS NULL)  \n" +
                "				UNION ALL  \n" +
                "				SELECT refParentID,refTransID, gencFileOwnerType FROM genericfiles b   \n" +
                "				WHERE b.deletedAt IS NULL) AS t   \n" +
                "				WHERE t.refParentID=prefParentID AND ((t.refTransID=prefTransID AND t.gencFileOwnerType = pGencFileOwnerType) OR  \n" +
                "				(t.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID=prefTransID AND deletedAt IS NULL) AND t.gencFileOwnerType = 'operations'));  \n" +
                "	END IF;  \n" +
                "	IF (pIsTraveler = 1) THEN            \n" +
                "		SELECT COUNT(*) INTO @totalCount   \n" +
                "			FROM (SELECT refParentID ,refTransID, gencFileOwnerType  \n" +
                "				FROM generic_folder a  \n" +
                "				WHERE a.deletedAt IS NULL  \n" +
                "				AND a.roleID IN (SELECT id FROM roles WHERE accessLevel >= pAccessLevel AND deletedAt IS NULL)  \n" +
                "				UNION ALL  \n" +
                "				SELECT refParentID,refTransID, gencFileOwnerType FROM genericfiles b   \n" +
                "				WHERE b.deletedAt IS NULL) AS t   \n" +
                "				WHERE t.refParentID=prefParentID AND ((t.refTransID=prefTransID AND t.gencFileOwnerType = pGencFileOwnerType) OR  \n" +
                "				(t.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID=prefTransID AND deletedAt IS NULL) AND t.gencFileOwnerType = 'operations') OR  \n" +
                "				(t.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID=prefTransID AND deletedAt IS NULL) AND t.gencFileOwnerType = 'workorder'));  \n" +
                "	END IF;  \n" +
                "      	SET totalCount = @totalCount;  \n" +
                "	RETURN totalCount;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetGenericFolders` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetGenericFolders`(        \n" +
                "IN pRefTransId INT,        \n" +
                "IN pEntityId INT,        \n" +
                "IN pAccessLevel DECIMAL(6,2),        \n" +
                "IN pGencFileOwnerType VARCHAR(255),            \n" +
                "IN pIsTraveler TINYINT(1)            \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE whereClauseFolder VARCHAR(1000);            \n" +
                "	DECLARE whereClauseAllFolder VARCHAR(1000);       \n" +
                "	DECLARE CountFolder VARCHAR(10000);    \n" +
                "  \n" +
                "	SET pEntityId = IFNULL(pEntityId,0);            \n" +
                "  \n" +
                "	SET whereClauseFolder = CONCAT(\" IFNULL(gf.entityID,0) = IFNULL(\",pEntityId,\",0)             \n" +
                "			AND gf.refTransID = \", pRefTransId,            \n" +
                "			\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");            \n" +
                "	SET whereClauseAllFolder = CONCAT(\" gf.refTransID = \", 0,            \n" +
                "			\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");              \n" +
                "  \n" +
                "	-- if workorder operation then show operation data too            \n" +
                "	IF (pGencFileOwnerType = 'workorder_operation') THEN            \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR            \n" +
                "				(IFNULL(gf.entityID,0) = -1             \n" +
                "				AND gf.refTransID     \n" +
                "					IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)             \n" +
                "				AND gf.gencFileOwnerType = 'operations')         \n" +
                "				AND gf.deletedAt IS NULL\");     \n" +
                "  \n" +
                "    END IF;            \n" +
                "	-- if traveler page than get data of operation, workorder, workorder operation            \n" +
                "    IF (pIsTraveler = 1) THEN            \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR            \n" +
                "				(IFNULL(gf.entityID,0) = -7            \n" +
                "				AND gf.refTransID IN     \n" +
                "				(SELECT woID FROM workorder_operation     \n" +
                "				WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)             \n" +
                "				AND gf.gencFileOwnerType = 'workorder')            \n" +
                "				AND gf.deletedAt IS NULL\");     \n" +
                "    END IF;        \n" +
                "  SET @SQLStatement1 = CONCAT(\"SELECT * FROM (SELECT         \n" +
                "gf.gencFolderName,        \n" +
                "gf.gencFolderID AS gencFolderID,        \n" +
                "gf.entityID,        \n" +
                "gf.refTransID,        \n" +
                "gf.gencFileOwnerType,        \n" +
                "gf.roleId,        \n" +
                "gf.refParentId AS folderParentID,          \n" +
                "rol.accessLevel,  \n" +
                "(SELECT fun_getFolderCountByParentID(\",pAccessLevel,\",\",prefTransID,\",gf.gencFolderID,'\", pGencFileOwnerType ,\"',\",pIsTraveler,\")) AS totalInnerFileFolder   \n" +
                "	FROM generic_folder gf        \n" +
                "	LEFT JOIN roles rol ON rol.id =  gf.roleId AND rol.deletedAt IS NULL       \n" +
                "    WHERE\", whereClauseFolder,\"        \n" +
                "UNION        \n" +
                "SELECT         \n" +
                "gf.gencFolderName,        \n" +
                "gf.gencFolderID AS gencFolderID,        \n" +
                "gf.entityID,        \n" +
                "gf.refTransID,        \n" +
                "gf.gencFileOwnerType,        \n" +
                "gf.roleId,        \n" +
                "gf.refParentId AS folderParentID,         \n" +
                "rol.accessLevel,  \n" +
                "(SELECT fun_getFolderCountByParentID(\",pAccessLevel,\",\",prefTransID,\",gf.gencFolderID,'\", pGencFileOwnerType ,\"',\",pIsTraveler,\")) AS totalInnerFileFolder    \n" +
                "	FROM generic_folder gf        \n" +
                "	LEFT JOIN roles rol ON rol.id =  gf.roleId AND rol.deletedAt IS NULL       \n" +
                "      WHERE\", whereClauseAllFolder,\")         \n" +
                "   q ORDER BY q.accessLevel,q.gencFolderID ASC\");        \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (53,'2.00','V1','Get Folder Count Function and SP Changes for same - Vaibhav'," + userid + ");"
            );
            break;
        case 53:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(      \n" +
                "IN pGoodPart VARCHAR(100),      \n" +
                "IN pSearch VARCHAR(100),      \n" +
                "IN pId INT(11),      \n" +
                "IN pMfgType VARCHAR(50),      \n" +
                "IN pRoHSStatusID VARCHAR(100),      \n" +
                "IN pMfgCodeId INT(11),  \n" +
                "IN pMountingType VARCHAR(50)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "if(pMountingType is NOT NULL) then  \n" +
                " SELECT * FROM      \n" +
                " (    \n" +
                "	 SELECT `com`.`id`,       \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,    \n" +
                "		`com`.`mfgPN` orgMfgPN,      \n" +
                "		`com`.`PID`,     \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		`com`.`altenetgroupID`,     \n" +
                "		`com`.`isGoodPart`,     \n" +
                "		`com`.`RoHSStatusID`,     \n" +
                "		`com`.`rohsgroupID`,      \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,     \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`      \n" +
                "	FROM `component` AS `com`     \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND       \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))    \n" +
                "    join `rfq_mountingtypemst` as `mt` on `mt`.`id` = `com`.`mountingTypeID` and `mt`.`name` = pMountingType  \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))      \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))      \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))    \n" +
                ");      \n" +
                "  \n" +
                "  else  \n" +
                "   SELECT * FROM      \n" +
                " (    \n" +
                "	 SELECT `com`.`id`,       \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,    \n" +
                "		`com`.`mfgPN` orgMfgPN,      \n" +
                "		`com`.`PID`,     \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		`com`.`altenetgroupID`,     \n" +
                "		`com`.`isGoodPart`,     \n" +
                "		`com`.`RoHSStatusID`,     \n" +
                "		`com`.`rohsgroupID`,      \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,     \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`      \n" +
                "	FROM `component` AS `com`     \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND       \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))       \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))      \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))      \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))    \n" +
                ");   \n" +
                "end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (54,'2.00','V1','Sproc_GetComponentMFGAliasSearch sp change - shirish'," + userid + ");"
            );
            break;
        case 54:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-12-2018  *********************************** */
                "UPDATE page_detail SET isDisplay = 0 WHERE isDisplay = 1;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "  \n" +
                "    SELECT * FROM page_detail WHERE hasChild = 0 AND isActive = 1 AND parentPageID IN (SELECT pageID FROM page_detail WHERE (pageRoute IS NULL OR pageRoute = '') AND hasChild = 1 AND isActive = 1);  \n" +
                "  \n" +
                "    UPDATE page_detail SET isDisplay = 1 WHERE pageID IN (SELECT pageID FROM Results);  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE Results;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "UPDATE page_detail SET isDisplay = 1 WHERE isDisplay = 0 AND hasChild = 0 AND parentPageID IS NULL AND parentPageID IS NULL AND pageName IS NOT NULL;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "UPDATE `page_detail` b, (SELECT * FROM page_detail WHERE pageName = 'BOM') a SET b.`parentPageID`= a.pageID WHERE b.pageName = 'RFQ BOM Document';  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (55,'2.00','V1',' DB changes related to Role and Right Permission - FENIL '," + userid + ");"
            );
            break;
        case 55:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "Drop PROCEDURE if Exists Sproc_SaveCustPn;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustPn`(   \n" +
                "In pcustomerID  int ,   \n" +
                "In prevision  varchar(50),  \n" +
                "In pcustpn    varchar(50),  \n" +
                "In pcomponentID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "-- get all record in temp table with same revision and same customer pn  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (      \n" +
                "SELECT c.id,c.custpn,c.flextronRevision FROM component_cust_alias_rev c      \n" +
                "WHERE IFNULL(c.isDeleted,0) = 0  AND c.deletedAt IS NULL AND c.customerID =pcustomerID AND c.revision = prevision AND c.custpn = pcustpn   \n" +
                "order by c.id desc limit 1);  \n" +
                "-- check if data available for same combination      \n" +
                "IF (SELECT COUNT(*) FROM temp_component_cust_alias_rev) >0 THEN      \n" +
                "  \n" +
                "		-- Update flextron revision as match with exisiting data with new data      \n" +
                "		SELECT flextronRevision INTO @nextflextronRevision FROM temp_component_cust_alias_rev;  \n" +
                "		SELECT CHAR(ASCII(@nextflextronRevision) + 1) INTO @nextflextronRevision;      \n" +
                "		-- Add all mfg part numbers in customer alias with new revision      \n" +
                "		INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision)  \n" +
                "        VALUES(pcustomerID,pcustpn,prevision,@nextflextronRevision);  \n" +
                "		SELECT LAST_INSERT_ID() INTO @maxRevId;   \n" +
                "  \n" +
                "  \n" +
                "		-- get all part # data in temp table for   \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev_pn AS (      \n" +
                "		SELECT crp.refComponentID       \n" +
                "		FROM component_cust_alias_rev_pn crp  WHERE crp.refComponentCustAliasRevID   \n" +
                "		IN (SELECT id FROM temp_component_cust_alias_rev)  \n" +
                "        AND  IFNULL(crp.isDeleted,0) = 0 AND crp.deletedAt IS NULL);  \n" +
                "  \n" +
                "		-- check if revision has part number exists than copy  \n" +
                "        IF (SELECT COUNT(*) FROM temp_component_cust_alias_rev_pn) >0 THEN   \n" +
                "  \n" +
                "			INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID)   \n" +
                "            SELECT @maxRevId, cust_rev_pn.refComponentID from (SELECT refComponentID FROM temp_component_cust_alias_rev_pn) as cust_rev_pn;  \n" +
                "  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;      \n" +
                "ELSE    \n" +
                "		INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision) VALUES(pcustomerID,pcustpn,prevision,'A');  \n" +
                "END	IF;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "drop PROCEDURE if exists `Sproc_SaveCustMFGPn`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(   \n" +
                "In pcustomerID  int ,   \n" +
                "In prefComponentCustAliasRevID int,  \n" +
                "In prefComponentID int,  \n" +
                "In paction varchar(25)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	--   \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (      \n" +
                "	SELECT * FROM component_cust_alias_rev c  \n" +
                "	WHERE IFNULL(c.isDeleted,0) = 0  AND c.deletedAt IS NULL  \n" +
                "	AND c.id = prefComponentCustAliasRevID AND c.customerID = pcustomerID);  \n" +
                "    select custpn, revision into @cust_pn, @cust_rev from temp_component_cust_alias_rev;  \n" +
                "  \n" +
                "    select ccar.flextronRevision into @maxflextronrevision from component_cust_alias_rev ccar  \n" +
                "    where  ccar.customerID = pcustomerID AND ccar.custpn=@cust_pn AND ccar.revision=@cust_rev   \n" +
                "    AND IFNULL(ccar.isDeleted,0) = 0 AND ccar.deletedAt IS NULL order by ccar.id desc limit 1;  \n" +
                "  \n" +
                "IF(SELECT COUNT(rfqAssyBomID) FROM temp_component_cust_alias_rev) > 0 then  \n" +
                "	IF(paction = 'Add') THEN  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev_pn AS (      \n" +
                "			SELECT crp.refComponentID       \n" +
                "			FROM component_cust_alias_rev_pn crp   \n" +
                "            WHERE crp.refComponentCustAliasRevID IN (SELECT id FROM temp_component_cust_alias_rev)  \n" +
                "            AND IFNULL(crp.isDeleted,0) = 0  AND crp.deletedAt IS NULL);  \n" +
                "			-- Update flextron revision as match with exisiting data with new data      \n" +
                "			SELECT CHAR(ASCII(@maxflextronrevision) + 1) INTO @nextflextronRevision;      \n" +
                "			-- Add all mfg part numbers in customer alias with new revision      \n" +
                "			INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision)  \n" +
                "            VALUES(pcustomerID, @cust_pn, @cust_rev, @nextflextronRevision);  \n" +
                "			SELECT LAST_INSERT_ID() INTO @maxRevId;   \n" +
                "  \n" +
                "			-- check if revision has part number exists than copy  \n" +
                "			IF (SELECT COUNT(*) FROM temp_component_cust_alias_rev_pn) >0 THEN   \n" +
                "				INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID)   \n" +
                "                SELECT @maxRevId,cust_rev_pn.refComponentID from (SELECT refComponentID FROM temp_component_cust_alias_rev_pn) as cust_rev_pn;			  \n" +
                "			END IF;  \n" +
                "			INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID)  \n" +
                "            Values(@maxRevId,prefComponentID);   \n" +
                "		ELSE IF(paction = 'Delete') then  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev_pn AS (      \n" +
                "			SELECT crp.refComponentID  \n" +
                "			FROM component_cust_alias_rev_pn crp   \n" +
                "			WHERE crp.refComponentID NOT IN (prefComponentID)  \n" +
                "            AND crp.refComponentCustAliasRevID = prefComponentCustAliasRevID   \n" +
                "			AND IFNULL(crp.isDeleted,0) = 0 AND crp.deletedAt IS NULL);       \n" +
                "  \n" +
                "			-- Update flextron revision as match with exisiting data with new data      \n" +
                "			SELECT CHAR(ASCII(@maxflextronrevision) + 1) INTO @nextflextronRevision;     \n" +
                "  \n" +
                "			-- Add all mfg part numbers in customer alias with new revision      \n" +
                "			INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision)  \n" +
                "            VALUES(pcustomerID,@cust_pn, @cust_rev, @nextflextronRevision);  \n" +
                "			SELECT LAST_INSERT_ID() INTO @maxRevId;   \n" +
                "  \n" +
                "			INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID)  \n" +
                "			SELECT @maxRevId, cust_rev_pn.refComponentID from   \n" +
                "            (SELECT refComponentID FROM temp_component_cust_alias_rev_pn) as cust_rev_pn;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "ELSE   \n" +
                "	IF(paction = 'Add') THEN  \n" +
                "		INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID)Values(prefComponentCustAliasRevID,prefComponentID);  \n" +
                "        select * from component_cust_alias_rev;  \n" +
                "	ELSE IF (paction = 'Delete') THEN  \n" +
                "		update component_cust_alias_rev_pn set isDeleted=1, deletedAt=NOW()   \n" +
                "            where refComponentCustAliasRevID=prefComponentCustAliasRevID AND refComponentID = prefComponentID and deletedAt is NULL;  \n" +
                "    END IF;  \n" +
                "END IF;  \n" +
                "END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "Drop PROCEDURE if exists `Sproc_GetComponentCustAliasRev`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustAliasRev`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "        IN pWhereClause VARCHAR(16383),  \n" +
                "        IN pcustomerID VARCHAR(255)   \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "               SELECT  car.id,car.custpn,car.customerID,car.revision,car.flextronRevision,c.companyName,car.rfqAssyBomID,  \n" +
                "              CASE   \n" +
                "              WHEN (car.flextronRevision = (select cca.flextronRevision from component_cust_alias_rev cca   \n" +
                "				where car.custpn = cca.custpn  \n" +
                "                and car.revision = cca.revision  \n" +
                "                and car.customerID = cca.customerID  \n" +
                "                order by cca.id desc limit 1)  \n" +
                "                ) THEN true  \n" +
                "                when (car.rfqAssyBomID IS NULL) THEN false  \n" +
                "                ELSE false  \n" +
                "                END AS isAllowDelete  \n" +
                "               FROM component_cust_alias_rev car  \n" +
                "               LEFT OUTER JOIN customers c ON car.customerID=c.id AND IFNULL(c.isDeleted,0)=0  \n" +
                "		WHERE IFNULL(car.isDeleted,0)=0 AND car.customerID=pcustomerID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"revision ASC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "Drop PROCEDURE if exists `Sproc_checkDelete_component_cust_alias_rev`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_cust_alias_rev`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN                                                      \n" +
                "		SET @SQl1 = CONCAT('update component_cust_alias_rev set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                \n" +
                "		SET @SQl2 =CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE refComponentCustAliasRevID IN(',IDs,') and deletedAt is NULL');                \n" +
                "           PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt2;   \n" +
                "		SELECT COUNT(1) TotalCount FROM component_cust_alias_rev WHERE id IN (IDs) AND isdeleted=0 AND deletedat=NULL;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "Drop PROCEDURE if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN                                                            \n" +
                "IF tableName=\"employees\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                 \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"eco_type_category\" THEN                                                            \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"eco_type_values\" THEN                                                            \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"customers\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"certificate_standards\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"department\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"genericcategory\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"equipment\" THEN                                                            \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                              \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"parts\" THEN                                                           \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"master_templates\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"operations\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"roles\" THEN                                                           \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"standard_class\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"dataelement\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"component\" THEN                                                            \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                           \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                             \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_operation\" THEN                                                           \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"entity\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"salesordermst\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                            \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"shippedassembly\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"assemblymst\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);       \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"br_label_template\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);       \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"measurement_types\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"uoms\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"jobtypes\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfqtype\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"reasonmst\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                            \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                            \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                            \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                            \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"shipping_request\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"component_standard\" THEN                                                            \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"component_standard_class\" THEN                                                            \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                            \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                       \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"requirement\" THEN                                                            \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                       \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"customer_addresses\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfqforms\" THEN                                                            \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                            \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"who_bought_who\" THEN                                                            \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                            \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                            \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                            \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                                                      \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                            \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                        \n" +
                "IF tableName=\"cost_category\" THEN                                                            \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                        \n" +
                "END IF;                         \n" +
                "IF tableName=\"chartypemst\" THEN                                                            \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                     \n" +
                "END IF;        \n" +
                "IF tableName=\"countrymst\" THEN        \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN        \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;   \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN    \n" +
                "	 call Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);  \n" +
                "END IF;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (58,'2.00','V1','create sp Sproc_SaveCustPn -Mona'," + userid + ");"
            );
            break;
        case 58:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2018  *********************************** */
                "INSERT INTO `rfq_mountingtypemst`  \n" +
                "(`name`, `description`, `isActive`, `createdBy`, `createdAt`, `systemGenerated`)  \n" +
                "VALUES  \n" +
                "('Tools', null, 1, 1, UTC_TIMESTAMP(), 1);  \n" +
                /* **************************** Add Script Version -> 13-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (59,'2.00','V1','added systemGenerated` mounting type `Tools` - shirish'," + userid + ");"
            );
            break;
        case 59:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "        IN pWhereClause VARCHAR(16383)          \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "               SELECT css.id,css.scanlabel,css.scanmfgcode,css.pkgQty,css.price,css.uid,      \n" +
                "			css.printStatus,cc.category,css.lotCode,css.dateCode,      \n" +
                "			c.mfgcodeID,c.mfgPN,c.PIDCode,c.pid,c.packaginggroupID,0 AS dedicatedQty,0 AS reservedQty,      \n" +
                "			mfg.id AS mfgID,mfg.mfgCode, ro.rohsIcon,ro.name AS rohsName,IFNULL(c.packageQty,1) packageQty,(SELECT csl.location FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isActive=1 AND csl.isdeleted=0 LIMIT 1) location,  \n" +
                "			(SELECT csl.qty FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isdeleted=0 AND csl.isActive=1 LIMIT 1) Qty ,c.mfgPNDescription       \n" +
                "               FROM component_sid_stock css      \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0     \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0      \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0   \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.priceCategoryID AND  IFNULL(cc.isdeleted,0)=0    \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (60,'2.00','V1','Update sp Sproc_GetReceivingMaterial-Champak'," + userid + ");"
            );
            break;
        case 60:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2018  *********************************** */
                "ALTER TABLE component_alternatepn DROP COLUMN aliasgroupID;  \n" +
                "ALTER TABLE component DROP COLUMN component.altenetgroupID;  \n" +
                "ALTER TABLE component_alternatepn ADD COLUMN refComponentID int(11) NOT NULL;  \n" +
                "ALTER TABLE component_alternatepn add constraint FK_component_alternatepn_refComponentID foreign key  (`refComponentID`) References component(`id`);  \n" +
                /* **************************** New Script -> 13-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(        \n" +
                "IN pGoodPart VARCHAR(100),        \n" +
                "IN pSearch VARCHAR(100),        \n" +
                "IN pId INT(11),        \n" +
                "IN pMfgType VARCHAR(50),        \n" +
                "IN pRoHSStatusID VARCHAR(100),        \n" +
                "IN pMfgCodeId INT(11),    \n" +
                "IN pMountingType VARCHAR(50)        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "if(pMountingType is NOT NULL) then    \n" +
                " SELECT * FROM        \n" +
                " (      \n" +
                "	 SELECT `com`.`id`,         \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,      \n" +
                "		`com`.`mfgPN` orgMfgPN,        \n" +
                "		`com`.`PID`,       \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		`com`.`isGoodPart`,       \n" +
                "		`com`.`RoHSStatusID`,       \n" +
                "		`com`.`rohsgroupID`,        \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,       \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`        \n" +
                "	FROM `component` AS `com`       \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND         \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))      \n" +
                "    join `rfq_mountingtypemst` as `mt` on `mt`.`id` = `com`.`mountingTypeID` and `mt`.`name` = pMountingType    \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))        \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))        \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))      \n" +
                ");        \n" +
                "  \n" +
                "  else    \n" +
                "   SELECT * FROM        \n" +
                " (      \n" +
                "	 SELECT `com`.`id`,         \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,      \n" +
                "		`com`.`mfgPN` orgMfgPN,        \n" +
                "		`com`.`PID`,       \n" +
                "		`com`.`packaginggroupID`,   \n" +
                "		`com`.`isGoodPart`,       \n" +
                "		`com`.`RoHSStatusID`,       \n" +
                "		`com`.`rohsgroupID`,        \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,       \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`        \n" +
                "	FROM `component` AS `com`       \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND         \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))         \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))        \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))        \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))      \n" +
                ");     \n" +
                "end if;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN rfqAssyID INT(11),                                    \n" +
                "	IN puserID INT (11)                              \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                     \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                    \n" +
                "					SELECT                                     \n" +
                "						rl.id,                      \n" +
                "						rl.isPurchase,                       \n" +
                "						rl.lineID,                      \n" +
                "						rl.rfqLineItemID,                      \n" +
                "						rl.rfqAssyBomID,                      \n" +
                "						rl.rfqAssyID,                                      \n" +
                "						rp.partTypeName,                      \n" +
                "						rm.name,                          \n" +
                "						rq.selectedPIDCode,                      \n" +
                "						(select RoHSStatusID from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,                      \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                          \n" +
                "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus                          \n" +
                "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn limit 1) AS PartStatus,                          \n" +
                "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL limit 1) AS LTBDate,                      \n" +
                "						(SELECT GROUP_CONCAT(DISTINCT(REPLACE(c.PIDCode,'','',\"..\")),''@@@'', c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"))                      \n" +
                "						FROM component c       \n" +
                "						LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                         \n" +
                "						WHERE c.PIDCode <> rq.selectedPIDCode AND c.id IN                       \n" +
                "							(SELECT componentID                       \n" +
                "								FROM component_alternatepn                       \n" +
                "								WHERE refComponentID IN                       \n" +
                "								(SELECT id                       \n" +
                "									FROM component                       \n" +
                "									WHERE PIDCode = rq.selectedPIDCode                       \n" +
                "									AND deletedAt IS NULL AND isDeleted=0                      \n" +
                "								)                      \n" +
                "							)                      \n" +
                "						) AS AlternatePN                      \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem rl                                    \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                    \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                            \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                             \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                                  \n" +
                "						WHERE rl.isdeleted=0             \n" +
                "						AND rq.selectedMpn IS NOT NULL                      \n" +
                "						AND rl.rfqAssyID=',rfqAssyID,' AND                    \n" +
                "  \n" +
                "						(CASE WHEN (rq.apiLead IS NULL OR rq.apiLead < rl.numOfPosition)THEN              \n" +
                "  \n" +
                "					GREATEST(CEIL((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))              \n" +
                "					ELSE              \n" +
                "					GREATEST(CEIL( CEIL((( IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * IFNULL(rl.numOfPosition,0) )/(rq.apiLead-MOD(rq.apiLead,rl.numOfPosition)))/IFNULL(rq.mult,1)) * IFNULL(rq.mult,1)),IFNULL(rq.min,1)) > (IFNULL(rq.currentStock,0))              \n" +
                "				          END              \n" +
                "  \n" +
                "						OR rq.selectedMpn IN (SELECT mfgPN FROM component                           \n" +
                "							WHERE deletedAt IS NULL                       \n" +
                "							AND partstatus IN (                      \n" +
                "									SELECT gencCategoryID FROM genericcategory                       \n" +
                "									WHERE deletedAt IS NULL                       \n" +
                "									AND gencCategoryName IN (\"Not For New Design\",\"Obsolete\")                      \n" +
                "								)                      \n" +
                "							))                      \n" +
                "						GROUP BY rl.lineID');                                      \n" +
                "			PREPARE stmt FROM @SQLStatement;                   \n" +
                "			EXECUTE stmt;	                                    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "			EXECUTE query1;                                    \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "			EXECUTE query2;                                    \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                    \n" +
                "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                    \n" +
                "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                    \n" +
                "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "			EXECUTE query3;                                    \n" +
                "			DEALLOCATE PREPARE query3;                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\"                            \n" +
                "				SELECT ra.requestQty,                             \n" +
                "					rq.finalPrice,                             \n" +
                "					rq.unitPrice,                            \n" +
                "					rq.supplier,                             \n" +
                "					rq.selectedMpn,                             \n" +
                "					rq.selectionMode,                            \n" +
                "					rq.qtyID,                             \n" +
                "					rq.consolidateID,                        \n" +
                "					rq.selectedPIDCode,                            \n" +
                "					c.partStatus                \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "					LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL AND IFNULL(c.isDeleted,0)=0                                              \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                             \n" +
                "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                    \n" +
                "			EXECUTE query4;                                    \n" +
                "			DEALLOCATE PREPARE query4;                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (61,'2.00','V1','component alternate part related changes  - shirish'," + userid + ");"
            );
            break;
        case 61:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "ALTER TABLE employees ADD COLUMN supplierID INT;  \n" +
                /****************************************************** 13/12/2018 ************************************************/
                "ALTER TABLE employees  \n" +
                "   ADD CONSTRAINT FK_employees_supplierID  \n" +
                "   FOREIGN KEY (supplierID) REFERENCES customers(id);  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (62,'2.00','V1',' Add new field in employees table - FENIL '," + userid + ");"
            );
            break;
        case 62:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_pauseEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_pauseEmployeeForOperation`(      \n" +
                "	IN pWOTransinoutID INT,      \n" +
                "	IN pCreatedBy VARCHAR(255)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE lvwoNumber VARCHAR(255);      \n" +
                "	DECLARE lvopName VARCHAR(255);      \n" +
                "	DECLARE lvempName VARCHAR(255);      \n" +
                "	DECLARE lvemployeeID INT(11);      \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);      \n" +
                "	DECLARE lvwoOPID INT(11);	      \n" +
                "	DECLARE lEmpPauseDetailCnt INT(11);  \n" +
                "	DECLARE pPauseTime DATETIME;  \n" +
                "	SET pPauseTime = CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');    \n" +
                "  \n" +
                "	-- create temporary table for error        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;         \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error        \n" +
                "	(        \n" +
                "	     errorText NVARCHAR(2000)        \n" +
                "	);        \n" +
                "  \n" +
                "	SET lEmpPauseDetailCnt = 0;  \n" +
                "	SELECT COUNT(*) INTO lEmpPauseDetailCnt FROM workorder_trans_empinout WHERE woTransinoutID = pWOTransinoutID AND isPaused = 1;    \n" +
                "	IF (lEmpPauseDetailCnt = 0) THEN  \n" +
                "		UPDATE workorder_trans_empinout	SET isPaused = 1, updatedBy = pCreatedBy WHERE woTransinoutID = pWOTransinoutID;      \n" +
                "		INSERT INTO workorder_trans_emp_pausedet      \n" +
                "			(`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)      \n" +
                "			VALUES       \n" +
                "			(pWOTransinoutID, pPauseTime, pCreatedBy, 0);      \n" +
                "  \n" +
                "		/* [S] - Add Time line log for pause operation employee to work order operation */      \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),      \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,      \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID      \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID      \n" +
                "		FROM workorder_trans_empinout  wteio      \n" +
                "		WHERE wteio.woTransinoutID = pWOTransinoutID      \n" +
                "		;      \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		      \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee pause for work order operation\");      \n" +
                "		SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" pause for operation \"',lvopName,' (',lvopNumber,')\" of       \n" +
                "			work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pCreatedBy AND deletedAt IS NULL),'.');       \n" +
                "		CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.09,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pCreatedBy,2);  			      \n" +
                "		/* [E] - Add Time line log for pause operation employee to work order operation */		      \n" +
                "	ELSE   \n" +
                "		INSERT INTO temp_operation_error (errorText) VALUES ('Operation already paused.');     \n" +
                "	END IF;  \n" +
                "	SELECT errorText FROM temp_operation_error;        \n" +
                "    END;  \n" +
                /****************************************************** 14/12/2018 ************************************************/
                "DROP PROCEDURE IF EXISTS `Sproc_resumeEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_resumeEmployeeForOperation`(      \n" +
                "	IN pWOTransemppausedID INT,      \n" +
                "	IN pWOTransinoutID INT,      \n" +
                "	IN pUpdatedBy VARCHAR(255)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE lvwoNumber VARCHAR(255);      \n" +
                "	DECLARE lvopName VARCHAR(255);      \n" +
                "	DECLARE lvempName VARCHAR(255);      \n" +
                "	DECLARE lvemployeeID INT(11);      \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);      \n" +
                "	DECLARE lvwoOPID INT(11);      \n" +
                "	DECLARE lEmpResumeDetailCnt INT(11);  \n" +
                "	DECLARE pResumeTime DATETIME;  \n" +
                "	SET pResumeTime = CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');    \n" +
                "  \n" +
                "	-- create temporary table for error        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;         \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error        \n" +
                "	(        \n" +
                "	     errorText NVARCHAR(2000)        \n" +
                "	);        \n" +
                "  \n" +
                "	SET lEmpResumeDetailCnt = 0;  \n" +
                "	SELECT COUNT(*) INTO lEmpResumeDetailCnt FROM workorder_trans_empinout WHERE woTransinoutID = pWOTransinoutID AND isPaused = 0;    \n" +
                "	IF (lEmpResumeDetailCnt = 0) THEN		    \n" +
                "		UPDATE workorder_trans_empinout	      \n" +
                "		SET isPaused = 0, updatedBy = pUpdatedBy       \n" +
                "		WHERE woTransinoutID = pWOTransinoutID;      \n" +
                "  \n" +
                "		UPDATE workorder_trans_emp_pausedet       \n" +
                "		SET resumeTime=pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,pResumeTime), updatedBy = pUpdatedBy       \n" +
                "		WHERE woTransinoutID = pWOTransinoutID AND woTransemppausedID= pWOTransemppausedID;      \n" +
                "  \n" +
                "		/* [S] - Add Time line log for resume operation employee to work order operation */      \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),      \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,      \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID      \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID      \n" +
                "		FROM workorder_trans_empinout  wteio      \n" +
                "		WHERE wteio.woTransinoutID = pWOTransinoutID      \n" +
                "		;      \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		      \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee resume for work order operation\");      \n" +
                "		SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of       \n" +
                "			work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');       \n" +
                "		CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.10,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			      \n" +
                "		/* [E] - Add Time line log for resume operation employee to work order operation */	      \n" +
                "	ELSE   \n" +
                "		INSERT INTO temp_operation_error (errorText) VALUES ('Operation already resumed.');     \n" +
                "	END IF;  \n" +
                "	SELECT errorText FROM temp_operation_error;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (63,'2.00','V1','Pasue Resume for SP - Vaibhav '," + userid + ");"
            );
            break;
        case 63:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                \n" +
                "	IN rfqAssyID INT(1),                \n" +
                "	IN userID INT(1)                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                \n" +
                "  \n" +
                "    START TRANSACTION;        \n" +
                "  \n" +
                "    #consoliadte select         \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS         \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID=rfqAssyID;          \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "		SELECT rfqLineItemsID AS rfqLineItemsID,attritionRate,isInstall,group_concat(refDesig) as refDesig,                 \n" +
                "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,                \n" +
                "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,                \n" +
                "		SUM(qpa2) qpa, CAST((SUM(adcost1)/SUM(qpa2)) AS DECIMAL(10,5)) AS valueAddedCost,                \n" +
                "		mfg,COUNT(*)AS multiple,GROUP_CONCAT(rfqLineItemsID) AS consolidatedLineItemIDs                \n" +
                "		FROM                 \n" +
                "		(SELECT *,(qpa1*valueAddedCost)AS adcost1, qpa1 AS qpa2, GROUP_CONCAT(DISTINCT(part)) mfg                \n" +
                "		FROM                \n" +
                "		(SELECT b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID, a.refDesig,                \n" +
                "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)AS qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)AS addCost,                 \n" +
                "		CONCAT(b.mfgCodeID,' | ', b.mfgPNID ) AS part,a.attritionRate,a.isInstall,                 \n" +
                "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,                \n" +
                "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID                \n" +
                "		FROM rfq_lineitems_alternatepart b                 \n" +
                "        JOIN rfq_lineitems a ON b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0               \n" +
                "        WHERE IFNULL(b.isDeleted,0) = 0 AND b.mfgPNID != 0 AND (b.mfgPNID IS NOT NULL OR b.mfgPN IS NOT NULL)              \n" +
                "		GROUP BY b.rfqLineItemsID, b.mfgPN, CONCAT(b.mfgCode,' | ', b.mfgPN)) aa                \n" +
                "		GROUP BY aa.rfqLineItemsID) ab                 \n" +
                "		GROUP BY numOfPosition,isPurchase,mfg;       \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                \n" +
                "			SET                 \n" +
                "			cl.isDeleted = TRUE,                \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                \n" +
                "			cl.deletedBy = userID                \n" +
                "			WHERE cl.rfqAssyID = rfqAssyID AND cl.id NOT IN (                \n" +
                "            SELECT * FROM(                     \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                 \n" +
                "			WHERE rcl.rfqAssyID = rfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                 \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`)                \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,                \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                \n" +
                "		userID `createdBy`, R.`numOfPosition`,                \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`refDesig`                 \n" +
                "        FROM Results R                \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                \n" +
                "		 WHERE cl.id IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                 \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                 \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.id  IS NOT NULL                 \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                 \n" +
                "		SET                 \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                \n" +
                "        rq.updatedBy = userID,                \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# Update Consilidated LineItems                \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                 \n" +
                "		SET                 \n" +
                "		cl.isInstall = R.isInstall ,                \n" +
                "		cl.isPurchase = R.isPurchase,                \n" +
                "		cl.numOfPosition = R.numOfPosition,                \n" +
                "		cl.attritionRate = R.attritionRate,                \n" +
                "		cl.leadQty = R.leadQty,                \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                \n" +
                "        cl.qpa = R.qpa,                \n" +
                "        cl.uomID = R.uomID,      \n" +
                "        cl.refDesig = R.refDesig,      \n" +
                "        cl.lineID = R.lineID,                \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,                \n" +
                "        cl.updatedBy = userID                \n" +
                "		WHERE cl.rfqAssyID = rfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                \n" +
                "  \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                \n" +
                "		SET                 \n" +
                "        cap.isDeleted = TRUE,                \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cap.deletedBy = userID                \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL                  \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                     \n" +
                "  \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                \n" +
                "  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                 \n" +
                "		SET                 \n" +
                "        isDeleted = TRUE,                \n" +
                "        deletedAt = UTC_TIMESTAMP(),                \n" +
                "		deletedBy = userID                \n" +
                "        WHERE id IN(                 \n" +
                "        SELECT capID FROM (                \n" +
                "		SELECT DISTINCT(cap.id)AS capID                \n" +
                "		FROM rfq_lineitems_alternatepart ap                 \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID                \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                 \n" +
                "		JOIN rfq_parttypemst pt ON pt.id = rl.partTypeID AND pt.category != 3                \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                 \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = rfqAssyID AND isDeleted = 1) rq              \n" +
                "		SET                 \n" +
                "        cq.isDeleted = TRUE,                \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cq.deletedBy = userID                \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL                  \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                     \n" +
                "  \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove              \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = rfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq              \n" +
                "		SET                 \n" +
                "        cq.isDeleted = TRUE,                \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cq.deletedBy = userID                \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = rfqAssyID AND IFNULL(isDeleted, 0) = 0)                  \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                  \n" +
                "  \n" +
                "# delete Consolidate lineItems                 \n" +
                "  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                \n" +
                "		SET                 \n" +
                "        cl.isDeleted = TRUE,                \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cl.deletedBy = userID                \n" +
                "		WHERE  cl.rfqAssyID = rfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                        \n" +
                "  \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                 \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                \n" +
                "		SELECT DISTINCT(ap.`mfgPN`),(SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = rfqAssyID AND rcl.lineID = rl.lineID AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                \n" +
                "		FROM rfq_lineitems_alternatepart ap                 \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID            \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;              \n" +
                "  \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed            \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = rfqAssyID AND a.isDeleted = 0) rcl            \n" +
                "		SET                 \n" +
                "        cap.isDeleted = TRUE,                \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                \n" +
                "		cap.deletedBy = userID            \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (             \n" +
                "        SELECT  DISTINCT(cap.id)                \n" +
                "		FROM rfq_lineitems_alternatepart ap                 \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.rfqAssyID = rfqAssyID                \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.lineID = rl.lineID AND cl.rfqAssyID = rfqAssyID            \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove              \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,             \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = rfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,            \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                  \n" +
                "		SET                 \n" +
                "        cq.finalPrice = NULL,            \n" +
                "        cq.selectedPIDCode = NULL,            \n" +
                "        cq.selectedMpn = NULL,            \n" +
                "        cq.selectionMode = NULL,            \n" +
                "        cq.supplier = NULL,            \n" +
                "        cq.supplierStock = NULL,            \n" +
                "        cq.currentStock = NULL,            \n" +
                "        cq.grossStock = NULL,            \n" +
                "        cq.leadTime = NULL,            \n" +
                "        cq.min = NULL,            \n" +
                "        cq.mult = NULL,            \n" +
                "        cq.unitPrice = NULL,            \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                \n" +
                "		cq.updatedBy = userID                \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                  \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;               \n" +
                "  \n" +
                "  # update rfq assembly pricing status    \n" +
                "  \n" +
                "    update rfq_assemblies set isReadyForPricing = true, updatedAt = UTC_TIMESTAMP(), updatedBy = userID where isDeleted = 0 and id = rfqAssyID;    \n" +
                "  \n" +
                "    COMMIT;            \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId=rfqAssyID AND isdeleted=0)          \n" +
                "    UNION        \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id         \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID=rfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);        \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;         \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (64,'2.00','V1','consolidate sp chchanges  - shirish'," + userid + ");"
            );
            break;
        case 64:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "update genericcategory set systemGenerated = 0 where categoryType='Standard Type';  \n" +
                "  \n" +
                "alter table certificate_standards add column cerificateNumber varchar(50);  \n" +
                "alter table certificate_standards add column cerificateIssueDate datetime;  \n" +
                "alter table certificate_standards add column certificateSupplierID int;  \n" +
                "  \n" +
                "ALTER TABLE certificate_standards  \n" +
                "ADD CONSTRAINT FK_certificate_standards_certificateSupplierID  \n" +
                "FOREIGN KEY (certificateSupplierID) REFERENCES customers(id);  \n" +
                "  \n" +
                "Alter table certificate_standards add column priority decimal(6,2);  \n" +
                /* **************************** Add Script Version -> 18-12-2018 *********************************** */
                "Drop PROCEDURE if exists `Sproc_RetriveStandardClassList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveStandardClassList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			 SELECT sc.*,  \n" +
                "				csc.`certificateStandardID` AS `certificateStandardIDOfCertificateStandards`,  \n" +
                "				csc.`fullName` AS `fullNameOfCertificateStandards`,csc.`shortName` AS `shortNameOfCertificateStandards`,  \n" +
                "				csc.`displayOrder` AS `displayOrderOfCertificateStandards` ,  \n" +
                "				(CASE WHEN (`sc`.`isActive` = 0) THEN 'Disable'   \n" +
                "					WHEN (`sc`.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "			  FROM `standard_class` AS sc  \n" +
                "				LEFT OUTER JOIN `certificate_standards` AS csc  \n" +
                "				ON sc.`certificateStandardID` = csc.`certificateStandardID`   \n" +
                "				AND csc.`deletedAt` IS NULL   \n" +
                "			  WHERE sc.`deletedAt` IS NULL  \n" +
                "  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"classID DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-12-2018 *********************************** */
                "drop PROCEDURE if exists `Sproc_RetriveCertificateStandards`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveCertificateStandards`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			  SELECT cs.*,     \n" +
                "				gcst.`gencCategoryID` AS `gencCategoryIDOfStandardType`, gcst.`gencCategoryName` AS `gencCategoryNameOfStandardType`,    \n" +
                "				(CASE WHEN (`cs`.`isCertified` = 0) THEN 'Compliant'     \n" +
                "					WHEN (`cs`.`isCertified` = 1) THEN 'Certified' ELSE '' END) AS `isCertifiedConvertedValue` ,    \n" +
                "				(CASE WHEN (`cs`.`isRequired` = 0) THEN 'Optional'     \n" +
                "					WHEN (`cs`.`isRequired` = 1) THEN 'Required' ELSE '' END) AS `isRequiredConvertedValue` ,    \n" +
                "				(CASE WHEN (`cs`.`isActive` = 0) THEN 'Disable'     \n" +
                "					WHEN (`cs`.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `isActiveConvertedValue`    \n" +
                "			  FROM `certificate_standards` AS cs     \n" +
                "				LEFT OUTER JOIN `genericcategory` AS gcst     \n" +
                "				ON cs.`standardTypeID` = gcst.`gencCategoryID`     \n" +
                "					AND gcst.`deletedAt` IS NULL     \n" +
                "			  WHERE cs.`deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"shortName ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-12-2018 *********************************** */
                "drop PROCEDURE if exists `Sproc_checkDelete_customers`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customers`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		 UNION ALL                                                        \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                        \n" +
                "		UNION ALL                                                         \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL                                                         \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"certificate_standards\" ELSE \"\" END AS msg FROM  certificate_standards cs WHERE cs.deletedAt IS NULL AND cs.certificateSupplierID IN(',IDs,') LIMIT 1)   \n" +
                "		 UNION ALL                                                         \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                                        \n" +
                "	  ) q');                                                        \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                                                        \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                        \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "			EXECUTE stmt3;                                                        \n" +
                "  \n" +
                "			SELECT                                                         \n" +
                "    *                                                        \n" +
                "FROM                                                        \n" +
                "    tempCustomers;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempCustomers;                                                        \n" +
                "		END IF;                                                        \n" +
                "    DROP TABLE tempCustomers;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (65,'2.00','V1',' change certificate_standard table - Mona '," + userid + ");"
            );
            break;
        case 65:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkoutEmployeeFromOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkoutEmployeeFromOperation`(      \n" +
                "	IN pWOTransID INT,      \n" +
                "	IN pWOTransinoutID INT,      \n" +
                "	IN pCheckoutEmployeeID INT,      \n" +
                "	IN pCheckoutSetupTime INT,      \n" +
                "	IN pRemark LONGTEXT,  \n" +
                "	IN pTotalQty INT,  \n" +
                "        IN pPassQty INT,  \n" +
                "        IN pReprocessQty INT,  \n" +
                "        IN pObservedQty INT,  \n" +
                "        IN pReworkQty INT,  \n" +
                "        IN pScrapQty INT,  \n" +
                "        IN pIsFirstArticle TINYINT  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE lvwoNumber VARCHAR(255);      \n" +
                "	DECLARE lvopName VARCHAR(255);      \n" +
                "	DECLARE lvempName VARCHAR(255);      \n" +
                "	DECLARE lvwoOPID INT(11);      \n" +
                "	DECLARE lvuserID INT(11);      \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);      \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "	BEGIN      \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "	BEGIN                \n" +
                "		ROLLBACK;                \n" +
                "		RESIGNAL;                \n" +
                "	END;	  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;      \n" +
                "  \n" +
                "  \n" +
                "	/*Update pending pasue record */      \n" +
                "	UPDATE workorder_trans_emp_pausedet a      \n" +
                "	SET resumetime = @pCheckoutTime,      \n" +
                "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),      \n" +
                "	    updatedBy = pCheckoutEmployeeID      \n" +
                "	WHERE a.woTransinoutID = pWOTransinoutID      \n" +
                "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;      \n" +
                "  \n" +
                "	/*Calculate employee production */      \n" +
                "	UPDATE workorder_trans_empinout  a      \n" +
                "	SET isPaused = 0,      \n" +
                "		checkoutTime = @pCheckoutTime,      \n" +
                "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),      \n" +
                "		checkoutSetupTime = pCheckoutSetupTime,      \n" +
                "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -       \n" +
                "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime       \n" +
                "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )      \n" +
                "		  ),      \n" +
                "		updatedBy = pCheckoutEmployeeID,      \n" +
                "		remark = pRemark      \n" +
                "	WHERE woTransId = pWOTransID  AND woTransinoutID = pWOTransinoutID AND checkoutTime IS NULL ;      \n" +
                "  \n" +
                "  \n" +
                "	/*calculate operation Transaction production */      \n" +
                "	SELECT COUNT(1) INTO  @cnt  FROM workorder_trans_empinout WHERE  woTransId = pWOTransID  AND checkoutTime IS NULL;      \n" +
                "	IF (@cnt = 0 ) THEN       \n" +
                "  \n" +
                "	UPDATE workorder_trans a      \n" +
                "	SET checkouttime = @pCheckoutTime,      \n" +
                "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout       \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,      \n" +
                "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout       \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),      \n" +
                "		updatedBy = pCheckoutEmployeeID,      \n" +
                "		checkoutEmployeeID = pCheckoutEmployeeID      \n" +
                "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;	      \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* add production quantity details */  \n" +
                "	INSERT INTO workorder_trans_production (`woTransID`,`employeeID`,`totalQty`,`passQty`,`reprocessQty`,  \n" +
                "			`observedQty`,`reworkQty`,`scrapQty`,`isFirstArticle`,`createdBy`,`remark`)  \n" +
                "	VALUES (pWOTransID,pCheckoutEmployeeID,pTotalQty,pPassQty,pReprocessQty,pObservedQty,pReworkQty,pScrapQty  \n" +
                "			,pIsFirstArticle,pCheckoutEmployeeID,pRemark) ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* [S] - Add Time line log for check-out from team work order operation */      \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),      \n" +
                "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,      \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)       \n" +
                "		INTO lvwoNumber,lvopName,lvempName,lvopNumber      \n" +
                "	FROM workorder_trans_empinout  wteio      \n" +
                "	WHERE wteio.woTransinoutID = pWOTransinoutID ;      \n" +
                "  \n" +
                "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	      \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Employee check-out from team operation\");      \n" +
                "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');      \n" +
                "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);        \n" +
                "	/* [E] - Add Time line log for check-out from team work order operation */	      \n" +
                "  \n" +
                "	 COMMIT;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_PauseAllEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_PauseAllEmployeeForOperation`(      \n" +
                "	IN pwoOPID INT(11),    \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pCreatedBy VARCHAR(255)  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE lvwoNumber VARCHAR(255);      \n" +
                "	DECLARE lvopName VARCHAR(255);      \n" +
                "	DECLARE lvempNames TEXT;      \n" +
                "	DECLARE lvemployeeID INT(11);      \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);      \n" +
                "	DECLARE lvwoOPID INT(11);   \n" +
                "  \n" +
                "	SELECT @pPauseTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TeamOpEmpListForPause_Temp AS  \n" +
                "		SELECT woTransinoutID,employeeID FROM workorder_trans_empinout   \n" +
                "		WHERE deletedAt IS NULL  \n" +
                "		AND woOPID = pwoOPID AND woTransID = pwoTransID  AND checkinTime IS NOT NULL   \n" +
                "		AND checkoutTime IS NULL AND isPaused = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	 UPDATE workorder_trans_empinout SET isPaused = 1, updatedBy = pCreatedBy   \n" +
                "	 WHERE woTransinoutID IN (SELECT woTransinoutID FROM TeamOpEmpListForPause_Temp);      \n" +
                "  \n" +
                "	 INSERT INTO workorder_trans_emp_pausedet (`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)      \n" +
                "		SELECT woTransinoutID , @pPauseTime, pCreatedBy, 0  \n" +
                "		FROM TeamOpEmpListForPause_Temp ;  \n" +
                "  \n" +
                "  \n" +
                "	 /* [S] - Add Time line log of pause operation for team employee  */      \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),      \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID      \n" +
                "		INTO lvwoNumber,lvopName,lvopNumber,lvwoOPID      \n" +
                "	FROM workorder_trans_empinout  wteio      \n" +
                "	WHERE wteio.woTransinoutID = (SELECT woTransinoutID FROM TeamOpEmpListForPause_Temp LIMIT 1)  \n" +
                "	;      \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(CONCAT(firstName,\" \",lastName)) INTO lvempNames FROM employees   \n" +
                "	WHERE id IN (SELECT employeeID FROM TeamOpEmpListForPause_Temp);  \n" +
                "  \n" +
                "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		      \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Team member pause for work order operation\");      \n" +
                "	SET @pEventDescription = CONCAT('Team member \"',lvempNames,'\" pause for operation \"',lvopName,' (',lvopNumber,')\" of       \n" +
                "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pCreatedBy AND deletedAt IS NULL),'.');       \n" +
                "	CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',(SELECT GROUP_CONCAT(woTransinoutID) FROM TeamOpEmpListForPause_Temp),5.09,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pCreatedBy,2);  			      \n" +
                "	/* [E] - Add Time line log for pause operation employee to work order operation */  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE TeamOpEmpListForPause_Temp;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ResumeAllEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_ResumeAllEmployeeForOperation`(      \n" +
                "	IN pwoOPID INT(11),      \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pUpdatedBy VARCHAR(255)     \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	DECLARE lvwoNumber VARCHAR(255);      \n" +
                "	DECLARE lvopName VARCHAR(255);      \n" +
                "	DECLARE lvempNames VARCHAR(255);      \n" +
                "	DECLARE lvemployeeID INT(11);      \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);      \n" +
                "	DECLARE lvwoOPID INT(11);  \n" +
                "  \n" +
                "	SELECT @pResumeTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TeamOpEmpListToResume_Temp AS  \n" +
                "		SELECT woTransinoutID,employeeID FROM workorder_trans_empinout   \n" +
                "		WHERE deletedAt IS NULL  \n" +
                "		AND woOPID = pwoOPID AND woTransID = pwoTransID AND checkinTime IS NOT NULL   \n" +
                "		AND checkoutTime IS NULL AND isPaused = 1 ;    \n" +
                "  \n" +
                "	UPDATE workorder_trans_empinout	 SET isPaused = 0, updatedBy = pUpdatedBy       \n" +
                "	WHERE woTransinoutID IN (SELECT woTransinoutID FROM TeamOpEmpListToResume_Temp);   \n" +
                "  \n" +
                "	UPDATE workorder_trans_emp_pausedet       \n" +
                "	SET resumeTime=@pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,@pResumeTime), updatedBy = pUpdatedBy       \n" +
                "	WHERE woTransinoutID IN (SELECT woTransinoutID FROM TeamOpEmpListToResume_Temp);      \n" +
                "  \n" +
                "	/* [S] - Add Time line log for resume operation employee to work order operation */      \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),      \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID      \n" +
                "		INTO lvwoNumber,lvopName,lvopNumber,lvwoOPID      \n" +
                "	FROM workorder_trans_empinout  wteio      \n" +
                "	WHERE wteio.woTransinoutID = (SELECT woTransinoutID FROM TeamOpEmpListToResume_Temp LIMIT 1)  \n" +
                "	;      \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(CONCAT(firstName,\" \",lastName)) INTO lvempNames FROM employees   \n" +
                "	WHERE id IN (SELECT employeeID FROM TeamOpEmpListToResume_Temp);  \n" +
                "  \n" +
                "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		      \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Team member resume for work order operation\");      \n" +
                "	SET @pEventDescription = CONCAT('Team member \"',lvempNames,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of       \n" +
                "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');       \n" +
                "	CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',  \n" +
                "		(SELECT GROUP_CONCAT(woTransinoutID) FROM TeamOpEmpListToResume_Temp),5.10,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			      \n" +
                "	/* [E] - Add Time line log for resume operation employee to work order operation */  \n" +
                "  \n" +
                "	 DROP TEMPORARY TABLE TeamOpEmpListToResume_Temp;     \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (66,'2.00','V1',' New sp for team op all pause/resume - KETAN '," + userid + ");"
            );
            break;
        case 66:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-12-2018  *********************************** */
                "drop PROCEDURE if exists `Sproc_checkDelete_assemblymst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_assemblymst`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		     UNION ALL                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		    UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempassemblymst;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempassemblymst;                                                        \n" +
                "  \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempassemblymst;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "drop PROCEDURE if exists `Sproc_checkDelete_workorder_operation_equipment`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_equipment`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                                                        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Equipment from work order */                                                        \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                        \n" +
                "		FROM workorder_operation                                                         \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                                                        \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                                                        \n" +
                "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                                                        \n" +
                "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                        \n" +
                "		/* [E] -  Add Time line log for delete Equipment from work order */                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                                                        \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "			EXECUTE stmt2;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEquipment;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderEquipment;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderEquipment;                                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "drop PROCEDURE if exists `Sproc_checkDelete_workorder_operation_part`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_part`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                                                        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete parts from work order */                                                        \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                        \n" +
                "		FROM workorder_operation                                                         \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                        \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                                                        \n" +
                "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                                                        \n" +
                "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                                                        \n" +
                "		/* [E] - Add Time line log for delete parts from work order */                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderPart;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderPart;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderPart;   \n" +
                "        END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "drop PROCEDURE if exists `Sproc_checkDelete_workorder_operation_employee`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_employee`(                                                        \n" +
                "	IN tableName VARCHAR(255),                                                        \n" +
                "	IN IDs LONGTEXT,                                                        \n" +
                "	IN deletedBy INT,                                                        \n" +
                "	IN entityID VARCHAR(255),                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                        \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                                                        \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                        \n" +
                "		    FROM                                                         \n" +
                "		    (                                                        \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                        \n" +
                "		      ) q');                                                        \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                        \n" +
                "	EXECUTE stmt;                                                        \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                                                        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Employees from work order */                                                        \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                        \n" +
                "		FROM workorder_operation                                                         \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                        \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                                                        \n" +
                "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                                                         \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                                                        \n" +
                "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                        \n" +
                "		/* [E] -  Add Time line log for delete Employee from work order */                                                        \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                        \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                        \n" +
                "			EXECUTE stmt1;                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEmployee;                                                        \n" +
                "		ELSE                                                        \n" +
                "			SELECT * FROM tempWorkorderEmployee;                                                        \n" +
                "		END IF;                                                        \n" +
                "		DROP TABLE tempWorkorderEmployee;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "drop procedure if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                              \n" +
                "	IN tableName VARCHAR(255),                                                              \n" +
                "	IN IDs LONGTEXT,                                                              \n" +
                "	IN deletedBy INT,                                                              \n" +
                "	IN entityID VARCHAR(255),                                                              \n" +
                "	IN refrenceIDs LONGTEXT                                                              \n" +
                "    )  \n" +
                "BEGIN                                                              \n" +
                "IF tableName=\"employees\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                   \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"eco_type_category\" THEN                                                              \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"eco_type_values\" THEN                                                              \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"customers\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"certificate_standards\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"department\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"genericcategory\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"equipment\" THEN                                                              \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"parts\" THEN                                                             \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"master_templates\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"operations\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"roles\" THEN                                                             \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"standard_class\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"dataelement\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"component\" THEN                                                              \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                             \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                               \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_operation\" THEN                                                             \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"entity\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"salesordermst\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                              \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"shippedassembly\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"assemblymst\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);         \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"br_label_template\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);         \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"measurement_types\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"uoms\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"jobtypes\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfqtype\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"reasonmst\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                              \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                              \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                              \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                              \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"shipping_request\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"component_standard\" THEN                                                              \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"component_standard_class\" THEN                                                              \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                              \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                         \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"requirement\" THEN                                                              \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                         \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                         \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"customer_addresses\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfqforms\" THEN                                                              \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                              \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"who_bought_who\" THEN                                                              \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                              \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                              \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                              \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                              \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                          \n" +
                "IF tableName=\"cost_category\" THEN                                                              \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                          \n" +
                "END IF;                           \n" +
                "IF tableName=\"chartypemst\" THEN                                                              \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                       \n" +
                "END IF;          \n" +
                "IF tableName=\"countrymst\" THEN          \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;      \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN          \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;     \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN      \n" +
                "	 call Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);    \n" +
                "END IF;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (67,'2.00','V1','slove issue Check delete sp  - Mona '," + userid + ");"
            );
            break;
        case 67:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-11-2018  *********************************** */
                "ALTER TABLE page_detail ADD COLUMN displayMenuName VARCHAR(255) NULL;   \n" +
                "UPDATE page_detail SET displayMenuName = menuName;  \n" +
                "UPDATE page_detail SET displayMenuName='Role' WHERE PageName='Manage Role';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment Group' WHERE PageName='Manage Equipment Group Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Printer' WHERE PageName='Manage Printer Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Print Format' WHERE PageName='Manage Print Format Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Barcode Separator' WHERE PageName='Manage Barcode Separator Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Shipping Status' WHERE PageName='Manage Shipping Status Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Shipping Type' WHERE PageName='Manage Shipping Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Standard Type' WHERE PageName='Manage Standard Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Area' WHERE PageName='Manage Work Area Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Employee Title' WHERE PageName='Manage Employee Title Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Part Type' WHERE PageName='Manage Part Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment Type' WHERE PageName='Manage Equipment Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment Ownership' WHERE PageName='Manage Equipment Ownership Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Generic Category' WHERE PageName='Manage Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Location Type' WHERE PageName='Manage Location Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Operation Type' WHERE PageName='Manage Operation Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Operation Verification Status' WHERE PageName='Manage Operation Verification Status Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Part Status' WHERE PageName='Manage Part Status Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Terms' WHERE PageName='Manage Terms Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Detail';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Standards';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Documents';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Operations';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Parts';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Equipments';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Employees';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Shipping Details';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order' WHERE PageName='Manage Work Order Invite People';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation dodont';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation details';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Document';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Data Fields';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Parts';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Equipments';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Employees';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation First Article';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Other Details';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE PageName='Manage Work Order Operation Status';  \n" +
                /* **************************** Add Script Version -> 13-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (68,'2.00','V1',' Changes in Menu Pages, Added Column for displaymenu name  - Vaibhav '," + userid + ");"
            );
            break;
        case 68:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pIsMFG TINYINT(1)     \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "       select mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.createdAt,emp.firstName, emp.lastName,    \n" +
                "    CONCAT(emp.firstName, ' ', emp.lastName) AS fullName, wbw.buyBy,wbw.buyDate,wbw.description,wbw.id as `acquiredID`,    \n" +
                "(select group_concat(alias) as aliaslist from mfgcodealias     \n" +
                "where IFNULL(isdeleted,0) = 0 and mfgcodeId = mc.id  group by mfgcodeId) as aliaslist    \n" +
                "from mfgcodemst mc     \n" +
                "JOIN users us ON mc.createdBy = us.id AND us.deletedAt IS NULL     \n" +
                "JOIN employees emp on us.employeeID = emp.id AND emp.deletedAt is null      \n" +
                "LEFT JOIN who_bought_who wbw on wbw.buyTo = mc.id  \n" +
                "where IFNULL(mc.isdeleted,0) = 0 ;    \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "    IF pIsMFG THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );                \n" +
                "	ELSE              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (69,'2.00','V1','get mfg list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 69:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-12-2018  *********************************** */
                "UPDATE rfq_rohsmst SET rohsIcon='rohs-none.png' WHERE NAME='None';  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (70,'2.00','V1','Update none rohs icon-Champak'," + userid + ");"
            );
            break;
        case 70:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentCustomerLOA`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustomerLOA`(      \n" +
                "	IN ppageIndex INT(11),                    \n" +
                "	IN precordPerPage INT(11),                    \n" +
                "	IN pOrderBy VARCHAR(255),                    \n" +
                "    IN pWhereClause VARCHAR(16383),                    \n" +
                "    IN pComponentID INT,                \n" +
                "    IN pCustomerID INT                \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE pOffset INT(11);                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "  \n" +
                "	IF(pComponentID IS NOT NULL) THEN                  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "			select cst.id as CustomerID, cst.companyName, loa.id, loa.componentID     \n" +
                "			from component_customer_loa loa                    \n" +
                "			join customers cst on cst.id = loa.customerID AND IFNULL(cst.isDeleted,0) = 0   \n" +
                "            join genericfiles gf on gf.gencFileOwnerType = 'component_customer_loa' and refTransID = loa.id and gf.isDeleted = 0  \n" +
                "			where loa.componentID = pComponentID AND IFNULL(loa.isDeleted,0) = 0;       \n" +
                "	END IF;                    \n" +
                "	IF(pCustomerID IS NOT NULL) THEN                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "		select com.id as ComponentID, com.mfgPN, com.PIDCode, loa.id, loa.customerID     \n" +
                "		from component_customer_loa loa                    \n" +
                "		join component com on com.id = loa.componentID AND IFNULL(com.isDeleted,0) = 0  \n" +
                "        join genericfiles gf on gf.gencFileOwnerType = 'component_customer_loa' and refTransID = loa.id and gf.isDeleted = 0  \n" +
                "		where loa.customerID = pCustomerID AND IFNULL(loa.isDeleted,0) = 0;       \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "	ELSE                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "		SET pWhereClause = '1=1' ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "	ELSE	                    \n" +
                "		SET rowNumWhere = '';                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (71,'2.00','V1','get component loa list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 71:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-12-2018  *********************************** */
                "UPDATE rfq_rohsmst SET rohsIcon='noimage.png' WHERE NAME='None';  \n" +
                /* **************************** Add Script Version -> 19-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (72,'2.00','V1','Update None rohs icon-Champak'," + userid + ");"
            );
            break;
        case 72:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(          \n" +
                "	IN ppageIndex INT(11),                        \n" +
                "	IN precordPerPage INT(11),                        \n" +
                "	IN pOrderBy VARCHAR(255),                        \n" +
                "    IN pWhereClause VARCHAR(16383),                        \n" +
                "    IN prfqAssyID INT,                    \n" +
                "    IN prfqAssyBOMID INT                    \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DECLARE pOffset INT(11);                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "  \n" +
                "	IF(prfqAssyBOMID IS NOT NULL) THEN                      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                        \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                        \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS name,                        \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                           \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,          \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',ccl.isDocumentUpload)         \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component         \n" +
                "			FROM rfq_lineitems_alternatepart ra                        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                    \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                    \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                        \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                        \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                      \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0            \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0          \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0        \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0       \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0       \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0        \n" +
                "			WHERE rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 AND ra.rfqAssyID = prfqAssyID                       \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;                        \n" +
                "	ELSE                        \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                        \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                        \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS name,                        \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                        \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,        \n" +
                "            (CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',ccl.isDocumentUpload)         \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component         \n" +
                "			FROM rfq_lineitems_alternatepart ra                        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = 229 AND IFNULL(rl.isDeleted,0) = 0                    \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                    \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                        \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                       \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                     \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0         \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= 229 AND ras.isDeleted = 0          \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0         \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0        \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0       \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0        \n" +
                "			WHERE rl.rfqAssyID = 229 AND IFNULL(ra.isDeleted,0) = 0                        \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;            \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "	ELSE                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "		SET pWhereClause = '1=1' ;                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
                "	ELSE	                        \n" +
                "		SET rowNumWhere = '';                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                        \n" +
                "	EXECUTE query1;                        \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (73,'2.00','V1','get planned BOM list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 73:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(            \n" +
                "	IN ppageIndex INT(11),                          \n" +
                "	IN precordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "    IN pWhereClause VARCHAR(16383),                          \n" +
                "    IN prfqAssyID INT,                      \n" +
                "    IN prfqAssyBOMID INT                      \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DECLARE pOffset INT(11);                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "  \n" +
                "	IF(prfqAssyBOMID IS NOT NULL) THEN                        \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                          \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                          \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS name,                          \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                             \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,            \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',ccl.isDocumentUpload)           \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component           \n" +
                "			FROM rfq_lineitems_alternatepart ra                          \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                      \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                      \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                          \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                          \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                        \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0              \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0            \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0          \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0         \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0         \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0          \n" +
                "			WHERE rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 AND ra.rfqAssyID = prfqAssyID                         \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;                          \n" +
                "	ELSE                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                          \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                          \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS name,                          \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,                          \n" +
                "			com.PIDCode,GROUP_CONCAT(DISTINCT(com.PIDCode),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon)AS mfgPN,          \n" +
                "            (CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',ccl.isDocumentUpload)           \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(com.PIDCode),'###',ra.mfgCode,'###',com.RoHSStatusID,'###',com.id,'###',0) END) AS component           \n" +
                "			FROM rfq_lineitems_alternatepart ra                          \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0                      \n" +
                "			LEFT JOIN rfq_assy_bom_relationship br ON br.parentLineitemsID = rl.id                      \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                          \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                         \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                       \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0           \n" +
                "			LEFT JOIN rfq_assemblies ras ON ras.id= prfqAssyID AND ras.isDeleted = 0            \n" +
                "			LEFT JOIN rfqforms rf ON rf.id = ras.rfqrefID AND rf.isDeleted = 0           \n" +
                "			LEFT JOIN customers cst ON cst.id = rf.customerId AND cst.isDeleted = 0          \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0         \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.customerID = cst.id AND ccl.componentID = com.id AND ccl.isDeleted = 0          \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0                          \n" +
                "			GROUP BY ra.rfqLineItemsID ORDER BY rl.lineID;              \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE	                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                          \n" +
                "	EXECUTE query1;                          \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query2;                          \n" +
                "	DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (74,'2.00','V1','get planned BOM list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 74:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2018  *********************************** */
                "UPDATE uoms SET unitName = 'N/A (Not Applicable)', abbreviation = 'N/A' WHERE unitName = 'None';  \n" +
                /* **************************** New Script -> 24-12-2018  *********************************** */
                "UPDATE page_detail   \n" +
                "   SET menuRoute = 'admin.unitconversion', pageRoute = 'app.unitconversion', pageURL = '/unitconversion', menuName = 'Unit Conversion', orderBy = 19, parentTabID = NULL, isDisplay = 1, displayMenuName = 'Unit Conversion'  \n" +
                "   WHERE pageName = 'Unit Conversion';  \n" +
                /* **************************** New Script -> 24-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetUnitDetailFormula` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetUnitDetailFormula`  \n" +
                "(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pUnitID INT(11)      \n" +
                ")  \n" +
                "BEGIN	  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	/* DECLARE SQLStatement varchar(255); */	  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT udf.id,udf.unitID,u.unitName,udf.toUnitID,uo.unitName toUnitName,udf.formula			  \n" +
                "		FROM unit_detail_formula udf   \n" +
                "		LEFT JOIN uoms u ON u.id = udf.unitID AND IFNULL(u.isdeleted,0) = 0  \n" +
                "		LEFT JOIN uoms uo ON uo.id = udf.toUnitID AND IFNULL(uo.isdeleted,0) = 0  \n" +
                "		WHERE IFNULL(udf.isdeleted,0) = 0 AND udf.unitID = pUnitID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"unitName DESC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-12-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetUnitOfMeasurement` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetUnitOfMeasurement`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMeasurementTypeId INT(11)      \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	/* DECLARE SQLStatement varchar(255); */	    \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT um.id, um.unitName, um.abbreviation, um.perUnit, u.unitName baseunit, um.baseUnitConvertValue, um.isFormula, um.description, um.isDefault, um.isSystemDefault, um.measurementTypeID, mt.name  measurementtype, um.ord,    \n" +
                "			(CASE WHEN (`um`.`isFormula` = 0) THEN 'No'     \n" +
                "						WHEN (`um`.`isFormula` = 1) THEN 'Yes' ELSE '' END) AS `isFormulaConvertedValue` ,    \n" +
                "			(CASE WHEN (`um`.`isDefault` = 0) THEN 'No'     \n" +
                "						WHEN (`um`.`isDefault` = 1) THEN 'Yes' ELSE '' END) AS `isDefaultConvertedValue` ,    \n" +
                "			(CASE WHEN (`um`.`isSystemDefault` = 0) THEN 'No'     \n" +
                "						WHEN (`um`.`isSystemDefault` = 1) THEN 'Yes' ELSE '' END) AS `isSystemDefaultConvertedValue`,    \n" +
                "			(SELECT  GROUP_CONCAT(alias) AS aliaslist FROM component_fields_genericalias_mst WHERE IFNULL(isdeleted,0) = 0 AND  refTableName ='Uoms' AND refId = um.id GROUP BY refId ) AS aliaslist    \n" +
                "		FROM uoms um LEFT JOIN uoms u ON u.id = um.baseUnitID AND IFNULL(u.isdeleted,0) = 0    \n" +
                "		LEFT JOIN measurement_types  mt ON mt.id = um.measurementTypeID AND IFNULL(mt.isdeleted,0) = 0   \n" +
                "		WHERE um.measurementTypeID = pMeasurementTypeId AND IFNULL(um.isdeleted,0) = 0 ;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"unitName DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (75,'2.00','V1',' Change the UOM flow - FENIL '," + userid + ");"
            );
            break;
        case 75:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-12-2018  *********************************** */

                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Developer',0,0,'setting.system.developer',NULL,NULL,'Developer',NULL,(select a.pageID from page_detail a where a.pageName='Configuration'),1,'8.90',NULL,NULL,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Developer');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "values('Communication',0,0,'setting.system.communication',NULL,NULL,'Communication',NULL,(select a.pageID from page_detail a where a.pageName='Configuration'),1,'15.00',NULL,NULL,1,  \n" +
                "utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Communication');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Personnel',0,0,'setting.user.personnel',NULL,NULL,'Personnel',NULL,(select a.pageID from page_detail a where a.pageName='User'),1,'29.09',NULL,NULL,1,utc_timestamp(),  \n" +
                "utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Personnel');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('CustomerMenu',0,0,'setting.customermenu',NULL,NULL,'Customer',NULL,(select a.pageID from page_detail a where a.pageName='Admin'),1,'32.00',NULL,'icon-account-multiple',1,  \n" +
                "utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Customer');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Equipment & Special Tools',0,0,'setting.equipmentSpecialTools',NULL,NULL,'Equipment & Special Tools',NULL,(select a.pageID from page_detail a where a.pageName='Admin'),1,'32.21',  \n" +
                "NULL,NULL,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Equipment & Special Tools');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Part',0,0,'setting.part',NULL,NULL,'Part',NULL,(select a.pageID from page_detail a where a.pageName='Admin'),1,'32.39',NULL,NULL,1,utc_timestamp(),utc_timestamp(),NULL,  \n" +
                "'1',NULL,NULL,0,NULL,0,'Part');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Miscellaneous',0,0,'setting.miscellaneous',NULL,NULL,'Miscellaneous',NULL,(select a.pageID from page_detail a where a.pageName='Admin'),1,'39.00',NULL,NULL,1,utc_timestamp(),  \n" +
                "utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Miscellaneous');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Sales OrderMenu',0,0,'transaction.salesorder',NULL,NULL,'Sales Order',NULL,(select a.pageID from page_detail a where a.pageName='Transaction'),1,'13.00',NULL,NULL,1,utc_timestamp(),  \n" +
                "utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Sales Order');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Receiving',0,0,'transaction.receiving',NULL,NULL,'Receiving',NULL,(select a.pageID from page_detail a where a.pageName='Transaction'),1,'15.00',NULL,NULL,1,utc_timestamp(),  \n" +
                "utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Receiving');  \n" +
                "  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Work Ordermenu',0,0,'reports.workorder',NULL,NULL,'Work Order',NULL,92,1,'18.00',NULL,NULL,1,utc_timestamp(),  \n" +
                "utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Work Order');  \n" +
                /* **************************** New Script -> 24-12-2018  *********************************** */
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Admin') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Configuration';  \n" +
                "  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Developer') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'page';  \n" +
                "  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Developer') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Page Rights';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Developer') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Help Blog';  \n" +
                "  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Developer') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Dynamic Message';  \n" +
                "  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Configuration') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Widget';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Configuration') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'RFQ Setting';  \n" +
                "  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Configuration') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Communication';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Communication') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Agreement Template';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Communication') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Mail Template';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Communication') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Standard Message';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'user') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'role';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'user') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Workstation';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'user') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Personnel';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Personnel') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Employee';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Personnel') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Employee Title';  \n" +
                "  \n" +
                "     UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Personnel') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Work Area';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Admin') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'CustomerMenu';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'CustomerMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Customer';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'CustomerMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Terms';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Certificate Standard') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Standard Type';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Admin') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Equipment & Special Tools';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Equipment & Special Tools') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Equipment Type';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Equipment & Special Tools') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Equipment Group';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Equipment & Special Tools') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Equipment Ownership';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Equipment & Special Tools') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Location Type';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Equipment & Special Tools') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Equipment & Tools';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Admin') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Part';  \n" +
                "  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Assemblies';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Assemblies') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Assemblies Stock';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Part Status';  \n" +
                "  \n" +
                "     UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Component';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Admin') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Operation';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Operation') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Operations';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Operation') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Operation Type';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Operation') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Master Template';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Admin') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Miscellaneous';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Printer';  \n" +
                "  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Print Format';  \n" +
                "  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Unit';  \n" +
                "  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Unit Conversion';  \n" +
                "  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Unit of Measurement';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Unit Conversion';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Custom Forms';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Shipping Type';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Barcode Separator';  \n" +
                "  \n" +
                "     UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Barcode Separator';  \n" +
                "  \n" +
                "      UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Country';  \n" +
                "  \n" +
                "      UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Defects';  \n" +
                "  \n" +
                "       UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Miscellaneous') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Defects';  \n" +
                "  \n" +
                "        UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Transaction') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'RFQ';  \n" +
                "  \n" +
                "         UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Transaction') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Sales OrderMenu';  \n" +
                "  \n" +
                "  \n" +
                "         UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Sales OrderMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Sales Order';  \n" +
                "  \n" +
                "          UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Sales OrderMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Add Sales Order';  \n" +
                "  \n" +
                "           UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Sales OrderMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Shipped';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Sales OrderMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Request For Shipment';  \n" +
                "  \n" +
                "         UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Transaction') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'In House Assembly Stock';  \n" +
                "  \n" +
                "          UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Transaction') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Receiving';  \n" +
                "  \n" +
                "           UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Receiving') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Receiving Material';  \n" +
                "  \n" +
                "           UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Reports') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Work Ordermenu';  \n" +
                "  \n" +
                "  \n" +
                "           UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Work Ordermenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Work Order Data Fields Report';  \n" +
                "  \n" +
                "  \n" +
                "           UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Work Ordermenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Transaction wise Work Order Data Fields';  \n" +
                /* **************************** New Script -> 27-12-2018  *********************************** */
                "update page_detail set menuRoute = null,menuName=null,parentPageRoute=null,parentPageID=null where pageName='Supply & Material';  \n" +
                "update page_detail set menuRoute = null,menuName=null,parentPageRoute=null,parentPageID=null where pageName='Part Type';  \n" +
                "update page_detail set menuRoute = null,menuName=null,parentPageRoute=null,parentPageID=null where pageName='Generic Category';  \n" +
                "update page_detail set menuRoute = null,menuName=null,parentPageRoute=null,parentPageID=null where pageName='Assembly Revision';  \n" +
                "update page_detail set menuRoute = null,menuName=null,parentPageRoute=null,parentPageID=null where pageName='Add Work Order';  \n" +
                /* **************************** New Script -> 27-12-2018  *********************************** */
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"{{UserName}}\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"{{UserName}}\",  \n" +
                "hasChild = 1 where pagename = \"{{UserName}}\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"My Profile\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"My Profile\",  \n" +
                "hasChild = 0 where pagename = \"My Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Logout\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Logout\",  \n" +
                "hasChild = 0 where pagename = \"Logout\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"dashboard\",   \n" +
                "menuName = \"Dashboard\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Dashboard\",  \n" +
                "hasChild = 0 where pagename = \"Dashboard\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting\",   \n" +
                "menuName = \"Setting\",   \n" +
                "orderby = 5.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Setting\",  \n" +
                "hasChild = 1 where pagename = \"Admin\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user\",   \n" +
                "menuName = \"User\",   \n" +
                "orderby = 29.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"User\",  \n" +
                "hasChild = 1 where pagename = \"User\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.eco\",   \n" +
                "menuName = \"ECO\",   \n" +
                "orderby = 37.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO\",  \n" +
                "hasChild = 1 where pagename = \"ECO\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.eco.ecocategory\",   \n" +
                "menuName = \"ECO Category List\",   \n" +
                "orderby = 37.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Category List\",  \n" +
                "hasChild = 0 where pagename = \"ECO Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.eco.ecocategoryvalues\",   \n" +
                "menuName = \"ECO Category Values List\",   \n" +
                "orderby = 37.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Category Values List\",  \n" +
                "hasChild = 0 where pagename = \"ECO Category Values\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.customermenu.customer\",   \n" +
                "menuName = \"Customer List\",   \n" +
                "orderby = 32.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Customer List\",  \n" +
                "hasChild = 0 where pagename = \"Customer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.supplier\",   \n" +
                "menuName = \"Supplier List\",   \n" +
                "orderby = 26.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Supplier List\",  \n" +
                "hasChild = 0 where pagename = \"Supplier\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel.employee\",   \n" +
                "menuName = \"Personnel List\",   \n" +
                "orderby = 29.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel List\",  \n" +
                "hasChild = 0 where pagename = \"Employee\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"admin.otherPermission\",   \n" +
                "menuName = \"Other Permission\",   \n" +
                "orderby = 6.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Other Permission\",  \n" +
                "hasChild = 0 where pagename = \"Other Permission\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard\",   \n" +
                "menuName = \"Standard\",   \n" +
                "orderby = 32.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard\",  \n" +
                "hasChild = 1 where pagename = \"Certificate Standard\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard.Standard\",   \n" +
                "menuName = \"Standard List\",   \n" +
                "orderby = 32.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard List\",  \n" +
                "hasChild = 0 where pagename = \"Standards\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard.standardCategory\",   \n" +
                "menuName = \"Standards Category List\",   \n" +
                "orderby = 32.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standards Category List\",  \n" +
                "hasChild = 0 where pagename = \"Standards Class\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.department\",   \n" +
                "menuName = \"Department List\",   \n" +
                "orderby = 23.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Department List\",  \n" +
                "hasChild = 0 where pagename = \"Department\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 62.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 1 where pagename = \"Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel.title\",   \n" +
                "menuName = \"Title List\",   \n" +
                "orderby = 29.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Title List\",  \n" +
                "hasChild = 0 where pagename = \"Employee Title\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipmentgroup\",   \n" +
                "menuName = \"Equipment & Special Tools Group List\",   \n" +
                "orderby = 32.27,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Group List\",  \n" +
                "hasChild = 0 where pagename = \"Equipment Group\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipmentownership\",   \n" +
                "menuName = \"Equipment & Special Tools Ownership List\",   \n" +
                "orderby = 32.30,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Ownership List\",  \n" +
                "hasChild = 0 where pagename = \"Equipment Ownership\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard.standardtype\",   \n" +
                "menuName = \"Standard Type List\",   \n" +
                "orderby = 32.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard Type List\",  \n" +
                "hasChild = 0 where pagename = \"Standard Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 7.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Part Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipmenttype\",   \n" +
                "menuName = \"Equipment & Special Tools Type List\",   \n" +
                "orderby = 32.24,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Type List\",  \n" +
                "hasChild = 0 where pagename = \"Equipment Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.operationtype\",   \n" +
                "menuName = \"Operation Type List\",   \n" +
                "orderby = 35.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Type List\",  \n" +
                "hasChild = 0 where pagename = \"Operation Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"admin.genericcategory.shippingstatus\",   \n" +
                "menuName = \"Shipping Status\",   \n" +
                "orderby = 8.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Shipping Status\",  \n" +
                "hasChild = 0 where pagename = \"Shipping Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"admin.genericcategory.verificationstatus\",   \n" +
                "menuName = \"Operation Verification Status\",   \n" +
                "orderby = 9.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Operation Verification Status\",  \n" +
                "hasChild = 0 where pagename = \"Operation Verification Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.locationtype\",   \n" +
                "menuName = \"Location List\",   \n" +
                "orderby = 32.33,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Location List\",  \n" +
                "hasChild = 0 where pagename = \"Location Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel.responsibility\",   \n" +
                "menuName = \"Responsibility List\",   \n" +
                "orderby = 29.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Responsibility List\",  \n" +
                "hasChild = 0 where pagename = \"Work Area\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipment\",   \n" +
                "menuName = \"Equipment & Special Tools List\",   \n" +
                "orderby = 32.36,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools List\",  \n" +
                "hasChild = 0 where pagename = \"Equipment & Tools\";  \n" +
                "  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 50.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Supply & Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.workstationList\",   \n" +
                "menuName = \"Workstation List\",   \n" +
                "orderby = 29.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workstation List\",  \n" +
                "hasChild = 0 where pagename = \"Workstation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication.Predefined Chat Message\",   \n" +
                "menuName = \"Predefined Chat Message List\",   \n" +
                "orderby = 15.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Predefined Chat Message List\",  \n" +
                "hasChild = 0 where pagename = \"Standard Message\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.inspectionprocessdefects\",   \n" +
                "menuName = \"Inspection Process Defects\",   \n" +
                "orderby = 39.24,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Inspection Process Defects\",  \n" +
                "hasChild = 1 where pagename = \"Defects\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.inspectionprocessdefects.defectCategory\",   \n" +
                "menuName = \"Defect Category List\",   \n" +
                "orderby = 39.27,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Defect Category List\",  \n" +
                "hasChild = 0 where pagename = \"Defect Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.assembly.assemblystock\",   \n" +
                "menuName = \"Opening Assembly Stock List\",   \n" +
                "orderby = 32.48,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Opening Assembly Stock List\",  \n" +
                "hasChild = 0 where pagename = \"Assemblies Stock\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.page\",   \n" +
                "menuName = \"Page List\",   \n" +
                "orderby = 8.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Page List\",  \n" +
                "hasChild = 0 where pagename = \"Page\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system\",   \n" +
                "menuName = \"System\",   \n" +
                "orderby = 8.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"System\",  \n" +
                "hasChild = 1 where pagename = \"Configuration\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.entity\",   \n" +
                "menuName = \"Entity List\",   \n" +
                "orderby = 8.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Entity List\",  \n" +
                "hasChild = 0 where pagename = \"Entity\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation\",   \n" +
                "menuName = \"Operation\",   \n" +
                "orderby = 35.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation\",  \n" +
                "hasChild = 1 where pagename = \"Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.operationlist\",   \n" +
                "menuName = \"Operation List\",   \n" +
                "orderby = 35.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation List\",  \n" +
                "hasChild = 0 where pagename = \"Operations\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.masterTemplate\",   \n" +
                "menuName = \"Operation Template List\",   \n" +
                "orderby = 35.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Template List\",  \n" +
                "hasChild = 0 where pagename = \"Master Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder\",   \n" +
                "menuName = \"Workorder\",   \n" +
                "orderby = 10.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workorder\",  \n" +
                "hasChild = 1 where pagename = \"Work Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.template\",   \n" +
                "menuName = \"Work Order List\",   \n" +
                "orderby = 10.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order List\",  \n" +
                "hasChild = 0 where pagename = \"Work Orders\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Add Work Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"TASKLIST\",   \n" +
                "menuName = \"Task List\",   \n" +
                "orderby = 25.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Task List\",  \n" +
                "hasChild = 0 where pagename = \"Task List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.role\",   \n" +
                "menuName = \"Role List\",   \n" +
                "orderby = 29.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Role List\",  \n" +
                "hasChild = 0 where pagename = \"Role\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.pageright\",   \n" +
                "menuName = \"Page Rights\",   \n" +
                "orderby = 8.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Page Rights\",  \n" +
                "hasChild = 0 where pagename = \"Page Rights\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage User\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Page\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Page\",  \n" +
                "hasChild = 0 where pagename = \"Manage Page\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Personnel\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel\",  \n" +
                "hasChild = 0 where pagename = \"Manage Employee\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Role\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Role\",  \n" +
                "hasChild = 0 where pagename = \"Manage Role\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Customer\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Customer\",  \n" +
                "hasChild = 0 where pagename = \"Manage Customer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Supplier\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Supplier\",  \n" +
                "hasChild = 0 where pagename = \"Manage Supplier\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Personnel Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel Profile\",  \n" +
                "hasChild = 0 where pagename = \"Employee Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Personnel Operation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel Operation\",  \n" +
                "hasChild = 0 where pagename = \"Manage Employee Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Standard\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard\",  \n" +
                "hasChild = \"0\" where pagename = \"Manage Certificate standard\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Department\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Department\",  \n" +
                "hasChild = 0 where pagename = \"Manage Department\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = \"0\" where pagename = \"Manage Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment & Tools\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Profile\",  \n" +
                "hasChild = 0 where pagename = \"Equipment & Tools Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Supply & Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Workstation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workstation\",  \n" +
                "hasChild = 0 where pagename = \"Manage Workstation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Workstation Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workstation Profile\",  \n" +
                "hasChild = 0 where pagename = \"Workstation Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Predefined Chat Message\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Predefined Chat Message\",  \n" +
                "hasChild = 0 where pagename = \"Manage Standard Message\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Manage\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manage\",  \n" +
                "hasChild = 0 where pagename = \"Manage Entity\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation\",  \n" +
                "hasChild = 0 where pagename = \"Manage Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Profile\",  \n" +
                "hasChild = 0 where pagename = \"Operation Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"ECO Request List\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Request List\",  \n" +
                "hasChild = 0 where pagename = \"Eco Request List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"ECO Request\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Request\",  \n" +
                "hasChild = 0 where pagename = \"Eco Request\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Work Order Data Entry Change History\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order Data Entry Change History\",  \n" +
                "hasChild = 0 where pagename = \"Data entry change audit log list\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation -\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation -\",  \n" +
                "hasChild = 0 where pagename = \"Traveler\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage traveler\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Traveler 1st Article\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Traveler Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"configuration.templates\",   \n" +
                "menuName = \"Manage Template\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manage Template\",  \n" +
                "hasChild = 1 where pagename = \"Manage Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication.agreement\",   \n" +
                "menuName = \"Agreement Template\",   \n" +
                "orderby = 15.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Agreement Template\",  \n" +
                "hasChild = 0 where pagename = \"Agreement Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Work Order Manual Entry List\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order Manual Entry List\",  \n" +
                "hasChild = 0 where pagename = \"Work Order Manual Entry List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order Manual Entry\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order Manual Entry\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Manual Entry\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation Template\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Template\",  \n" +
                "hasChild = 0 where pagename = \"View No OF Operations\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Work Order Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order Profile\",  \n" +
                "hasChild = 0 where pagename = \"Work Order Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.widget\",   \n" +
                "menuName = \"Widget\",   \n" +
                "orderby = 17.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Widget\",  \n" +
                "hasChild = 0 where pagename = \"Widget\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Widget Detail\",   \n" +
                "orderby = 17.20,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Widget Detail\",  \n" +
                "hasChild = 0 where pagename = \"Widget Detail\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports\",   \n" +
                "menuName = \"Reports\",   \n" +
                "orderby = 20.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Reports\",  \n" +
                "hasChild = 1 where pagename = \"Reports\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.misreport\",   \n" +
                "menuName = \"MIS Report List\",   \n" +
                "orderby = 20.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"MIS Report List\",  \n" +
                "hasChild = 0 where pagename = \"MIS Report\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.shippingtype\",   \n" +
                "menuName = \"Shipping Type List\",   \n" +
                "orderby = 39.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Type List\",  \n" +
                "hasChild = 0 where pagename = \"Shipping Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation dodont\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Document\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Data Fields\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Parts\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Equipments\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Employees\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation First Article\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Other Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Detail\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Standards\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Documents\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operations\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Parts\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Equipments\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Employees\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Shipping Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Other Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Invite People\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction\",   \n" +
                "menuName = \"Transaction\",   \n" +
                "orderby = 15.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Transaction\",  \n" +
                "hasChild = \"1\" where pagename = \"Transaction\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.salesorder.salesorderlist\",   \n" +
                "menuName = \"Sales Order List\",   \n" +
                "orderby = 20.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Sales Order List\",  \n" +
                "hasChild = 0 where pagename = \"Sales Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.salesorder.manage\",   \n" +
                "menuName = \"Sales Order\",   \n" +
                "orderby = 20.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Sales Order\",  \n" +
                "hasChild = 0 where pagename = \"Add Sales Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.customermenu.terms\",   \n" +
                "menuName = \"Payment Term List\",   \n" +
                "orderby = 32.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Payment Term List\",  \n" +
                "hasChild = 0 where pagename = \"Terms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst.componentlist\",   \n" +
                "menuName = \"Component List\",   \n" +
                "orderby = 32.67,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component List\",  \n" +
                "hasChild = 0 where pagename = \"Component List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Component\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component\",  \n" +
                "hasChild = 0 where pagename = \"Manage Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"BOM\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"rfqtransaction\",   \n" +
                "menuName = \"RFQ Transaction\",   \n" +
                "orderby = 10.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ Transaction\",  \n" +
                "hasChild = 1 where pagename = \"RFQ Transaction\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.rfq\",   \n" +
                "menuName = \"RFQ List\",   \n" +
                "orderby = 17.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ List\",  \n" +
                "hasChild = 0 where pagename = \"RFQ\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.assembly.assemblyList\",   \n" +
                "menuName = \"Assembly List\",   \n" +
                "orderby = 32.45,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Assembly List\",  \n" +
                "hasChild = 0 where pagename = \"Assembly\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.customfromlist\",   \n" +
                "menuName = \"Custom Forms List\",   \n" +
                "orderby = 39.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Custom Forms List\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"customforms.entity\",   \n" +
                "menuName = \"Entity\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Entity\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms Entity\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Custom Forms\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Custom Forms\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms Data Fields List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Custom Forms\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Custom Forms\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms Manage Data Fields\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.forms\",   \n" +
                "menuName = \"Forms List\",   \n" +
                "orderby = 8.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Forms List\",  \n" +
                "hasChild = \"0\" where pagename = \"Forms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst.manufacturer\",   \n" +
                "menuName = \"Manufacturer List\",   \n" +
                "orderby = 32.64,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manufacturer List\",  \n" +
                "hasChild = 0 where pagename = \"Manufacturer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.salesorder.shipped\",   \n" +
                "menuName = \"Shipping Records List\",   \n" +
                "orderby = 20.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Records List\",  \n" +
                "hasChild = 0 where pagename = \"Shipped\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Shipping Records\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Records\",  \n" +
                "hasChild = 0 where pagename = \"Manage Shipped\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.unit\",   \n" +
                "menuName = \"Unit of Measure List\",   \n" +
                "orderby = 39.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Unit of Measure List\",  \n" +
                "hasChild = 0 where pagename = \"Unit\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst.barcodeLabelTemplate\",   \n" +
                "menuName = \"Barcode Template List\",   \n" +
                "orderby = 32.73,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Template List\",  \n" +
                "hasChild = 0 where pagename = \"Barcode Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Barcode Template\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Template\",  \n" +
                "hasChild = 0 where pagename = \"Manage Barcode template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting\",   \n" +
                "menuName = \"RFQ Setting\",   \n" +
                "orderby = 20.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ Setting\",  \n" +
                "hasChild = 1 where pagename = \"RFQ Setting\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.jobtype\",   \n" +
                "menuName = \"Job Type List\",   \n" +
                "orderby = 20.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Job Type List\",  \n" +
                "hasChild = 0 where pagename = \"Job Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.rfqtype\",   \n" +
                "menuName = \"Rfq Type List\",   \n" +
                "orderby = 20.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Rfq Type List\",  \n" +
                "hasChild = 0 where pagename = \"Rfq Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.reason\",   \n" +
                "menuName = \"Reason List\",   \n" +
                "orderby = 20.39,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Reason List\",  \n" +
                "hasChild = 0 where pagename = \"Reason\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst\",   \n" +
                "menuName = \"Component\",   \n" +
                "orderby = 32.54,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component\",  \n" +
                "hasChild = 1 where pagename = \"Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Measurement Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Measurement Type\",  \n" +
                "hasChild = 0 where pagename = \"Measurement Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Unit of Measure\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Unit of Measure\",  \n" +
                "hasChild = 0 where pagename = \"Unit of Measurement\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.unitconversion\",   \n" +
                "menuName = \"Unit Conversion\",   \n" +
                "orderby = 39.10,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Unit Conversion\",  \n" +
                "hasChild = 0 where pagename = \"Unit Conversion\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.receiving.receivingmaterial\",   \n" +
                "menuName = \"Receiving Material List\",   \n" +
                "orderby = 26.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Receiving Material List\",  \n" +
                "hasChild = 0 where pagename = \"Receiving Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Receiving Material\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Receiving Material\",  \n" +
                "hasChild = 0 where pagename = \"Manage Receiving Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.assembly\",   \n" +
                "menuName = \"Assembly\",   \n" +
                "orderby = 32.42,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Assembly\",  \n" +
                "hasChild = 1 where pagename = \"Assemblies\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Assembly Revision\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.salesorder.requestforship\",   \n" +
                "menuName = \"Request For Shipment List\",   \n" +
                "orderby = 20.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Request For Shipment List\",  \n" +
                "hasChild = 0 where pagename = \"Request For Shipment\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Request For Shipment\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Request For Shipment\",  \n" +
                "hasChild = 0 where pagename = \"Manage Request For Shipment\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Comment\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Pesonnel Timeline\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Pesonnel Timeline\",  \n" +
                "hasChild = 0 where pagename = \"Employee Timeline\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.workorder.wodataelementreport\",   \n" +
                "menuName = \"Data Field Report\",   \n" +
                "orderby = 23.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Data Field Report\",  \n" +
                "hasChild = 0 where pagename = \"Work Order Data Fields Report\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.inhouseassemblystock\",   \n" +
                "menuName = \"Assembly Stock List\",   \n" +
                "orderby = 23.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Assembly Stock List\",  \n" +
                "hasChild = 0 where pagename = \"In House Assembly Stock\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.printerlist\",   \n" +
                "menuName = \"Printer List\",   \n" +
                "orderby = 39.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Printer List\",  \n" +
                "hasChild = 0 where pagename = \"Printer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.printfromate\",   \n" +
                "menuName = \"Print Format List\",   \n" +
                "orderby = 39.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Print Format List\",  \n" +
                "hasChild = 0 where pagename = \"Print Format\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.workorder.tranwisewodataelement\",   \n" +
                "menuName = \"Transaction Data Field Report\",   \n" +
                "orderby = 23.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Transaction Data Field Report\",  \n" +
                "hasChild = 0 where pagename = \"Transaction wise Work Order Data Fields\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"RFQ\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ\",  \n" +
                "hasChild = 0 where pagename = \"Manage RFQ\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.additionalrequirement\",   \n" +
                "menuName = \"Additional Requirement List\",   \n" +
                "orderby = 20.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Additional Requirement List\",  \n" +
                "hasChild = 0 where pagename = \"Additional Requirement\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.mountingtype\",   \n" +
                "menuName = \"Mounting Type List\",   \n" +
                "orderby = 20.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Mounting Type List\",  \n" +
                "hasChild = 0 where pagename = \"Mounting Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst.whoacquiredwho\",   \n" +
                "menuName = \"Who Acquired Who List\",   \n" +
                "orderby = 32.70,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Who Acquired Who List\",  \n" +
                "hasChild = 0 where pagename = \"Who Acquired Who\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Import BOM\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Planned BOM\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"BOM Quote\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 4.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"BOM Summary\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.Data Key\",   \n" +
                "menuName = \"Data Key List\",   \n" +
                "orderby = 11.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Data Key List\",  \n" +
                "hasChild = 0 where pagename = \"Settings\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"configuration.chartrawdatacategory\",   \n" +
                "menuName = \"Chart Rawdata Category\",   \n" +
                "orderby = 60.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Chart Rawdata Category\",  \n" +
                "hasChild = 0 where pagename = \"Chart Raw Data Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Bill Of Material Reason\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Bill Of Material Reason\",  \n" +
                "hasChild = 0 where pagename = \"Bill Of Material Reason\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"RFQ Reason\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ Reason\",  \n" +
                "hasChild = 0 where pagename = \"RFQ Reason\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.dynamicmessage\",   \n" +
                "menuName = \"Dynamic Message List\",   \n" +
                "orderby = 8.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Dynamic Message List\",  \n" +
                "hasChild = 0 where pagename = \"Dynamic Message\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Part Costing\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.parttype\",   \n" +
                "menuName = \"Part Type List\",   \n" +
                "orderby = 20.27,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Type List\",  \n" +
                "hasChild = 0 where pagename = \"RFQ Part Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.rfqlineitemserrorcode\",   \n" +
                "menuName = \"Error Code List\",   \n" +
                "orderby = 20.30,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Error Code List\",  \n" +
                "hasChild = 0 where pagename = \"Error Code\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.keyword\",   \n" +
                "menuName = \"Keyword List\",   \n" +
                "orderby = 20.42,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Keyword List\",  \n" +
                "hasChild = 0 where pagename = \"Keyword\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst.componentstandard\",   \n" +
                "menuName = \"Component Standards List\",   \n" +
                "orderby = 32.57,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component Standards List\",  \n" +
                "hasChild = 0 where pagename = \"Component Standards\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst.componentstandardclass\",   \n" +
                "menuName = \"Component Standards Category List\",   \n" +
                "orderby = 32.61,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component Standards Category List\",  \n" +
                "hasChild = 0 where pagename = \"Component Standards Class\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Review Pricing\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Not Quoted Line Items\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"80/20 Rules\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Excess Material Exposure\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Materials At Risk\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Lead Time Risk\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Suggested Alternatives\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.helpblog\",   \n" +
                "menuName = \"Help Blog\",   \n" +
                "orderby = 8.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Help Blog\",  \n" +
                "hasChild = 0 where pagename = \"Help Blog\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Help Blog Detail\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Help Blog Detail\",  \n" +
                "hasChild = 0 where pagename = \"Help Blog Detail\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.partstatus\",   \n" +
                "menuName = \"Part Status List\",   \n" +
                "orderby = 32.51,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Status List\",  \n" +
                "hasChild = 0 where pagename = \"Part Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools Group\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Group\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment Group Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment  & Special Tools Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment  & Special Tools Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools Ownership\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Ownership\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment Ownership Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Standard Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Standard Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Part Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Part Status\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Status\",  \n" +
                "hasChild = 0 where pagename = \"Manage Part Status Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Title\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Title\",  \n" +
                "hasChild = 0 where pagename = \"Manage Employee Title Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Operation Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Shipping Status Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Location\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Location\",  \n" +
                "hasChild = 0 where pagename = \"Manage Location Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Responsibility\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Responsibility\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Area Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Shipping Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Shipping Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Payment Term\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Payment Term\",  \n" +
                "hasChild = 0 where pagename = \"Manage Terms Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Operation Verification Status Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Printer\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Printer\",  \n" +
                "hasChild = 0 where pagename = \"Manage Printer Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Print Format\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Print Format\",  \n" +
                "hasChild = 0 where pagename = \"Manage Print Format Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.quotedynamicfields\",   \n" +
                "menuName = \"Quote Dynamic Fields List\",   \n" +
                "orderby = 20.33,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Quote Dynamic Fields List\",  \n" +
                "hasChild = 0 where pagename = \"Quote Dynamic Fields1\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.costcategory\",   \n" +
                "menuName = \"Cost Category List\",   \n" +
                "orderby = 20.36,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Cost Category List\",  \n" +
                "hasChild = 0 where pagename = \"Cost Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Component List\",   \n" +
                "orderby = 14.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component List\",  \n" +
                "hasChild = 0 where pagename = \"Manufacturer Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Component List\",   \n" +
                "orderby = 14.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component List\",  \n" +
                "hasChild = 0 where pagename = \"Distributor Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Manage\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manage\",  \n" +
                "hasChild = 0 where pagename = \"Manage Forms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.barcodesparator\",   \n" +
                "menuName = \"Barcode Separator List\",   \n" +
                "orderby = 39.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Separator List\",  \n" +
                "hasChild = 0 where pagename = \"Barcode Separator\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Barcode Separator\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Separator\",  \n" +
                "hasChild = 0 where pagename = \"Manage Barcode Separator Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"My Profile\",   \n" +
                "orderby = 0.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"My Profile\",  \n" +
                "hasChild = 0 where pagename = \"User Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication.email\",   \n" +
                "menuName = \"Email Template\",   \n" +
                "orderby = 15.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Email Template\",  \n" +
                "hasChild = 0 where pagename = \"Mail Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 0.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"RFQ BOM Document\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"configuration.charttype\",   \n" +
                "menuName = \"Chart Type\",   \n" +
                "orderby = 5.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Chart Type\",  \n" +
                "hasChild = 0 where pagename = \"Chart Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.rohs\",   \n" +
                "menuName = \"RoHS List\",   \n" +
                "orderby = 20.45,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RoHS List\",  \n" +
                "hasChild = 0 where pagename = \"RoHS\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.country\",   \n" +
                "menuName = \"Country List\",   \n" +
                "orderby = 39.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Country List\",  \n" +
                "hasChild = 0 where pagename = \"Country\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.connectertype\",   \n" +
                "menuName = \"Connector Type List\",   \n" +
                "orderby = 20.24,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Connector Type List\",  \n" +
                "hasChild = 0 where pagename = \"Connector Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer\",   \n" +
                "menuName = \"Developer\",   \n" +
                "orderby = 8.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Developer\",  \n" +
                "hasChild = 1 where pagename = \"Developer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication\",   \n" +
                "menuName = \"Communication\",   \n" +
                "orderby = 15.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Communication\",  \n" +
                "hasChild = 1 where pagename = \"Communication\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel\",   \n" +
                "menuName = \"Personnel\",   \n" +
                "orderby = 29.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel\",  \n" +
                "hasChild = 1 where pagename = \"Personnel\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.customermenu\",   \n" +
                "menuName = \"Customer\",   \n" +
                "orderby = 32.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Customer\",  \n" +
                "hasChild = 1 where pagename = \"CustomerMenu\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools\",   \n" +
                "menuName = \"Equipment & Special Tools\",   \n" +
                "orderby = 32.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools\",  \n" +
                "hasChild = 1 where pagename = \"Equipment & Special Tools\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part\",   \n" +
                "menuName = \"Part\",   \n" +
                "orderby = 32.39,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part\",  \n" +
                "hasChild = 1 where pagename = \"Part\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous\",   \n" +
                "menuName = \"Miscellaneous\",   \n" +
                "orderby = 39.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Miscellaneous\",  \n" +
                "hasChild = 1 where pagename = \"Miscellaneous\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.salesorder\",   \n" +
                "menuName = \"Sales Order\",   \n" +
                "orderby = 20.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Sales Order\",  \n" +
                "hasChild = 1 where pagename = \"Sales OrderMenu\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.receiving\",   \n" +
                "menuName = \"Receiving\",   \n" +
                "orderby = 26.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Receiving\",  \n" +
                "hasChild = 1 where pagename = \"Receiving\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.workorder\",   \n" +
                "menuName = \"Work Order\",   \n" +
                "orderby = 23.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order\",  \n" +
                "hasChild = 1 where pagename = \"Work Ordermenu\";  \n" +

                /* **************************** New Script -> 27-12-2018  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (76,'2.00','V1',' PageDetail changes - Mona '," + userid + ");"
            );
            break;
        case 76:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "update page_detail set iconClass='mdi mdi-account-box-outline' where pageName='Developer';  \n" +
                "update page_detail set iconClass='mdi mdi-nfc-tap' where pageName='Communication';  \n" +
                "update page_detail set iconClass='icon-account-network' where pageName='Personnel';  \n" +
                "update page_detail set iconClass='icon-cog-box' where pageName='Equipment & Special Tools';  \n" +
                "update page_detail set iconClass='mdi mdi-developer-board' where pageName='Part';  \n" +
                "update page_detail set iconClass='Miscellaneous' where pageName='Miscellaneous';  \n" +
                "update page_detail set iconClass='mdi mdi-file-document' where pageName='Sales OrderMenu';  \n" +
                "update page_detail set iconClass='icon-box-download' where pageName='Receiving';  \n" +
                "update page_detail set iconClass='icon-file-word' where pageName='Work Ordermenu';  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (77,'2.00','V1',' menu icon change- Mona '," + userid + ");"
            );
            break;
        case 77:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2018  *********************************** */
                "update page_detail set iconClass='mdi mdi-attachment' where pageName='Miscellaneous';  \n" +
                "update page_detail set isActive='0' where pageName='RFQ Transaction';  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Work Order') a  \n" +
                " SET b.`parentPageID`= a.pageID , b.`menuRoute`='workorder.workorderlist' WHERE b.pageName = 'Work Orders';  \n" +
                /* **************************** Add Script Version -> 27-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (78,'2.00','V1',' change sequance for workorder menu - Mona'," + userid + ");"
            );
            break;
        case 78:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-11-2018  *********************************** */
                "update page_detail set orderBy=20.04 where pageName='PO Status';  \n" +
                "update page_detail set menuName='Add Sales Order' where pageName='Add Sales Order';  \n" +
                "update page_detail set menuName='Operation' ,displayMenuName='Operation' where pageName='Traveler';  \n" +
                /* **************************** Add Script Version -> 28-11-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (79,'2.00','V1',' update page detail table -Mona '," + userid + ");"
            );
            break;
        case 79:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2018  *********************************** */
                "UPDATE page_detail SET isDisplay = 1 WHERE pageName = 'Work Orders';  \n" +
                /* **************************** Add Script Version -> 29-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (80,'2.00','V1',' Set the isDisplay for work ordewrs menu - FENIL '," + userid + ");"
            );
            break;
        case 80:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2018  *********************************** */
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation dodont';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation details';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Employees';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Equipments';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation First Article';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Other Details';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Parts';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Data Fields';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Document';  \n" +
                "update page_detail set displayMenuName='Update' where pageName='Manage Work Order Operation Status';  \n" +
                /* **************************** Add Script Version -> 31-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (81,'2.00','V1',' Set the isDisplay for work ordewr operation menu -Mona '," + userid + ");"
            );
            break;
        case 81:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2018  *********************************** */
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation dodont';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation details';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Employees';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Equipments';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation First Article';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Other Details';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Parts';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Data Fields';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Document';  \n" +
                "UPDATE page_detail SET displayMenuName='Work Order Operation' WHERE pageName='Manage Work Order Operation Status';  \n" +
                /* **************************** Add Script Version -> 31-12-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (82,'2.00','V1',' Set the isDisplay for work ordewr operation menu - FENIL '," + userid + ");"
            );
            break;
        case 82:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "ALTER TABLE assemblymst ADD COLUMN assemblyCode VARCHAR(50);   \n" +
                "ALTER TABLE assemblymst ADD COLUMN assemblyRev VARCHAR(50);   \n" +
                "ALTER TABLE assemblymst ADD COLUMN assemblyID VARCHAR(50);   \n" +
                "ALTER TABLE assemblymst ADD COLUMN assyStatus INT(11);   \n" +
                "ALTER TABLE assemblymst ADD COLUMN inactiveDate DATETIME;   \n" +
                "  \n" +
                "TRUNCATE TABLE assembly_revision_comments;  \n" +
                "  \n" +
                "ALTER TABLE assembly_revision_comments DROP FOREIGN KEY FK_comments_AssyRevID;  \n" +
                "  \n" +
                "ALTER TABLE assembly_revision_comments CHANGE `AssyRevID` `AssyID` INT(11);  \n" +
                "ALTER TABLE assembly_revision_comments   \n" +
                "ADD CONSTRAINT FK_assembly_revision_comments_AssyID   \n" +
                "FOREIGN KEY (AssyID) REFERENCES assemblymst(id);  \n" +
                "  \n" +
                "UPDATE page_detail SET pageRoute = 'app.assembly.commentlist' WHERE pageRoute = 'app.assemblyRevision.commentlist';  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblies` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblies`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "        IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "               SELECT 	assymst.assemblyName,  \n" +
                "			assymst.assemblyNickName,  \n" +
                "			assymst.id,  \n" +
                "			assymst.assemblyDescription,    \n" +
                "			assymst.assemblyCode,  \n" +
                "			assymst.assemblyRev,  \n" +
                "			assymst.assemblyID,  \n" +
                "			assymst.assyStatus,  \n" +
                "			assymst.inactiveDate,  \n" +
                "			gc.gencCategoryName  AS `assyStatusValue` ,     \n" +
                "			-- assy_rev.assemblyID,    \n" +
                "			-- GROUP_CONCAT(assy_rev.revision ORDER BY assy_rev.revision ASC SEPARATOR ', ') AS assyRev ,    \n" +
                "			-- GROUP_CONCAT(assy_rev.id ORDER BY assy_rev.revision ASC SEPARATOR ', ') AS AssyRevID,    \n" +
                "			cust.id AS customerID,cust.companyName,cust.customerCode    \n" +
                "                FROM assemblymst assymst    \n" +
                "		LEFT OUTER JOIN assembly_revisionMst assy_rev ON assymst.id=assy_rev.assemblyID AND IFNULL(assy_rev.isDeleted,0)=0    \n" +
                "		LEFT OUTER JOIN customers            cust     ON assymst.customerID=cust.id     AND IFNULL(cust.isDeleted,0)=0     \n" +
                "		LEFT OUTER JOIN genericcategory      gc       ON assymst.assyStatus=gc.gencCategoryID     AND IFNULL(gc.isDeleted,0)=0     \n" +
                "	        WHERE assymst.deletedAt IS NULL  GROUP BY assymst.id;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (83,'2.00','V1',' Assembly Master Changes - Jignesh '," + userid + ");"
            );
            break;
        case 83:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                /* ************************************* 01 - Sproc_checkDelete_certificate_standards *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_certificate_standards` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_certificate_standards`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                                                          \n" +
                "  \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;    \n" +
                "  \n" +
                "  \n" +
                "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                          \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempCertificateStandards;    \n" +
                "  \n" +
                "			COMMIT;                                                        \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempCertificateStandards;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempCertificateStandards;     \n" +
                "END;  \n" +
                /* ************************************* 02 - Sproc_checkDelete_chart_templatemst *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_chart_templatemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_chart_templatemst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;   \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');                                \n" +
                "			SET @SQl2 = CONCAT('update chart_template_access set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL'); 		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                                                    \n" +
                "			EXECUTE stmt1;                                \n" +
                "			EXECUTE stmt2;                                                                                    \n" +
                "  \n" +
                "			SELECT * FROM tempcharttemplatemst;        \n" +
                "  \n" +
                "			COMMIT;                                                    \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempcharttemplatemst;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempcharttemplatemst;    \n" +
                "END;  \n" +
                /* ************************************* 03 - Sproc_checkDelete_component_cust_alias_rev *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_cust_alias_rev` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_cust_alias_rev`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN                                                        \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;      \n" +
                "START TRANSACTION;  \n" +
                "  \n" +
                "SET @SQl1 = CONCAT('update component_cust_alias_rev set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "		EXECUTE stmt1;                  \n" +
                "  \n" +
                "SET @SQl2 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE refComponentCustAliasRevID IN(',IDs,') and deletedAt is NULL');                  \n" +
                "		PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "		EXECUTE stmt2;     \n" +
                "  \n" +
                "SELECT COUNT(1) TotalCount FROM component_cust_alias_rev WHERE id IN (IDs) AND isdeleted=0 AND deletedat=NULL;    \n" +
                "COMMIT;  \n" +
                "END;  \n" +
                /* ************************************* 04 - Sproc_checkDelete_component_sid_stock *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_sid_stock` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_sid_stock`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;  \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                                                              \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "  \n" +
                "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "				EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	                                                  \n" +
                "				SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock                                                  \n" +
                "				WHERE FIND_IN_SET(id,IDs);	                                                  \n" +
                "  \n" +
                "				SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                                                    \n" +
                "				SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "				/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	                                                  \n" +
                "  \n" +
                "				SELECT * FROM tempcomponentsidstock;   \n" +
                "  \n" +
                "			COMMIT;                                                         \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempcomponentsidstock;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempcomponentsidstock;     \n" +
                "END;  \n" +
                /* ************************************* 05 - Sproc_checkDelete_component_sid_stock_dataelement_values *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_sid_stock_dataelement_values` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_sid_stock_dataelement_values`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;   \n" +
                "START TRANSACTION;  \n" +
                "SET @SQl1 = 	CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                      \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                                                  \n" +
                "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                                                     \n" +
                "			FROM component_sid_stock_dataelement_values                                                  \n" +
                "			WHERE FIND_IN_SET(id,IDs);                                                  \n" +
                "  \n" +
                "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;                                                  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames                                                  \n" +
                "			FROM dataelement                                                   \n" +
                "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	                                                  \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                                                    \n" +
                "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	    \n" +
                "  \n" +
                "COMMIT;  \n" +
                "END;  \n" +
                /* ************************************* 06 - Sproc_checkDelete_component_standard_class *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_standard_class` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_standard_class`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;   \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg   \n" +
                "					FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)  \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                                                          \n" +
                "  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "				EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "				PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "				EXECUTE stmt2;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandardClass;      \n" +
                "  \n" +
                "			COMMIT;                                                      \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempcomponentStandardClass;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempcomponentStandardClass;     \n" +
                "END;  \n" +
                /* ************************************* 07 - Sproc_checkDelete_customers *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customers` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customers`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)    \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"certificate_standards\" ELSE \"\" END AS msg FROM  certificate_standards cs WHERE cs.deletedAt IS NULL AND cs.certificateSupplierID IN(',IDs,') LIMIT 1)     \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			) q');  \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "  \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN     \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                          \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempCustomers;         \n" +
                "  \n" +
                "			COMMIT;                                                   \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempCustomers;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempCustomers;     \n" +
                "END;  \n" +
                /* ************************************* 08 - Sproc_checkDelete_dataelement *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_dataelement` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_dataelement`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;      \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                               \n" +
                "				UNION ALL                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND fieldType=1 and  dataElementId IN(',IDs,') LIMIT 1)                               \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                                                          \n" +
                "			START TRANSACTION;			  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "					EXECUTE stmt2;                                                          \n" +
                "  \n" +
                "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                                                          \n" +
                "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                                                          \n" +
                "			FROM dataelement dl WHERE dl.dataElementID = IDs;                                                          \n" +
                "  \n" +
                "  \n" +
                "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                                                          \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                           \n" +
                "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                                                          \n" +
                "				PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "				EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                                                          \n" +
                "  \n" +
                "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                                                          \n" +
                "  \n" +
                "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                                                          \n" +
                "  \n" +
                "						SET @SQl4 = 	CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                           \n" +
                "									where type IN  \n" +
                "										(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND isAutoIncrement = 1 AND deletedAt IS NULL)                                                          \n" +
                "										AND deletedAt IS NULL ');		                                                          \n" +
                "								PREPARE stmt4 FROM @SQL4;                                                          \n" +
                "								EXECUTE stmt4;                                                          \n" +
                "					END IF;	                                                          \n" +
                "				END IF;                                                          \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl5 = 	CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" WHERE dataElementID IN   \n" +
                "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                                                           \n" +
                "							AND deletedAt IS NULL');		                                                          \n" +
                "  \n" +
                "						PREPARE stmt5 FROM @SQL5;                                                          \n" +
                "						EXECUTE stmt5;                                                          \n" +
                "  \n" +
                "				SET @SQl6 = 	CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE parentDataElementID IN(',IDs,') AND deletedAt IS NULL ');		                                                          \n" +
                "  \n" +
                "						PREPARE stmt6 FROM @SQL6;                                                          \n" +
                "						EXECUTE stmt6;                                                          \n" +
                "  \n" +
                "  \n" +
                "			END IF;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempDataElement;     \n" +
                "  \n" +
                "			COMMIT;                                                       \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempDataElement;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempDataElement;      \n" +
                "    END;  \n" +
                /* ************************************* 09 - Sproc_checkDelete_dataelement_transactionvalues_manual *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_dataelement_transactionvalues_manual` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_dataelement_transactionvalues_manual`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;    \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SET @SQl1 = 	CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "	SET @SQl2 = 	CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                                                           \n" +
                "				WHERE subFormTransID IN  \n" +
                "					(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                                                          \n" +
                "					AND deletedAt IS NULL');		                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                /* ************************************* 10. Sproc_checkDelete_department *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_department` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_department`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;     \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                          \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempDepartment;      \n" +
                "  \n" +
                "			COMMIT;                                                      \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempDepartment;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempDepartment;      \n" +
                "    END;  \n" +
                /* ************************************* 11 - Sproc_checkDelete_employees *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_employees` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_employees`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;   \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                                                \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                                                           \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                             \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                           \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                                                          \n" +
                "  \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                                                          \n" +
                "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                                                          \n" +
                "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                                                          \n" +
                "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                          \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "			EXECUTE stmt4;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempEmp;  \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempEmp;                                                          \n" +
                "		END IF;                                                          \n" +
                "  \n" +
                "    DROP TABLE tempEmp;     \n" +
                "  \n" +
                "    END;  \n" +
                /* ************************************* 12 - Sproc_checkDelete_entity *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_entity` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_entity`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;   \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                                                         \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;            \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('update dynamicreportaccess set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID IN(',IDs,') and refTableName=\"entity\" and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "					EXECUTE stmt2;                                                	                                                        \n" +
                "  \n" +
                "			SELECT * FROM tempEntity;  \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempEntity;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempEntity;     \n" +
                "END;  \n" +
                /* ************************************* 13 - Sproc_checkDelete_equipment *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_equipment` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_equipment`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;       \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                                                          \n" +
                "  \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			IF entityID IS NOT NULL THEN                                                          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "				SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                          \n" +
                "				SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                          \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "				PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "				PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "				EXECUTE stmt1;                                                          \n" +
                "				EXECUTE stmt2;                                                          \n" +
                "				EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			ELSE                                                          \n" +
                "				SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                                                          \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "				EXECUTE stmt1;                                                          \n" +
                "				END IF;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempEquipment;    \n" +
                "  \n" +
                "			COMMIT;  \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempEquipment;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempEquipment;       \n" +
                "    END;  \n" +
                /* ************************************* 14 - Sproc_checkDelete_mfgcodemst *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;      \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)                                                          \n" +
                "		      ) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;                  \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');                  \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "					EXECUTE stmt2;                     \n" +
                "  \n" +
                "			SELECT * FROM tempMFGCodeMst;  \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempMFGCodeMst;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempMFGCodeMst;      \n" +
                "END;  \n" +
                /* ************************************* 15 - Sproc_checkDelete_operations *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_operations` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_operations`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;       \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL       	                                                   \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                                                          \n" +
                "  \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                                                          \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempOperations;    \n" +
                "  \n" +
                "			COMMIT;                                                        \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempOperations;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempOperations;    \n" +
                "    END;  \n" +
                /* ************************************* 16 - Sproc_checkDelete_rfqforms *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfqforms` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfqforms`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "				(SELECT  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                                                           \n" +
                "					from rfq_lineitems rl where deletedAt IS NULL and rl.rfqAssyID in (',IDs,')) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('UPDATE rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\" where rb.id in             \n" +
                "							   (SELECT rab.id from	(select b.id from rfq_assy_bom b where b.reqAssyID in (',IDs,') and b.deletedAt IS NULL)as rab)');            \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('UPDATE rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                                                           \n" +
                "							   (SELECT rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as rar)');            \n" +
                "  \n" +
                "			SET @SQl3 = 	CONCAT('UPDATE rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in            \n" +
                "								(SELECT rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as rat)');            \n" +
                "  \n" +
                "			SET @SQl4 = 	CONCAT('UPDATE rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in            \n" +
                "								(SELECT raq.id from (SELECT * from rfq_assy_quantity b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as raq)');            \n" +
                "  \n" +
                "			SET @SQl5 = 	CONCAT('UPDATE rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\"             \n" +
                "								WHERE ra.id in (',IDs,') and ra.deletedAt IS NULL');            \n" +
                "  \n" +
                "			SET @SQl6 = 	CONCAT('UPDATE rfq_assy_standard_class_detail rs set rs.deletedBy = ',deletedBy,', rs.isDeleted=',1,',rs.deletedAt= \"',NOW(),'\"  where rs.id in            \n" +
                "								(SELECT ras.id from (select b.id from rfq_assy_standard_class_detail b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as ras)');            \n" +
                "  \n" +
                "			SET @SQl7 = 	CONCAT('UPDATE rfq_assemblies_quotation_status rqs set rqs.deletedBy = ',deletedBy,', rqs.isDeleted=',1,',rqs.deletedAt= \"',NOW(),'\" where rqs.id in            \n" +
                "								(SELECT raq.id from (select b.id from rfq_assemblies_quotation_status b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as raq)');                        \n" +
                "  \n" +
                "			SET @SQl8 = 	CONCAT('UPDATE rfqforms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN             \n" +
                "								(SELECT id from (select rf.id, count(ra.id) from rfqforms rf left outer join rfq_assemblies ra on ra.rfqrefID = rf.id and ra.isDeleted=0 where rf.isDeleted = 0 group by rf.id having count(ra.id)=0)as rfq) and deletedAt IS NULL');	            \n" +
                "  \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					PREPARE stmt2 FROM @SQL2;                                     \n" +
                "					PREPARE stmt6 FROM @SQL6;                   \n" +
                "					PREPARE stmt7 FROM @SQL7;               \n" +
                "					PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "					PREPARE stmt4 FROM @SQL4;                                                          \n" +
                "					PREPARE stmt5 FROM @SQL5;                                                          \n" +
                "					PREPARE stmt8 FROM @SQL8;                                                          \n" +
                "  \n" +
                "					EXECUTE stmt1;                                                          \n" +
                "					EXECUTE stmt2;                         \n" +
                "					EXECUTE stmt6;            	  \n" +
                "					EXECUTE stmt7;              \n" +
                "					EXECUTE stmt3;                                                          \n" +
                "					EXECUTE stmt4;                                                          \n" +
                "					EXECUTE stmt5;                                                          \n" +
                "					EXECUTE stmt8;                                                          \n" +
                "  \n" +
                "			SELECT * FROM temprfqformss;    \n" +
                "  \n" +
                "			COMMIT;                                                        \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM temprfqformss;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE temprfqformss;      \n" +
                "END;  \n" +
                /* ************************************* 17 - Sproc_checkDelete_salesordermst *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_salesordermst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;    \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete sales order mst */ 	                                                  \n" +
                "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber                                                  \n" +
                "			FROM salesordermst                                                  \n" +
                "			WHERE FIND_IN_SET(id,IDs);                                                  \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                                                    \n" +
                "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "			/* [E] - Add Time line log for delete sales order mst */	                                                  \n" +
                "  \n" +
                "			SELECT * FROM tempSalesOrderMst;  \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempSalesOrderMst;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempSalesOrderMst;     \n" +
                "END;  \n" +
                /* ************************************* 18 - Sproc_checkDelete_shippedassembly *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_shippedassembly` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_shippedassembly`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;            \n" +
                "START TRANSACTION;  \n" +
                "SET @SQl1 = 	CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "		EXECUTE stmt1;                                                  \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete shipped assembly */                                                   \n" +
                "		SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                                                  \n" +
                "		FROM shippedassembly                                                  \n" +
                "		WHERE FIND_IN_SET(id,IDs);                                                  \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                                                  \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                                                    \n" +
                "		SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "		/* [E] - Add Time line log for delete shipped assembly */   \n" +
                "  \n" +
                "COMMIT;  \n" +
                "END;  \n" +
                /* ************************************* 19 - Sproc_checkDelete_shipping_request *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_shipping_request` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_shipping_request`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;  \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)  \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;                                                    \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete shipment request */                                                   \n" +
                "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request                                                  \n" +
                "			WHERE FIND_IN_SET(id,IDs);	                                                  \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                                                    \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "			/* [E] - Add Time line log for delete shipment request */                                                   \n" +
                "  \n" +
                "			SELECT * FROM tempShippingRequest;    \n" +
                "  \n" +
                "			COMMIT;                                                        \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempShippingRequest;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempShippingRequest;      \n" +
                "END;  \n" +
                /* ************************************* 20 - Sproc_checkDelete_workorder *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias_rev_pn\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_goodbadpartmapping\" else \"\" end as msg FROM component_goodbadpartmapping WHERE deletedAt IS NULL AND (goodComponentID IN(',IDs,') OR badComponentID IN(',IDs,')) LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_requiremapping_parts\" else \"\" end as msg FROM component_requiremapping_parts WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "			) q');                                                          \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempComponent)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;   \n" +
                "  \n" +
                "			COMMIT;                                                         \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempComponent;                                                          \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempComponent;      \n" +
                "        END;  \n" +
                /* ************************************* 21 - Sproc_checkDelete_workorder_cluster *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_cluster` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_cluster`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete cluster */                                                          \n" +
                "			SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                                                          \n" +
                "			WHERE clusterID = IDs AND deletedAt IS NULL;                                                          \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder                                                          \n" +
                "			WHERE woID = @lvWoID AND deletedAt IS NULL ;                                                          \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                                                          \n" +
                "			SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                                                          \n" +
                "			/* [E] - Add Time line log for delete cluster */                                                          \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "					EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderCluster;     \n" +
                "  \n" +
                "			COMMIT;  \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempWorkorderCluster;                                                          \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempWorkorderCluster;       \n" +
                "END;  \n" +
                /* ************************************* 22 - Sproc_checkDelete_workorder_operation *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;  \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                                                          \n" +
                "				UNION ALL                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                                                           \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete work order operation */                                                          \n" +
                "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                                                          \n" +
                "			FROM workorder_operation                                                           \n" +
                "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                          \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                                                          \n" +
                "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                                                          \n" +
                "			/* [E] - Add Time line log for delete work order operation */                                                          \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                          \n" +
                "			SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                          \n" +
                "			SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                          \n" +
                "			SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                          \n" +
                "			SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                          \n" +
                "			SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                                                          \n" +
                "			SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                                                          \n" +
                "  \n" +
                "			-- Added for update verify workorder status again after changes in workorder operation                                                          \n" +
                "			SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                                                          \n" +
                "			SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                                                          \n" +
                "			-- Added for update verify workorder status again after changes in workorder operation                                                          \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                          \n" +
                "			PREPARE stmt5 FROM @SQL5;                                                          \n" +
                "			PREPARE stmt6 FROM @SQL6;                                                          \n" +
                "			PREPARE stmt7 FROM @SQl7;                                                          \n" +
                "			PREPARE stmt8 FROM @SQl7;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "			EXECUTE stmt4;                                                          \n" +
                "			EXECUTE stmt5;                                                          \n" +
                "			EXECUTE stmt6;                                                          \n" +
                "			EXECUTE stmt7;                                                          \n" +
                "			EXECUTE stmt8;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperation;  \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempWorkorderOperation;                                                          \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempWorkorderOperation;    \n" +
                "        END;  \n" +
                /* ************************************* 23 - Sproc_checkDelete_workorder_operation_cluster *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation_cluster` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_cluster`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete operations from cluster */                                                          \n" +
                "			SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                          \n" +
                "			FROM workorder_operation                                                           \n" +
                "			WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                          \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                                                          \n" +
                "			WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                                                          \n" +
                "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                          \n" +
                "			/* [E] -  Add Time line log for delete operations from cluster */		                                                          \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                          \n" +
                "  \n" +
                "			-- Added for update verify workorder status again after changes in workorder operation                                                          \n" +
                "			SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                                                          \n" +
                "			SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                                                          \n" +
                "			-- Added for update verify workorder status again after changes in workorder operation                                                          \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;  \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempWorkorderOperationCluster;      \n" +
                "END;  \n" +
                /* ************************************* 24 - Sproc_checkDelete_workorder_operation_employee *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation_employee` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_employee`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete Employees from work order */                                                          \n" +
                "			SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                          \n" +
                "			FROM workorder_operation                                                           \n" +
                "			WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                          \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                                                          \n" +
                "			WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                                                          \n" +
                "			SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                          \n" +
                "			/* [E] -  Add Time line log for delete Employee from work order */                                                          \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEmployee;   \n" +
                "  \n" +
                "			COMMIT;                                                         \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempWorkorderEmployee;                                                          \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempWorkorderEmployee;    \n" +
                "END;  \n" +
                /* ************************************* 25 - Sproc_checkDelete_workorder_operation_equipment *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation_equipment` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_equipment`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;   \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete Equipment from work order */                                                          \n" +
                "			SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                          \n" +
                "			FROM workorder_operation                                                           \n" +
                "			WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                                                          \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                                                          \n" +
                "			WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                                                          \n" +
                "			SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                          \n" +
                "			/* [E] -  Add Time line log for delete Equipment from work order */                                                          \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                                                          \n" +
                "			SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEquipment;       \n" +
                "  \n" +
                "			COMMIT;  \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempWorkorderEquipment;                                                          \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempWorkorderEquipment;                                                           \n" +
                "END;  \n" +
                /* ************************************* 26 - Sproc_checkDelete_workorder_operation_part *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation_part` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_part`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;  \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                           \n" +
                "			(                                                          \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                          \n" +
                "			) q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete parts from work order */                                                          \n" +
                "			SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                          \n" +
                "			FROM workorder_operation                                                           \n" +
                "			WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                          \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                                                          \n" +
                "			WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                                                           \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                                                          \n" +
                "			SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                                                          \n" +
                "			/* [E] - Add Time line log for delete parts from work order */                                                          \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderPart;  \n" +
                "  \n" +
                "			COMMIT;  \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempWorkorderPart;                                                          \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempWorkorderPart;     \n" +
                "        END;  \n" +
                /* ************************************* 27 - Sproc_checkDelete_workorder_preprogcomp *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_preprogcomp` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_preprogcomp`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;               \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                          \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			FROM                                                          \n" +
                "			(select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                                                          \n" +
                "				FROM workorder_trans_preprogramcomp where deletedAt IS NULL   \n" +
                "					AND woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                                                          \n" +
                "				where woPreProgCompID in (',IDs,')) and compCnt > 0  \n" +
                "		)  q');                                                          \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                          \n" +
                "		EXECUTE stmt;                                                          \n" +
                "		SELECT * FROM  tempComponent;                                                          \n" +
                "		SELECT TotalCount FROM  tempComponent;                                                          \n" +
                "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                                                          \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete pre program component */                                                    \n" +
                "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID), (SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID) INTO @lvPartNumber,@lvWoNumber,@lvOpName                                                  \n" +
                "			FROM workorder_preprogcomp woppc                                                    \n" +
                "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                                                     \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                                                    \n" +
                "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "			/* [E] - Add Time line log for delete pre program component */                                                   \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                          \n" +
                "			EXECUTE stmt2;                                                          \n" +
                "  \n" +
                "			SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                                                           \n" +
                "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                                                          \n" +
                "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                          \n" +
                "			EXECUTE stmt3;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;  \n" +
                "  \n" +
                "			COMMIT;                                                   \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempComponent;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempComponent;       \n" +
                "    END;  \n" +
                /* ************************************* 28 - Sproc_checkDelete_workorder_trans_packagingdetail *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_trans_packagingdetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_trans_packagingdetail`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;      \n" +
                "  \n" +
                "		START TRANSACTION;  \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete work order transaction packing details */                                                    \n" +
                "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),                                                  \n" +
                "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),                                                  \n" +
                "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)                                                  \n" +
                "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID                                                   \n" +
                "		FROM workorder_trans_packagingdetail wtpd                                                   \n" +
                "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;                                                  \n" +
                "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                                                    \n" +
                "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "		/* [E] - Add Time line log for delete work order transaction packing details */                                                   \n" +
                "  \n" +
                "		SELECT 0 TotalCount, '' Message;                                                          \n" +
                "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "		EXECUTE stmt1;     \n" +
                "  \n" +
                "		COMMIT;  \n" +
                "END;  \n" +
                /* ************************************* 29. Sproc_checkDelete_workorder_trans_serialno *************************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_trans_serialno` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_trans_serialno`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE vWoID1 INT(11);                                                          \n" +
                "DECLARE vOpID1 INT(11);                                                          \n" +
                "DECLARE vSerialNo1 VARCHAR(50);                                                          \n" +
                "DECLARE vProdStatus1 VARCHAR(5);                                                          \n" +
                "DECLARE vWoTransID1 INT(11);                                                          \n" +
                "DECLARE vQty1 INT(11);                                                          \n" +
                "DECLARE vOpID2 INT(11);                                                          \n" +
                "DECLARE vProdstatus2 VARCHAR(5);     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;    \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                                                           \n" +
                "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                                                          \n" +
                "  \n" +
                "  \n" +
                "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                                                          \n" +
                "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                                                           \n" +
                "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                                                           \n" +
                "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                                                          \n" +
                "  \n" +
                "	/* condition to check total serials of type greater than actual production qty */                                                          \n" +
                "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1 AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL) > IFNULL(vQty1,0)) THEN                                                          \n" +
                "  \n" +
                "		/* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                                                          \n" +
                "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                                                           \n" +
                "  \n" +
                "			/* condition to check curr opis and status match with given delete serial */                                                          \n" +
                "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                                                          \n" +
                "  \n" +
                "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                                                          \n" +
                "				WHERE woTransSerialID = IDs;	                                                          \n" +
                "  \n" +
                "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                                                           \n" +
                "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                                                          \n" +
                "				ORDER BY woTransSerialID DESC LIMIT 1;                                                          \n" +
                "  \n" +
                "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                                                          \n" +
                "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;  \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete production serial from work order operation */ 	                                                  \n" +
                "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                                                    \n" +
                "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "				/* [E] - Add Time line log for delete production serial from work order operation */ 				                                                  \n" +
                "			ELSE                                                           \n" +
                "				SELECT 'not allowed';                                                          \n" +
                "			END IF;                                                          \n" +
                "		ELSE                                                           \n" +
                "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                                                          \n" +
                "			WHERE woTransSerialID = IDs;	                                                          \n" +
                "  \n" +
                "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                                                           \n" +
                "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                                                          \n" +
                "			ORDER BY woTransSerialID DESC LIMIT 1;                                                          \n" +
                "  \n" +
                "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                                                          \n" +
                "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;     \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete production serial from work order operation */ 	                                                  \n" +
                "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                                                    \n" +
                "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                                                    \n" +
                "			/* [E] - Add Time line log for delete production serial from work order operation */                                                      \n" +
                "		END IF;	                                                          \n" +
                "	ELSE                                                           \n" +
                "		SELECT 'not allowed';		                                                          \n" +
                "	END IF;	     \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (84,'2.00','V1',' Add transaction in Delete SP - FENIL '," + userid + ");"
            );
            break;
        case 84:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-01-2019  *********************************** */
                "ALTER TABLE employees ADD COLUMN contactCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE employees ADD COLUMN faxCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE customers ADD COLUMN contactCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE customers ADD COLUMN faxCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE customer_contactperson ADD COLUMN phoneCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE customer_contactperson ADD COLUMN faxCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE customer_contactperson ADD COLUMN mobileCountryCode VARCHAR(5) NULL;  \n" +
                "  \n" +
                "ALTER TABLE customer_addresses ADD COLUMN contactCountryCode VARCHAR(5) NULL;  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (85,'2.00','V1',' Phonenumber country code field in tables - KETAN '," + userid + ");"
            );
            break;
        case 85:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-01-2019  *********************************** */
                "ALTER TABLE assemblystock DROP FOREIGN KEY FK_assemblystock_assemblyRevisionID;  \n" +
                "ALTER TABLE assemblystock DROP COLUMN assemblystock.assemblyRevisionID;  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyStock`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyStock`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "  select s.id,  \n" +
                "s.openingdate,s.openingStock,s.assemblyID,a.assemblyName,a.assemblyRev, a.assemblyID as assyID   \n" +
                "from assemblystock s   \n" +
                "inner join assemblymst a on a.id = s.assemblyID   \n" +
                "where IFNULL(s.isdeleted,0) = 0 ;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyName DESC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (86,'2.00','V1','Assy.ID Changes in opening assembly stock page  - shirish'," + userid + ");"
            );
            break;
        case 86:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-01-2019  *********************************** */
                "insert into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Supplies & materials',0,0,'setting.partmaintenance.Assemblies.supplymaterials',NULL,NULL,'Supplies  &  materials',NULL,(select a.pageID from page_detail a where a.pageName='Assemblies'),1,'32.66',NULL,'icon-memory',1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Supplies  &  materials');  \n" +
                "  \n" +
                "insert into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Barcodes',0,0,'setting.partmaintenance.Barcode',NULL,NULL,'Barcodes',NULL,(select a.pageID from page_detail a where a.pageName='Part'),1,'32.90',NULL,'mdi mdi-qrcode-scan',1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Barcodes');  \n" +
                "  \n" +
                "insert into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Material Management',0,0,'Materialmanagement',NULL,NULL,'Material Management',NULL,NULL,1,'13.00',NULL,'icon-factory',1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,0,'Material Management');  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Configuration') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Country';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Configuration') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Custom Forms';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Component Standards';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Component Standards Class';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Assemblies Stock';  \n" +
                "  \n" +
                "    UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Manufacturer';   \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Who Acquired Who';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Unit';  \n" +
                "  \n" +
                "   UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Part') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Unit Conversion';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Assemblies') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Component List';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Supplies & materials') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Part Type';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Supplies & materials') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Supply & Material';  \n" +
                "  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Assemblies') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'ECO';  \n" +
                "  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Barcodes') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Barcode Separator';  \n" +
                "  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Barcodes') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName = 'Barcode Template';  \n" +
                "  \n" +
                "UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Operation') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName ='Defects';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Operation') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName ='Defects';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Work Order') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName ='Sales OrderMenu';  \n" +
                "  \n" +
                " UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Sales OrderMenu') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName ='In House Assembly Stock';  \n" +
                "  \n" +
                "  UPDATE `page_detail` b,  \n" +
                "(select * from page_detail where pageName = 'Material Management') a  \n" +
                " SET b.`parentPageID`= a.pageID WHERE b.pageName ='Receiving';  \n" +
                "  \n" +
                " update page_detail set displayMenuName='Sales Order' where pageName='Add Sales Order';  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"My Profile\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"My Profile\",  \n" +
                "hasChild = 0 where pagename = \"My Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Logout\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Logout\",  \n" +
                "hasChild = 0 where pagename = \"Logout\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"dashboard\",   \n" +
                "menuName = \"Dashboard\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Dashboard\",  \n" +
                "hasChild = 0 where pagename = \"Dashboard\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting\",   \n" +
                "menuName = \"Settings\",   \n" +
                "orderby = 5.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Settings\",  \n" +
                "hasChild = 1 where pagename = \"Admin\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user\",   \n" +
                "menuName = \"Users\",   \n" +
                "orderby = 29.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Users\",  \n" +
                "hasChild = 1 where pagename = \"User\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.eco\",   \n" +
                "menuName = \"ECO\",   \n" +
                "orderby = 32.79,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO\",  \n" +
                "hasChild = 1 where pagename = \"ECO\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.eco.ecocategory\",   \n" +
                "menuName = \"ECO Categories\",   \n" +
                "orderby = 32.82,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Categories\",  \n" +
                "hasChild = 0 where pagename = \"ECO Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.eco.ecocategoryvalues\",   \n" +
                "menuName = \"ECO Category Attributes\",   \n" +
                "orderby = 32.85,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Category Attributes\",  \n" +
                "hasChild = 0 where pagename = \"ECO Category Values\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.customermenu.customer\",   \n" +
                "menuName = \"Customers\",   \n" +
                "orderby = 32.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Customers\",  \n" +
                "hasChild = 0 where pagename = \"Customer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.supplier\",   \n" +
                "menuName = \"Suppliers\",   \n" +
                "orderby = 26.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Suppliers\",  \n" +
                "hasChild = 0 where pagename = \"Supplier\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel.employee\",   \n" +
                "menuName = \"Personnel\",   \n" +
                "orderby = 29.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel\",  \n" +
                "hasChild = 0 where pagename = \"Employee\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"admin.otherPermission\",   \n" +
                "menuName = \"Other Permission\",   \n" +
                "orderby = 6.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Other Permission\",  \n" +
                "hasChild = 0 where pagename = \"Other Permission\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard\",   \n" +
                "menuName = \"Standard\",   \n" +
                "orderby = 32.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard\",  \n" +
                "hasChild = 1 where pagename = \"Certificate Standard\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard.Standard\",   \n" +
                "menuName = \"Standards\",   \n" +
                "orderby = 32.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standards\",  \n" +
                "hasChild = 0 where pagename = \"Standards\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard.standardCategory\",   \n" +
                "menuName = \"Standards Categories\",   \n" +
                "orderby = 32.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standards Categories\",  \n" +
                "hasChild = 0 where pagename = \"Standards Class\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.department\",   \n" +
                "menuName = \"Departments\",   \n" +
                "orderby = 23.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Departments\",  \n" +
                "hasChild = 0 where pagename = \"Department\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 62.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 1 where pagename = \"Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel.title\",   \n" +
                "menuName = \"Titles\",   \n" +
                "orderby = 29.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Titles\",  \n" +
                "hasChild = 0 where pagename = \"Employee Title\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipmentgroup\",   \n" +
                "menuName = \"Equipment & Special Tools Groups\",   \n" +
                "orderby = 32.27,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Groups\",  \n" +
                "hasChild = 0 where pagename = \"Equipment Group\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipmentownership\",   \n" +
                "menuName = \"Equipment & Special Tools Ownership\",   \n" +
                "orderby = 32.30,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Ownership\",  \n" +
                "hasChild = 0 where pagename = \"Equipment Ownership\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.certificatestandard.standardtype\",   \n" +
                "menuName = \"Standard Types\",   \n" +
                "orderby = 32.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard Types\",  \n" +
                "hasChild = 0 where pagename = \"Standard Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.supplymaterials.supplytypes\",   \n" +
                "menuName = \"Supplies & Materials Types\",   \n" +
                "orderby = 32.69,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Supplies & materials Types\",  \n" +
                "hasChild = 0 where pagename = \"Part Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipmenttype\",   \n" +
                "menuName = \"Equipment & Special Tools Types\",   \n" +
                "orderby = 32.24,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Types\",  \n" +
                "hasChild = 0 where pagename = \"Equipment Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.operationtype\",   \n" +
                "menuName = \"Operation Types\",   \n" +
                "orderby = 35.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Types\",  \n" +
                "hasChild = 0 where pagename = \"Operation Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"admin.genericcategory.shippingstatus\",   \n" +
                "menuName = \"Shipping Status\",   \n" +
                "orderby = 8.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Shipping Status\",  \n" +
                "hasChild = 0 where pagename = \"Shipping Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"admin.genericcategory.verificationstatus\",   \n" +
                "menuName = \"Operation Verification Status\",   \n" +
                "orderby = 9.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Operation Verification Status\",  \n" +
                "hasChild = 0 where pagename = \"Operation Verification Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.locationtype\",   \n" +
                "menuName = \"Locations\",   \n" +
                "orderby = 32.33,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Locations\",  \n" +
                "hasChild = 0 where pagename = \"Location Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel.responsibility\",   \n" +
                "menuName = \"Responsibilities\",   \n" +
                "orderby = 29.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Responsibilities\",  \n" +
                "hasChild = 0 where pagename = \"Work Area\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools.equipment\",   \n" +
                "menuName = \"Equipment & Special Tools\",   \n" +
                "orderby = 32.36,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools\",  \n" +
                "hasChild = 0 where pagename = \"Equipment & Tools\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.supplymaterials.supplylistpage\",   \n" +
                "menuName = \"Supply & Materials\",   \n" +
                "orderby = 32.71,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Supply & Materials\",  \n" +
                "hasChild = 0 where pagename = \"Supply & Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.workstationList\",   \n" +
                "menuName = \"Workstations\",   \n" +
                "orderby = 29.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workstations\",  \n" +
                "hasChild = 0 where pagename = \"Workstation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication.Predefined Chat Message\",   \n" +
                "menuName = \"Predefined Chat Messages\",   \n" +
                "orderby = 15.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Predefined Chat Messages\",  \n" +
                "hasChild = 0 where pagename = \"Standard Message\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.inspectionprocessdefects\",   \n" +
                "menuName = \"Inspection Operation Defects\",   \n" +
                "orderby = 35.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Inspection Operation Defects\",  \n" +
                "hasChild = 1 where pagename = \"Defects\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.inspectionprocessdefects.defectCategory\",   \n" +
                "menuName = \"Defect Categories\",   \n" +
                "orderby = 35.16,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Defect Categories\",  \n" +
                "hasChild = 0 where pagename = \"Defect Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.assemblystock\",   \n" +
                "menuName = \"Opening Part Balance\",   \n" +
                "orderby = 32.54,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Opening Part Balance\",  \n" +
                "hasChild = 0 where pagename = \"Assemblies Stock\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.page\",   \n" +
                "menuName = \"Pages\",   \n" +
                "orderby = 8.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Pages\",  \n" +
                "hasChild = 0 where pagename = \"Page\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system\",   \n" +
                "menuName = \"System\",   \n" +
                "orderby = 8.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"System\",  \n" +
                "hasChild = 1 where pagename = \"Configuration\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.entity\",   \n" +
                "menuName = \"Data Tracking Entities\",   \n" +
                "orderby = 8.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Data Tracking Entities\",  \n" +
                "hasChild = 0 where pagename = \"Entity\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation\",   \n" +
                "menuName = \"Operation Management & Engineering\",   \n" +
                "orderby = 35.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Management & Engineering\",  \n" +
                "hasChild = 1 where pagename = \"Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.operationlist\",   \n" +
                "menuName = \"Operations\",   \n" +
                "orderby = 35.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operations\",  \n" +
                "hasChild = 0 where pagename = \"Operations\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.operation.masterTemplate\",   \n" +
                "menuName = \"Operation Management\",   \n" +
                "orderby = 35.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Management\",  \n" +
                "hasChild = 0 where pagename = \"Master Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder\",   \n" +
                "menuName = \"Order Management\",   \n" +
                "orderby = 10.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Order Management\",  \n" +
                "hasChild = 1 where pagename = \"Work Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.workorderlist\",   \n" +
                "menuName = \"Work Orders\",   \n" +
                "orderby = 10.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Orders\",  \n" +
                "hasChild = 0 where pagename = \"Work Orders\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Add Work Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"TASKLIST\",   \n" +
                "menuName = \"Task List\",   \n" +
                "orderby = 25.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Task List\",  \n" +
                "hasChild = 0 where pagename = \"Task List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.role\",   \n" +
                "menuName = \"Roles\",   \n" +
                "orderby = 29.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Roles\",  \n" +
                "hasChild = 0 where pagename = \"Role\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.pageright\",   \n" +
                "menuName = \"Page Rights\",   \n" +
                "orderby = 8.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Page Rights\",  \n" +
                "hasChild = 0 where pagename = \"Page Rights\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage User\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Page\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Page\",  \n" +
                "hasChild = 0 where pagename = \"Manage Page\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Personnel\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel\",  \n" +
                "hasChild = 0 where pagename = \"Manage Employee\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Role\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Role\",  \n" +
                "hasChild = 0 where pagename = \"Manage Role\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Customer\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Customer\",  \n" +
                "hasChild = 0 where pagename = \"Manage Customer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Supplier\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Supplier\",  \n" +
                "hasChild = 0 where pagename = \"Manage Supplier\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Personnel Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel Profile\",  \n" +
                "hasChild = 0 where pagename = \"Employee Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Personnel Operation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel Operation\",  \n" +
                "hasChild = 0 where pagename = \"Manage Employee Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Standard\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard\",  \n" +
                "hasChild = 0 where pagename = \"Manage Certificate standard\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Department\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Department\",  \n" +
                "hasChild = 0 where pagename = \"Manage Department\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment & Tools\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Profile\",  \n" +
                "hasChild = 0 where pagename = \"Equipment & Tools Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Supply & Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Workstation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workstation\",  \n" +
                "hasChild = 0 where pagename = \"Manage Workstation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Workstation Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Workstation Profile\",  \n" +
                "hasChild = 0 where pagename = \"Workstation Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Predefined Chat Message\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Predefined Chat Message\",  \n" +
                "hasChild = 0 where pagename = \"Manage Standard Message\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Manage\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manage\",  \n" +
                "hasChild = 0 where pagename = \"Manage Entity\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation\",  \n" +
                "hasChild = 0 where pagename = \"Manage Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Profile\",  \n" +
                "hasChild = 0 where pagename = \"Operation Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"ECO Request List\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Request List\",  \n" +
                "hasChild = 0 where pagename = \"Eco Request List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"ECO Request\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"ECO Request\",  \n" +
                "hasChild = 0 where pagename = \"Eco Request\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Work Order Data Entry Change History\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order Data Entry Change History\",  \n" +
                "hasChild = 0 where pagename = \"Data entry change audit log list\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation\",  \n" +
                "hasChild = 0 where pagename = \"Traveler\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage traveler\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Traveler 1st Article\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Traveler Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"configuration.templates\",   \n" +
                "menuName = \"Manage Template\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manage Template\",  \n" +
                "hasChild = \"1\" where pagename = \"Manage Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication.agreement\",   \n" +
                "menuName = \"Agreement Templates\",   \n" +
                "orderby = 15.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Agreement Templates\",  \n" +
                "hasChild = \"0\" where pagename = \"Agreement Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Work Order Manual Entry List\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order Manual Entry List\",  \n" +
                "hasChild = 0 where pagename = \"Work Order Manual Entry List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order Manual Entry\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order Manual Entry\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Manual Entry\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation Template\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Template\",  \n" +
                "hasChild = 0 where pagename = \"View No OF Operations\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Work Order Profile\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order Profile\",  \n" +
                "hasChild = 0 where pagename = \"Work Order Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.widget\",   \n" +
                "menuName = \"Widgets\",   \n" +
                "orderby = 17.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Widgets\",  \n" +
                "hasChild = \"0\" where pagename = \"Widget\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Widget Detail\",   \n" +
                "orderby = 17.20,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Widget Detail\",  \n" +
                "hasChild = 0 where pagename = \"Widget Detail\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports\",   \n" +
                "menuName = \"Reports\",   \n" +
                "orderby = 20.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Reports\",  \n" +
                "hasChild = 1 where pagename = \"Reports\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.misreport\",   \n" +
                "menuName = \"MIS Reports\",   \n" +
                "orderby = 20.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"MIS Reports\",  \n" +
                "hasChild = 0 where pagename = \"MIS Report\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.shippingtype\",   \n" +
                "menuName = \"Shipping Methods\",   \n" +
                "orderby = 39.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Methods\",  \n" +
                "hasChild = 0 where pagename = \"Shipping Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation dodont\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Document\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Data Fields\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Parts\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Equipments\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Employees\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation First Article\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Other Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operation Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Detail\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Standards\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Documents\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Operations\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Parts\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Equipments\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Employees\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Shipping Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Other Details\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \" Work Order\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \" Work Order\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Order Invite People\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction\",   \n" +
                "menuName = \"Transaction\",   \n" +
                "orderby = 15.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Transaction\",  \n" +
                "hasChild = 1 where pagename = \"Transaction\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.salesorder.salesorderlist\",   \n" +
                "menuName = \"Sales Order\",   \n" +
                "orderby = 10.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Sales Order\",  \n" +
                "hasChild = 0 where pagename = \"Sales Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.salesorder.manage\",   \n" +
                "menuName = \"Add Sales Order\",   \n" +
                "orderby = 10.12,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Add Sales Order\",  \n" +
                "hasChild = 0 where pagename = \"Add Sales Order\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.customermenu.terms\",   \n" +
                "menuName = \"Payment Terms\",   \n" +
                "orderby = 32.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Payment Terms\",  \n" +
                "hasChild = 0 where pagename = \"Terms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.componentlist\",   \n" +
                "menuName = \"Components\",   \n" +
                "orderby = 32.76,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Components\",  \n" +
                "hasChild = 0 where pagename = \"Component List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Component\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component\",  \n" +
                "hasChild = 0 where pagename = \"Manage Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"BOM\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"rfqtransaction\",   \n" +
                "menuName = \"RFQ Transaction\",   \n" +
                "orderby = 10.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"RFQ Transaction\",  \n" +
                "hasChild = 1 where pagename = \"RFQ Transaction\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"transaction.rfq\",   \n" +
                "menuName = \"RFQ List\",   \n" +
                "orderby = 17.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ List\",  \n" +
                "hasChild = 0 where pagename = \"RFQ\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.assemblyList\",   \n" +
                "menuName = \"Assemblies\",   \n" +
                "orderby = 32.63,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Assemblies\",  \n" +
                "hasChild = 0 where pagename = \"Assembly\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.customfromlist\",   \n" +
                "menuName = \"Define Custom Forms\",   \n" +
                "orderby = 8.08,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Define Custom Forms\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"customforms.entity\",   \n" +
                "menuName = \"Entity\",   \n" +
                "orderby = 1.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Entity\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms Entity\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Custom Forms\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Custom Forms\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms Data Fields List\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Custom Forms\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Custom Forms\",  \n" +
                "hasChild = 0 where pagename = \"Custom Forms Manage Data Fields\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.forms\",   \n" +
                "menuName = \"Create Forms\",   \n" +
                "orderby = 8.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Create Forms\",  \n" +
                "hasChild = 0 where pagename = \"Forms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.manufacturer\",   \n" +
                "menuName = \"Manufacturers\",   \n" +
                "orderby = 32.57,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manufacturers\",  \n" +
                "hasChild = 0 where pagename = \"Manufacturer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.salesorder.shipped\",   \n" +
                "menuName = \"Shipping Records\",   \n" +
                "orderby = 10.15,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Records\",  \n" +
                "hasChild = 0 where pagename = \"Shipped\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Shipping Records\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Records\",  \n" +
                "hasChild = 0 where pagename = \"Manage Shipped\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.unit\",   \n" +
                "menuName = \"Unit of Measure\",   \n" +
                "orderby = 32.97,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Unit of Measure\",  \n" +
                "hasChild = 0 where pagename = \"Unit\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Barcode.barcodeLabelTemplate\",   \n" +
                "menuName = \"Barcode Templates\",   \n" +
                "orderby = 32.95,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Templates\",  \n" +
                "hasChild = 0 where pagename = \"Barcode Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Barcode Template\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Template\",  \n" +
                "hasChild = 0 where pagename = \"Manage Barcode template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting\",   \n" +
                "menuName = \"RFQ Settings\",   \n" +
                "orderby = 20.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ Settings\",  \n" +
                "hasChild = 1 where pagename = \"RFQ Setting\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.jobtype\",   \n" +
                "menuName = \"Job Types\",   \n" +
                "orderby = 20.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Job Types\",  \n" +
                "hasChild = 0 where pagename = \"Job Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.rfqtype\",   \n" +
                "menuName = \"Rfq Types\",   \n" +
                "orderby = 20.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Rfq Types\",  \n" +
                "hasChild = 0 where pagename = \"Rfq Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.reason\",   \n" +
                "menuName = \"Reponse Reasons\",   \n" +
                "orderby = 20.39,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Reponse Reasons\",  \n" +
                "hasChild = 0 where pagename = \"Reason\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.part.componentmst\",   \n" +
                "menuName = \"Component\",   \n" +
                "orderby = 32.54,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component\",  \n" +
                "hasChild = 1 where pagename = \"Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Measurement Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Measurement Type\",  \n" +
                "hasChild = 0 where pagename = \"Measurement Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Unit of Measure\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Unit of Measure\",  \n" +
                "hasChild = 0 where pagename = \"Unit of Measurement\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.unitconversion\",   \n" +
                "menuName = \"Unit Conversion\",   \n" +
                "orderby = 35.98,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Unit Conversion\",  \n" +
                "hasChild = 0 where pagename = \"Unit Conversion\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"Materialmanagement.receiving.receivingmaterial\",   \n" +
                "menuName = \"Part To Stock\",   \n" +
                "orderby = 13.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part To Stock\",  \n" +
                "hasChild = 0 where pagename = \"Receiving Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Receiving Material\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Receiving Material\",  \n" +
                "hasChild = 0 where pagename = \"Manage Receiving Material\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies\",   \n" +
                "menuName = \"Parts\",   \n" +
                "orderby = 32.60,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Parts\",  \n" +
                "hasChild = 1 where pagename = \"Assemblies\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Assembly Revision\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.salesorder.requestforship\",   \n" +
                "menuName = \"Request For Shipment\",   \n" +
                "orderby = 10.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Request For Shipment\",  \n" +
                "hasChild = 0 where pagename = \"Request For Shipment\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Request For Shipment\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Request For Shipment\",  \n" +
                "hasChild = 0 where pagename = \"Manage Request For Shipment\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Comment\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Pesonnel Timeline\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Pesonnel Timeline\",  \n" +
                "hasChild = 0 where pagename = \"Employee Timeline\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.workordermenu.wodataelementreport\",   \n" +
                "menuName = \"Data Field Report\",   \n" +
                "orderby = 23.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Data Field Report\",  \n" +
                "hasChild = 0 where pagename = \"Work Order Data Fields Report\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.salesorder.inhouseassemblystock\",   \n" +
                "menuName = \"Assembly Stock List\",   \n" +
                "orderby = 10.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Assembly Stock List\",  \n" +
                "hasChild = 0 where pagename = \"In House Assembly Stock\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.printerlist\",   \n" +
                "menuName = \"Printers\",   \n" +
                "orderby = 39.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Printers\",  \n" +
                "hasChild = 0 where pagename = \"Printer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous.printfromate\",   \n" +
                "menuName = \"Label Templates\",   \n" +
                "orderby = 39.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Label Templates\",  \n" +
                "hasChild = 0 where pagename = \"Print Format\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.workordermenu.tranwisewodataelement\",   \n" +
                "menuName = \"Transaction Data Field Report\",   \n" +
                "orderby = 23.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Transaction Data Field Report\",  \n" +
                "hasChild = 0 where pagename = \"Transaction wise Work Order Data Fields\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"RFQ\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ\",  \n" +
                "hasChild = 0 where pagename = \"Manage RFQ\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.additionalrequirement\",   \n" +
                "menuName = \"BOM Issues\",   \n" +
                "orderby = 20.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"BOM Issues\",  \n" +
                "hasChild = 0 where pagename = \"Additional Requirement\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.mountingtype\",   \n" +
                "menuName = \"Mounting Types\",   \n" +
                "orderby = 20.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Mounting Types\",  \n" +
                "hasChild = 0 where pagename = \"Mounting Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.whoacquiredwho\",   \n" +
                "menuName = \"Mergers & Acquisitions\",   \n" +
                "orderby = 32.88,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Mergers & Acquisitions\",  \n" +
                "hasChild = 0 where pagename = \"Who Acquired Who\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Import BOM\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 2.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Planned BOM\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"BOM Quote\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 4.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"BOM Summary\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.Data Key\",   \n" +
                "menuName = \"Data Keys\",   \n" +
                "orderby = 11.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Data Keys\",  \n" +
                "hasChild = 0 where pagename = \"Settings\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"configuration.chartrawdatacategory\",   \n" +
                "menuName = \"Chart Rawdata Category\",   \n" +
                "orderby = 60.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Chart Rawdata Category\",  \n" +
                "hasChild = 0 where pagename = \"Chart Raw Data Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Bill Of Material Reason\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Bill Of Material Reason\",  \n" +
                "hasChild = 0 where pagename = \"Bill Of Material Reason\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"RFQ Reason\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RFQ Reason\",  \n" +
                "hasChild = 0 where pagename = \"RFQ Reason\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.dynamicmessage\",   \n" +
                "menuName = \"Configurable  Messages\",   \n" +
                "orderby = 8.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Configurable  Messages\",  \n" +
                "hasChild = 0 where pagename = \"Dynamic Message\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Part Costing\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.parttype\",   \n" +
                "menuName = \"Part Types\",   \n" +
                "orderby = 20.27,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Types\",  \n" +
                "hasChild = 0 where pagename = \"RFQ Part Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.rfqlineitemserrorcode\",   \n" +
                "menuName = \"Error Codes\",   \n" +
                "orderby = 20.30,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Error Codes\",  \n" +
                "hasChild = 0 where pagename = \"Error Code\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.keyword\",   \n" +
                "menuName = \"Keywords\",   \n" +
                "orderby = 20.42,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Keywords\",  \n" +
                "hasChild = 0 where pagename = \"Keyword\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.componentstandard\",   \n" +
                "menuName = \"Part Standards\",   \n" +
                "orderby = 32.48,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Standards\",  \n" +
                "hasChild = 0 where pagename = \"Component Standards\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.componentstandardclass\",   \n" +
                "menuName = \"Part Standards Categories\",   \n" +
                "orderby = 32.51,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Standards Categories\",  \n" +
                "hasChild = 0 where pagename = \"Component Standards Class\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Review Pricing\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Not Quoted Line Items\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"80/20 Rules\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Excess Material Exposure\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Materials At Risk\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Lead Time Risk\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 3.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Suggested Alternatives\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer.helpblog\",   \n" +
                "menuName = \"Help Blogs\",   \n" +
                "orderby = 8.18,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Help Blogs\",  \n" +
                "hasChild = 0 where pagename = \"Help Blog\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Help Blog Detail\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Help Blog Detail\",  \n" +
                "hasChild = 0 where pagename = \"Help Blog Detail\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.partstatus\",   \n" +
                "menuName = \"Part Status\",   \n" +
                "orderby = 32.42,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Status\",  \n" +
                "hasChild = 0 where pagename = \"Part Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools Group\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Group\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment Group Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment  & Special Tools Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment  & Special Tools Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Equipment & Special Tools Ownership\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools Ownership\",  \n" +
                "hasChild = 0 where pagename = \"Manage Equipment Ownership Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Standard Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Standard Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Standard Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Part Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Part Status\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part Status\",  \n" +
                "hasChild = 0 where pagename = \"Manage Part Status Generic Category\";  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Title\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Title\",  \n" +
                "hasChild = 0 where pagename = \"Manage Employee Title Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Operation Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Operation Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Operation Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Shipping Status Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Location\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Location\",  \n" +
                "hasChild = 0 where pagename = \"Manage Location Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Responsibility\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Responsibility\",  \n" +
                "hasChild = 0 where pagename = \"Manage Work Area Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Shipping Type\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Shipping Type\",  \n" +
                "hasChild = 0 where pagename = \"Manage Shipping Type Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Payment Term\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Payment Term\",  \n" +
                "hasChild = 0 where pagename = \"Manage Terms Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"Manage Operation Verification Status Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Printer\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Printer\",  \n" +
                "hasChild = 0 where pagename = \"Manage Printer Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Print Format\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Print Format\",  \n" +
                "hasChild = 0 where pagename = \"Manage Print Format Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.quotedynamicfields\",   \n" +
                "menuName = \"Quote Attributes\",   \n" +
                "orderby = 20.33,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Quote Attributes\",  \n" +
                "hasChild = 0 where pagename = \"Quote Dynamic Fields1\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.costcategory\",   \n" +
                "menuName = \"Cost Categories\",   \n" +
                "orderby = 20.36,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Cost Categories\",  \n" +
                "hasChild = 0 where pagename = \"Cost Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Component List\",   \n" +
                "orderby = 14.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component List\",  \n" +
                "hasChild = 0 where pagename = \"Manufacturer Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Component List\",   \n" +
                "orderby = 14.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Component List\",  \n" +
                "hasChild = 0 where pagename = \"Distributor Component\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Manage\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Manage\",  \n" +
                "hasChild = 0 where pagename = \"Manage Forms\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Barcode.barcodesparator\",   \n" +
                "menuName = \"Barcode Separators\",   \n" +
                "orderby = 32.92,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Separators\",  \n" +
                "hasChild = 0 where pagename = \"Barcode Separator\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"Barcode Separator\",   \n" +
                "orderby = null,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcode Separator\",  \n" +
                "hasChild = 0 where pagename = \"Manage Barcode Separator Generic Category\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"My Profile\",   \n" +
                "orderby = 0.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"My Profile\",  \n" +
                "hasChild = 0 where pagename = \"User Profile\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication.email\",   \n" +
                "menuName = \"Email Templates\",   \n" +
                "orderby = 15.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Email Templates\",  \n" +
                "hasChild = 0 where pagename = \"Mail Template\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"\",   \n" +
                "menuName = \"\",   \n" +
                "orderby = 0.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"\",  \n" +
                "hasChild = 0 where pagename = \"RFQ BOM Document\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"configuration.charttype\",   \n" +
                "menuName = \"Chart Type\",   \n" +
                "orderby = 5.00,   \n" +
                "isActive = 0,   \n" +
                "displayMenuName = \"Chart Type\",  \n" +
                "hasChild = 0 where pagename = \"Chart Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.rohs\",   \n" +
                "menuName = \"RoHS Status\",   \n" +
                "orderby = 20.45,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"RoHS Status\",  \n" +
                "hasChild = 0 where pagename = \"RoHS\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.country\",   \n" +
                "menuName = \"Countries\",   \n" +
                "orderby = 8.07,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Countries\",  \n" +
                "hasChild = 0 where pagename = \"Country\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.rfqsetting.connectertype\",   \n" +
                "menuName = \"Connector Types\",   \n" +
                "orderby = 20.24,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Connector Types\",  \n" +
                "hasChild = 0 where pagename = \"Connector Type\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.developer\",   \n" +
                "menuName = \"Developer\",   \n" +
                "orderby = 8.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Developer\",  \n" +
                "hasChild = 1 where pagename = \"Developer\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.system.communication\",   \n" +
                "menuName = \"Communication\",   \n" +
                "orderby = 15.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Communication\",  \n" +
                "hasChild = 1 where pagename = \"Communication\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.user.personnel\",   \n" +
                "menuName = \"Personnel\",   \n" +
                "orderby = 29.09,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Personnel\",  \n" +
                "hasChild = 1 where pagename = \"Personnel\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.customermenu\",   \n" +
                "menuName = \"Customer\",   \n" +
                "orderby = 32.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Customer\",  \n" +
                "hasChild = 1 where pagename = \"CustomerMenu\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.equipmentSpecialTools\",   \n" +
                "menuName = \"Equipment & Special Tools\",   \n" +
                "orderby = 32.21,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Equipment & Special Tools\",  \n" +
                "hasChild = 1 where pagename = \"Equipment & Special Tools\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance\",   \n" +
                "menuName = \"Part  Maintenance\",   \n" +
                "orderby = 32.39,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Part  Maintenance\",  \n" +
                "hasChild = 1 where pagename = \"Part\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.miscellaneous\",   \n" +
                "menuName = \"Miscellaneous\",   \n" +
                "orderby = 39.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Miscellaneous\",  \n" +
                "hasChild = 1 where pagename = \"Miscellaneous\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"workorder.salesorder\",   \n" +
                "menuName = \"Sales Order\",   \n" +
                "orderby = 10.06,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Sales Order\",  \n" +
                "hasChild = 1 where pagename = \"Sales OrderMenu\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"Materialmanagement.receiving\",   \n" +
                "menuName = \"Receiving\",   \n" +
                "orderby = 13.03,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Receiving\",  \n" +
                "hasChild = 1 where pagename = \"Receiving\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.workordermenu\",   \n" +
                "menuName = \"Work Order\",   \n" +
                "orderby = 23.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Work Order\",  \n" +
                "hasChild = 1 where pagename = \"Work Ordermenu\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"reports.postatus\",   \n" +
                "menuName = \"PO Status Reports\",   \n" +
                "orderby = 20.04,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"PO Status Reports\",  \n" +
                "hasChild = 0 where pagename = \"PO Status\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Assemblies.supplymaterials\",   \n" +
                "menuName = \"Supplies  &  materials\",   \n" +
                "orderby = 32.66,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Supplies  &  materials\",  \n" +
                "hasChild = 1 where pagename = \"Supplies & materials\";  \n" +
                "update page_detail  set menuRoute = \"setting.partmaintenance.Barcode\",   \n" +
                "menuName = \"Barcodes\",   \n" +
                "orderby = 32.90,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Barcodes\",  \n" +
                "hasChild = 1 where pagename = \"Barcodes\";  \n" +
                "  \n" +
                "update page_detail  set menuRoute = \"Materialmanagement\",   \n" +
                "menuName = \"Material Management\",   \n" +
                "orderby = 13.00,   \n" +
                "isActive = 1,   \n" +
                "displayMenuName = \"Material Management\",  \n" +
                "hasChild = 1 where pagename = \"Material Management\";  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (87,'2.00','V1',' Change in pageDetail table entry-Mona '," + userid + ");"
            );
            break;
        case 87:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "update page_detail set displayMenuName='Sales Order' where pageName='Add Sales Order';  \n" +
                "update page_detail set displayMenuName=' Supplies & Materials Types' where pageName='Part Type';  \n" +
                "update page_detail set displayMenuName=' Part To Stock' where pageName='Manage Receiving Material';  \n" +
                "update page_detail set displayMenuName=' Define Custom Forms' where pageName='Custom Forms Data Fields List';  \n" +
                "update page_detail set displayMenuName=' Define Custom Forms' where pageName='Custom Forms Data Fields List';  \n" +
                "update page_detail set displayMenuName=' Supplies & Materials Types' where pageName='Manage Part Type Generic Category';  \n" +
                "update page_detail set displayMenuName='Supplies & Materials' ,menuName='Supplies & Materials' where pageName='Supply & Material';  \n" +
                "update page_detail set displayMenuName='Supplies & Materials' ,menuName='Supplies & Materials' where pageName='Manage Supply & Material';  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (88,'2.00','V1','Page detail change -Mona'," + userid + ");"
            );
            break;
        case 88:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderHaltResumeReasonHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderHaltResumeReasonHistory`(	    \n" +
                "	IN pWoID INT(11),           \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),	        \n" +
                "	IN pWhereClause VARCHAR(16383)            \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	/* DECLARE SQLStatement varchar(255); */        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS       \n" +
                "	(SELECT     \n" +
                "	wouh.woID,     \n" +
                "	'' AS woOPID,     \n" +
                "	'' AS OperationName,    \n" +
                "	DATE_FORMAT(wouh.startDate,'%m/%d/%Y %h:%i:%S %p') haltDate,    \n" +
                "	DATE_FORMAT(wouh.enddate,'%m/%d/%Y %h:%i:%S %p') resumeDate,    \n" +
                "	wouh.reason,    \n" +
                "	wouh.resumeReason,    \n" +
                "	(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp     \n" +
                "		WHERE emp.id=wouh.holdEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS holdEmployeeName,    \n" +
                "	(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp     \n" +
                "		WHERE emp.id=wouh.unHoldEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS unHoldEmployeeName,    \n" +
                "	'0' AS haltTypeVal,    \n" +
                "	'Work Order' AS haltTypeText    \n" +
                "	FROM workorder_trans_hold_unhold wouh    \n" +
                "	WHERE wouh.woID=pWoID)    \n" +
                "	UNION    \n" +
                "	(SELECT     \n" +
                "		wopuh.woID,     \n" +
                "		wopuh.woOPID,     \n" +
                "		(SELECT CONCAT(wop.opName, ' (',wop.opNumber, ')') FROM workorder_operation wop WHERE wop.woOPID=wopuh.woOPID AND wop.woID=wopuh.woID) AS OperationName,    \n" +
                "		DATE_FORMAT(wopuh.startDate,'%m/%d/%Y %h:%i:%S %p') haltDate,    \n" +
                "		DATE_FORMAT(wopuh.enddate,'%m/%d/%Y %h:%i:%S %p') resumeDate,    \n" +
                "		wopuh.reason,    \n" +
                "		wopuh.resumeReason,    \n" +
                "		(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp     \n" +
                "			WHERE emp.id=wopuh.holdEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS holdEmployeeName,    \n" +
                "		(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp     \n" +
                "			WHERE emp.id=wopuh.unHoldEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS unHoldEmployeeName,    \n" +
                "	'1' AS haltTypeVal,    \n" +
                "	'Work Order Operation' AS haltTypeText    \n" +
                "	FROM workorder_trans_operation_hold_unhold wopuh    \n" +
                "	WHERE wopuh.woID=pWoID);      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyNickName DESC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (89,'2.00','V1',' Change the Sproc_GetWorkorderHaltResumeReasonHistory for set date formate  - FENIL '," + userid + ");"
            );
            break;
        case 89:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-01-2019  *********************************** */
                "update entity set entityName='Personnel'  where entityName='Employee';  \n" +
                "update entity set entityName='Part To Stock'  where entityName='Receiving Material';  \n" +
                /* **************************** Add Script Version -> 03-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (90,'2.00','V1','change in entity table -Mona '," + userid + ");"
            );
            break;
        case 90:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2019  *********************************** */
                "ALTER TABLE notificationmst MODIFY messageType VARCHAR(50) NOT NULL;  \n" +
                /* **************************** New Script -> 04-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkoutEmployeeFromOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkoutEmployeeFromOperation`(        \n" +
                "	IN pWOTransID INT,        \n" +
                "	IN pWOTransinoutID INT,        \n" +
                "	IN pCheckoutEmployeeID INT,        \n" +
                "	IN pCheckoutSetupTime INT,        \n" +
                "	IN pRemark LONGTEXT,    \n" +
                "	IN pTotalQty INT,    \n" +
                "        IN pPassQty INT,    \n" +
                "        IN pObservedQty INT,    \n" +
                "        IN pReworkQty INT,    \n" +
                "        IN pScrapQty INT,    \n" +
                "        IN pIsFirstArticle TINYINT    \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	DECLARE lvwoNumber VARCHAR(255);        \n" +
                "	DECLARE lvopName VARCHAR(255);        \n" +
                "	DECLARE lvempName VARCHAR(255);        \n" +
                "	DECLARE lvwoOPID INT(11);        \n" +
                "	DECLARE lvuserID INT(11);        \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);        \n" +
                "  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "	BEGIN        \n" +
                "		ROLLBACK;    \n" +
                "		RESIGNAL;    \n" +
                "	END;    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "	BEGIN                  \n" +
                "		ROLLBACK;                  \n" +
                "		RESIGNAL;                  \n" +
                "	END;	    \n" +
                "	START TRANSACTION;    \n" +
                "  \n" +
                "  \n" +
                "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;        \n" +
                "  \n" +
                "  \n" +
                "	/*Update pending pasue record */        \n" +
                "	UPDATE workorder_trans_emp_pausedet a        \n" +
                "	SET resumetime = @pCheckoutTime,        \n" +
                "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),        \n" +
                "	    updatedBy = pCheckoutEmployeeID        \n" +
                "	WHERE a.woTransinoutID = pWOTransinoutID        \n" +
                "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;        \n" +
                "  \n" +
                "	/*Calculate employee production */        \n" +
                "	UPDATE workorder_trans_empinout  a        \n" +
                "	SET isPaused = 0,        \n" +
                "		checkoutTime = @pCheckoutTime,        \n" +
                "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),        \n" +
                "		checkoutSetupTime = pCheckoutSetupTime,        \n" +
                "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -         \n" +
                "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime         \n" +
                "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )        \n" +
                "		  ),        \n" +
                "		updatedBy = pCheckoutEmployeeID,        \n" +
                "		remark = pRemark        \n" +
                "	WHERE woTransId = pWOTransID  AND woTransinoutID = pWOTransinoutID AND checkoutTime IS NULL ;        \n" +
                "  \n" +
                "  \n" +
                "	/*calculate operation Transaction production */        \n" +
                "	SELECT COUNT(1) INTO  @cnt  FROM workorder_trans_empinout WHERE  woTransId = pWOTransID  AND checkoutTime IS NULL;        \n" +
                "	IF (@cnt = 0 ) THEN         \n" +
                "  \n" +
                "	UPDATE workorder_trans a        \n" +
                "	SET checkouttime = @pCheckoutTime,        \n" +
                "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout         \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,        \n" +
                "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout         \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),        \n" +
                "		updatedBy = pCheckoutEmployeeID,        \n" +
                "		checkoutEmployeeID = pCheckoutEmployeeID        \n" +
                "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;	        \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* add production quantity details */    \n" +
                "	INSERT INTO workorder_trans_production (`woTransID`,`employeeID`,`totalQty`,`passQty`,    \n" +
                "			`observedQty`,`reworkQty`,`scrapQty`,`isFirstArticle`,`createdBy`,`remark`)    \n" +
                "	VALUES (pWOTransID,pCheckoutEmployeeID,pTotalQty,pPassQty,pObservedQty,pReworkQty,pScrapQty    \n" +
                "			,pIsFirstArticle,pCheckoutEmployeeID,pRemark) ;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* [S] - Add Time line log for check-out from team work order operation */        \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),        \n" +
                "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,        \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)         \n" +
                "		INTO lvwoNumber,lvopName,lvempName,lvopNumber        \n" +
                "	FROM workorder_trans_empinout  wteio        \n" +
                "	WHERE wteio.woTransinoutID = pWOTransinoutID ;        \n" +
                "  \n" +
                "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	        \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Employee check-out from team operation\");        \n" +
                "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');        \n" +
                "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);          \n" +
                "	/* [E] - Add Time line log for check-out from team work order operation */	        \n" +
                "  \n" +
                "	 COMMIT;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 04-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveWOTransSerialno` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWOTransSerialno`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWoTransID INT(11)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT `woTransSerialID`,`woTransID`,`woID`,`opID`,`employeeid`,`serialNo`,  \n" +
                "			prodstatus AS `prodStatus`,  \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`deletedAt`,`deletedBy`,  \n" +
                "			(SELECT GROUP_CONCAT(firstName,\" \",lastName) FROM employees   \n" +
                "				WHERE id IN (SELECT employeeID FROM users WHERE id = wts.createdBy)) empFullName    \n" +
                "			FROM `workorder_trans_serialNo` wts  \n" +
                "			WHERE `deletedAt` IS NULL   \n" +
                "			AND `woTransID` = IFNULL(pWoTransID,`woTransID`)  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"serialNo ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (91,'2.00','V1',' check out related sp - KETAN '," + userid + ");"
            );
            break;
        case 91:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2019  *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_genericcategory`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		 UNION ALL  \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericcategory\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		UNION ALL                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                                                          \n" +
                "		UNION ALL                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		UNION ALL                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		UNION ALL                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		UNION ALL                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                          \n" +
                "		UNION ALL                                                          \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                                                          \n" +
                "	        UNION ALL                  \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)     \n" +
                "            UNION ALL                  \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)    \n" +
                "	        UNION ALL                                                        \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)       \n" +
                "  \n" +
                "	      ) q');                                                          \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                                                          \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT                                                           \n" +
                "    *                                                          \n" +
                "FROM                                                          \n" +
                "    tempGenericCategory;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempGenericCategory;                                                          \n" +
                "		END IF;                                                          \n" +
                "    DROP TABLE tempGenericCategory;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (92,'2.00','V1','change in check_delete_genericCategory - Mona '," + userid + ");"
            );
            break;
        case 92:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2019  *********************************** */
                "ALTER TABLE salesorderdet DROP FOREIGN KEY FK_Assembly_Revision;  \n" +
                "ALTER TABLE salesorderdet DROP COLUMN salesorderdet.assemblyRevisionID;  \n" +
                "  \n" +
                "ALTER TABLE shippedassembly DROP FOREIGN KEY FK_outwardassembly_assemblyRevisionID;  \n" +
                "ALTER TABLE shippedassembly DROP COLUMN shippedassembly.assemblyRevisionID;  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE eco_request DROP FOREIGN KEY FK_eco_request_toRevisionID;  \n" +
                "ALTER TABLE eco_request DROP FOREIGN KEY FK_eco_request_fromRevisionID;  \n" +
                "ALTER TABLE eco_request DROP COLUMN eco_request.fromRevisionID;  \n" +
                "ALTER TABLE eco_request DROP COLUMN eco_request.toRevisionID;  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE workorder DROP FOREIGN KEY FK_workorder_assyRevID;  \n" +
                "ALTER TABLE workorder DROP COLUMN workorder.assyRevID;  \n" +
                "  \n" +
                "ALTER TABLE workorder_assembly_excessstock_location DROP FOREIGN KEY FK_workorder_assembly_excessstock_locationk_assyRevID;  \n" +
                "ALTER TABLE workorder_assembly_excessstock_location DROP COLUMN workorder_assembly_excessstock_location.assyRevID;  \n" +
                "  \n" +
                "ALTER TABLE eco_request ADD COLUMN fromAssyID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE eco_request ADD COLUMN toAssyID int(11) DEFAULT NULL;  \n" +
                "  \n" +
                "ALTER TABLE eco_request add constraint FK_eco_request_fromAssyID foreign key  (`fromAssyID`) References assemblymst(`id`);  \n" +
                "ALTER TABLE eco_request add constraint FK_eco_request_toAssyID foreign key  (`toAssyID`) References assemblymst(`id`);  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO `chart_rawdata_category_fields`  \n" +
                "(`chartRawdataCatID`, `field`, `displayName`, `aggregate`, `dataType`, `isActive`, `createdBy`, `createdAt`, `isStaticField`)  \n" +
                "VALUES  \n" +
                "(1,'Assy ID','Assy ID',null,'varchar',1,1,UTC_TIMESTAMP(),1),  \n" +
                "(2,'Assembly ID','Assembly ID',null,'varchar',1,1,UTC_TIMESTAMP(),1),  \n" +
                "(3,'Assembly ID','Assembly ID',null,'varchar',1,1,UTC_TIMESTAMP(),1),  \n" +
                "(4,'Assembly ID','Assembly ID',null,'varchar',1,1,UTC_TIMESTAMP(),1),  \n" +
                "(5,'Assy ID','Assy ID',null,'varchar',1,1,UTC_TIMESTAMP(),1),  \n" +
                "(6,'Assy ID','Assy ID',null,'varchar',1,1,UTC_TIMESTAMP(),1);  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (93,'2.00','V1','Assy.ID Changes for table fields in project  - shirish'," + userid + ");"
            );
            break;
        case 93:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyrevNameByID`;  \n" +
                "CREATE FUNCTION `fun_getAssyrevNameByID`(  \n" +
                "	passemblyID INT) RETURNS varchar(50) CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(50);  \n" +
                "  \n" +
                "	SELECT assemblyRev  INTO @result FROM assemblymst WHERE id = passemblyID;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getAssyidByID`;  \n" +
                "CREATE FUNCTION `fun_getAssyidByID`(  \n" +
                "	passemblyID INT) RETURNS varchar(50) CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(50);  \n" +
                "  \n" +
                "	SELECT assemblyID  INTO @result FROM assemblymst WHERE id = passemblyID;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getAssyNameByID`;  \n" +
                "CREATE FUNCTION `fun_getAssyNameByID`(  \n" +
                "	passemblyID INT) RETURNS varchar(50) CHARSET utf8  \n" +
                "BEGIN  \n" +
                "	DECLARE result NVARCHAR(255);  \n" +
                "  \n" +
                "	SELECT assemblyName  INTO @result FROM assemblymst WHERE id = passemblyID;  \n" +
                "      	SET result = @result;  \n" +
                "	RETURN result;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (94,'2.00','V1','Assy.ID Changes in function in project  - shirish'," + userid + ");"
            );
        case 94:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_production_report_stk`;  \n" +
                "CREATE VIEW `vu_workorder_production_report_stk` AS   \n" +
                "select `a`.`woID` AS `wo ID Identity`,`w`.`woNumber` AS `wo Number`,`w`.`woVersion` AS `wo Version`,  \n" +
                "`assy`.`assemblyName` AS `assy Number`,  \n" +
                "`assy`.`assemblyNickName` AS `Assembly Nick Name`,  \n" +
                "`assy`.`assemblyRev` AS `Assy Revision`,  \n" +
                "`assy`.`assemblyID` as `Assembly ID`,  \n" +
                "`w`.`buildQty` AS `Build Qty`,`a`.`opID` AS `OP ID Identity`,`a`.`woOPID` AS `woOP ID Identity`,`a`.`opName` AS `OP Name`,  \n" +
                "`a`.`opNumber` AS `OP Number`,`fun_getOpStatusNameByID`(`a`.`opStatus`) AS `OP Status`,  \n" +
                "sec_to_time(`a`.`processTime`) AS `Process Time`,sec_to_time(`a`.`setupTime`) AS `Setup Time`,  \n" +
                "sec_to_time(`a`.`perPieceTime`) AS `Per Piece Time`,  \n" +
                "(case when (`a`.`qtyControl` = 0) then 'No' when (`a`.`qtyControl` = 1) then 'Yes' else '' end) AS `MFg Qty Required?`,  \n" +
                "(case when (`a`.`isIssueQty` = 0) then 'No' when (`a`.`isIssueQty` = 1) then 'Yes' else '' end) AS `ASK For Issue Qty?`,  \n" +
                "(case when (`a`.`isRework` = 0) then 'No' when (`a`.`isRework` = 1) then 'Yes' else '' end) AS `is Rework Operation?`,  \n" +
                "(case when (`a`.`isTeamOperation` = 0) then 'No' when (`a`.`isTeamOperation` = 1) then 'Yes' else '' end) AS `is Team Operation?`,  \n" +
                "(case when (`a`.`isStopOperation` = 0) then 'No' when (`a`.`isStopOperation` = 1) then 'Yes' else '' end) AS `is Stop Operation?`,  \n" +
                "`a`.`opDescription` AS `OP Description`,`a`.`opDoes` AS `OP Does`,`a`.`opDonts` AS `OP Dont's`,  \n" +
                "`a`.`opWorkingCondition` AS `OP Working Condition`,`a`.`opManagementInstruction` AS `OP Management Instruction`,  \n" +
                "`a`.`opDeferredInstruction` AS `OP Deferred Instruction`,`a`.`opVersion` AS `OP Version`,`a`.`firstPcsModel` AS `First Pcs Model`,  \n" +
                "`a`.`firstPcsConclusion` AS `First Pcs Conclusion`,  \n" +
                "(case when (`a`.`firstPcsStatus` = 1) then 'WIP' when (`a`.`isStopOperation` = 2) then 'Pass' when (`a`.`isStopOperation` = 3) then 'Needs Improvement' else '' end) AS `First Pcs Status`,  \n" +
                "`c`.`clusterID` AS `Cluster ID Identity`,  \n" +
                "(  \n" +
                "	select `d`.`isParellelOperation`   \n" +
                "    from `workorder_cluster` `d`   \n" +
                "    where (`d`.`clusterID` = `c`.`clusterID`)  \n" +
                ") AS `is Parellel Operation`,  \n" +
                "`b`.`RecCnt` AS `RecCnt`,ifnull(`b`.`OPProdQty`,0) AS `OP Prod Qty`,ifnull(`b`.`StockQty`,0) AS `OP Stock Qty`,  \n" +
                "ifnull(`b`.`productionQty`,0) AS `OP Production Qty`,ifnull(`b`.`passQty`,0) AS `OP Passed Qty`,  \n" +
                "ifnull(`b`.`reprocessQty`,0) AS `OP Reprocessed Qty`,ifnull(`b`.`observedQty`,0) AS `OP Defect Observed Qty`,  \n" +
                "ifnull(`b`.`reworkQty`,0) AS `OP Rework  Required Qty`,ifnull(`b`.`scrapQty`,0) AS `OP Scraped Qty`,  \n" +
                "ifnull(`b`.`issueQty`,0) AS `Issue Qty`,(case when (`a`.`isTerminated` = 1) then 'Yes' else 'No' end) AS `isTerminated`,  \n" +
                "(  \n" +
                "	select ifnull(sum(`shippedassembly`.`shippedqty`),0)   \n" +
                "    from `shippedassembly`  \n" +
                "    where   \n" +
                "    (  \n" +
                "		(`shippedassembly`.`woOPID` = `a`.`woOPID`)   \n" +
                "        and (`shippedassembly`.`isDeleted` = 0)  \n" +
                "	)  \n" +
                ") AS `Shipped Qty`,  \n" +
                "ifnull(  \n" +
                "	(  \n" +
                "		select sum(`workorder_transfer`.`transferQty`)   \n" +
                "        from `workorder_transfer`   \n" +
                "        where ((`workorder_transfer`.`fromWOID` = `a`.`woID`)   \n" +
                "        and (`workorder_transfer`.`fromWOOPID` = `a`.`woOPID`))  \n" +
                "	),0) AS `Transfer Qty`,  \n" +
                "ifnull(  \n" +
                "	(  \n" +
                "		select distinct `b`.`woNumber`   \n" +
                "        from   \n" +
                "        (  \n" +
                "			`workorder_transfer` `a`   \n" +
                "            join `workorder` `b` on((`b`.`woID` = `a`.`toWOID`))  \n" +
                "		)   \n" +
                "        where ((`a`.`fromWOID` = `a`.`woID`)   \n" +
                "        and (`a`.`fromWOOPID` = `a`.`woOPID`))  \n" +
                "	),'') AS `To Work Order`,  \n" +
                "ifnull(  \n" +
                "	(  \n" +
                "		select `workorder_trans_operation_hold_unhold`.`reason`   \n" +
                "        from `workorder_trans_operation_hold_unhold`  \n" +
                "        where ((`workorder_trans_operation_hold_unhold`.`woOPID` = `a`.`woOPID`)   \n" +
                "        and isnull(`workorder_trans_operation_hold_unhold`.`endDate`))   \n" +
                "        limit 1  \n" +
                "	),'') AS `reason`,  \n" +
                "(case when (`w`.`woType` = 1) then 'New' when (`w`.`woType` = 2) then 'Repeat order with same revision' when (`w`.`woType` = 3) then 'Revision change' when (`w`.`woType` = 4) then 'I-ECO' when (`w`.`woType` = 5) then 'C-ECO' else '' end) AS `wo Type`   \n" +
                "from   \n" +
                "(  \n" +
                "	(  \n" +
                "		(  \n" +
                "  \n" +
                "			(  \n" +
                "				`workorder_operation` `a`   \n" +
                "				left join `workorder` `w` on((`a`.`woID` = `w`.`woID`))  \n" +
                "			)  \n" +
                "			join `assemblymst` `assy` on `w`.`assyID` = `assy`.`id` and ifnull(`assy`.`isDeleted`,0) = 0  \n" +
                "		)   \n" +
                "        left join `workorder_operation_cluster` `c` on `c`.`woOPID` = `a`.`woOPID` and ifnull(`c`.`isDeleted`,0) = 0  \n" +
                "	)   \n" +
                "    left join   \n" +
                "    (  \n" +
                "		select `g`.`woID` AS `woID`,`g`.`opID` AS `opID`,sum(`g`.`issueQty`) AS `issueQty`,sum(`g`.`RecCnt`) AS `RecCnt`,sum(`g`.`OPProdQty`) AS `OPProdQty`,  \n" +
                "        sum(`g`.`StockQty`) AS `StockQty`,sum(`g`.`productionQty`) AS `productionQty`,sum(`g`.`passQty`) AS `passQty`,sum(`g`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "        sum(`g`.`observedQty`) AS `observedQty`,sum(`g`.`reworkQty`) AS `reworkQty`,sum(`g`.`scrapQty`) AS `scrapQty`   \n" +
                "        from   \n" +
                "        (  \n" +
                "			select `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,max(ifnull(`a`.`issueQty`,0)) AS `issueQty`,`a`.`woOPID` AS `woOPID`,count(1) AS `RecCnt`,  \n" +
                "            sum(ifnull(`b`.`totalQty`,0)) AS `OPProdQty`,(sum(ifnull(`b`.`totalQty`,0)) - sum(ifnull(`b`.`scrapQty`,0))) AS `StockQty`,  \n" +
                "            (sum(ifnull(`b`.`totalQty`,0)) + sum(ifnull(`b`.`reprocessQty`,0))) AS `productionQty`,sum(ifnull(`b`.`passQty`,0)) AS `passQty`,  \n" +
                "            sum(ifnull(`b`.`reprocessQty`,0)) AS `reprocessQty`,sum(ifnull(`b`.`observedQty`,0)) AS `observedQty`,sum(ifnull(`b`.`reworkQty`,0)) AS `reworkQty`,  \n" +
                "            sum(ifnull(`b`.`scrapQty`,0)) AS `scrapQty`   \n" +
                "            from   \n" +
                "            (  \n" +
                "				`workorder_trans` `a`   \n" +
                "                join `workorder_trans_production` `b`  \n" +
                "			)   \n" +
                "            where ( `a`.`woTransID` = `b`.`woTransID` and ifnull(`a`.`isDeleted`,0) = 0 and ifnull(`b`.`isDeleted`,0) = 0)   \n" +
                "            group by `a`.`woTransID`,`a`.`woID`,`a`.`opID`,`a`.`woOPID`  \n" +
                "		) `g`   \n" +
                "        group by `g`.`woID`,`g`.`opID`,`g`.`woOPID`  \n" +
                "	) `b` on `a`.`woID` = `b`.`woID` and `a`.`opID` = `b`.`opID`  \n" +
                ")   \n" +
                "where ifnull(`a`.`deletedAt`,0) = 0;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_serialdata_report`;  \n" +
                "CREATE VIEW `vu_workorder_serialdata_report` AS   \n" +
                "select `b`.`woID` AS `woID`,`b`.`woNumber` AS `WO#`,  \n" +
                "`assy`.`assemblyName` AS `Assembly#`,  \n" +
                "`assy`.`assemblyNickName` AS `Assembly Nick Name`,  \n" +
                "`assy`.`assemblyRev` AS `Assy Revision`,  \n" +
                "`assy`.`assemblyID` AS `Assembly ID`,  \n" +
                "`a`.`PrefixorSuffix` AS `prefixorSuffix`,  \n" +
                "`a`.`PreSuffix` AS `PreFixOrSuffix Contain`,`a`.`dateCode` AS `Date Code`,`a`.`noofDigit` AS `noofDigit`,  \n" +
                "`a`.`SerialNo` AS `SerialNo`,  \n" +
                "(  \n" +
                "	select `workorder_operation`.`opName`   \n" +
                "    from `workorder_operation`  \n" +
                "    where (isnull(`workorder_operation`.`deletedAt`)   \n" +
                "    and (`workorder_operation`.`woID` = `b`.`woID`)   \n" +
                "    and (`workorder_operation`.`opID` = `a`.`curropID`))  \n" +
                ") AS `OP Name`,  \n" +
                "`fun_getSerailNoCurrentStatusNameByID`(`a`.`currStatus`) AS `currStatus`,  \n" +
                "(case when (`a`.`serialType` = 1) then 'MFG' else 'FINISH PRODUCT' end) AS `Serial Type`   \n" +
                "from   \n" +
                "(  \n" +
                "	(  \n" +
                "		`workorder_serialmst` `a`   \n" +
                "		join `workorder` `b` on `a`.`woID` = `b`.`woID` and ifnull(`b`.`isDeleted`,0) = 0  \n" +
                "	)   \n" +
                "	join `assemblymst` `assy` on `b`.`assyID` = `assy`.`id` and ifnull(`assy`.`isDeleted`,0) = 0  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_employeeproductionteamwise`;  \n" +
                "CREATE VIEW `vu_employeeproductionteamwise` AS   \n" +
                "select `b`.`firstName` AS `First Name`,`b`.`lastName` AS `Last Name`,concat(`b`.`firstName`,' ',`b`.`lastName`) AS `Full Name`,  \n" +
                "`b`.`burdenRate` AS `Burden Rate`,`b`.`initialName` AS `Initial Name`,`a`.`woID` AS `wo ID Identity`,`wo`.`woNumber` AS `WO Number`,  \n" +
                "(select `am`.`assemblyID` from `assemblymst` `am` where (`wo`.`assyID` = `am`.`id`)) AS `Assy ID`,  \n" +
                "(select `am`.`assemblyName` from `assemblymst` `am` where (`wo`.`assyID` = `am`.`id`)) AS `Assy Number`,  \n" +
                "(select `arm`.`assemblyRev` from `assemblymst` `arm` where (`wo`.`assyID` = `arm`.`id`)) AS `Revision`,  \n" +
                "`a`.`opID` AS `OP ID Identity`,  \n" +
                "(select `wp`.`opName` from `workorder_operation` `wp`   \n" +
                "where ((`wp`.`isTeamOperation` = 1) and (`wp`.`woOPID` = `a`.`woOPID`))) AS `OP Name`,  \n" +
                "`a`.`woOPID` AS `woOP ID Identity`,`a`.`woTransID` AS `woTrans ID Identity`,`a`.`workstationID` AS `WorkStation ID Identity`,  \n" +
                "`a`.`equipmentID` AS `Equipment ID  Identity`,  \n" +
                "(select concat(`eqp`.`assetName`,' (',`eqp`.`eqpMake`,' | ',`eqp`.`eqpModel`,' | ',`eqp`.`eqpYear`,')')   \n" +
                "from `equipment` `eqp` where (`a`.`equipmentID` = `eqp`.`eqpID`)) AS `Equipment Name`,  \n" +
                "sec_to_time(`a`.`checkinSetupTime`) AS `Checkin SetupTime`,`a`.`checkoutTime` AS `Checkout Time`,  \n" +
                "sec_to_time(`a`.`checkoutSetupTime`) AS `Checkout SetupTime`,`a`.`totalTime` AS `Total Time In Sec`,  \n" +
                "sec_to_time(`a`.`totalTime`) AS `Total Time`,`a`.`productionTime` AS `Production Time In Sec`,  \n" +
                "sec_to_time(`a`.`productionTime`) AS `Production Time`,`c`.`totalQty` AS `Original Total Qty`,  \n" +
                "round(((`c`.`totalQty` * `a`.`productionTime`) / (select sum(`workorder_trans_empinout`.`productionTime`)   \n" +
                "from `workorder_trans_empinout` where   \n" +
                "(`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Total Qty`,  \n" +
                "ifnull(round((`a`.`productionTime` / round(((`c`.`totalQty` * `a`.`productionTime`) /   \n" +
                "(select sum(`workorder_trans_empinout`.`productionTime`) from `workorder_trans_empinout`  \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2)),2),0) AS `Average Time In Sec`,  \n" +
                " sec_to_time(ifnull(round((`a`.`productionTime` / round(((`c`.`totalQty` * `a`.`productionTime`) /   \n" +
                " (select sum(`workorder_trans_empinout`.`productionTime`) from `workorder_trans_empinout`  \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2)),2),0)) AS `Average Time`,  \n" +
                " `c`.`PassQty` AS `Original Passed Qty`,  \n" +
                " round(((`c`.`PassQty` * `a`.`productionTime`) /   \n" +
                " (select sum(`workorder_trans_empinout`.`productionTime`)  \n" +
                " from `workorder_trans_empinout`  \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Passed Qty`,  \n" +
                " `c`.`reprocessQty` AS `Original Reprocessed Qty`,  \n" +
                " round(((`c`.`reprocessQty` * `a`.`productionTime`) /   \n" +
                " (select sum(`workorder_trans_empinout`.`productionTime`)   \n" +
                " from `workorder_trans_empinout`  \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Reprocessed Qty`,  \n" +
                " `c`.`observedQty` AS `Original Defect Observed Qty`,  \n" +
                " round(((`c`.`observedQty` * `a`.`productionTime`) /   \n" +
                " (select sum(`workorder_trans_empinout`.`productionTime`)   \n" +
                " from `workorder_trans_empinout`   \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Defect Observed Qty`,  \n" +
                " `c`.`reworkQty` AS `Original Rework  Required Qty`,  \n" +
                " round(((`c`.`reworkQty` * `a`.`productionTime`) /  \n" +
                " (select sum(`workorder_trans_empinout`.`productionTime`)   \n" +
                " from `workorder_trans_empinout`   \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Rework  Required Qty`,  \n" +
                " `c`.`scrapQty` AS `Original Scraped Qty`,  \n" +
                " round(((`c`.`scrapQty` * `a`.`productionTime`) /   \n" +
                " (select sum(`workorder_trans_empinout`.`productionTime`)   \n" +
                " from `workorder_trans_empinout`   \n" +
                " where (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Scraped Qty`  \n" +
                " from   \n" +
                " (  \n" +
                "	(  \n" +
                "		(  \n" +
                "			(  \n" +
                "				`workorder_trans_empinout` `a`   \n" +
                "				join `workorder` `wo` on((`a`.`woID` = `wo`.`woID`))  \n" +
                "			)   \n" +
                "			join `workorder_operation` `woo` on(((`woo`.`woOPID` = `a`.`woOPID`) and (`woo`.`isTeamOperation` = 1)))  \n" +
                "		)   \n" +
                "		join   \n" +
                "		(  \n" +
                "			select `workorder_trans_production`.`woTransID` AS `woTransId`,  \n" +
                "			sum(`workorder_trans_production`.`totalQty`) AS `totalQty`,  \n" +
                "			sum(`workorder_trans_production`.`passQty`) AS `PassQty`,  \n" +
                "			sum(`workorder_trans_production`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "			sum(`workorder_trans_production`.`observedQty`) AS `observedQty`,  \n" +
                "			sum(`workorder_trans_production`.`reworkQty`) AS `reworkQty`,  \n" +
                "			sum(`workorder_trans_production`.`scrapQty`) AS `scrapQty`   \n" +
                "			from `workorder_trans_production`   \n" +
                "			group by `workorder_trans_production`.`woTransID`  \n" +
                "		) `c` on((`a`.`woTransID` = `c`.`woTransId`))  \n" +
                "	)   \n" +
                "	join `employees` `b` on((`a`.`employeeID` = `b`.`id`))  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_employeeproduction`;  \n" +
                "CREATE VIEW `vu_employeeproduction` AS   \n" +
                "select `b`.`firstName` AS `First Name`,`b`.`lastName` AS `Last Name`,  \n" +
                "concat(`b`.`firstName`,' ',`b`.`lastName`) AS `Full Name`,`b`.`burdenRate` AS `Burden Rate`,  \n" +
                "`b`.`initialName` AS `Initial Name`,`a`.`woID` AS `wo ID Identity`,`wo`.`woNumber` AS `WO Number`,  \n" +
                "(select `am`.`assemblyID` from `assemblymst` `am` where (`wo`.`assyID` = `am`.`id`)) AS `Assy ID`,  \n" +
                "(select `am`.`assemblyName` from `assemblymst` `am` where (`wo`.`assyID` = `am`.`id`)) AS `Assy Number`,  \n" +
                "(select `arm`.`assemblyRev` from `assemblymst` `arm` where (`wo`.`assyID` = `arm`.`id`)) AS `Revision`,  \n" +
                "`a`.`opID` AS `OP ID Identity`,  \n" +
                "(select `wp`.`opName` from `workorder_operation` `wp` where (`wp`.`woOPID` = `a`.`woOPID`)) AS `OP Name`,  \n" +
                "`a`.`woOPID` AS `woOP ID Identity`,`a`.`woTransID` AS `woTrans ID Identity`,`a`.`workstationID` AS `WorkStation ID Identity`,  \n" +
                "`a`.`equipmentID` AS `Equipment ID  Identity`,  \n" +
                "(select concat(`eqp`.`assetName`,' (',`eqp`.`eqpMake`,' | ',`eqp`.`eqpModel`,' | ',`eqp`.`eqpYear`,')')   \n" +
                "from `equipment` `eqp`   \n" +
                "where (`a`.`equipmentID` = `eqp`.`eqpID`)) AS `Equipment Name`,  \n" +
                "sec_to_time(`a`.`checkinSetupTime`) AS `Checkin SetupTime`,`a`.`checkoutTime` AS `Checkout Time`,  \n" +
                "sec_to_time(`a`.`checkoutSetupTime`) AS `Checkout SetupTime`,`a`.`totalTime` AS `Total Time In Sec`,  \n" +
                "sec_to_time(`a`.`totalTime`) AS `Total Time`,`a`.`productionTime` AS `Production Time In Sec`,  \n" +
                "sec_to_time(`a`.`productionTime`) AS `Production Time`,`c`.`totalQty` AS `Total Qty`,  \n" +
                "ifnull(round((`a`.`productionTime` / `c`.`totalQty`),2),0) AS `Average Time In Sec`,  \n" +
                "sec_to_time(ifnull(round((`a`.`productionTime` / `c`.`totalQty`),2),0)) AS `Average Time`,`c`.`PassQty` AS `Passed Qty`,  \n" +
                "`c`.`reprocessQty` AS `Reprocessed Qty`,`c`.`observedQty` AS `Defect Observed Qty`,`c`.`reworkQty` AS `Rework  Required Qty`,  \n" +
                "`c`.`scrapQty` AS `Scraped Qty`   \n" +
                "from   \n" +
                "(  \n" +
                "	(  \n" +
                "		(  \n" +
                "			`workorder_trans_empinout` `a`   \n" +
                "			join `workorder` `wo` on((`a`.`woID` = `wo`.`woID`))  \n" +
                "		)   \n" +
                "		join   \n" +
                "		(  \n" +
                "			select `workorder_trans_production`.`woTransID` AS `woTransId`,  \n" +
                "			sum(`workorder_trans_production`.`totalQty`) AS `totalQty`,  \n" +
                "			sum(`workorder_trans_production`.`passQty`) AS `PassQty`,  \n" +
                "			sum(`workorder_trans_production`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "			sum(`workorder_trans_production`.`observedQty`) AS `observedQty`,  \n" +
                "			sum(`workorder_trans_production`.`reworkQty`) AS `reworkQty`,  \n" +
                "			sum(`workorder_trans_production`.`scrapQty`) AS `scrapQty`   \n" +
                "			from `workorder_trans_production`   \n" +
                "			group by `workorder_trans_production`.`woTransID`  \n" +
                "		) `c` on((`a`.`woTransID` = `c`.`woTransId`))  \n" +
                "	)   \n" +
                "	join `employees` `b` on((`a`.`employeeID` = `b`.`id`))  \n" +
                ")   \n" +
                "where `a`.`woTransID` in   \n" +
                "(  \n" +
                "	select `a`.`woTransID` from `workorder_trans` `a`   \n" +
                "	where exists  \n" +
                "	(  \n" +
                "		select 'Y' from `workorder_operation` `b`   \n" +
                "		where   \n" +
                "		(  \n" +
                "			(`b`.`woID` = `a`.`woID`)   \n" +
                "			and (`b`.`woOPID` = `a`.`woOPID`)   \n" +
                "			and (`b`.`opID` = `a`.`opID`)   \n" +
                "			and (ifnull(`b`.`isTeamOperation`,0) = 0)   \n" +
                "			and (`b`.`qtyControl` = 1)  \n" +
                "		)  \n" +
                "	)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_employee_production_all`;  \n" +
                "CREATE VIEW `vu_employee_production_all` AS   \n" +
                "select `vu_employeeproduction`.`First Name` AS `First Name`,  \n" +
                "`vu_employeeproduction`.`Last Name` AS `Last Name`,  \n" +
                "`vu_employeeproduction`.`Full Name` AS `Full Name`,  \n" +
                "`vu_employeeproduction`.`Burden Rate` AS `Burden Rate`,  \n" +
                "`vu_employeeproduction`.`Initial Name` AS `Initial Name`,  \n" +
                "`vu_employeeproduction`.`wo ID Identity` AS `wo ID Identity`,  \n" +
                "`vu_employeeproduction`.`WO Number` AS `WO Number`,  \n" +
                "`vu_employeeproduction`.`Assy ID` AS `Assy ID`,  \n" +
                "`vu_employeeproduction`.`Assy Number` AS `Assy Number`,  \n" +
                "`vu_employeeproduction`.`OP ID Identity` AS `OP ID Identity`,  \n" +
                "`vu_employeeproduction`.`Revision` AS `Revision`,  \n" +
                "`vu_employeeproduction`.`OP Name` AS `OP Name`,  \n" +
                "`vu_employeeproduction`.`woOP ID Identity` AS `woOP ID Identity`,  \n" +
                "`vu_employeeproduction`.`woTrans ID Identity` AS `woTrans ID Identity`,  \n" +
                "`vu_employeeproduction`.`WorkStation ID Identity` AS `WorkStation ID Identity`,  \n" +
                "`vu_employeeproduction`.`Equipment ID  Identity` AS `Equipment ID  Identity`,  \n" +
                "`vu_employeeproduction`.`Equipment Name` AS `Equipment Name`,  \n" +
                "`vu_employeeproduction`.`Checkin SetupTime` AS `Checkin SetupTime`,  \n" +
                "`vu_employeeproduction`.`Checkout Time` AS `Checkout Time`,  \n" +
                "`vu_employeeproduction`.`Checkout SetupTime` AS `Checkout SetupTime`,  \n" +
                "`vu_employeeproduction`.`Total Time In Sec` AS `Total Time In Sec`,  \n" +
                "`vu_employeeproduction`.`Total Time` AS `Total Time`,  \n" +
                "`vu_employeeproduction`.`Production Time` AS `Production Time`,  \n" +
                "`vu_employeeproduction`.`Production Time In Sec` AS `Production Time In Sec`,  \n" +
                "`vu_employeeproduction`.`Average Time In Sec` AS `Average Time In Sec`,  \n" +
                "`vu_employeeproduction`.`Average Time` AS `Average Time`,  \n" +
                "`vu_employeeproduction`.`Total Qty` AS `Total Qty`,  \n" +
                "`vu_employeeproduction`.`Passed Qty` AS `Passed Qty`,  \n" +
                "`vu_employeeproduction`.`Reprocessed Qty` AS `Reprocessed Qty`,  \n" +
                "`vu_employeeproduction`.`Defect Observed Qty` AS `Defect Observed Qty`,  \n" +
                "`vu_employeeproduction`.`Rework  Required Qty` AS `Rework  Required Qty`,  \n" +
                "`vu_employeeproduction`.`Scraped Qty` AS `Scraped Qty`   \n" +
                "from `vu_employeeproduction`   \n" +
                "union   \n" +
                "select `vu_employeeproductionteamwise`.`First Name` AS `First Name`,  \n" +
                "`vu_employeeproductionteamwise`.`Last Name` AS `Last Name`,  \n" +
                "`vu_employeeproductionteamwise`.`Full Name` AS `Full Name`,  \n" +
                "`vu_employeeproductionteamwise`.`Burden Rate` AS `Burden Rate`,  \n" +
                "`vu_employeeproductionteamwise`.`Initial Name` AS `Initial Name`,  \n" +
                "`vu_employeeproductionteamwise`.`wo ID Identity` AS `wo ID Identity`,  \n" +
                "`vu_employeeproductionteamwise`.`WO Number` AS `WO Number`,  \n" +
                "`vu_employeeproductionteamwise`.`Assy ID` AS `Assy ID`,  \n" +
                "`vu_employeeproductionteamwise`.`Assy Number` AS `Assy Number`,  \n" +
                "`vu_employeeproductionteamwise`.`OP ID Identity` AS `OP ID Identity`,  \n" +
                "`vu_employeeproductionteamwise`.`Revision` AS `Revision`,  \n" +
                "`vu_employeeproductionteamwise`.`OP Name` AS `OP Name`,  \n" +
                "`vu_employeeproductionteamwise`.`woOP ID Identity` AS `woOP ID Identity`,  \n" +
                "`vu_employeeproductionteamwise`.`woTrans ID Identity` AS `woTrans ID Identity`,  \n" +
                "`vu_employeeproductionteamwise`.`WorkStation ID Identity` AS `WorkStation ID Identity`,  \n" +
                "`vu_employeeproductionteamwise`.`Equipment ID  Identity` AS `Equipment ID  Identity`,  \n" +
                "`vu_employeeproductionteamwise`.`Equipment Name` AS `Equipment Name`,  \n" +
                "`vu_employeeproductionteamwise`.`Checkin SetupTime` AS `Checkin SetupTime`,  \n" +
                "`vu_employeeproductionteamwise`.`Checkout Time` AS `Checkout Time`,  \n" +
                "`vu_employeeproductionteamwise`.`Checkout SetupTime` AS `Checkout SetupTime`,  \n" +
                "`vu_employeeproductionteamwise`.`Total Time In Sec` AS `Total Time In Sec`,  \n" +
                "`vu_employeeproductionteamwise`.`Total Time` AS `Total Time`,  \n" +
                "`vu_employeeproductionteamwise`.`Production Time` AS `Production Time`,  \n" +
                "`vu_employeeproductionteamwise`.`Production Time In Sec` AS `Production Time In Sec`,  \n" +
                "`vu_employeeproductionteamwise`.`Average Time In Sec` AS `Average Time In Sec`,  \n" +
                "`vu_employeeproductionteamwise`.`Average Time` AS `Average Time`,  \n" +
                "`vu_employeeproductionteamwise`.`Total Qty` AS `Total Qty`,  \n" +
                "`vu_employeeproductionteamwise`.`Passed Qty` AS `Passed Qty`,  \n" +
                "`vu_employeeproductionteamwise`.`Reprocessed Qty` AS `Reprocessed Qty`,  \n" +
                "`vu_employeeproductionteamwise`.`Defect Observed Qty` AS `Defect Observed Qty`,  \n" +
                "`vu_employeeproductionteamwise`.`Rework  Required Qty` AS `Rework  Required Qty`,  \n" +
                "`vu_employeeproductionteamwise`.`Scraped Qty` AS `Scraped Qty`   \n" +
                "from `vu_employeeproductionteamwise`;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_readyassy_stk`;  \n" +
                "CREATE VIEW `vu_workorder_readyassy_stk` AS   \n" +
                "select `a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,`a`.`woID` AS `woID`,`a`.`woNumber` AS `woNumber`,  \n" +
                "`a`.`assyID` AS `assyID`,`a`.`buildQty` AS `buildQty`,`a`.`woStatus` AS `woStatus`,`a`.`woVersion` AS `woVersion`,  \n" +
                "`a`.`isDeleted` AS `isDeleted`,`a`.`StockQty` AS `StockQty`,`a`.`PassQty` AS `PassQty`,`a`.`reprocessQty` AS `reprocessQty`,  \n" +
                "`a`.`observedQty` AS `observedQty`,`a`.`reworkQty` AS `reworkQty`,`a`.`scrapQty` AS `scrapQty`,  \n" +
                "`a`.`TerminatedTransQty` AS `TerminatedTransQty`,  \n" +
                "(ifnull(`a`.`ShippedQty_BeforLastOP`,0) + ifnull(`a`.`ShippedQty_fromLastOP`,0)) AS `ShippedQty`,  \n" +
                "`a`.`ShippedQty_BeforLastOP` AS `ShippedQty_BeforLastOP`,`a`.`ShippedQty_fromLastOP` AS `ShippedQty_fromLastOP`,  \n" +
                "(`a`.`StockQty` - `a`.`ShippedQty_fromLastOP`) AS `inHouseStockQty`   \n" +
                "from   \n" +
                "(  \n" +
                "	select `a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,`a`.`woID` AS `woID`,`a`.`woNumber` AS `woNumber`,`a`.`assyID` AS `assyID`,  \n" +
                "    `a`.`buildQty` AS `buildQty`,`a`.`woStatus` AS `woStatus`,`a`.`woVersion` AS `woVersion`,`a`.`isDeleted` AS `isDeleted`,  \n" +
                "    ifnull(`b`.`StockQty`,0) AS `StockQty`,ifnull(`b`.`PassQty`,0) AS `PassQty`,ifnull(`b`.`reprocessQty`,0) AS `reprocessQty`,  \n" +
                "    ifnull(`b`.`observedQty`,0) AS `observedQty`,ifnull(`b`.`reworkQty`,0) AS `reworkQty`,ifnull(`b`.`scrapQty`,0) AS `scrapQty`,  \n" +
                "    (  \n" +
                "		select ifnull(sum(`workorder_transfer`.`transferQty`),0)   \n" +
                "        from `workorder_transfer`   \n" +
                "        where   \n" +
                "        (  \n" +
                "			(`workorder_transfer`.`fromWOID` = `a`.`woID`)   \n" +
                "            and (ifnull(`workorder_transfer`.`isDeleted`,0) = 0)   \n" +
                "            and (`workorder_transfer`.`fromWOOPID` = `a`.`woOPID`)  \n" +
                "		)  \n" +
                "	) AS `TerminatedTransQty`,  \n" +
                "    (  \n" +
                "		select ifnull(sum(`shippedassembly`.`shippedqty`),0)   \n" +
                "        from `shippedassembly`   \n" +
                "        where   \n" +
                "        (  \n" +
                "			(`shippedassembly`.`workorderID` = `a`.`woID`)   \n" +
                "            and (`shippedassembly`.`woOPID` = `a`.`woOPID`)   \n" +
                "            and (ifnull(`shippedassembly`.`isDeleted`,0) = 0)  \n" +
                "		)  \n" +
                "	) AS `ShippedQty_fromLastOP`,  \n" +
                "    (  \n" +
                "		select ifnull(sum(`shippedassembly`.`shippedqty`),0)   \n" +
                "        from `shippedassembly`   \n" +
                "        where   \n" +
                "        (  \n" +
                "			(`shippedassembly`.`workorderID` = `a`.`woID`)   \n" +
                "            and (`shippedassembly`.`woOPID` <> `a`.`woOPID`)   \n" +
                "            and (ifnull(`shippedassembly`.`isDeleted`,0) = 0)  \n" +
                "		)  \n" +
                "	) AS `ShippedQty_BeforLastOP`   \n" +
                "    from   \n" +
                "    (  \n" +
                "		(  \n" +
                "			select `a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,`b`.`woID` AS `woID`,`b`.`woNumber` AS `woNumber`,  \n" +
                "			`b`.`assyID` AS `assyID`,`b`.`buildQty` AS `buildQty`,`b`.`woStatus` AS `woStatus`,  \n" +
                "			`b`.`woVersion` AS `woVersion`,`a`.`isDeleted` AS `isDeleted`   \n" +
                "			from   \n" +
                "			(  \n" +
                "				`workorder_operation` `a`   \n" +
                "				join `workorder` `b` on `a`.`woID` = `b`.`woID`  \n" +
                "			)   \n" +
                "			where (`a`.`woID`,`a`.`opNumber`) in   \n" +
                "			(  \n" +
                "					select `workorder_operation`.`woID`,  \n" +
                "                    max(`workorder_operation`.`opNumber`)   \n" +
                "                    from `workorder_operation`   \n" +
                "                    where   \n" +
                "                    (  \n" +
                "						(ifnull(`workorder_operation`.`isDeleted`,0) = 0)   \n" +
                "                        and (`workorder_operation`.`qtyControl` = 1)  \n" +
                "					)   \n" +
                "                    group by `workorder_operation`.`woID`  \n" +
                "				)  \n" +
                "		) `a`   \n" +
                "        left join   \n" +
                "        (  \n" +
                "			select `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,sum(ifnull(`a`.`IssueQty`,0)) AS `IssueQty`,  \n" +
                "            sum(`a`.`RecCnt`) AS `RecCnt`,sum(`a`.`OPProdQty`) AS `OPProdQty`,sum(`a`.`StockQty`) AS `StockQty`,  \n" +
                "            sum(`a`.`PassQty`) AS `PassQty`,sum(`a`.`productionQty`) AS `productionQty`,sum(`a`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "            sum(`a`.`observedQty`) AS `observedQty`,sum(`a`.`reworkQty`) AS `reworkQty`,sum(`a`.`scrapQty`) AS `scrapQty`   \n" +
                "            from  \n" +
                "            (  \n" +
                "				select `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,`a`.`woTransID` AS `woTransId`,   \n" +
                "                ifnull(`a`.`issueQty`,0) AS `IssueQty`,count(1) AS `RecCnt`,sum(ifnull(`b`.`totalQty`,0)) AS `OPProdQty`,   \n" +
                "                (sum(ifnull(`b`.`totalQty`,0)) - sum(ifnull(`b`.`scrapQty`,0))) AS `StockQty`,   \n" +
                "                (sum(ifnull(`b`.`totalQty`,0)) + sum(ifnull(`b`.`reprocessQty`,0))) AS `productionQty`,   \n" +
                "                sum(ifnull(`b`.`passQty`,0)) AS `PassQty`,sum(ifnull(`b`.`reprocessQty`,0)) AS `reprocessQty`,   \n" +
                "                sum(ifnull(`b`.`observedQty`,0)) AS `observedQty`,sum(ifnull(`b`.`reworkQty`,0)) AS `reworkQty`,   \n" +
                "                sum(ifnull(`b`.`scrapQty`,0)) AS `scrapQty`  \n" +
                "                from `workorder_trans` `a`   \n" +
                "                left join `workorder_trans_production` `b` on`a`.`woTransID` = `b`.`woTransID`   \n" +
                "                where ifnull(`a`.`isDeleted`,0) = 0 and ifnull(`b`.`isDeleted`,0) = 0   \n" +
                "                group by `a`.`woID`,`a`.`opID`,`a`.`woOPID`,`a`.`woTransID`,ifnull(`a`.`issueQty`,0)  \n" +
                "			) `a`   \n" +
                "			group by `a`.`woID`,`a`.`opID`,`a`.`woOPID`  \n" +
                "		) `b` on `a`.`woID` = `b`.`woID` and `a`.`opID` = `b`.`opID`  \n" +
                "	)  \n" +
                ") `a`;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS   \n" +
                "select `a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,  \n" +
                "`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,  \n" +
                "`a`.`shippingComment` AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,  \n" +
                "`a`.`assyID` AS `Assy ID`,  \n" +
                "`a`.`assyname` AS `Assy Name`,  \n" +
                "`a`.`assemblyRevisionname` AS `Assy Revision`,  \n" +
                "`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName` AS `Company Name`,  \n" +
                "`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "(ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,  \n" +
                "(case when ((ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0)) > 0) then 'Pending' else 'Completed' end) AS `Status`   \n" +
                "from   \n" +
                "(  \n" +
                "	select `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,  \n" +
                "    `sm`.`poDate` AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "    `sm`.`shippingMethodID` AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,  \n" +
                "    `sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`,  \n" +
                "    `fun_getAssyidByID`(`a`.`assemblyID`) AS `assyID`,  \n" +
                "    `fun_getAssyNameByID`(`a`.`assemblyID`) AS `assyname`,  \n" +
                "    `fun_getAssyrevNameByID`(`a`.`assemblyID`) AS `assemblyRevisionname`,  \n" +
                "    `cu`.`companyName` AS `companyName`,  \n" +
                "    concat(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`a`.`qty` AS `qty`,  \n" +
                "    (  \n" +
                "		select ifnull(sum(`shippedassembly`.`shippedqty`),0)  \n" +
                "        from `shippedassembly`   \n" +
                "        where ((`shippedassembly`.`assemblyID` = `a`.`assemblyID`)   \n" +
                "        and (`shippedassembly`.`isDeleted` = 0)   \n" +
                "        and `shippedassembly`.`shippingId` in   \n" +
                "        (  \n" +
                "			select `salesshippingmst`.`shippingID`  \n" +
                "            from `salesshippingmst`   \n" +
                "            where (`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "		))  \n" +
                "	) AS `ShippedQty`  \n" +
                "    from   \n" +
                "    (  \n" +
                "		(  \n" +
                "			(  \n" +
                "				(  \n" +
                "					`salesorderdet` `a`   \n" +
                "                    join `salesordermst` `sm` on  \n" +
                "                    (  \n" +
                "						`sm`.`id` = `a`.`refSalesOrderID`  \n" +
                "						and ifnull(`sm`.`isDeleted`,0) = 0  \n" +
                "					)  \n" +
                "				)   \n" +
                "                left join `customers` `cu` on  \n" +
                "                (  \n" +
                "					`sm`.`customerID` = `cu`.`id`   \n" +
                "                    and ifnull(`cu`.`isDeleted`,0) = 0  \n" +
                "				)  \n" +
                "			)   \n" +
                "            left join `customer_contactperson` `cc` on  \n" +
                "            (  \n" +
                "				`sm`.`contactPersonID` = `cc`.`personId`   \n" +
                "				and ifnull(`cc`.`isDeleted`,0) = 0  \n" +
                "			)  \n" +
                "		)   \n" +
                "        left join `genericcategory` `gc` on  \n" +
                "        (  \n" +
                "			`sm`.`shippingMethodID` = `gc`.`gencCategoryID`   \n" +
                "			and ifnull(`gc`.`isDeleted`,0) = 0  \n" +
                "		)  \n" +
                "	)  \n" +
                "    where ifnull(`a`.`isDeleted`,0) = 0  \n" +
                ") `a`;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_transfer_report`;    \n" +
                "CREATE VIEW `vu_workorder_transfer_report` AS   \n" +
                "select `a`.`woID` AS `woID Identity`,`a`.`opID` AS `opID Identity`,`a`.`toWOID` AS `toWOID Identity`,`a`.`opName` AS `OP Name`,  \n" +
                "`a`.`opNumber` AS `OP Number`,`a`.`opVersion` AS `OP Version`,`fromwo`.`woNumber` AS `WO Number`,`fromwo`.`woVersion` AS `WO Version`,  \n" +
                "`fromwo`.`ECORemark` AS `ECO Remark`,`fromwo`.`FCORemark` AS `FCO Remark`,`fromwo`.`poQty` AS `PO Qty`,  \n" +
                "`towo`.`woNumber` AS `To WO Number`,`towo`.`woVersion` AS `To WO Version`,  \n" +
                "`fromassy`.`assemblyName` AS `Assy Number`,  \n" +
                "`fromassy`.`assemblyID` AS `Assembly ID`,  \n" +
                "`fromassy`.`assemblyNickName` AS `Assy Nickname`,  \n" +
                "`fromassy`.`assemblyRev` AS `Assy Revision`,  \n" +
                "`toassy`.`assemblyName` AS `To Assy Number`,  \n" +
                "`toassy`.`assemblyID` AS `To Assembly ID`,  \n" +
                "`toassy`.`assemblyNickName` AS `To Assy Nickname`,  \n" +
                "`toassy`.`assemblyRev` AS `To Assy Revision`   \n" +
                "from   \n" +
                "(  \n" +
                "	(  \n" +
                "		(  \n" +
                "			(  \n" +
                "				(  \n" +
                "					(  \n" +
                "						(  \n" +
                "							(  \n" +
                "								select `wo`.`woID` AS `woID`,`wo`.`opID` AS `opID`,`wo`.`opName` AS `opName`,`wo`.`opNumber` AS `opNumber`,`wo`.`opVersion` AS `opVersion`,  \n" +
                "                                (  \n" +
                "									select `wt`.`toWOID`   \n" +
                "                                    from `workorder_transfer` `wt`   \n" +
                "                                    where ((ifnull(`wt`.`isDeleted`,0) = 0)   \n" +
                "                                    and (`wt`.`fromWOID` = `wo`.`woID`))  \n" +
                "                                    limit 1  \n" +
                "								) AS `toWOID`   \n" +
                "                                from `workorder_operation` `wo`   \n" +
                "                                where ((`wo`.`isTerminated` = 1) and (ifnull(`wo`.`isDeleted`,0) = 0))  \n" +
                "							)  \n" +
                "						) `a`   \n" +
                "                        join `workorder` `fromwo` on  \n" +
                "                        (  \n" +
                "							(`fromwo`.`woID` = `a`.`woID`)   \n" +
                "							and (ifnull(`fromwo`.`isDeleted`,0) = 0)  \n" +
                "						)  \n" +
                "					)   \n" +
                "                    join `workorder` `towo` on  \n" +
                "					(  \n" +
                "							(`towo`.`woID` = `a`.`toWOID`)   \n" +
                "							and (ifnull(`towo`.`isDeleted`,0) = 0)  \n" +
                "					)  \n" +
                "				)   \n" +
                "				join `assemblymst` `fromassy` on  \n" +
                "				(  \n" +
                "					(`fromwo`.`assyID` = `fromassy`.`id`)   \n" +
                "					and (ifnull(`fromassy`.`isDeleted`,0) = 0)  \n" +
                "				)  \n" +
                "			)   \n" +
                "			join `assemblymst` `toassy` on  \n" +
                "			(  \n" +
                "				(`towo`.`assyID` = `toassy`.`id`)   \n" +
                "				and (ifnull(`toassy`.`isDeleted`,0) = 0)  \n" +
                "			)  \n" +
                "		)  \n" +
                "	)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (95,'2.00','V1','Assy.ID Changes in views in project  - shirish'," + userid + ");"
            );
            break;
        case 95:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2019  *********************************** */
                "DROP TRIGGER  IF EXISTS  `Trg_AU_WorkOrder` ;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder`   \n" +
                "    FOR EACH ROW BEGIN    \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'WONUMBER',    \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ASSYID, 0) != IFNULL(NEW.ASSYID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ASSYID',    \n" +
                "			CAST(OLD.assyID AS CHAR),CAST(NEW.assyID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;   \n" +
                "	IF IFNULL(OLD.PODATE, 0) != IFNULL(NEW.PODATE, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'PODATE',    \n" +
                "			CAST(OLD.poDate AS CHAR),CAST(NEW.poDate AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.PONUMBER, 0) != IFNULL(NEW.PONUMBER, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'PONUMBER',    \n" +
                "			CAST(OLD.poNumber AS CHAR),CAST(NEW.poNumber AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.POQTY, 0) != IFNULL(NEW.POQTY , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'POQTY',    \n" +
                "			CAST(OLD.poQty AS CHAR),CAST(NEW.poQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'EXCESSQTY',    \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'BUILDQTY',    \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'STARTTIME',    \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ENDTIME',    \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'MASTERTEMPLATEID',    \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'REFRENCEWOID',    \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'WOVERSION',    \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISSAMPLEAVAILABLE, 0) != IFNULL(NEW.ISSAMPLEAVAILABLE, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISSAMPLEAVAILABLE',    \n" +
                "			CAST(OLD.ISSAMPLEAVAILABLE AS CHAR),CAST(NEW.ISSAMPLEAVAILABLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISCLUSTERAPPLIED',    \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ROHSSTATUSID',    \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISNOCLEAN',    \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISWATERSOLUBLE',    \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',    \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.WOSTATUS, 0) != IFNULL(NEW.WOSTATUS , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'WOSTATUS',    \n" +
                "			CAST(OLD.WOSTATUS AS CHAR),CAST(NEW.WOSTATUS AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'CUSTOMERID',    \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ECOREMARK',    \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'FCOREMARK',    \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.LOCATIONSAMPLEDETAILS , 0)!= IFNULL(NEW.LOCATIONSAMPLEDETAILS , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'LOCATIONSAMPLEDETAILS',    \n" +
                "			CAST(OLD.LocationSampleDetails AS CHAR),CAST(NEW.LocationSampleDetails AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISDELETED',    \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISSTOPWORKORDER',    \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISREVISEDWO',    \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'ISOPERATIONSVERIFIED',    \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog     \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )     \n" +
                "		VALUES (\"WORKORDER\",    \n" +
                "			CAST(NEW.woID AS CHAR),    \n" +
                "			'TERMINATEWOID',    \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (96,'2.00','V1','Assy.ID Changes in trigger in project  - shirish'," + userid + ");"
            );
            break;
        case 96:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetECORequest`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECORequest`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT er.*,   \n" +
                "        CONCAT(emp.firstName , ' ' , emp.lastName) fullName ,  \n" +
                "        ta.assemblyID as toAssemblyID, fa.assemblyID as fromAssemblyID,  \n" +
                "        (CASE WHEN (`er`.`custECONumber` IS NULL OR `er`.`custECONumber` = '') THEN 'FCA'   \n" +
                "			ELSE 'CUSTOMER' END) AS `custECONumberConvertedValue` ,  \n" +
                "	(CASE WHEN (`er`.`status` = 'P') THEN 'Pending'   \n" +
                "		WHEN (`er`.`status` = 'C') THEN 'Closed' ELSE '' END) AS `statusConvertedValue`				   \n" +
                "        FROM eco_request er  \n" +
                "        JOIN employees emp ON er.initiateBy = emp.id AND IFNULL(emp.isDeleted, 0) = 0  \n" +
                "        join assemblymst fa on er.fromAssyID = fa.id and fa.isDeleted = 0  \n" +
                "        join assemblymst ta on ta.id = er.toAssyID and ta.isDeleted = 0  \n" +
                "        WHERE IFNULL(er.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ecoNumber ASC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetVUWorkorderReadyassyStk`;  \n" +
                "CREATE PROCEDURE `Sproc_GetVUWorkorderReadyassyStk`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pWhereClause VARCHAR(16383)     \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "	SELECT vu.woID, vu.opID, vu.woOPID,vu.woNumber, vu.shippedQty,  \n" +
                "    am.assemblyName, am.assemblyID, vu.woVersion, vu.inHouseStockQty, am.assemblyNickName,  \n" +
                "    wae.location, wae.serialNoDescription, wae.notes  \n" +
                "    FROM vu_workorder_readyAssy_stk vu  \n" +
                "    JOIN assemblymst am ON vu.assyID = am.id AND IFNULL(am.isDeleted, 0) = 0  \n" +
                "    LEFT JOIN workorder_assembly_excessstock_location wae ON vu.woID = wae.woID AND wae.isdefault = 1 AND IFNULL(wae.isDeleted, 0) = 0;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"woNumber ASC\");  \n" +
                "	END IF;	  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippingRequestDet`;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippingRequestDet`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT srd.id, srd.woID, srd.note, srd.qty, srd.shippingRequestID, wo.woNumber, am.assemblyNickName, wo.buildQty, wo.poQty, wo.poNumber,  \n" +
                "        am.assemblyName, am.assemblyID, cus.companyName  \n" +
                "        FROM shipping_requestdet srd  \n" +
                "        JOIN workorder wo ON srd.woID = wo.woID and IFNULL(wo.isDeleted, 0) = 0  \n" +
                "        JOIN assemblymst am ON wo.assyID = am.id and IFNULL(am.isDeleted, 0) = 0  \n" +
                "        JOIN customers cus ON wo.customerID = cus.id and IFNULL(cus.isDeleted, 0) = 0  \n" +
                "        WHERE IFNULL(srd.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyNickName ASC\");  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetMaxWorkorderNumber`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMaxWorkorderNumber`(            \n" +
                "	IN pwoID INT(11),    \n" +
                "	IN pisRepeat INT(11)    \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE woAssyID INT(11) DEFAULT 0;    \n" +
                "	DECLARE woWONumber NVARCHAR(100);    \n" +
                "	SET woAssyID = 0;    \n" +
                "  \n" +
                "	IF (pwoID IS NULL) THEN    \n" +
                "		SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder` AS `Workorder` WHERE `Workorder`.`deletedAt` IS NULL;    \n" +
                "	ELSE     \n" +
                "		-- commmented after discussion with dixit sir on 02/10/2018    \n" +
                "		-- SELECT assyID into woAssyID FROM workorder WHERE woID=pwoID AND `deletedAt` IS NULL;    \n" +
                "		SELECT assyID, woNumber INTO woAssyID, woWONumber FROM workorder WHERE woID=pwoID AND `deletedAt` IS NULL;    \n" +
                "		SET woWONumber = SUBSTRING_INDEX(woWONumber,'-',1);    \n" +
                "  \n" +
                "		-- SET @SQLStatement1 = CONCAT(\"SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder`     \n" +
                "		-- WHERE assyID=\",woAssyID,\" AND woNumber LIKE '%\", woWONumber, \"%' AND `deletedAt` IS NULL\");    \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder` Where woNumber LIKE '%\", woWONumber, \"%' AND `deletedAt` IS NULL\");    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;		    \n" +
                "	END IF;    \n" +
                "	-- SELECT @maxValue AS `maxValue`;    \n" +
                "	-- SELECT woID,assyID,woNumber,assyID,poQty,excessQty,buildQty,ECORemark,FCORemark from workorder where woNumber=@maxValue;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblies`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblies`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "        IN pWhereClause VARCHAR(16383)          \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "               SELECT 	assymst.assemblyName,    \n" +
                "			assymst.assemblyNickName,    \n" +
                "			assymst.id,    \n" +
                "			assymst.assemblyDescription,      \n" +
                "			assymst.assemblyCode,    \n" +
                "			assymst.assemblyRev,    \n" +
                "			assymst.assemblyID,    \n" +
                "			assymst.assyStatus,    \n" +
                "			assymst.inactiveDate,    \n" +
                "			gc.gencCategoryName  AS `assyStatusValue` ,       \n" +
                "			cust.id AS customerID,cust.companyName,cust.customerCode      \n" +
                "                FROM assemblymst assymst      \n" +
                "		LEFT OUTER JOIN customers            cust     ON assymst.customerID=cust.id     AND IFNULL(cust.isDeleted,0)=0       \n" +
                "		LEFT OUTER JOIN genericcategory      gc       ON assymst.assyStatus=gc.gencCategoryID     AND IFNULL(gc.isDeleted,0)=0       \n" +
                "	        WHERE assymst.deletedAt IS NULL  GROUP BY assymst.id;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyWorkorder`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(                \n" +
                "	IN woID INT(1),                \n" +
                "	IN woNumber VARCHAR(11),                \n" +
                "	IN assyID INT,                \n" +
                "	IN poQty INT(1),                \n" +
                "	IN excessQty INT(1),                \n" +
                "	IN buildQty INT(1),                \n" +
                "	IN userID INT(1),                \n" +
                "	IN ECORemark VARCHAR(100),                \n" +
                "	IN FCORemark VARCHAR(100),                \n" +
                "	IN isRevision INT(1),          \n" +
                "	IN woType INT(11),        \n" +
                "	IN ecoReqID INT(11)               \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE insertedWOID INT(1);              \n" +
                "DECLARE insertedSubFormTransID INT(11);              \n" +
                "DECLARE lv_subFormTransID_from INT(11);              \n" +
                "DECLARE lv_parentDataElementID_from INT(11);              \n" +
                "DECLARE lv_rowNumber_from INT(11);              \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                  \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))                \n" +
                "THEN SELECT 'woNumber' errorCode;                \n" +
                "ELSE                \n" +
                "	START TRANSACTION;                \n" +
                "  \n" +
                "    # copy workorder                 \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`assyID`,`customerID`,`poNumber`,                \n" +
                "	`poQty`,`buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`                \n" +
                "	,`woStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`,`LocationSampleDetails`                \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`)                \n" +
                "	SELECT woNumber `woNumber`, assyID `assyID`,`customerID`,`poNumber`,                \n" +
                "	poQty `poQty`,buildQty `buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,woID,                \n" +
                "	UTC_DATE() `createdAt`, userID `createdBy`,0 `woStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`,                \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`LocationSampleDetails`,`isOperationTrackBySerialNo`,`isNoClean`,                \n" +
                "	`isWatersoluble`,`isRevisedWO` , woType `woType` , ecoReqID `ecoReqID`              \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                \n" +
                "	SET	insertedWOID = LAST_INSERT_ID();                \n" +
                "  \n" +
                "    # copy workorder_certification                \n" +
                "  \n" +
                "	INSERT INTO workorder_certification                \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,UTC_DATE() `createdAt`,userID `createdBy`,`classIDs`, `isDeleted` FROM workorder_certification wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy workorder_operation                \n" +
                "  \n" +
                "    INSERT INTO workorder_operation                \n" +
                "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,`colorcode`)                \n" +
                "	SELECT insertedWOID `woID`,`opID`,UTC_DATE() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                \n" +
                "    'A' opVersion, `colorCode`                \n" +
                "	 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                \n" +
                "  \n" +
                "	# copy workorder_cluster                \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster                \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)                \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, UTC_DATE() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy workorder_operation_cluster                \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                \n" +
                "	SELECT                 \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID                 \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID                 \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,                 \n" +
                "	woc.opID, woc.displayOrder, UTC_DATE() `createdAt`, userID `createdBy`,                \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`                \n" +
                "	FROM workorder_operation_cluster woc                \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)                \n" +
                "	AND woc.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy workorder_operation_part                \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part                \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,UTC_DATE() `createdAt`,userID `createdBy`,                \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	                \n" +
                "	, `isDeleted` FROM workorder_operation_part wop WHERE wop.woID = woID AND wop.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy workorder_operation_equipment                \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment                \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)                \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,UTC_DATE() `createdAt`,userID `createdBy`,                \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`                \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy workorder_operation_employee                \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee                \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,UTC_DATE() `createdAt`,userID `createdBy`,                \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`                 \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;                \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields               \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,UTC_DATE() `createdAt`,                \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`             \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID                \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)                \n" +
                "	AND dt.deletedAt IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form	            \n" +
                "  \n" +
                "	block1:BEGIN                 \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)            \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR             \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`            \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL            \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                \n" +
                "						AND entityID = (SELECT entityID FROM entity en             \n" +
                "									WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)            \n" +
                "						AND refTransID = woID             \n" +
                "						ORDER BY refSubFormTransID ASC		            \n" +
                "					);              \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                  \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;                 \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;                  \n" +
                "	-- loop item till all records found in string match of sub-form data element            \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP              \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;              \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN            \n" +
                "			LEAVE wo_sub_Form_loop;                \n" +
                "		 END IF;                    \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */	            \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)            \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);            \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	            \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */            \n" +
                "		UPDATE dataelement_transactionvalues            \n" +
                "		SET refSubFormTransID = insertedSubFormTransID            \n" +
                "		WHERE deletedAt IS NULL            \n" +
                "		AND refTransID = insertedWOID            \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;            \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;            \n" +
                "		SET lv_parentDataElementID_from = NULL;            \n" +
                "		SET lv_rowNumber_from = NULL;            \n" +
                "		SET insertedSubFormTransID = NULL;            \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;	            \n" +
                "	CLOSE subform_wo_from_data_cursor;	            \n" +
                "  \n" +
                "	END  block1;   				              \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement                \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`                \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,                \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement                \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`                \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,                \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;               \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields               \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                \n" +
                "	SELECT `dataElementID`,`value`,            \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo              \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom                 \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )            \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,            \n" +
                "	`entityID`,UTC_DATE() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`             \n" +
                "	FROM dataelement_transactionvalues dt             \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL            \n" +
                "					AND wop.woID = woID )            \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)                \n" +
                "	AND dt.deletedAt IS NULL;             \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form	            \n" +
                "  \n" +
                "	block2:BEGIN                 \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)            \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR             \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`            \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL            \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                \n" +
                "					AND entityID = (SELECT entityID FROM entity en             \n" +
                "						WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)            \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation             \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )             \n" +
                "					ORDER BY refSubFormTransID ASC		    	            \n" +
                "			);             \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                  \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;                 \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;                  \n" +
                "	-- loop item till all records found in string match of sub-form data element            \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP              \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;              \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN            \n" +
                "			LEAVE woop_sub_Form_loop;                    \n" +
                "		 END IF;                    \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */	            \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)            \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);            \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	            \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */            \n" +
                "		SET @SQl1 = CONCAT('            \n" +
                "				UPDATE dataelement_transactionvalues            \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,            \n" +
                "				' WHERE deletedAt IS NULL            \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation            \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )            \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';		            \n" +
                "			');		                                                \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                \n" +
                "		EXECUTE stmt1;     		            \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;            \n" +
                "		SET lv_parentDataElementID_from = NULL;            \n" +
                "		SET lv_rowNumber_from = NULL;            \n" +
                "		SET insertedSubFormTransID = NULL;            \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;	            \n" +
                "	CLOSE subform_woop_from_data_cursor;	            \n" +
                "  \n" +
                "	END  block2;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp                \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery                \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`                \n" +
                "    (`woID`,`partNumber`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)                \n" +
                "	SELECT                 \n" +
                "    insertedWOID `woID`,`partNumber`,`woMultiplier`,`displayOrder`,userID `createdBy`,UTC_DATE() `createdAt`,`programName`,                \n" +
                "    (SELECT woOPID FROM                 \n" +
                "    workorder_operation wop                 \n" +
                "	WHERE wop.opID IN (                \n" +
                "		SELECT opID FROM workorder_operation wo                 \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID                \n" +
                "		)                \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID                \n" +
                "	FROM workorder_preprogcomp wp                 \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator                \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`                \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)                \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,                \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.partNumber =                 \n" +
                "	(SELECT swp.partNumber FROM workorder_preprogcomp swp WHERE swp.woID = woID AND                \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,                \n" +
                "	userID `createdBy`,UTC_DATE() `createdAt`                \n" +
                "	FROM workorder_preprogcomp_designator wpd                 \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;                \n" +
                "  \n" +
                "    IF IFNULL(isRevision,0) = 0 THEN                \n" +
                "	    # copy generic_folder                \n" +
                "	    INSERT INTO generic_folder                \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`)                \n" +
                "			SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,                \n" +
                "			0 isDeleted, UTC_DATE() createdAt, userID createdBy, a.gencFolderID copyGencFolderID                \n" +
                "			FROM generic_folder a WHERE a.refTransID = woID AND a.gencFileOwnerType = 'workorder'  AND a.deletedAt IS NULL;                \n" +
                "		UPDATE generic_folder gf1,                \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID                \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                \n" +
                "			) gf2                \n" +
                "			SET gf1.refParentId = gf2.gencFolderID                \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                \n" +
                "    END IF;                \n" +
                "	COMMIT;                \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;                \n" +
                "END IF;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),	            \n" +
                "    IN pWhereClause VARCHAR(16383)                \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "	/* DECLARE SQLStatement varchar(255); */            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "		SELECT wo.*, am.assemblyID, am.assemblyNickName,              \n" +
                "        (SELECT SUM(ws.poQty) FROM workorder_salesorder_details ws WHERE wo.woID = ws.woID AND IFNULL(ws.isDeleted,0) = 0 AND ws.deletedAt IS NULL) soPOQty ,            \n" +
                "        fun_getWoStatusNameByID(`wo`.`woStatus`) AS `woStatusConvertedValue` ,            \n" +
                "	`ro`.`name` AS `isLeadFreeConvertedValue` ,            \n" +
                "	(CASE WHEN (`wo`.`isSampleAvailable` = 0) THEN 'No'             \n" +
                "					WHEN (`wo`.`isSampleAvailable` = 1) THEN 'Yes' ELSE '' END) AS `isSampleAvailableConvertedValue` ,            \n" +
                "	(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'             \n" +
                "					WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,            \n" +
                "	fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,    \n" +
                "	(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'          \n" +
                "		ELSE 'No' END) AS `isHalt`,          \n" +
                "	(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN           \n" +
                "		(SELECT CONCAT(whu.reason, ' - Halt by ',           \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),           \n" +
                "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))           \n" +
                "			FROM workorder_trans_hold_unhold whu           \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0           \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL          \n" +
                "			ORDER BY whu.startDate DESC LIMIT 1)           \n" +
                "		ELSE            \n" +
                "		(SELECT CONCAT(whu.resumeReason, ' - Resume by ',           \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),           \n" +
                "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))          \n" +
                "			FROM workorder_trans_hold_unhold whu           \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0           \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL          \n" +
                "			ORDER BY whu.endDate DESC LIMIT 1)           \n" +
                "		END) AS reasonDetails,          \n" +
                "	(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0           \n" +
                "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount          \n" +
                "	FROM workorder wo            \n" +
                "        JOIN assemblymst am ON wo.assyID = am.id AND IFNULL(am.isdeleted,0) = 0        \n" +
                "        LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                    \n" +
                "		WHERE IFNULL(wo.isdeleted,0) = 0;                 \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyNickName DESC\") ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;             \n" +
                "  \n" +
                "	/* to get total count of rows of workorder table */            \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM workorder where deletedAt IS NULL \" );            \n" +
                "	PREPARE query3 FROM @SQLStatement3;            \n" +
                "	EXECUTE query3;            \n" +
                "	DEALLOCATE PREPARE query3;            \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippedAssembly`;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedAssembly`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT ow.*, am.assemblyID as assyID,cu.companyName,wo.woNumber,woop.opName,spm.description,som.salesOrderNumber  \n" +
                "		FROM shippedassembly ow  \n" +
                "	LEFT JOIN customers cu ON cu.id=ow.customerID AND IFNULL(cu.isdeleted,0)=0	  \n" +
                "        LEFT JOIN assemblymst am ON ow.assemblyID = am.id AND IFNULL(am.isdeleted,0) = 0  \n" +
                "        LEFT JOIN workorder wo ON ow.workorderID = wo.woID AND IFNULL(wo.isdeleted,0) = 0  \n" +
                "        LEFT JOIN workorder_operation woop ON ow.woOPID=woop.woOPID AND IFNULL(woop.isdeleted,0) = 0  \n" +
                "        LEFT JOIN salesshippingmst spm ON spm.shippingID=ow.shippingId AND IFNULL(spm.isdeleted,0) = 0  \n" +
                "        LEFT JOIN salesorderdet sdet ON sdet.id=spm.sDetID AND IFNULL(sdet.isdeleted,0) = 0  \n" +
                "        LEFT JOIN salesordermst som ON som.id=sdet.refSalesOrderID AND IFNULL(som.isdeleted,0) = 0  \n" +
                "        WHERE IFNULL(ow.isdeleted,0) = 0;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyName DESC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyStock`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyStock`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "  select s.id,  \n" +
                "s.openingdate,s.openingStock,s.assemblyID,a.assemblyName,a.assemblyRev, a.assemblyID as assyID   \n" +
                "from assemblystock s   \n" +
                "inner join assemblymst a on a.id = s.assemblyID   \n" +
                "where IFNULL(s.isdeleted,0) = 0 ;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assemblyName DESC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (97,'2.00','V1','Assy.ID Changes in SP in project  - shirish'," + userid + ");"
            );
            break;
        case 97:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (21,'DUPLICATEMPNINSAMELINE','#d04000','Duplicate <% MFG %> <% MFGPN %> in same line.','','1','2019-01-01',NULL,NULL,NULL,NULL,NULL,'Duplicate MPN');  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies ADD `AssyID` INT(11);  \n" +
                "ALTER TABLE rfq_assemblies   \n" +
                "ADD CONSTRAINT FK_rfq_assemblies_AssyID   \n" +
                "FOREIGN KEY (AssyID) REFERENCES assemblymst(id);  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Mismatch: QTY= <% QPA %>, REF DESIG= <% REF DES Count %>, please clarify which one is true.' WHERE id = 1;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Another MFG <% MFG %>  is found for MFG PN <% MFG PN %>.' WHERE id = 2;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'MFG PN <% MFG PN %> does not exist for MFG <% MFG %>.' WHERE id = 3;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'DISTY PN <% Distributor PN %> does not exist for DISTY <% Distributor %>.' WHERE id = 4;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Mismatch: MFG <% MFG %> MFG PN <% MFG PN %> mismatched with DISTY <% Distributor %> DISTY PN <% Distributor PN %>, please advise.' WHERE id = 5;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'DISTY <% Distributor %> DISTY PN <% Distributor PN %> returned MFG <% MFG %> MFG PN <% MFG PN %> which is not in BOM, please approve to add MFG <% MFG %> MFG PN <% MFG PN %>  .' WHERE id = 6;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Bad MFG PN: MFG <% MFG %>, MFG PN <% MFG PN %>. Please advise.' WHERE id = 7;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = '<% MFG %> <% MFG PN %> is obsolete.' WHERE id = 8;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'MFG <% MFG %> MFG PN <% MFG PN %> is invalid, Please suggest valid part#.' WHERE id = 9;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Invalid <% Distributor %>.' WHERE id = 10;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Invalid DISTY or DISTY PN <% Distributor PN %>, Please suggest valid DISTY & PN.' WHERE id = 11;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Pending Customer approval.' WHERE id = 12;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Bad DISTY part# :  <% Distributor %> <% Distributor PN %>. Please advise.' WHERE id = 13;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Duplicate line found: Line(s) <% Merged Item %> merged with line <% Item %>.' WHERE id = 14;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'MFG <% MFG %> MFG PN <% MFG PN %> is Non-RoHS.' WHERE id = 15;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'MFG <% MFG %> MFG PN <% MFG PN %> is Epoxy Mounting part (not Solder Mounting). Part must be replaced with Solder Mounting part or suggest & add appropriate Epoxy part# in BOM. Please advise' WHERE id = 16;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'REF DES <% Duplicate REF DES %> duplicated in lines <% Duplicate LineID %>, please advise.' WHERE id = 17;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'REF DES \<% Invalid REF DES %>\\\" seems odd' WHERE id = 18;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = '<% MFG %> <% MFG PN %> is non-RoHS.' WHERE id = 19;  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Mismatch: REF DES Lead count = <% Lead %>, Part# Lead =<% Part Lead %>,  MFG <% MFG %> MFG PN <% MFG PN %> is incorrect, please advise.' WHERE id = 20;  \n" +
                "  \n" +
                "  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `aggregate`, `dataType`, `isActive`, `createdBy`, `createdAt`, `isStaticField`)  \n" +
                "           VALUES ((SELECT chartRawDataCatID FROM chart_rawdata_category WHERE `dbViewName`='vu_BOM_report'),'Assy ID','Assy ID',NULL,'varchar',1,1,UTC_TIMESTAMP(),1);  \n" +
                /* **************************** Add Script Version -> 10-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                      \n" +
                "	IN ppageIndex INT(11),                      \n" +
                "	IN precordPerPage INT(11),                      \n" +
                "	IN pOrderBy VARCHAR(255),	                      \n" +
                "    IN pWhereClause VARCHAR(16383)                          \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "	/* DECLARE SQLStatement varchar(255); */                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "  \n" +
                "    SELECT COUNT(rl.id) AS lineItemCount, rf.id,               \n" +
                "    (SELECT asb.id FROM rfq_assy_bom asb WHERE IFNULL(asb.isdeleted,0) = 0 AND asb.reqAssyID = ra.id  GROUP BY rf.id) AS assyBomID,                     \n" +
                "	assy.assemblyID, assy.assemblyNickName, assy.assemblyCode, assy.assemblyDescription, assy.assemblyName AS assemblyNumber, assy.assemblyRev,            \n" +
                "	(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,           \n" +
                "	ro.name AS `rohsComplientConvertedValue`,    \n" +
                "    -- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'                         \n" +
                "	-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,                \n" +
                "	(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'No'                         \n" +
                "	WHEN (`ra`.`isRepeat` = 1) THEN 'Yes' ELSE '' END) AS `isRepeat`,                \n" +
                "	job.name AS JobType, rt.name AS OrderType, cu.companyName AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,                      \n" +
                "	rf.quoteindate, rf.quoteduedate, ra.id rfqAssyID, ra.quotePriority                  \n" +
                "    FROM rfqforms rf                      \n" +
                "	INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0                      \n" +
                "	INNER JOIN jobtype job ON job.id = rf.jobtypeID AND IFNULL(job.isdeleted,0) = 0                      \n" +
                "	INNER JOIN rfqtype rt ON rt.id = rf.rfqtypeID AND IFNULL(rt.isdeleted,0) = 0                      \n" +
                "	INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0                      \n" +
                "	INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0     \n" +
                "	INNER JOIN rfq_rohsmst ro ON ra.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "	JOIN rfq_assy_bom ab ON ab.reqAssyID = ra.id AND IFNULL(ab.isdeleted,0) = 0 AND ab.bomNumber IS NULL                  \n" +
                "    LEFT OUTER JOIN rfq_lineitems rl ON rl.rfqAssyID = ra.id AND rl.isDeleted = 0                   \n" +
                "    LEFT JOIN assemblymst assy ON assy.id = ra.AssyID AND IFNULL(assy.isdeleted,0) = 0                        \n" +
                "	WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id ;                      \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "	ELSE                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "	ELSE	                      \n" +
                "		SET rowNumWhere = '';                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;           \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                      \n" +
                "	PREPARE query3 FROM @SQLStatement3;                      \n" +
                "	EXECUTE query3;                      \n" +
                "	DEALLOCATE PREPARE query3;           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-01-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_bom_report` ;  \n" +
                "CREATE VIEW `vu_bom_report` AS   \n" +
                "SELECT  \n" +
                "  (SELECT  \n" +
                "     `customers`.`companyName`  \n" +
                "   FROM `customers`  \n" +
                "   WHERE (`customers`.`id` = (SELECT  \n" +
                "                                `rfqforms`.`customerId`  \n" +
                "                              FROM `rfqforms`  \n" +
                "                              WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)))) AS `CustomerName`,  \n" +
                "  `ra`.`rfqrefID`              AS `QuoteNumber`,  \n" +
                "  (SELECT  \n" +
                "     `rfqforms`.`quoteindate`  \n" +
                "   FROM `rfqforms`  \n" +
                "   WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)) AS `RFQDate`,  \n" +
                "  `assy`.`assemblyID`          AS `Assy ID`,  \n" +
                "  `assy`.`assemblyName`        AS `assemblyNumber`,  \n" +
                "  `assy`.`assemblyDescription` AS `assemblyDescription`,  \n" +
                "  `assy`.`assemblyRev`         AS `assemblyRev`,  \n" +
                "  `ra`.`bomFCAVersion`         AS `Version`,  \n" +
                "  `rl`.`lineID`                AS `lineID`,  \n" +
                "  `rl`.`qpa`                   AS `qpa`,  \n" +
                "  `rl`.`refDesig`              AS `refDesig`,  \n" +
                "  `rl`.`custPN`                AS `custPN`,  \n" +
                "  `rl`.`customerRev`           AS `customerRev`,  \n" +
                "  `rl`.`customerDescription`   AS `customerDescription`,  \n" +
                "  `rl`.`level`                 AS `level`,  \n" +
                "  `rl`.`partclassID`           AS `partclassID`,  \n" +
                "  `rl`.`refRFQLineItemID`      AS `ParentLine`,  \n" +
                "  `rl`.`numOfPosition`         AS `Lead`,  \n" +
                "  `rl`.`uomID`                 AS `uomID`,  \n" +
                "  `rl`.`dnpDesig`              AS `DNPREFDES`,  \n" +
                "  `rl`.`dnpQty`                AS `DNPQTY`,  \n" +
                "  `rl`.`isBuyDNPQty`           AS `BUYDNPQTY`,  \n" +
                "  `rl`.`isPurchase`            AS `IsBuy`,  \n" +
                "  `rl`.`isInstall`             AS `Populate`,  \n" +
                "  `rl`.`customerPartDesc`      AS `customerPartDesc`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`mfgPNDescription`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `InternalDescr`,  \n" +
                "  `rla`.`mfgCode`              AS `MFG`,  \n" +
                "  `rla`.`mfgPN`                AS `MFGPN`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`RoHSStatusID`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `RoHS`,  \n" +
                "  `rla`.`distributor`          AS `Distributor`,  \n" +
                "  `rla`.`distPN`               AS `DistributorPN`,  \n" +
                "  `rla`.`description`          AS `FlextronComment`,  \n" +
                "  (SELECT  \n" +
                "     `rfq_lineitems_approval_comment`.`comment`  \n" +
                "   FROM `rfq_lineitems_approval_comment`  \n" +
                "   WHERE (`rfq_lineitems_approval_comment`.`rfqLineItemsAlternatePartID` = `rla`.`id`)  \n" +
                "   ORDER BY `rfq_lineitems_approval_comment`.`approvalDate` DESC  \n" +
                "   LIMIT 0,1) AS `Approvalcomment`  \n" +
                "FROM (((`rfq_assemblies` `ra`  \n" +
                "     JOIN `rfq_lineitems` `rl`  \n" +
                "       ON ((`ra`.`id` = `rl`.`rfqAssyID`)))  \n" +
                "    JOIN `rfq_lineitems_alternatepart` `rla`  \n" +
                "      ON ((`rla`.`rfqLineItemsID` = `rl`.`id`)))  \n" +
                "   LEFT JOIN `assemblymst` `assy`  \n" +
                "     ON ((`assy`.`id` = `ra`.`AssyID`)))  \n" +
                "WHERE ((`rl`.`isDeleted` = 0)  \n" +
                "       AND (`rla`.`isDeleted` = 0));  \n" +
                /* **************************** Add Script Version -> 10-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (98,'2.00','V1',' RFQ and BOM Details Changes for AssemblyId - Jignesh '," + userid + ");"
            );
            break;
        case 98:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2019  *********************************** */
                /* **************************** MSL database  *********************************** */
                "DROP TABLE IF EXISTS `component_mslmst`;  \n" +
                "CREATE TABLE `component_mslmst` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `levelRating` varchar(5) NOT NULL,  \n" +
                "  `time` varchar(50) DEFAULT NULL,  \n" +
                "  `conditions` varchar(50) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;  \n" +
                "insert  into `component_mslmst`(`id`,`levelRating`,`time`,`conditions`) values (1,'1','Unlimited','30°C/85%RH'),(2,'2','1 Year','30°C/60%RH'),(3,'2a','4 Weeks','30°C/60%RH'),(4,'3','168 Hours','30°C/60%RH'),(5,'4','72 Hours','30°C/60%RH'),(6,'5','48 Hours','30°C/60%RH'),(7,'5a','24 Hours','30°C/60%RH'),(8,'6','TOL','30°C/60%RH');  \n" +
                /* **************************** Cost Category database  *********************************** */
                "ALTER TABLE cost_category  \n" +
                "CHANGE COLUMN category categoryName VARCHAR(100);  \n" +
                "  \n" +
                "ALTER TABLE cost_category ADD description VARCHAR(255);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCostCategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCostCategory`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "		 SELECT cc.id, cc.categoryName,cc.description, cc.from, cc.to, cc.isDeleted, cc.createdBy, cc.updatedBy,cc.deletedBy, cc.createdAt, cc.updatedAt,cc.deletedAt    \n" +
                "		FROM `cost_category` AS cc         \n" +
                "		WHERE cc.`deletedAt` IS NULL        \n" +
                "		;        \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"categoryName ASC\") ;        \n" +
                "		ELSE        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "			SET pWhereClause = '1=1' ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "		ELSE	        \n" +
                "			SET rowNumWhere = '';        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* to get total count of rows */        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Component Master*********************************** */
                "ALTER TABLE component DROP COLUMN PID;  \n" +
                "ALTER TABLE component DROP COLUMN minQty;  \n" +
                "ALTER TABLE component DROP COLUMN maxQty;  \n" +
                "ALTER TABLE component DROP COLUMN stdLeadTimeFrom;  \n" +
                "ALTER TABLE component DROP COLUMN stdLeadTimeTo;  \n" +
                "ALTER TABLE component DROP COLUMN nonStdLeadTimeFrom;  \n" +
                "ALTER TABLE component DROP COLUMN nonStdLeadTimeTo;  \n" +

                "ALTER TABLE component ADD costCategoryID INT;  \n" +
                "ALTER TABLE component  \n" +
                "ADD CONSTRAINT FK_component_costCategoryID  \n" +
                "FOREIGN KEY (costCategoryID) REFERENCES cost_category(id);  \n" +
                "ALTER TABLE component ADD maxQtyonHand INT;  \n" +
                "ALTER TABLE component ADD noOfRows INT;  \n" +
                "ALTER TABLE component ADD bookValue DECIMAL(10,5);  \n" +
                "ALTER TABLE component ADD voltage VARCHAR(50);  \n" +
                "ALTER TABLE component  \n" +
                "CHANGE COLUMN partValues `value` VARCHAR(50);  \n" +
                "ALTER TABLE component ADD operatingTemp VARCHAR(50);  \n" +
                "ALTER TABLE component ADD powerRating VARCHAR(50);  \n" +
                "ALTER TABLE component ADD pitch VARCHAR(50);  \n" +
                "ALTER TABLE component ADD pitchMating VARCHAR(50);  \n" +
                "ALTER TABLE component ADD scrapRatePercentagePerBuild DECIMAL(10,2);  \n" +
                "ALTER TABLE component ADD plannedOverRunPercentagePerBuild DECIMAL(10,2);  \n" +
                "ALTER TABLE component  \n" +
                "CHANGE COLUMN isCustomCPN isCustom TINYINT(4);  \n" +
                "ALTER TABLE component  \n" +
                "CHANGE COLUMN componentRev rev VARCHAR(50);  \n" +
                "ALTER TABLE component ADD nickName VARCHAR(50);  \n" +
                "ALTER TABLE component  \n" +
                "CHANGE COLUMN msl mslID INT;  \n" +
                "ALTER TABLE component ADD bomLock TINYINT(4);  \n" +
                "ALTER TABLE component ADD restrictUse TINYINT(4);  \n" +
                "ALTER TABLE component ADD sizeDimension VARCHAR(50);  \n" +
                "ALTER TABLE component  \n" +
                "ADD CONSTRAINT FK_component_mslID  \n" +
                "FOREIGN KEY (mslID) REFERENCES component_mslmst(id);  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(              \n" +
                " IN tabquery LONGTEXT              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "   SET @sqlQ=tabquery;              \n" +
                "   PREPARE stmt1 FROM @sqlQ;               \n" +
                "   EXECUTE stmt1;                \n" +
                "   DEALLOCATE PREPARE stmt1;               \n" +
                "  \n" +
                "  SELECT '1';              \n" +
                "  \n" +
                "    block1:BEGIN              \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;              \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                \n" +
                "	DECLARE  current_mfgcode INT ;              \n" +
                "	DECLARE current_Ismfg TINYINT;                \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                \n" +
                "        DECLARE current_component INT ;              \n" +
                "        DECLARE current_ComponentID INT;              \n" +
                "	DECLARE maxvalueid INT;              \n" +
                "        DECLARE aliasgroup INT;              \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                \n" +
                "    DECLARE component_cursor CURSOR FOR                \n" +
                "    SELECT id FROM tempComponent ORDER BY id;              \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                \n" +
                "     -- open the cursor                \n" +
                "    OPEN component_cursor;              \n" +
                "     -- start looping                \n" +
                "     component_loop: LOOP                  \n" +
                "     -- read the name from next row into the variables                 \n" +
                "     FETCH component_cursor INTO current_ComponentID;                \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                 \n" +
                "     -- close the cursor and exit the loop if it has.                \n" +
                "       IF exit_loop THEN	               \n" +
                "				 LEAVE component_loop;                \n" +
                "			END IF;                \n" +
                "        SELECT '1';              \n" +
                "  \n" +
                "	SET current_mfgpn='';              \n" +
                "	SET current_mfgcode=1;              \n" +
                "	SET current_mfgPartNumber='';              \n" +
                "	SET current_Ismfg=1;              \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;              \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN              \n" +
                "	 -- insert new component               \n" +
                "	INSERT INTO component (categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,              \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,              \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,              \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID,connectorTypeText)              \n" +
                "	SELECT categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,              \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,              \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,              \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID,connectorTypeText              \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;              \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;              \n" +
                "	 -- check component is manufacturer part or distributor part              \n" +
                "                   IF(current_Ismfg=1) THEN              \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;              \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)              \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');              \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;              \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;              \n" +
                "                    ELSE    \n" +
                "  \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;              \n" +
                "			IF(aliasgroup IS NOT NULL) THEN              \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)              \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');              \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;              \n" +
                "		        END IF;              \n" +
                "		    END IF;              \n" +
                "      END IF;              \n" +
                "  \n" +
                "    END LOOP component_loop;              \n" +
                "      CLOSE component_cursor;              \n" +
                "    END  block1;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (99,'2.00','V1','Component/CostCategory/Msl Db structure change-Champak'," + userid + ");"
            );
            break;
        case 99:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2019  *********************************** */
                "ALTER TABLE component ADD plannedValuePerBuild INT;  \n" +
                "ALTER TABLE component ADD scrapValuePerBuild INT;  \n" +
                "ALTER TABLE component  \n" +
                "CHANGE COLUMN restrictUse restrictUSEwithpermission TINYINT(4);  \n" +
                "ALTER TABLE component ADD restrictUsePermanently TINYINT(4);  \n" +
                "ALTER TABLE component ADD rfqOnly TINYINT(4);  \n" +
                /* **************************** Add Script Version -> 12-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (100,'2.00','V1','Alter component master table -Champak'," + userid + ");"
            );
            break;
        case 100:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(              \n" +
                " IN tabquery LONGTEXT              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "   SET @sqlQ=tabquery;              \n" +
                "   PREPARE stmt1 FROM @sqlQ;               \n" +
                "   EXECUTE stmt1;                \n" +
                "   DEALLOCATE PREPARE stmt1;               \n" +
                "  \n" +
                "  SELECT '1';              \n" +
                "  \n" +
                "    block1:BEGIN              \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;              \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                \n" +
                "	DECLARE  current_mfgcode INT ;              \n" +
                "	DECLARE current_Ismfg TINYINT;                \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                \n" +
                "        DECLARE current_component INT ;              \n" +
                "        DECLARE current_ComponentID INT;              \n" +
                "	DECLARE maxvalueid INT;              \n" +
                "        DECLARE aliasgroup INT;              \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                \n" +
                "    DECLARE component_cursor CURSOR FOR                \n" +
                "    SELECT id FROM tempComponent ORDER BY id;              \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                \n" +
                "     -- open the cursor                \n" +
                "    OPEN component_cursor;              \n" +
                "     -- start looping                \n" +
                "     component_loop: LOOP                  \n" +
                "     -- read the name from next row into the variables                 \n" +
                "     FETCH component_cursor INTO current_ComponentID;                \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                 \n" +
                "     -- close the cursor and exit the loop if it has.                \n" +
                "       IF exit_loop THEN	               \n" +
                "				 LEAVE component_loop;                \n" +
                "			END IF;                \n" +
                "        SELECT '1';              \n" +
                "  \n" +
                "	SET current_mfgpn='';              \n" +
                "	SET current_mfgcode=1;              \n" +
                "	SET current_mfgPartNumber='';              \n" +
                "	SET current_Ismfg=1;              \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;              \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN              \n" +
                "	 -- insert new component               \n" +
                "	INSERT INTO component (categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,              \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,              \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,              \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID,connectorTypeText,  \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID)              \n" +
                "	SELECT categoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,              \n" +
                "	isGoodPart, isLeadFree,leadTime,lengthText,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,              \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,              \n" +
                "	partStatusText,partTypeID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,widthText,uom,category,partStatus,connecterTypeID,connectorTypeText,  \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID              \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;              \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;              \n" +
                "	 -- check component is manufacturer part or distributor part              \n" +
                "                   IF(current_Ismfg=1) THEN              \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;              \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)              \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');              \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;              \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;              \n" +
                "                    ELSE    \n" +
                "  \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;              \n" +
                "			IF(aliasgroup IS NOT NULL) THEN              \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)              \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');              \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;              \n" +
                "		        END IF;              \n" +
                "		    END IF;              \n" +
                "      END IF;              \n" +
                "  \n" +
                "    END LOOP component_loop;              \n" +
                "      CLOSE component_cursor;              \n" +
                "    END  block1;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (101,'2.00','V1','Alter sp Sproc_saveVerifiedComponentFromApi-champak'," + userid + ");"
            );
            break;
        case 101:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-01-2019  *********************************** */
                /* **************************** Part Type master changes  *********************************** */
                "ALTER TABLE rfq_parttypemst  \n" +
                "  DROP FOREIGN KEY FK_rfq_parttypemst_rfq_partcategorymst;  \n" +
                "ALTER TABLE rfq_parttypemst DROP COLUMN partClassID;  \n" +
                "  \n" +
                "ALTER TABLE rfq_parttypemst  \n" +
                "  DROP FOREIGN KEY FK_rfq_parttypemst_category;  \n" +
                "ALTER TABLE rfq_parttypemst DROP COLUMN category;  \n" +
                "  \n" +
                "ALTER TABLE rfq_parttypemst DROP COLUMN leadQty;  \n" +
                "ALTER TABLE rfq_parttypemst DROP COLUMN overagePercentage;  \n" +
                /* **************************** Part Type master sp changes  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePartTypeList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePartTypeList`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "			SELECT pt.*,        \n" +
                "			(CASE WHEN (pt.isActive = 0) THEN 'Inactive'         \n" +
                "					WHEN (pt.isActive = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`,   \n" +
                "                    (SELECT  GROUP_CONCAT(alias) AS aliaslist FROM component_fields_genericalias_mst WHERE IFNULL(isdeleted,0) = 0 AND  refTableName ='rfq_parttypemst' AND refId = pt.id GROUP BY refId ) AS aliaslist    \n" +
                "			FROM rfq_parttypemst pt   \n" +
                "			WHERE pt.deletedAt IS NULL  ;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"partTypeName ASC\") ;        \n" +
                "		ELSE        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "			SET pWhereClause = '1=1' ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "		ELSE	        \n" +
                "			SET rowNumWhere = '';        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* to get total count of rows */        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (102,'2.00','V1','Changes for part type -champak'," + userid + ");"
            );
            break;
        case 102:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),	        \n" +
                "        IN pWhereClause VARCHAR(16383)            \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "               SELECT css.id,css.scanlabel,css.scanmfgcode,css.pkgQty,css.price,css.uid,        \n" +
                "			css.printStatus,cc.category,css.lotCode,css.dateCode,        \n" +
                "			c.mfgcodeID,c.mfgPN,c.PIDCode,c.pid,c.packaginggroupID,0 AS dedicatedQty,0 AS reservedQty,        \n" +
                "			mfg.id AS mfgID,mfg.mfgCode, ro.rohsIcon,ro.name AS rohsName,IFNULL(c.packageQty,1) packageQty,(SELECT csl.location FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isActive=1 AND csl.isdeleted=0 LIMIT 1) location,    \n" +
                "			(SELECT csl.qty FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isdeleted=0 AND csl.isActive=1 LIMIT 1) Qty ,c.mfgPNDescription         \n" +
                "               FROM component_sid_stock css        \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0       \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0        \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0     \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.priceCategoryID AND  IFNULL(cc.isdeleted,0)=0      \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (103,'2.00','V1','Change in Receiving Material sp-champak'," + userid + ");"
            );
            break;
        case 103:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(          \n" +
                "IN pGoodPart VARCHAR(100),          \n" +
                "IN pSearch VARCHAR(100),          \n" +
                "IN pId INT(11),          \n" +
                "IN pMfgType VARCHAR(50),          \n" +
                "IN pRoHSStatusID VARCHAR(100),          \n" +
                "IN pMfgCodeId INT(11),      \n" +
                "IN pMountingType VARCHAR(50)          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "IF(pMountingType IS NOT NULL) THEN      \n" +
                " SELECT * FROM          \n" +
                " (        \n" +
                "	 SELECT `com`.`id`,           \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,        \n" +
                "		`com`.`mfgPN` orgMfgPN,   \n" +
                "		`com`.`packaginggroupID`,      \n" +
                "		`com`.`isGoodPart`,         \n" +
                "		`com`.`RoHSStatusID`,         \n" +
                "		`com`.`rohsgroupID`,          \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,         \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`          \n" +
                "	FROM `component` AS `com`         \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND           \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))        \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType      \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))          \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))          \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a          \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))        \n" +
                ");          \n" +
                "  \n" +
                "  ELSE      \n" +
                "   SELECT * FROM          \n" +
                " (        \n" +
                "	 SELECT `com`.`id`,           \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,        \n" +
                "		`com`.`mfgPN` orgMfgPN,   \n" +
                "		`com`.`packaginggroupID`,     \n" +
                "		`com`.`isGoodPart`,         \n" +
                "		`com`.`RoHSStatusID`,         \n" +
                "		`com`.`rohsgroupID`,          \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,         \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`          \n" +
                "	FROM `component` AS `com`         \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND           \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))           \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))          \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))          \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a          \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))        \n" +
                ");       \n" +
                "END IF;      \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),	          \n" +
                "        IN pWhereClause VARCHAR(16383)              \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "               SELECT css.id,css.scanlabel,css.scanmfgcode,css.pkgQty,css.price,css.uid,          \n" +
                "			css.printStatus,cc.categoryName,css.lotCode,css.dateCode,          \n" +
                "			c.mfgcodeID,c.mfgPN,c.PIDCode,c.packaginggroupID,0 AS dedicatedQty,0 AS reservedQty,          \n" +
                "			mfg.id AS mfgID,mfg.mfgCode, ro.rohsIcon,ro.name AS rohsName,IFNULL(c.packageQty,1) packageQty,(SELECT csl.location FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isActive=1 AND csl.isdeleted=0 LIMIT 1) location,      \n" +
                "			(SELECT csl.qty FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isdeleted=0 AND csl.isActive=1 LIMIT 1) Qty ,c.mfgPNDescription           \n" +
                "               FROM component_sid_stock css          \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0         \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0          \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0       \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.priceCategoryID AND  IFNULL(cc.isdeleted,0)=0        \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                    \n" +
                "	IN prfqAssyID INT            \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                        \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                            \n" +
                "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,                         \n" +
                "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                        \n" +
                "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription, a.customerPartDesc,                         \n" +
                "			CONCAT(part.partTypeName) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,              \n" +
                "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,a.qpaDesignatorColorPriority, a.mergeLines, a.lineMergeStep, a.isBuyDNPQty              \n" +
                "            FROM rfq_lineitems a              \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0              \n" +
                "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0   \n" +
                "    WHERE IFNULL(a.isDeleted,0) = 0 AND a.rfqAssyID = prfqAssyID;                        \n" +
                "  \n" +
                "	SELECT b.id, b.lineID, b.qpa, b.refDesig,                     \n" +
                "			(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                    \n" +
                "            a.mfgCodeID, a.mfgPN, a.mfgPNID,                        \n" +
                "			(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                    \n" +
                "            a.distMfgCodeID, a.distPN, a.distMfgPNID,                         \n" +
                "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription, b.customerPartDesc,                  \n" +
                "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,                         \n" +
                "            b.dnpQty, b.dnpDesig, a.id AS rfqAlternatePartID, b.qpaDesignatorStep,b.qpaDesignatorColorPriority, b.isBuyDNPQty,              \n" +
                "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,                      \n" +
                "            a.org_distributor, a.org_distPN,                      \n" +
                "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.mfgGoodPartMappingStep, a.mfgPNStep, a.distPNStep,                    \n" +
                "            a.badMfgPN, a.distGoodPartMappingStep, a.nonRohsStep, a.oneRohsComponentStep, a.epoxyStep, a.invalidConnectorTypeStep,                \n" +
                "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                  \n" +
                "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                \n" +
                "            (SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,              \n" +
                "            CASE WHEN               \n" +
                "            (co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR              \n" +
                "            EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)              \n" +
                "            THEN 1 ELSE 0 END isObsolete,              \n" +
                "            co.mfgPNDescription,          \n" +
                "            (SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment          \n" +
                "            FROM rfq_lineitems_alternatepart a                          \n" +
                "			LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                           \n" +
                "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                    \n" +
                "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0                    \n" +
                "			JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                  \n" +
                "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (104,'2.00','V1','Resolve issues of Receiving material-Champak'," + userid + ");"
            );
            break;
        case 104:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-01-2019  *********************************** */
                "UPDATE page_detail SET menuName='Part Functional Category',displayMenuName='Part Functional Category' WHERE pageName='RFQ Part Type';  \n" +
                /* **************************** Add Script Version -> 16-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (105,'2.00','V1','Update part type name -champak'," + userid + ");"
            );
            break;
        case 105:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-01-2019  *********************************** */
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.uidPrefix VARCHAR(20) NULL;  \n" +
                "ALTER TABLE component_sid_stock DROP COLUMN component_sid_stock.scanmfgcode;  \n" +
                "ALTER TABLE component_sid_stock DROP COLUMN component_sid_stock.scanmfgpn;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.customerID INT(11) NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_customerID FOREIGN KEY  (`customerID`) REFERENCES customers (`id`);  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.refCPNID INT(11) NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_refCPNID FOREIGN KEY  (`refCPNID`) REFERENCES customers (`id`);  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.binID INT(11) NULL;  \n" +
                "ALTER TABLE component_sid_stock CHANGE dateCode dateCode INT(4) NULL;  \n" +
                "ALTER TABLE component_sid_stock CHANGE priceCategoryID costCategoryID INT(11);  \n" +
                "ALTER TABLE component_sid_stock CHANGE price price DECIMAL(18,6);  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.mfgDate DATETIME NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.expiryDate DATETIME NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.pcbPerArray INT(11) NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN component_sid_stock.isSharedInventory TINYINT(1) NULL;  \n" +
                /* **************************** Add Script Version -> 16-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (106,'2.00','V1','Modify component_sid_stock table structure - dharmishtha'," + userid + ");"
            );
            break;
        case 106:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-01-2019  *********************************** */

                "ALTER TABLE component DROP COLUMN lengthText;  \n" +
                "ALTER TABLE component DROP COLUMN widthText;  \n" +
                "ALTER TABLE component DROP COLUMN volume;  \n" +
                "ALTER TABLE component CHANGE partMarking deviceMarking VARCHAR(200);  \n" +
                "ALTER TABLE component CHANGE categoryText functionalCategoryText VARCHAR(255);  \n" +
                "ALTER TABLE component CHANGE partTypeID functionalCategoryID INT;  \n" +
                "ALTER TABLE component  \n" +
                "ADD CONSTRAINT FK_component_functionalCategoryID  \n" +
                "FOREIGN KEY (functionalCategoryID) REFERENCES rfq_parttypemst(id);  \n" +
                "ALTER TABLE component ADD customerID INT;  \n" +
                "ALTER TABLE component  \n" +
                "ADD CONSTRAINT FK_component_customerID  \n" +
                "FOREIGN KEY (customerID) REFERENCES customers(id);  \n" +
                "ALTER TABLE component ADD eau DECIMAL (16,4);  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                \n" +
                " IN tabquery LONGTEXT                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "   SET @sqlQ=tabquery;                \n" +
                "   PREPARE stmt1 FROM @sqlQ;                 \n" +
                "   EXECUTE stmt1;                  \n" +
                "   DEALLOCATE PREPARE stmt1;                 \n" +
                "  \n" +
                "  SELECT '1';                \n" +
                "  \n" +
                "    block1:BEGIN                \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                  \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                  \n" +
                "	DECLARE  current_mfgcode INT ;                \n" +
                "	DECLARE current_Ismfg TINYINT;                  \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                  \n" +
                "        DECLARE current_component INT ;                \n" +
                "        DECLARE current_ComponentID INT;                \n" +
                "	DECLARE maxvalueid INT;                \n" +
                "        DECLARE aliasgroup INT;                \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                  \n" +
                "    DECLARE component_cursor CURSOR FOR                  \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                  \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                  \n" +
                "     -- open the cursor                  \n" +
                "    OPEN component_cursor;                \n" +
                "     -- start looping                  \n" +
                "     component_loop: LOOP                    \n" +
                "     -- read the name from next row into the variables                   \n" +
                "     FETCH component_cursor INTO current_ComponentID;                  \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                   \n" +
                "     -- close the cursor and exit the loop if it has.                  \n" +
                "       IF exit_loop THEN	                 \n" +
                "				 LEAVE component_loop;                  \n" +
                "			END IF;                  \n" +
                "        SELECT '1';                \n" +
                "  \n" +
                "	SET current_mfgpn='';                \n" +
                "	SET current_mfgcode=1;                \n" +
                "	SET current_mfgPartNumber='';                \n" +
                "	SET current_Ismfg=1;                \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                \n" +
                "	 -- insert new component                 \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,    \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID)                \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,    \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID                \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                \n" +
                "	 -- check component is manufacturer part or distributor part                \n" +
                "                   IF(current_Ismfg=1) THEN                \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                \n" +
                "                    ELSE      \n" +
                "  \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;                \n" +
                "		        END IF;                \n" +
                "		    END IF;                \n" +
                "      END IF;                \n" +
                "  \n" +
                "    END LOOP component_loop;                \n" +
                "      CLOSE component_cursor;                \n" +
                "    END  block1;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (107,'2.00','V1','Modify component table structure - Champak'," + userid + ");"
            );
            break;
        case 107:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),	            \n" +
                "        IN pWhereClause VARCHAR(16383)                \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "               SELECT css.id,css.scanlabel,css.pkgQty,css.price,css.uid,            \n" +
                "			css.printStatus,cc.categoryName,css.lotCode,css.dateCode,            \n" +
                "			c.mfgcodeID,c.mfgPN,c.PIDCode,c.packaginggroupID,0 AS dedicatedQty,0 AS reservedQty,            \n" +
                "			mfg.id AS mfgID,mfg.mfgCode, ro.rohsIcon,ro.name AS rohsName,IFNULL(c.packageQty,1) packageQty,(SELECT csl.location FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isActive=1 AND csl.isdeleted=0 LIMIT 1) location,        \n" +
                "			(SELECT csl.qty FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isdeleted=0 AND csl.isActive=1 LIMIT 1) Qty ,c.mfgPNDescription             \n" +
                "               FROM component_sid_stock css            \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0           \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0            \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0         \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0          \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;            \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (108,'2.00','V1',' Change in SP of Sproc_GetReceivingMaterial - FENIL '," + userid + ");"
            );
            break;
        case 108:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2019  *********************************** */
                "DROP TABLE IF EXISTS `rfq_assy_typemst`;  \n" +
                "CREATE TABLE `rfq_assy_typemst` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `name` varchar(255) NOT NULL,  \n" +
                "  `isActive` tinyint(1) NOT NULL DEFAULT '1',  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;  \n" +
                "insert  into `rfq_assy_typemst`(`id`,`name`,`isActive`,`isDeleted`,`createdBy`,`updatedBy`,`deletedBy`,`createdAt`,`updatedAt`,`deletedAt`) values (1,'One Side SMT Only',1,0,'1',NULL,NULL,'2019-01-17 18:49:46','2019-01-17 18:49:46',NULL),(2,'Both Side SMT Only',1,0,'1',NULL,NULL,'2019-01-17 19:03:37','2019-01-17 19:03:37',NULL),(3,'One Side SMT,Same Side PTH',1,0,'1',NULL,NULL,'2019-01-17 19:06:50','2019-01-17 19:06:50',NULL),(4,'Both Side SMT,Both Side PTH',1,0,'1',NULL,NULL,'2019-01-17 19:07:21','2019-01-17 19:07:21',NULL),(5,'One Side SMT,Opposite Side PTH',1,0,'1',NULL,NULL,'2019-01-17 19:07:42','2019-01-17 19:07:42',NULL),(6,'Both Side SMT,One Side PTH',1,0,'1',NULL,NULL,'2019-01-17 19:08:12','2019-01-17 19:08:12',NULL),(7,'Wire Harness Only',1,0,'1',NULL,NULL,'2019-01-17 19:08:39','2019-01-17 19:08:39',NULL),(8,'Cable Assembly',1,0,'1',NULL,NULL,'2019-01-17 19:09:00','2019-01-17 19:09:00',NULL),(9,'Mechanical Assembly',1,0,'1',NULL,NULL,'2019-01-17 19:09:20','2019-01-17 19:09:20',NULL);  \n" +
                /* **************************** Add Script Version -> 17-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (109,'2.00','V1','Create table for AssyTypeMst-Champak'," + userid + ");"
            );
            break;
        case 109:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfq_assy_typemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_assy_typemst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqassytype as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                          \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies WHERE deletedAt IS NULL AND assemblyTypeID IN(',IDs,')  LIMIT 1)                                                          \n" +
                "		      ) q');                                                          \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM temprfqassytype)=0 THEN                                                          \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update rfq_assy_typemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM temprfqassytype;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM temprfqassytype;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE temprfqassytype;       \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                \n" +
                "	IN tableName VARCHAR(255),                                                                \n" +
                "	IN IDs LONGTEXT,                                                                \n" +
                "	IN deletedBy INT,                                                                \n" +
                "	IN entityID VARCHAR(255),                                                                \n" +
                "	IN refrenceIDs LONGTEXT                                                                \n" +
                "    )  \n" +
                "BEGIN                                                                \n" +
                "IF tableName=\"employees\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                     \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"customers\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"department\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"genericcategory\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"equipment\" THEN                                                                \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                  \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"parts\" THEN                                                               \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"master_templates\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"operations\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"roles\" THEN                                                               \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"standard_class\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"dataelement\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"component\" THEN                                                                \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                               \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                 \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_operation\" THEN                                                               \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"entity\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"salesordermst\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"assemblymst\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);           \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"br_label_template\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);           \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"measurement_types\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"uoms\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"jobtypes\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfqtype\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"reasonmst\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                                \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                                \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"shipping_request\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"component_standard\" THEN                                                                \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"component_standard_class\" THEN                                                                \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                           \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"requirement\" THEN                                                                \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                           \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                           \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfqforms\" THEN                                                                \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                            \n" +
                "IF tableName=\"cost_category\" THEN                                                                \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                            \n" +
                "END IF;                             \n" +
                "IF tableName=\"chartypemst\" THEN                                                                \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                         \n" +
                "END IF;            \n" +
                "IF tableName=\"countrymst\" THEN            \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;        \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN            \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;       \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN        \n" +
                "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;   \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN        \n" +
                "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);      \n" +
                "END IF;                 \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveAssyTypeList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveAssyTypeList`(    \n" +
                "    IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT * ,    \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive'     \n" +
                "					WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`    \n" +
                "			FROM `rfq_assy_typemst`    \n" +
                "			WHERE `deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (110,'2.00','V1','Create sp for AssyTypeMaster-Champak'," + userid + ");"
            );
            break;
        case 110:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "ALTER TABLE rfq_assemblies ADD COLUMN jobTypeID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies add constraint FK_rfq_assemblies_jobTypeID foreign key  (`jobTypeID`) References jobtype(`id`);  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN RFQTypeID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies add constraint FK_rfq_assemblies_RFQTypeID foreign key  (`RFQTypeID`) References rfqtype(`id`);  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN partID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies add constraint FK_rfq_assemblies_partID foreign key  (`partID`) References component(`id`);  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN assemblyTypeID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies add constraint FK_rfq_assemblies_assemblyTypeID foreign key  (`assemblyTypeID`) References rfq_assy_typemst(`id`);  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN eau int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN proposedBuildQty int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN noOfBuild int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN timePeriod int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN additionalRequirement longtext DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN quoteInDate datetime DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN quoteDueDate datetime DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN quoteNumber varchar(100) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assemblies ADD COLUMN quoteSubmitDate datetime DEFAULT NULL;  \n" +
                /* **************************** Update old data Add Script Version -> 18-01-2019 *********************************** */
                "update rfq_assemblies ra, (select * from rfqforms where isDeleted = 0) rf  \n" +
                "set ra.RFQTypeID = rf.rfqtypeID, ra.jobTypeID = rf.jobtypeID, ra.quoteDueDate = rf.quoteduedate, ra.quoteInDate = rf.quoteindate, ra.AssyID = (select id from assemblymst where customerID = rf.customerId and isDeleted = 0 limit 1)  \n" +
                "where ra.rfqrefID = rf.id and ra.isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 18-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (111,'2.00','V1','Rfq page table changes  - shirish'," + userid + ");"
            );
            break;
        case 111:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                        \n" +
                "	IN ppageIndex INT(11),                        \n" +
                "	IN precordPerPage INT(11),                        \n" +
                "	IN pOrderBy VARCHAR(255),	                        \n" +
                "    IN pWhereClause VARCHAR(16383)                            \n" +
                "    )  \n" +
                "BEGIN                        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                        \n" +
                "	/* DECLARE SQLStatement varchar(255); */                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                        \n" +
                "  \n" +
                "    SELECT COUNT(rl.id) AS lineItemCount, rf.id,                 \n" +
                "    (SELECT asb.id FROM rfq_assy_bom asb WHERE IFNULL(asb.isdeleted,0) = 0 AND asb.reqAssyID = ra.id  GROUP BY rf.id) AS assyBomID,                       \n" +
                "	assy.assemblyID, assy.assemblyNickName, assy.assemblyCode, assy.assemblyDescription, assy.assemblyName AS assemblyNumber, assy.assemblyRev,              \n" +
                "	(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,             \n" +
                "	ro.name AS `rohsComplientConvertedValue`,      \n" +
                "    -- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'                           \n" +
                "	-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,                  \n" +
                "	(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'No'                           \n" +
                "	WHEN (`ra`.`isRepeat` = 1) THEN 'Yes' ELSE '' END) AS `isRepeat`,    \n" +
                "    (CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'                           \n" +
                "	WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "    WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,   \n" +
                "	job.name AS JobType, rt.name AS OrderType, cu.companyName AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,                        \n" +
                "	rf.quoteindate, rf.quoteduedate, ra.id rfqAssyID, ra.quotePriority                    \n" +
                "    FROM rfqforms rf                        \n" +
                "	INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0                        \n" +
                "	left JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0                        \n" +
                "	left JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0                        \n" +
                "	INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0                        \n" +
                "	INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0       \n" +
                "	left JOIN rfq_rohsmst ro ON ra.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0    \n" +
                "	#JOIN rfq_assy_bom ab ON ab.reqAssyID = ra.id AND IFNULL(ab.isdeleted,0) = 0 AND ab.bomNumber IS NULL                    \n" +
                "    LEFT OUTER JOIN rfq_lineitems rl ON rl.rfqAssyID = ra.id AND rl.isDeleted = 0                     \n" +
                "    LEFT JOIN assemblymst assy ON assy.id = ra.AssyID AND IFNULL(assy.isdeleted,0) = 0                          \n" +
                "	WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id ;                        \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "	ELSE                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
                "	ELSE	                        \n" +
                "		SET rowNumWhere = '';                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                        \n" +
                "	EXECUTE query1;                        \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;             \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                        \n" +
                "	PREPARE query3 FROM @SQLStatement3;                        \n" +
                "	EXECUTE query3;                        \n" +
                "	DEALLOCATE PREPARE query3;             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (112,'2.00','V1','Rfq page sp changes  - shirish'," + userid + ");"
            );
            break;
        case 112:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_genericcategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                                                            \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "		    FROM                                                             \n" +
                "		    (                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		 UNION ALL    \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericcategory\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		UNION ALL                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                                                            \n" +
                "		UNION ALL                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		UNION ALL                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		UNION ALL                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		UNION ALL                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		UNION ALL                                                            \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                                                            \n" +
                "	        UNION ALL                    \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)       \n" +
                "            UNION ALL                    \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)      \n" +
                "	        UNION ALL                                                          \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)         \n" +
                "             UNION ALL                                                           \n" +
                "           (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                                                              \n" +
                "  \n" +
                "	      ) q');                                                            \n" +
                "	PREPARE stmt FROM @SQL;                                                            \n" +
                "	EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                                                            \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                                                            \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "			EXECUTE stmt1;                                                            \n" +
                "  \n" +
                "			SELECT                                                             \n" +
                "    *                                                            \n" +
                "FROM                                                            \n" +
                "    tempGenericCategory;                                                            \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempGenericCategory;                                                            \n" +
                "		END IF;                                                            \n" +
                "    DROP TABLE tempGenericCategory;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2019 *********************************** */
                "ALTER TABLE customers ADD COLUMN isActive TINYINT(1) NOT NULL DEFAULT 1;  \n" +
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomer` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomer`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT *,  \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive'   \n" +
                "				WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`   \n" +
                "			FROM customers  \n" +
                "			WHERE deletedAt IS NULL   \n" +
                "			-- AND customerType LIKE '%C%'  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"companyName ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (113,'2.00','V1',' Customer active/inactive field-sp - KETAN '," + userid + ");"
            );
            break;
        case 113:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "ALTER TABLE mfgcodemst ADD `isCustomer` TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                "ALTER TABLE mfgcodemst ADD `customerID` INT(11);  \n" +
                "ALTER TABLE mfgcodemst   \n" +
                "ADD CONSTRAINT FK_mfgcodemst_customerID   \n" +
                "FOREIGN KEY (customerID) REFERENCES customers(id);  \n" +
                "ALTER TABLE component ADD `assyCode` VARCHAR(10);  \n" +
                /* **************************** Add Script Version -> 18-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(              \n" +
                "	IN pCustomerID INT(11)        \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE mgfCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(200);  \n" +
                "	SET whereClause =  \"WHERE category = 3 \";   \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT id INTO mgfCodeID FROM mfgcodemst WHERE customerID = pCustomerID;   \n" +
                "		IF mgfCodeID IS NOT NULL THEN   \n" +
                "			SET whereClause = CONCAT(whereClause,\" AND mfgcodeID = \", mgfCodeID);   \n" +
                "		END IF;	  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT id, PIDCode, rev, nickname, assyCode, description FROM component \", whereClause);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;       \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (114,'2.00','V1',' Create SP for get assembly PID list from component master - JIGNESH '," + userid + ");"
            );
            break;
        case 114:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "ALTER TABLE rfq_partcategory ADD `epicorType` VARCHAR(30);  \n" +
                "UPDATE rfq_partcategory SET epicorType = 'Purchased' WHERE id = 2;  \n" +
                "UPDATE rfq_partcategory SET epicorType = 'Manufactured' WHERE id IN (1,3);  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (115,'2.00','V1',' Add field in category master for epicor type  - jignesh '," + userid + ");"
            );
            break;
        case 115:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                \n" +
                "	IN pCustomerID INT(11)          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE mgfCodeID INT(11);    \n" +
                "	DECLARE whereClause VARCHAR(200);    \n" +
                "	SET whereClause =  \"WHERE category = 3 and deletedAt IS NULL\";     \n" +
                "	IF pCustomerID IS NOT NULL THEN    \n" +
                "		SELECT id INTO mgfCodeID FROM mfgcodemst WHERE customerID = pCustomerID and isCustomer = 1 and deletedAt IS NULL;     \n" +
                "		IF mgfCodeID IS NOT NULL THEN     \n" +
                "			SET whereClause = CONCAT(whereClause,\" AND mfgcodeID = \", mgfCodeID);     \n" +
                "		END IF;	    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT id, PIDCode, rev, nickname, assyCode, description FROM component \", whereClause);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;         \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (116,'2.00','V1','get pid code list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 116:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2019  *********************************** */
                "ALTER TABLE rfq_assy_typemst ADD isPCBRequire TINYINT(4) NOT NULL;  \n" +
                "INSERT INTO page_detail   \n" +
                "(pageName,ro,rw,menuRoute,pageRoute,pageURL,menuName,hasChild,orderBy,iconClass,isActive,createdBy,displayMenuName,isDisplay)VALUES  \n" +
                "('Assembly Types',0,0,'setting.partmaintenance.Assemblies.assytype','app.assytype','/assytype','Assembly Types',0,32.55,'mdi mdi-math-compass',1,'1','Assembly Types',1);  \n" +
                "  \n" +
                "UPDATE page_detail SET page_detail.parentPageID=(SELECT PageID FROM (SELECT * FROM page_detail ) AS b WHERE b.pageName='Assemblies' LIMIT 1)  \n" +
                "WHERE page_detail.pageName='Assembly Types';  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveAssyTypeList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveAssyTypeList`(      \n" +
                "    IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "			SELECT * ,      \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive'       \n" +
                "					WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`,  \n" +
                "					(CASE WHEN (`isPCBRequire` = 0) THEN 'No'       \n" +
                "					WHEN (`isPCBRequire` = 1) THEN 'Yes' ELSE '' END) AS `pcbValue`         \n" +
                "			FROM `rfq_assy_typemst`      \n" +
                "			WHERE `deletedAt` IS NULL ;       \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;      \n" +
                "		ELSE      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (117,'2.00','V1','Assy type table changes and sp-champak'," + userid + ");"
            );
            break;
        case 117:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2019  *********************************** */
                "CREATE TABLE `warehousemst` (  \n" +
                "  `ID` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `Name` varchar(50) NOT NULL,  \n" +
                "  `Description` varchar(255) DEFAULT NULL,  \n" +
                "  `isActive` tinyint(1) NOT NULL,  \n" +
                "  `isPermanentWH` tinyint(1) DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(100) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`ID`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 21-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (118,'2.00','V1','New table warehousemst - Jignesh'," + userid + ");"
            );
            break;
        case 118:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2019  *********************************** */
                "CREATE TABLE `binmst` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `Name` varchar(50) DEFAULT NULL,  \n" +
                "  `Description` varchar(255) DEFAULT NULL,  \n" +
                "  `WarehouseID` int(11) DEFAULT NULL,  \n" +
                "  `isActive` tinyint(1) NOT NULL,  \n" +
                "  `isPermanentBin` tinyint(1) DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_binmaster` (`WarehouseID`),  \n" +
                "  CONSTRAINT `FK_binmaster` FOREIGN KEY (`WarehouseID`) REFERENCES `warehousemst` (`ID`)  \n" +
                "); \n" +
                /* **************************** Add Script Version -> 21-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (119,'2.00','V1','New table binmst - Jignesh'," + userid + ");"
            );
            break;
        case 119:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2019  *********************************** */
                "ALTER TABLE rfq_mountingtypemst ADD colorCode VARCHAR(100);  \n" +
                /* **************************** Add Script Version -> 21-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (120,'2.00','V1','Alter Mounting type mst-champak'," + userid + ");"
            );
            break;
        case 120:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfq_mountingtypemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_mountingtypemst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                     \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)                            \n" +
                "            UNION ALL                               \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_fields_genericalias_mst\" else \"\" end as msg FROM component_fields_genericalias_mst WHERE deletedAt IS NULL AND refTableName = ''rfq_mountingtypemst'' AND refId IN(',IDs,') LIMIT 1)                            \n" +
                "            ) q');                                                          \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                                                          \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM temprfqpartcategory;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM temprfqpartcategory;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE temprfqpartcategory;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (121,'2.00','V1','Delete sp for Sproc_checkDelete_rfq_mountingtypemst-champak'," + userid + ");"
            );
            break;
        case 121:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2019  *********************************** */
                "insert into `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`, `isDisplay`, `displayMenuName`) values('Warehouse-Bin','0','0','Materialmanagement.receiving.warehousebin',NULL,NULL,'Warehouse/Bin',NULL,(select b.pageID from page_detail as b where b.pageName = 'Receiving' LIMIT 1),'1','13.09',NULL,'mdi mdi-cube-send','1','2019-01-18 20:24:41','2019-01-18 10:05:57',NULL,'1',NULL,NULL,'0',NULL,'1','Warehouse/Bin');  \n" +
                "insert into `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`, `isDisplay`, `displayMenuName`) values('Warehouse','0','0','Materialmanagement.receiving.warehousebin.warehouse','app.transaction.warehousebin','/warehouse','Warehouse',NULL,(select b.pageID from page_detail as b where b.pageName = 'Warehouse-Bin' LIMIT 1),'0','13.10','0','mdi mdi-cube-send','1','2019-01-21 12:05:48','2019-01-21 17:31:15',NULL,'1',NULL,NULL,'0',NULL,'1','Warehouse');  \n" +
                "insert into `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`, `isDisplay`, `displayMenuName`) values('Bin','0','0','Materialmanagement.receiving.warehousebin.bin','Materialmanagement.receiving.bin','/bin','Bin',NULL,(select b.pageID from page_detail as b where b.pageName = 'Warehouse-Bin' LIMIT 1),'0','13.11','1','mdi mdi-cube-send','1','2019-01-21 12:05:48','2019-01-21 17:31:31',NULL,'1',NULL,NULL,'0',NULL,'1','Bin');  \n" +
                /* **************************** Add Script Version -> 21-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (122,'2.00','V1','Delete sp for Sproc_checkDelete_rfq_mountingtypemst-champak'," + userid + ");"
            );
            break;
        case 122:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2019  *********************************** */
                "ALTER TABLE component ADD COLUMN pcbPerArray INT NOT NULL;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (123,'2.00','V1',' Add New Field in Component Master - FENIL '," + userid + ");"
            );
            break;
        case 123:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2019  *********************************** */
                "DROP PROCEdURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                          \n" +
                "	IN ppageIndex INT(11),                          \n" +
                "	IN precordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),	                          \n" +
                "    IN pWhereClause VARCHAR(16383)                              \n" +
                "    )  \n" +
                "BEGIN                          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "	/* DECLARE SQLStatement varchar(255); */                          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                          \n" +
                "  \n" +
                "    SELECT COUNT(rl.id) AS lineItemCount, rf.id,                   \n" +
                "    (SELECT asb.id FROM rfq_assy_bom asb WHERE IFNULL(asb.isdeleted,0) = 0 AND asb.reqAssyID = ra.id  GROUP BY rf.id) AS assyBomID,                         \n" +
                "	#assy.assemblyID, assy.assemblyNickName, assy.assemblyCode, assy.assemblyDescription, assy.assemblyName AS assemblyNumber, assy.assemblyRev,                \n" +
                "	part.PIDCode,part.RoHSStatusID, part.description,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "    (select changeVersion from rfq_assembly_history where rfqAssyID = ra.id order by id desc limit 1) as InternalVersion,  \n" +
                "    (CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,               \n" +
                "	ro.name AS `rohsComplientConvertedValue`,        \n" +
                "    -- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'                             \n" +
                "	-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,                    \n" +
                "	(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'                             \n" +
                "	WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,      \n" +
                "    (CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'                             \n" +
                "	WHEN (`ra`.`timePeriod` = 1) THEN 'W'    \n" +
                "    WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,     \n" +
                "	job.name AS JobType, rt.name AS OrderType, concat('(',cu.customerCode,')',cu.companyName) AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,                          \n" +
                "	ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified                      \n" +
                "    FROM rfqforms rf                          \n" +
                "	INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0                          \n" +
                "	left JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0                          \n" +
                "	left JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0                          \n" +
                "	INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0                          \n" +
                "	INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0         \n" +
                "	#left JOIN rfq_rohsmst ro ON ra.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0      \n" +
                "	#JOIN rfq_assy_bom ab ON ab.reqAssyID = ra.id AND IFNULL(ab.isdeleted,0) = 0 AND ab.bomNumber IS NULL                      \n" +
                "    LEFT OUTER JOIN rfq_lineitems rl ON rl.rfqAssyID = ra.id AND rl.isDeleted = 0                       \n" +
                "    #LEFT JOIN assemblymst assy ON assy.id = ra.AssyID AND IFNULL(assy.isdeleted,0) = 0                            \n" +
                "    LEFT JOIN component part ON part.id = ra.partID and category = 3 and IFNULL(part.isdeleted,0) = 0  \n" +
                "    left join rfq_rohsmst ro on part.RoHSStatusID = ro.id and ro.isDeleted = 0  \n" +
                "	WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id ;                          \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE	                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                          \n" +
                "	EXECUTE query1;                          \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query2;                          \n" +
                "	DEALLOCATE PREPARE query2;               \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                          \n" +
                "	PREPARE query3 FROM @SQLStatement3;                          \n" +
                "	EXECUTE query3;                          \n" +
                "	DEALLOCATE PREPARE query3;               \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                \n" +
                "	IN pCustomerID INT(11)          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE mgfCodeID INT(11);    \n" +
                "	DECLARE whereClause VARCHAR(200);    \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";     \n" +
                "	IF pCustomerID IS NOT NULL THEN    \n" +
                "		SELECT id INTO mgfCodeID FROM mfgcodemst WHERE customerID = pCustomerID and isCustomer = 1 and deletedAt IS NULL;     \n" +
                "		IF mgfCodeID IS NOT NULL THEN     \n" +
                "			SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", mgfCodeID);     \n" +
                "		END IF;	    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID, c.rev, c.nickname, c.assyCode, c.description,ro.rohsIcon FROM component c left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0 \", whereClause);          \n" +
                "	select @SQLStatement2 ;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;         \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (124,'2.00','V1','get rfq  list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 124:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_FindKeywordInDB` ;  \n" +
                "CREATE PROCEDURE `Sproc_FindKeywordInDB`(                       \n" +
                "	IN ptblName VARCHAR(5000),             \n" +
                "	IN pcolumnName VARCHAR(5000),  \n" +
                "	IN prefColumnName VARCHAR(5000)                \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE dbName VARCHAR(1000);        \n" +
                "	SELECT DATABASE() INTO dbName;      \n" +
                "	IF (ptblName IS NOT NULL) THEN       \n" +
                "		SET @whereClause4 = NULL;			     \n" +
                "		IF (prefColumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause4 = '';  \n" +
                "			SET @whereClause4 = CONCAT(@whereClause4, \" AND REFERENCED_COLUMN_NAME = '\", prefColumnName ,\"'\");  \n" +
                "		END IF;  \n" +
                "		IF (@whereClause4 IS NULL) THEN  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '\",dbName,\"' AND REFERENCED_TABLE_NAME = '\", ptblName ,\"';\");        \n" +
                "		ELSE   \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '\",dbName,\"' AND REFERENCED_TABLE_NAME = '\", ptblName ,\"'\",@whereClause4, \";\");        \n" +
                "		END IF;  \n" +
                "		PREPARE query4 FROM @SQLStatement4;        \n" +
                "		EXECUTE query4;        \n" +
                "		DEALLOCATE PREPARE query4;   \n" +
                "	END IF;      	     \n" +
                "	IF (pcolumnName IS NOT NULL) THEN  	    \n" +
                "		SET @orderBy3 = \"ORDER BY table_name\";   \n" +
                "		SET @SQLStatement3 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = '\",dbName,\"' AND column_name = '\", pcolumnName ,\"'\", @orderBy3, \";\");        \n" +
                "		PREPARE query3 FROM @SQLStatement3;        \n" +
                "		EXECUTE query3;        \n" +
                "		DEALLOCATE PREPARE query3;   			     \n" +
                "	END IF;     \n" +
                "	IF (ptblName IS NOT NULL OR pcolumnName IS NOT NULL) THEN          \n" +
                "		SET @orderBy1 = \"ORDER BY ROUTINE_NAME\";   \n" +
                "		SET @whereClause1 = NULL;  \n" +
                "		SET @whereClause11 = NULL;  \n" +
                "		SET @whereClause12 = NULL;  \n" +
                "		IF (ptblName IS NOT NULL) THEN  \n" +
                "			SET @whereClause11 = '';  \n" +
                "			SET @whereClause11 = CONCAT(@whereClause11, \" ROUTINE_DEFINITION LIKE '%\", ptblName, \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause12 = '';  \n" +
                "			SET @whereClause12 = CONCAT(@whereClause12, \" ROUTINE_DEFINITION LIKE '%\", pcolumnName, \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (@whereClause11 IS NOT NULL AND @whereClause12 IS NOT NULL) THEN  \n" +
                "			SET @whereClause1 = CONCAT(@whereClause11, \" OR\" ,@whereClause12);  \n" +
                "		ELSEIF (@whereClause11 IS NULL AND @whereClause12 IS NOT NULL) THEN  \n" +
                "			SET @whereClause1 = @whereClause12;  \n" +
                "		ELSEIF (@whereClause11 IS NOT NULL AND @whereClause12 IS NULL) THEN  \n" +
                "			SET @whereClause1 = @whereClause11;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ( \",@whereClause1,\" ) AND ROUTINE_SCHEMA = '\",dbName,\"'\",@orderBy1,\";\");        \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @orderBy2 = \"ORDER BY trigger_name\";  \n" +
                "		SET @whereClause2 = NULL;  \n" +
                "		SET @whereClause21 = NULL;  \n" +
                "		SET @whereClause22 = NULL;  \n" +
                "  \n" +
                "		IF (ptblName IS NOT NULL) THEN  \n" +
                "			SET @whereClause21 = '';  \n" +
                "			SET @whereClause21 = CONCAT(@whereClause21, \" ACTION_statement LIKE '%\", ptblName, \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause22 = '';  \n" +
                "			SET @whereClause22 = CONCAT(@whereClause22, \" ACTION_statement LIKE '%\", pcolumnName, \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (@whereClause21 IS NOT NULL AND @whereClause22 IS NOT NULL) THEN  \n" +
                "			SET @whereClause2 = CONCAT(@whereClause21, \" OR\" ,@whereClause22);  \n" +
                "		ELSEIF (@whereClause21 IS NULL AND @whereClause22 IS NOT NULL) THEN  \n" +
                "			SET @whereClause2 = @whereClause22;  \n" +
                "		ELSEIF (@whereClause21 IS NOT NULL AND @whereClause22 IS NULL) THEN  \n" +
                "			SET @whereClause2 = @whereClause21;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.triggers WHERE ( \",@whereClause2,\" ) AND trigger_SCHEMA = '\",dbName,\"'\", @orderBy2, \";\");        \n" +
                "  \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	END IF;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (125,'2.00','V1',' Utility SP to find keyword table and column used dn. - Vaibhav '," + userid + ");"
            );
            break;
        case 125:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveWarehouse` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "		SELECT `warehousemst`.*,      \n" +
                "			(CASE WHEN (`warehousemst`.`isActive` = 0) THEN 'Inactive'       \n" +
                "				WHEN (`warehousemst`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,  \n" +
                "			(CASE WHEN (`isPermanentWH` = 0) THEN 'No'   \n" +
                "					WHEN (`isPermanentWH` = 1) THEN 'Yes' ELSE '' END) AS `parentConvertedValue`  \n" +
                "		FROM `warehousemst` AS `warehousemst`      \n" +
                "		WHERE `deletedAt` IS NULL      \n" +
                "	;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"Name ASC\") ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_warehousemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_warehousemst`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWarehouseMst as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"BinMst\" else \"\" end as msg FROM BinMst WHERE deletedAt IS NULL AND warehouseID IN(',IDs,') LIMIT 1)                                                            \n" +
                "			) q');        \n" +
                "	PREPARE stmt FROM @SQL;        \n" +
                "	EXECUTE stmt;        \n" +
                "	IF (SELECT TotalCount FROM tempWarehouseMst)=0 THEN                                                            \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update warehousemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ID in(',IDs,') and deletedAt is NULL');		                                                            \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "		EXECUTE stmt1;                                                            \n" +
                "  \n" +
                "		SELECT                                                             \n" +
                "			*                                                            \n" +
                "		FROM                                                            \n" +
                "			tempWarehouseMst;                                                            \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempWarehouseMst;                                                            \n" +
                "	END IF;                                                            \n" +
                "	DROP TABLE tempWarehouseMst;       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                  \n" +
                "	IN tableName VARCHAR(255),                                                                  \n" +
                "	IN IDs LONGTEXT,                                                                  \n" +
                "	IN deletedBy INT,                                                                  \n" +
                "	IN entityID VARCHAR(255),                                                                  \n" +
                "	IN refrenceIDs LONGTEXT                                                                  \n" +
                "    )  \n" +
                "BEGIN                                                                  \n" +
                "IF tableName=\"employees\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                       \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                  \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                  \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"customers\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"department\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"genericcategory\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"equipment\" THEN                                                                  \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                    \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"parts\" THEN                                                                 \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"master_templates\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"operations\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"roles\" THEN                                                                 \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"standard_class\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"dataelement\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"component\" THEN                                                                  \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                 \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                   \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_operation\" THEN                                                                 \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"entity\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"salesordermst\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                  \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"assemblymst\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);             \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"br_label_template\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);             \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"measurement_types\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"uoms\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"jobtypes\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfqtype\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"reasonmst\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                                  \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                  \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                  \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                                  \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"shipping_request\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"component_standard\" THEN                                                                  \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"component_standard_class\" THEN                                                                  \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                  \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                             \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"requirement\" THEN                                                                  \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                             \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                             \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfqforms\" THEN                                                                  \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                  \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                  \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                  \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                  \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                              \n" +
                "IF tableName=\"cost_category\" THEN                                                                  \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                              \n" +
                "END IF;                               \n" +
                "IF tableName=\"chartypemst\" THEN                                                                  \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                           \n" +
                "END IF;              \n" +
                "IF tableName=\"countrymst\" THEN              \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;          \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN              \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;         \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN          \n" +
                "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;     \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN          \n" +
                "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;      \n" +
                "IF tableName=\"warehousemst\" THEN          \n" +
                "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);        \n" +
                "END IF;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (126,'2.00','V1',' Add SP for warehouse - Jignesh '," + userid + ");"
            );
            break;
        case 126:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(            \n" +
                "IN pGoodPart VARCHAR(100),            \n" +
                "IN pSearch VARCHAR(100),            \n" +
                "IN pId INT(11),            \n" +
                "IN pMfgType VARCHAR(50),            \n" +
                "IN pRoHSStatusID VARCHAR(100),            \n" +
                "IN pMfgCodeId INT(11),        \n" +
                "IN pMountingType VARCHAR(50)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "IF(pMountingType IS NOT NULL) THEN        \n" +
                " SELECT * FROM            \n" +
                " (          \n" +
                "	 SELECT `com`.`id`,             \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,          \n" +
                "		`com`.`mfgPN` orgMfgPN,     \n" +
                "		`com`.`packaginggroupID`,        \n" +
                "		`com`.`isGoodPart`,           \n" +
                "		`com`.`RoHSStatusID`,           \n" +
                "		`com`.`rohsgroupID`,            \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,           \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,          \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`      \n" +
                "	FROM `component` AS `com`           \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND             \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))          \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType        \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))            \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))            \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a            \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))          \n" +
                ");            \n" +
                "  \n" +
                "  ELSE        \n" +
                "   SELECT * FROM            \n" +
                " (          \n" +
                "	 SELECT `com`.`id`,             \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,          \n" +
                "		`com`.`mfgPN` orgMfgPN,     \n" +
                "		`com`.`packaginggroupID`,       \n" +
                "		`com`.`isGoodPart`,           \n" +
                "		`com`.`RoHSStatusID`,           \n" +
                "		`com`.`rohsgroupID`,            \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,           \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,          \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`               \n" +
                "	FROM `component` AS `com`           \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND             \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))             \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))            \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))            \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a            \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))          \n" +
                ");         \n" +
                "END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (127,'2.00','V1',' Sample entry - KETAN '," + userid + ");"
            );
            break;
        case 127:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                \n" +
                "	IN pCustomerID INT(11)          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE mfgCodeID INT(11);    \n" +
                "	DECLARE whereClause VARCHAR(200);    \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";     \n" +
                "	IF pCustomerID IS NOT NULL THEN    \n" +
                "		SELECT id INTO mfgCodeID FROM mfgcodemst WHERE customerID = pCustomerID and isCustomer = 1 and deletedAt IS NULL;     \n" +
                "		IF mfgCodeID IS NOT NULL THEN     \n" +
                "        	SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", mfgCodeID);    \n" +
                "		END IF;	    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID, c.rev, c.nickName, c.assyCode, c.description,ro.rohsIcon FROM component c left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0 \", whereClause);          \n" +
                "    PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;         \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (128,'2.00','V1','get PID list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 128:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-01-2019  *********************************** */
                "ALTER TABLE binmst ADD isDeleted TINYINT(1);  \n" +
                /* **************************** Add Script Version -> 23-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (129,'2.00','V1','add isdeleted column in binmaster table  - jignesh'," + userid + ");"
            );
            break;
        case 129:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-01-2019  *********************************** */
                "ALTER TABLE requirement ADD COLUMN category int(11) DEFAULT NULL;  \n" +
                "  \n" +
                "update page_detail pd,(select pageID from page_detail where menuName = 'BOM Issues')p   \n" +
                "set pd.menuName = 'RFQ Requirement Template', pd.displayMenuName = 'RFQ Requirement Template'   \n" +
                "where  pd.pageID = p.pageID;  \n" +
                /* **************************** Add Script Version -> 23-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRequirement`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRequirement`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT *,    \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive' WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`,  \n" +
                "            (CASE WHEN (`category` = 1) THEN 'Customer Quote Requirement' WHEN (`category` = 2) THEN 'Assembly Requirement' ELSE '' END) AS `reqCategory`  \n" +
                "			FROM requirement    \n" +
                "			WHERE deletedAt IS NULL     \n" +
                "		;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (130,'2.00','V1','additional requirement master changes  - shirish'," + userid + ");"
            );
            break;
        case 130:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2019  *********************************** */
                "ALTER TABLE rfq_assy_quantity  \n" +
                "MODIFY COLUMN quantityType int(11) Default null;  \n" +
                /* **************************** Add Script Version -> 24-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (131,'2.00','V1','rfq assy quantity field changes  - shirish'," + userid + ");"
            );
            break;
        case 131:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2019  *********************************** */
                "ALTER TABLE component MODIFY COLUMN pcbPerArray INT NULL;  \n" +
                /* **************************** Add Script Version -> 24-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (132,'2.00','V1','Set nullable of PCBPerArray field in component - FENIL '," + userid + ");"
            );
            break;
        case 132:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2019  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD packaging VARCHAR(50);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                            \n" +
                "	IN ppageIndex INT(11),                                            \n" +
                "	IN precordPerPage INT(11),                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                                            \n" +
                "	IN rfqAssyID INT(11),                                            \n" +
                "	IN puserID INT (11)                                            \n" +
                "    )  \n" +
                "BEGIN                                            \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                            \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                            \n" +
                "	    SET @SQLString = NULL;                                            \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                            \n" +
                "		ELSE                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                             \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                            \n" +
                "			SET pWhereClause = '1=1' ;                                            \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "		ELSE	                                            \n" +
                "			SET rowNumWhere = '';                                            \n" +
                "		END IF;	                                            \n" +
                "		SELECT                                            \n" +
                "                     GROUP_CONCAT(DISTINCT                                            \n" +
                "				CONCAT(                                            \n" +
                "					'Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', rq.finalPrice, null))) AS ''',                                            \n" +
                "						ra.requestQty,''''                                            \n" +
                "					)                                            \n" +
                "					) INTO @SQLString                                            \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                            \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                            \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                            \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                            \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                            \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                            \n" +
                "					SELECT                                             \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                              \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                          \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                            \n" +
                "					(SELECT                                         \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)         \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                  \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                         \n" +
                "component c ON rla.mfgpnid=c.id                                         \n" +
                "LEFT JOIN mfgcodemst mg ON                                          \n" +
                "c.mfgCodeID=mg.id         \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0        \n" +
                " LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0            \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0        \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0        \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0        \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                            \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                             \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                         \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0       \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                              \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                             \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                            \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                            \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                            \n" +
                "  \n" +
                "			ELSE                                            \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                            \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,refDesig                           \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                            \n" +
                "					(SELECT                                         \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)         \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'','''') END)                                                   \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                         \n" +
                "component c ON rla.mfgpnid=c.id                                         \n" +
                "LEFT JOIN mfgcodemst mg ON                                          \n" +
                "c.mfgCodeID=mg.id         \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0        \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0        \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0        \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0        \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0        \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                                      \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\".\"),\"N/A\"),''@@@'', c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                             \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                             \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                            \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                            \n" +
                "			END IF;                                            \n" +
                "			PREPARE stmt FROM @SQLStatement;                                            \n" +
                "			EXECUTE stmt;	                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                            \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                            \n" +
                "			EXECUTE query1;                                            \n" +
                "			DEALLOCATE PREPARE query1;                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                            \n" +
                "			EXECUTE query2;                                            \n" +
                "			DEALLOCATE PREPARE query2;                                            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                            \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                            \n" +
                "			EXECUTE query3;                                            \n" +
                "			DEALLOCATE PREPARE query3;                                            \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                            \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                            \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                            \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                            \n" +
                "			EXECUTE query4;                                            \n" +
                "			DEALLOCATE PREPARE query4;                                        \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                       \n" +
                "					rq.finalPrice,                       \n" +
                "					rq.unitPrice,                      \n" +
                "					rq.supplier,                      \n" +
                "					rq.min,                      \n" +
                "					rq.mult,                       \n" +
                "					rq.selectedMpn,                       \n" +
                "					rq.selectionMode,                      \n" +
                "					rq.qtyID,                                       \n" +
                "					rq.currentStock,                                      \n" +
                "					rq.leadTime,                                       \n" +
                "					rq.supplierStock,                                      \n" +
                "					rq.grossStock,                                          \n" +
                "					rq.selectedPIDCode,                                        \n" +
                "					rq.pricingSuppliers,  \n" +
                "					rq.packaging,                        \n" +
                "					c.noOfPosition ApiNoOfPosition,                          \n" +
                "					ct.qpa,                       \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                 \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                      \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                         \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                         \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                                \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                    \n" +
                "			EXECUTE query5;                                                    \n" +
                "			DEALLOCATE PREPARE query5;                                           \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                                     \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                                     \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                                    \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                        \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                         \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                         \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                          \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                          \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                            \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                                \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                    \n" +
                "			EXECUTE query6;                                                    \n" +
                "			DEALLOCATE PREPARE query6;                                                        \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                              \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssyConsolidateQuantity` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAssyConsolidateQuantity`(          \n" +
                "      IN rfqAssyID INT,          \n" +
                "      IN qtyID INT          \n" +
                "  \n" +
                ")  \n" +
                "BEGIN          \n" +
                "IF(qtyID IS NOT NULL) THEN           \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),          \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),      \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL)          \n" +
                "         WHERE rq.qtyID=qtyID  AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);          \n" +
                "         ELSE          \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),          \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),      \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL)         \n" +
                "         WHERE  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);         \n" +
                "  \n" +
                "END IF;          \n" +
                " IF(SELECT COUNT(1) FROM rfq_consolidate_mfgpn_lineitem_quantity rq WHERE  rq.unitPrice IS NOT NULL AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0))=0 THEN        \n" +
                "          UPDATE rfq_assy_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;        \n" +
                "          UPDATE rfq_lineitem_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;        \n" +
                "          END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (133,'2.00','V1','Alter table rfq_consolidate_mfgpn_lineitem_quantity-Champak'," + userid + ");"
            );
            break;
        case 133:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-01-2019  *********************************** */
                "ALTER TABLE `assembly_revision_comments`   \n" +
                "	DROP FOREIGN KEY `FK_assembly_revision_comments_AssyID`;  \n" +
                "	ALTER TABLE `assembly_revision_comments`   \n" +
                "	DROP COLUMN `AssyID`,  \n" +
                "	DROP INDEX `FK_comments_AssyRevID` ;  \n" +
                "ALTER TABLE `assembly_revision_comments`   \n" +
                "Add COLUMN `partID` INT(11) NOT NULL ;  \n" +
                "ALTER TABLE `assembly_revision_comments`   \n" +
                "ADD CONSTRAINT `FK_partID`  \n" +
                "  FOREIGN KEY (`partID`)  \n" +
                "  REFERENCES `component` (`id`);  \n" +
                "drop procedure if exists `Sproc_RetrieveComponentCommentsList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentCommentsList`(    \n" +
                "    IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT a.*, concat(e.firstName,' ', e.lastName ) employeename  \n" +
                "			FROM `assembly_revision_comments` a  \n" +
                "			left join users u on a.createdBy = u.id  \n" +
                "			join employees e on u.employeeID = e.id  \n" +
                "			WHERE a.`deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"commentId ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (134,'2.00','V1',' Added FK partID, removed FK AssyID - Ashish Patel '," + userid + ");"
            );
            break;
        case 134:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2019  *********************************** */
                "UPDATE rfq_assy_standard_class_detail SET standardClassIDs = NULL;  \n" +
                "ALTER TABLE rfq_assy_standard_class_detail MODIFY COLUMN standardClassIDs int(11) Default null;  \n" +
                "ALTER TABLE rfq_assy_standard_class_detail add constraint FK_rfq_assy_standard_class_detail_standardClassIDs foreign key  (`standardClassIDs`) References standard_class(`classID`);  \n" +
                /* **************************** Add Script Version -> 25-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (135,'2.00','V1','rfq assy standard field changes  - shirish'," + userid + ");"
            );
            break;
        case 135:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-01-2019  *********************************** */
                "ALTER TABLE rfq_lineitems_errorcode ADD org_description VARCHAR(255);  \n" +
                "ALTER TABLE rfq_lineitems_errorcode ADD notes VARCHAR(2000);  \n" +
                "UPDATE rfq_lineitems_errorcode SET org_description = description;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET isDeleted = NULL WHERE id = 21;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `duplicateMPNInSameLineStep` TINYINT(1);  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD `parttypeID` INT(11);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart   \n" +
                "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_parttypeID  \n" +
                "FOREIGN KEY (parttypeID) REFERENCES rfq_parttypemst(id);  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD `mountingtypeID` INT(11);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart   \n" +
                "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_mountingtypeID  \n" +
                "FOREIGN KEY (mountingtypeID) REFERENCES rfq_mountingtypemst(id);  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD `partcategoryID` INT(11);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart   \n" +
                "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_partcategoryID  \n" +
                "FOREIGN KEY (partcategoryID) REFERENCES rfq_partcategory(id);  \n" +
                "  \n" +
                "DELETE FROM rfq_lineitems_headers WHERE `field` = 'partclassID';  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_lineitems ADD CONSTRAINT FK_rfq_lineitems_partID FOREIGN KEY (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD CONSTRAINT FK_rfq_lineitems_alternatepart_partID FOREIGN KEY (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE rfq_lineItems DROP FOREIGN KEY FK_rfq_lineitems_custPNID;  \n" +
                "ALTER TABLE rfq_lineItems DROP INDEX FK_rfq_lineitems_custPNID;  \n" +
                "UPDATE rfq_lineitems SET custPNID = NULL ;   \n" +
                "ALTER TABLE rfq_lineitems ADD CONSTRAINT FK_rfq_lineitems_custPNID FOREIGN KEY (`custPNID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_additional_comment ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_lineitems_additional_comment ADD CONSTRAINT FK_rfq_lineitems_additional_comment_partID FOREIGN KEY (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "DROP TABLE IF EXISTS `part_sub_assy_relationship`;  \n" +
                "  \n" +
                "CREATE TABLE `part_sub_assy_relationship` (  \n" +
                "  `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `partID` INT(11) NOT NULL,  \n" +
                "  `parentPartID` INT(11) NOT NULL,  \n" +
                "  `level` INT(11) NOT NULL,  \n" +
                "  `partLineItemID` INT(11) NOT NULL,  \n" +
                "  `isDeleted` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "  `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `partID` (`partID`),  \n" +
                "  KEY `parentPartID` (`parentPartID`),  \n" +
                "  KEY `partLineItemID` (`partLineItemID`),  \n" +
                "  CONSTRAINT `part_sub_assy_relationship_ibfk_1` FOREIGN KEY (`partID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `part_sub_assy_relationship_ibfk_2` FOREIGN KEY (`parentPartID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `part_sub_assy_relationship_ibfk_3` FOREIGN KEY (`partLineItemID`) REFERENCES `rfq_lineitems` (`id`)  \n" +
                ") ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "DECLARE pOffset INT(11);              \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'               \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'               \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                             \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'   \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'      \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,               \n" +
                "              description, systemVariable,logicID, displayName, org_description              \n" +
                "			FROM `rfq_lineitems_errorcode`              \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;              \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;              \n" +
                "		ELSE              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "		END IF;	              \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "			SET pWhereClause = '1=1' ;              \n" +
                "		END IF;	              \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "		ELSE	              \n" +
                "			SET rowNumWhere = '';              \n" +
                "		END IF;	              \n" +
                "  \n" +
                "		/* to get total count of rows */              \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );              \n" +
                "		PREPARE query1 FROM @SQLStatement1;              \n" +
                "		EXECUTE query1;              \n" +
                "		DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "		PREPARE query2 FROM @SQLStatement2;              \n" +
                "		EXECUTE query2;              \n" +
                "		DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                      \n" +
                "	IN ppartID INT              \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                              \n" +
                "	SELECT 	a.id,   \n" +
                "		a.lineID,   \n" +
                "		a.qpa,   \n" +
                "		a.refDesig,   \n" +
                "		a.custPN,  \n" +
                "		a.custPNID,                           \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                          \n" +
                "		a.description,  \n" +
                "		a.level,  \n" +
                "		a.numOfPosition,  \n" +
                "		a.customerRev,   \n" +
                "		a.customerDescription,   \n" +
                "		a.customerPartDesc,                           \n" +
                "		CONCAT(part.partTypeName) partclassID,   \n" +
                "		a.isInstall,   \n" +
                "		a.isPurchase,   \n" +
                "		a.leadQty,   \n" +
                "		a.attritionRate,  \n" +
                "		a.valueAddedCost,  \n" +
                "		a.refRFQLineItemID,                \n" +
                "		a.dnpQty,   \n" +
                "		a.dnpDesig,   \n" +
                "		a.qpaDesignatorStep,  \n" +
                "		a.qpaDesignatorColorPriority,  \n" +
                "		a.mergeLines,  \n" +
                "		a.lineMergeStep,  \n" +
                "		a.isBuyDNPQty                \n" +
                "	FROM rfq_lineitems a                \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0     \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                          \n" +
                "  \n" +
                "	SELECT 	b.id,  \n" +
                "		b.lineID,   \n" +
                "		b.qpa,   \n" +
                "		b.refDesig,                       \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                      \n" +
                "		a.mfgCodeID,   \n" +
                "		a.mfgPN,   \n" +
                "		a.mfgPNID,                          \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                      \n" +
                "		a.distMfgCodeID,   \n" +
                "		a.distPN,   \n" +
                "		a.distMfgPNID,                           \n" +
                "		b.custPN,   \n" +
                "		b.custPNID,   \n" +
                "		b.uomID,   \n" +
                "		a.description descriptionAlternate,   \n" +
                "		b.description,   \n" +
                "		b.level,   \n" +
                "		b.numOfPosition,   \n" +
                "		b.customerRev,   \n" +
                "		b.customerDescription,   \n" +
                "		b.customerPartDesc,                    \n" +
                "		b.partclassID,   \n" +
                "		b.isInstall,   \n" +
                "		b.isPurchase,   \n" +
                "		b.leadQty,   \n" +
                "		b.attritionRate,   \n" +
                "		b.valueAddedCost,   \n" +
                "		b.refRFQLineItemID,                           \n" +
                "		b.dnpQty,   \n" +
                "		b.dnpDesig,   \n" +
                "		a.id AS rfqAlternatePartID,   \n" +
                "		b.qpaDesignatorStep,  \n" +
                "		b.qpaDesignatorColorPriority,   \n" +
                "		b.isBuyDNPQty,                \n" +
                "		a.mfgVerificationStep,   \n" +
                "		a.mfgDistMappingStep,  \n" +
                "		a.mfgCodeStep,  \n" +
                "		a.customerApproval,  \n" +
                "		a.org_mfgCode,   \n" +
                "		a.org_mfgPN,                        \n" +
                "		a.org_distributor,   \n" +
                "		a.org_distPN,                        \n" +
                "		a.distVerificationStep,   \n" +
                "		a.distCodeStep,   \n" +
                "		a.getMFGPNStep,   \n" +
                "		a.obsoletePartStep,  \n" +
                "		a.mfgGoodPartMappingStep,  \n" +
                "		a.mfgPNStep,   \n" +
                "		a.distPNStep,                      \n" +
                "		a.badMfgPN,   \n" +
                "		a.distGoodPartMappingStep,   \n" +
                "		a.nonRohsStep,   \n" +
                "		a.oneRohsComponentStep,   \n" +
                "		a.epoxyStep,   \n" +
                "		a.invalidConnectorTypeStep,  \n" +
                "		a.duplicateMPNInSameLineStep,   \n" +
                "		CONCAT(part.partTypeName) parttypeID,  \n" +
                "		CONCAT(mount.name) mountingtypeID,   \n" +
                "		CONCAT(cat.categoryname) partcategoryID,  \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                    \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                  \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                \n" +
                "		CASE WHEN                 \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                \n" +
                "			THEN 1 ELSE 0 END isObsolete,                \n" +
                "		co.mfgPNDescription,            \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment            \n" +
                "	FROM rfq_lineitems_alternatepart a                            \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                             \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                      \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0   \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0  \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0  \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                   \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                    \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQAssyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteRFQAssyDetails`(    \n" +
                "	IN pRFQAssyID INT,          \n" +
                "    IN pUserID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DECLARE pPartID INT(11);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;          \n" +
                "	RESIGNAL;          \n" +
                "END;          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING          \n" +
                "  BEGIN          \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "START TRANSACTION;        \n" +
                "SELECT IFNULL(partID,0) INTO pPartID FROM rfq_assemblies WHERE id = pRFQAssyID;          \n" +
                "  \n" +
                "UPDATE rfq_lineitems_alternatepart rla SET rla.isDeleted = 1, rla.deletedAt = UTC_TIMESTAMP(), rla.deletedBy = pUserID WHERE rla.partID = pPartID;    \n" +
                "UPDATE rfq_assy_bom_relationship rabr SET rabr.isDeleted = 1, rabr.deletedAt = UTC_TIMESTAMP(), rabr.deletedBy = pUserID WHERE rabr.rfqAssyID = pRFQAssyID;    \n" +
                "UPDATE component_cust_alias_rev_pn ccarp SET ccarp.isDeleted = 1, ccarp.deletedAt = UTC_TIMESTAMP(), ccarp.deletedBy = pUserID  WHERE ccarp.refComponentCustAliasRevID IN    \n" +
                "(    \n" +
                "	SELECT ccar.id FROM component_cust_alias_rev ccar WHERE ccar.rfqAssyBomID IN     \n" +
                "	(SELECT rab.id FROM rfq_assy_bom rab WHERE rab.reqAssyID = 12 AND rab.bomNumber IS NOT NULL)    \n" +
                ");  \n" +
                "  \n" +
                "UPDATE component_cust_alias_rev ccar SET ccar.isDeleted = 1, ccar.deletedAt = UTC_TIMESTAMP(), ccar.deletedBy = pUserID  WHERE ccar.rfqAssyBomID IN     \n" +
                "(    \n" +
                "	SELECT rab.id FROM rfq_assy_bom rab WHERE rab.reqAssyID = 12 AND rab.bomNumber IS NOT NULL    \n" +
                ");  \n" +
                "  \n" +
                "UPDATE rfq_consolidate_mfgpn_lineitem_quantity rcmlq SET rcmlq.isDeleted = 1, rcmlq.deletedAt = UTC_TIMESTAMP(), rcmlq.deletedBy = pUserID WHERE rcmlq.consolidateID IN (    \n" +
                "	SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL    \n" +
                ");  \n" +
                "  \n" +
                "DELETE FROM rfq_assy_autopricingstatus WHERE rfqAssyID = pRFQAssyID;    \n" +
                "DELETE FROM rfq_lineitem_autopricingstatus WHERE rfqAssyID = pRFQAssyID;    \n" +
                "UPDATE rfq_assy_quotations raq SET raq.isDeleted = 1, raq.deletedAt = UTC_TIMESTAMP(), raq.deletedBy = pUserID WHERE raq.rfqAssyID = pRFQAssyID;    \n" +
                "UPDATE rfq_consolidated_mfgpn_lineitem_alternate rcmla SET rcmla.isDeleted = 1, rcmla.deletedAt = UTC_TIMESTAMP(), rcmla.deletedBy = pUserID WHERE rcmla.consolidateID IN (    \n" +
                "	SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL    \n" +
                ");  \n" +
                "  \n" +
                "UPDATE rfq_consolidated_mfgpn_lineitem rcml SET rcml.isDeleted = 1, rcml.deletedAt = UTC_TIMESTAMP(), rcml.deletedBy = pUserID WHERE rcml.rfqAssyID = pRFQAssyID;    \n" +
                "UPDATE rfq_lineitems rl SET rl.isDeleted = 1, rl.deletedAt = UTC_TIMESTAMP(), rl.deletedBy = pUserID WHERE rl.partID = pPartID;    \n" +
                "UPDATE rfq_assy_bom rab SET rab.isDeleted = 1, rab.deletedAt = UTC_TIMESTAMP(), rab.deletedBy = pUserID WHERE rab.reqAssyID = pRFQAssyID AND rab.bomNumber IS NOT NULL;    \n" +
                "UPDATE rfq_assemblies ra SET ra.isBOMVerified = NULL, ra.isReadyForPricing = NULL, ra.status = NULL WHERE ra.id = pRFQAssyID;    \n" +
                "COMMIT;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                  \n" +
                "	IN pRfqAssyID INT(11)             \n" +
                "	)  \n" +
                "BEGIN                      \n" +
                "	DECLARE pValidCount INT(11);                  \n" +
                "	DECLARE pInValidCount INT(11);                  \n" +
                "	DECLARE pTotalCount INT(11);              \n" +
                "	DECLARE pProgress INT(11);                  \n" +
                "	DECLARE pPartID INT(11);  \n" +
                "	SET pProgress = 0;            \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_assemblies WHERE id = pRfqAssyID;       \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "  \n" +
                "	SELECT  p.rfqLineItemsID,             \n" +
                "	CASE             \n" +
                "		WHEN             \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND             \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND             \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND             \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND             \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND             \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND             \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND             \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND             \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND             \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND             \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND             \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND             \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND             \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND            \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND      \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND    \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1            \n" +
                "		THEN 1            \n" +
                "		ELSE 0            \n" +
                "	END AS ProgressCount            \n" +
                "	FROM rfq_lineitems l            \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id            \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;            \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;            \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;            \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;            \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN            \n" +
                "		SET pProgress = 0;            \n" +
                "	ELSE             \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SELECT pProgress;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	DECLARE pBomFCAVersion INT(11);         \n" +
                "	DECLARE pRfqAssID INT(11);      \n" +
                "	DECLARE pPartID INT(11);         \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);        \n" +
                "	DECLARE pCompanyName VARCHAR(100);         \n" +
                "  \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;        \n" +
                "	SELECT IFNULL(bomFCAVersion,0),IFNULL(id,0) INTO pBomFCAVersion, pRfqAssID FROM rfq_assemblies WHERE partID = pPartID;        \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';        \n" +
                "  \n" +
                "	IF pBomFCAVersion > 0 THEN         \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN         \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor\",        \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN         \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor PN\",        \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN         \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG\",        \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Flextron Comment\",            \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN         \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG PN\",        \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;		        \n" +
                "  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL THEN         \n" +
                "			IF NEW.rfqAssyBomID IS NOT NULL        \n" +
                "				THEN         \n" +
                "					SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;        \n" +
                "				ELSE         \n" +
                "					SET newRfqAssyBom = '';        \n" +
                "			END IF;        \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, \"RFQ Assembly BOM\",        \n" +
                "				NULL,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN         \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Customer Approval\",        \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN         \n" +
                "			INSERT INTO rfq_assembly_history         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,        \n" +
                "				oldValue,newValue,changeVersion,        \n" +
                "				createdAt,createdBy)         \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Bad MFG PN\",        \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),        \n" +
                "				SYSDATE(),NEW.createdBy);        \n" +
                "		END IF;        \n" +
                "  \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "	DECLARE pBomFCAVersion INT(11);             \n" +
                "	DECLARE newPartTypeName VARCHAR(50);            \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);            \n" +
                "	DECLARE newUOM VARCHAR(50);            \n" +
                "	DECLARE pCompanyName VARCHAR(100);     \n" +
                "	DECLARE pRfqAssID INT(11);      \n" +
                "  \n" +
                "	SELECT IFNULL(bomFCAVersion,0),IFNULL(id,0) INTO pBomFCAVersion, pRfqAssID FROM rfq_assemblies WHERE partID = New.partID;        \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';        \n" +
                "	-- SET pBomFCAVersion = pBomFCAVersion + 1;            \n" +
                "	IF pBomFCAVersion > 0 THEN             \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Item\",            \n" +
                "				NULL, CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"QPA\",            \n" +
                "				NULL, CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"REF DES\",            \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"CPN\",            \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.level IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Level\",            \n" +
                "				NULL, CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Is Install\",            \n" +
                "				NULL, CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Is Buy\",            \n" +
                "				NULL, CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.isActive IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Is Active\",            \n" +
                "				NULL, CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.leadQty IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Lead Qty\",            \n" +
                "				NULL, CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.attritionRate IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Overage %\",            \n" +
                "				NULL, CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Rev\",            \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.partclassID IS NOT NULL THEN             \n" +
                "			IF NEW.partclassID != 0            \n" +
                "				THEN             \n" +
                "					SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;            \n" +
                "					SELECT `name` INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;            \n" +
                "				ELSE             \n" +
                "					SET newPartTypeName = '';            \n" +
                "					SET newMountingTypeName = '';            \n" +
                "			END IF;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Mounting Type\",            \n" +
                "				NULL,            \n" +
                "				CONCAT(newPartTypeName,' | ', newMountingTypeName),            \n" +
                "				CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Customer Comment\",            \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Lead\",            \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"DPN QTY\",            \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"DPN DES\",            \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN             \n" +
                "			IF NEW.uomID IS NOT NULL            \n" +
                "				THEN             \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;            \n" +
                "				ELSE             \n" +
                "					SET newUOM = '';            \n" +
                "			END IF;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"UOM\",            \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.refRFQLineItemID IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Parent Line\",            \n" +
                "				NULL, CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Customer Part Desc\",            \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN             \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"DNP Qty Buy\",            \n" +
                "				NULL, CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	DECLARE pBomFCAVersion INT(11);           \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);          \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);          \n" +
                "	DECLARE newPartTypeName VARCHAR(50);          \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);          \n" +
                "	DECLARE oldUOM VARCHAR(50);          \n" +
                "	DECLARE newUOM VARCHAR(50);          \n" +
                "	DECLARE pCompanyName VARCHAR(100);        \n" +
                "	DECLARE pRfqAssID INT(11);       \n" +
                "  \n" +
                "	SELECT IFNULL(bomFCAVersion,0),IFNULL(id,0) INTO pBomFCAVersion, pRfqAssID FROM rfq_assemblies WHERE partID = New.partID;   \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';        \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Item\",          \n" +
                "			CAST(OLD.lineID AS CHAR), CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"QPA\",          \n" +
                "			CAST(OLD.qpa AS CHAR), CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"REF DES\",          \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"CPN\",          \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Level\",          \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Is Install\",          \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Is Buy\",          \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Is Active\",          \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Lead Qty\",          \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Overage %\",          \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Rev\",          \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN           \n" +
                "		IF OLD.partclassID != 0          \n" +
                "			THEN           \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;          \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;          \n" +
                "			ELSE           \n" +
                "				SET oldPartTypeName = '';          \n" +
                "				SET oldMountingTypeName = '';          \n" +
                "		END IF;          \n" +
                "		IF NEW.partclassID != 0          \n" +
                "			THEN           \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;          \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;          \n" +
                "			ELSE           \n" +
                "				SET newPartTypeName = '';          \n" +
                "				SET newMountingTypeName = '';          \n" +
                "		END IF;          \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Mounting Type\",          \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),          \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),          \n" +
                "			CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Customer Comment\",          \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Lead\",          \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"DPN QTY\",          \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"DPN DES\",          \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN           \n" +
                "		IF OLD.uomID IS NOT NULL          \n" +
                "			THEN           \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;          \n" +
                "			ELSE           \n" +
                "				SET oldUOM = '';          \n" +
                "		END IF;          \n" +
                "		IF NEW.uomID IS NOT NULL          \n" +
                "			THEN           \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;          \n" +
                "			ELSE           \n" +
                "				SET newUOM = '';          \n" +
                "		END IF;          \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"UOM\",          \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Parent Line\",          \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"Customer Part Desc\",          \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, \"DNP Qty Buy\",          \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "	DECLARE pBomFCAVersion INT(11);             \n" +
                "	DECLARE pRfqAssID INT(11);     \n" +
                "	DECLARE pPartID INT(11);            \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);            \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);            \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);    \n" +
                "  \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;       \n" +
                "	SELECT IFNULL(bomFCAVersion,0),IFNULL(id,0) INTO pBomFCAVersion, pRfqAssID FROM rfq_assemblies WHERE partID = pPartID;        \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';            \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor\",            \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Distributor PN\",            \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG\",            \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;	            \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"MFG PN\",            \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN        \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN    \n" +
                "			SET pDeleteMessage =\"MFG PN \";       \n" +
                "		ELSE    \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);      \n" +
                "		END IF;    \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Deleted\",            \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.deletedBy);            \n" +
                "	END IF;	            \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN               \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Flextron Comment\",              \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN             \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL            \n" +
                "			THEN             \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;            \n" +
                "			ELSE             \n" +
                "				SET oldRfqAssyBom = '';            \n" +
                "		END IF;            \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL            \n" +
                "			THEN             \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;            \n" +
                "			ELSE             \n" +
                "				SET newRfqAssyBom = '';            \n" +
                "		END IF;      \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, \"RFQ Assembly BOM\",            \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.updatedBy);            \n" +
                "		END IF;    \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Customer Approval\",            \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN             \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID,columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, \"Bad MFG PN\",            \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pBomFCAVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (136,'2.00','V1',' PartId wise changes on BOM Level - JK '," + userid + ");"
            );
            break;
        case 136:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveBin` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT   `binm`.`id`, `binm`.`Name` AS `Name`,`binm`.`Description`,`binm`.`WarehouseID`,`binm`.`isActive`,`binm`.`isPermanentBin`,`warem`.`Name` AS wareHoueseName,  \n" +
                "				(CASE WHEN (binm.isActive= 0) THEN 'Inactive'       \n" +
                "					WHEN (binm.isActive = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,  \n" +
                "				(CASE WHEN (isPermanentBin = 0) THEN 'No'     \n" +
                "					WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS `isPermanentBinConvertedValue`	      \n" +
                "			FROM binmst binm  \n" +
                "			LEFT JOIN warehousemst warem ON `binm`.`WarehouseID` = `warem`.`ID`  \n" +
                "			WHERE binm.deletedAt IS NULL;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY\",\"Name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );   		  \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);   \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                    \n" +
                "	IN tableName VARCHAR(255),                                                                    \n" +
                "	IN IDs LONGTEXT,                                                                    \n" +
                "	IN deletedBy INT,                                                                    \n" +
                "	IN entityID VARCHAR(255),                                                                    \n" +
                "	IN refrenceIDs LONGTEXT                                                                    \n" +
                "    )  \n" +
                "BEGIN                                                                    \n" +
                "IF tableName=\"employees\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                         \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                    \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                    \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"customers\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"department\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"genericcategory\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"equipment\" THEN                                                                    \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                      \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"parts\" THEN                                                                   \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"master_templates\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"operations\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"roles\" THEN                                                                   \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"standard_class\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"dataelement\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"component\" THEN                                                                    \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                   \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                     \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_operation\" THEN                                                                   \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                      \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"entity\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"salesordermst\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                    \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"assemblymst\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);               \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"br_label_template\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);               \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"measurement_types\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"uoms\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"jobtypes\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfqtype\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"reasonmst\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                                    \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                    \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                    \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                                    \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"shipping_request\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"component_standard\" THEN                                                                    \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"component_standard_class\" THEN                                                                    \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                    \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                               \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"requirement\" THEN                                                                    \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                               \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                               \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfqforms\" THEN                                                                    \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                    \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                    \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                    \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                    \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                    \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                    \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                \n" +
                "IF tableName=\"cost_category\" THEN                                                                    \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                \n" +
                "END IF;                                 \n" +
                "IF tableName=\"chartypemst\" THEN                                                                    \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                             \n" +
                "END IF;                \n" +
                "IF tableName=\"countrymst\" THEN                \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;            \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;           \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN            \n" +
                "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;       \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN            \n" +
                "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;        \n" +
                "IF tableName=\"warehousemst\" THEN            \n" +
                "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;     \n" +
                "IF tableName=\"binmst\" THEN            \n" +
                "	 CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs);          \n" +
                "END IF;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_binmst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_binmst`(                                                        \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "    IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT, \n" +
                "	IN entityID VARCHAR(255), \n" +
                "	IN refrenceIDs LONGTEXT \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQl1 = CONCAT('update binmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "		EXECUTE stmt1;                     \n" +
                "		SELECT COUNT(1) TotalCount FROM binmst WHERE id IN (IDs) AND isDeleted=0 AND deletedAt IS NULL;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (137,'2.00','V1',' Add Bin master list and delete bin master SP - DEEPSHIKHA '," + userid + ");"
            );
            break;
        case 137:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-01-2019 *********************************** */
                "ALTER TABLE component ADD temperatureCoefficient VARCHAR(100);  \n" +
                "ALTER TABLE component ADD temperatureCoefficientValue INT;  \n" +
                "ALTER TABLE component ADD temperatureCoefficientUnit VARCHAR (50);  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (138,'2.00','V1','Add temperature coefficient in component-Champak'," + userid + ");"
            );
            break;
        case 138:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                  \n" +
                " IN tabquery LONGTEXT                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "   SET @sqlQ=tabquery;                  \n" +
                "   PREPARE stmt1 FROM @sqlQ;                   \n" +
                "   EXECUTE stmt1;                    \n" +
                "   DEALLOCATE PREPARE stmt1;                   \n" +
                "  \n" +
                "  SELECT '1';                  \n" +
                "  \n" +
                "    block1:BEGIN                  \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                    \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                  \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                    \n" +
                "	DECLARE  current_mfgcode INT ;                  \n" +
                "	DECLARE current_Ismfg TINYINT;                    \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                    \n" +
                "        DECLARE current_component INT ;                  \n" +
                "        DECLARE current_ComponentID INT;                  \n" +
                "	DECLARE maxvalueid INT;                  \n" +
                "        DECLARE aliasgroup INT;                  \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                    \n" +
                "    DECLARE component_cursor CURSOR FOR                    \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                  \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                    \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                    \n" +
                "     -- open the cursor                    \n" +
                "    OPEN component_cursor;                  \n" +
                "     -- start looping                    \n" +
                "     component_loop: LOOP                      \n" +
                "     -- read the name from next row into the variables                     \n" +
                "     FETCH component_cursor INTO current_ComponentID;                    \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                     \n" +
                "     -- close the cursor and exit the loop if it has.                    \n" +
                "       IF exit_loop THEN	                   \n" +
                "				 LEAVE component_loop;                    \n" +
                "			END IF;                    \n" +
                "        SELECT '1';                  \n" +
                "  \n" +
                "	SET current_mfgpn='';                  \n" +
                "	SET current_mfgcode=1;                  \n" +
                "	SET current_mfgPartNumber='';                  \n" +
                "	SET current_Ismfg=1;                  \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                  \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                  \n" +
                "	 -- insert new component                   \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                  \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                  \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                  \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,      \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit)                  \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                  \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                  \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                  \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,      \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit                  \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                  \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                  \n" +
                "	 -- check component is manufacturer part or distributor part                  \n" +
                "                   IF(current_Ismfg=1) THEN                  \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                  \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                  \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                  \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                  \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                  \n" +
                "                    ELSE        \n" +
                "  \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                  \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                  \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                  \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                  \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;                  \n" +
                "		        END IF;                  \n" +
                "		    END IF;                  \n" +
                "      END IF;                  \n" +
                "  \n" +
                "    END LOOP component_loop;                  \n" +
                "      CLOSE component_cursor;                  \n" +
                "    END  block1;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (139,'2.00','V1','Alter sp Sproc_saveVerifiedComponentFromApi-Champak'," + userid + ");"
            );
            break;
        case 139:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "DELETE FROM userpagedetail WHERE `pageID` in (SELECT a.pageid FROM page_detail a WHERE a.pageName = 'Bin');   \n" +
                "DELETE FROM rolepagedetail WHERE `pageID` in (SELECT a.pageid FROM page_detail a WHERE a.pageName = 'Bin'); \n" +
                "DELETE FROM page_detail WHERE pageName = 'Bin';  \n" +

                "INSERT INTO page_detail(pageName,RO,RW,menuRoute,pageRoute,pageURL,menuName,hasChild,orderBy,tabLevel,iconClass,isActive,createdBy,parentPageID) VALUES  \n" +
                "('Bin',0,0,'Materialmanagement.receiving.warehousebin.bin','app.transaction.warehousebin.bin','transaction/warehouse/bin','Bin',0,'13.16',2,'mdi mdi-ethernet',1,'1',  \n" +
                "(SELECT a.pageID FROM page_detail a WHERE a.pagename='Warehouse-Bin' LIMIT 1));  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (140,'2.00','V1',' update for permission - Deepshikha '," + userid + ");"
            );
            break;
        case 140:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "alter table operations modify column opNumber decimal(7,3);  \n" +
                "alter table master_templates add column systemGenerated tinyint(4);  \n" +
                "  \n" +
                "  \n" +
                "insert into master_templates(masterTemplate,createdAt,description,isDeleted,isActive,createdBy,isMasterTemplate,systemGenerated)  \n" +
                "values('Process Master Template',utc_timestamp(),'is Master Template',0,1,1,1,1);  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMasterTemplate`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "		SET @SQL = NULL;      \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "			SELECT mt.id, mt.masterTemplate,mt.description,mt.isMasterTemplate,mt.systemGenerated,mt.updatedAt   \n" +
                "            (CASE WHEN (`mt`.`isMasterTemplate` = 0) THEN 'No'                 \n" +
                "					WHEN (`mt`.`isMasterTemplate` = 1) THEN 'Yes' ELSE '' END) AS `isMasterTemplateValue`,  \n" +
                "			   (SELECT COUNT(*) FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateID = mt.id      \n" +
                "				AND operationId IN (SELECT opID FROM operations WHERE deletedAt IS NULL AND opStatus = 1)) AS operationCount /* 1 - published op */      \n" +
                "			FROM master_templates mt      \n" +
                "			WHERE mt.`deletedAt` IS NULL      \n" +
                "		;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"masterTemplate ASC\") ;      \n" +
                "		ELSE      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (141,'2.00','V1','Sproc_RetrieveMasterTemplate and alter table operation -Mona '," + userid + ");"
            );
            break;
        case 141:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "UPDATE page_detail SET pageName = 'Manage Receiving Material_duplicate', pageRoute = 'app.transaction.receivingmaterial.manage', pageURL = 'managereceivingmaterial/:id' WHERE menuName = 'Part To Stock';  \n" +
                "   UPDATE page_detail SET pageName = 'Receiving Material', pageRoute = 'app.transaction.receivingmaterial', pageURL = '/receivingmaterial' WHERE menuName = 'Receiving Material';  \n" +
                "   UPDATE page_detail SET pageName = 'Manage Receiving Material', pageRoute = 'app.transaction.receivingmaterial.manage', pageURL = 'managereceivingmaterial/:id' WHERE menuName = 'Part To Stock';  \n" +
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "	DROP PROCEDURE IF EXISTS `Sproc_RetrieveBarcodeLabelTemplate` ;  \n" +
                "	CREATE PROCEDURE `Sproc_RetrieveBarcodeLabelTemplate`(  \n" +
                "	   IN ppageIndex INT(11),  \n" +
                "		IN precordPerPage INT(11),  \n" +
                "		IN pOrderBy VARCHAR(255),  \n" +
                "		IN pWhereClause VARCHAR(16383)  \n" +
                "		)  \n" +
                "	BEGIN  \n" +
                "  \n" +
                "			DECLARE pOffset INT(11);  \n" +
                "			DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "				SELECT   \n" +
                "					blt.*, mc.mfgCode, mc.mfgName,  \n" +
                "					(SELECT COUNT(*) FROM br_label_template_delimiter WHERE refbrID = blt.id AND deletedAt IS NULL) AS numberOfDelimiter  \n" +
                "				FROM br_label_template blt  \n" +
                "				LEFT JOIN mfgcodemst mc ON blt.mfgcodeid = mc.id  \n" +
                "				WHERE blt.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "			IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgName ASC\") ;  \n" +
                "			ELSE  \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "			END IF;	  \n" +
                "  \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "				SET pWhereClause = '1=1' ;  \n" +
                "			END IF;	  \n" +
                "  \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "			ELSE	  \n" +
                "				SET rowNumWhere = '';  \n" +
                "			END IF;	  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "		END;  \n" +
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "ALTER TABLE component_sid_stock ADD COLUMN MFGorExpiryDate VARCHAR(1) NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN BestBefore INT NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN Unit INT NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN FloorLifeExpirationTime DATETIME NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN ShelfLifeExpirationTime DATETIME NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN floortimeRunning VARCHAR(255) NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN SealDate VARCHAR(255) NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN spq DECIMAL(18,6) NULL COMMENT 'Standard Pakage Quantity';  \n" +
                /* **************************** New Script -> 28-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		            \n" +
                "    IN pWhereClause VARCHAR(16383),            \n" +
                "    IN puserID VARCHAR(50),      \n" +
                "    IN pnickName VARCHAR(20),      \n" +
                "    IN pprefix VARCHAR(20),      \n" +
                "    IN puid VARCHAR(20),  \n" +
                "    IN pComponentID INT      \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;            \n" +
                "	DECLARE v_delimiter VARCHAR(10);            \n" +
                "	DECLARE v_length INT;             \n" +
                "	DECLARE v_fieldType INT;                 \n" +
                "	DECLARE v_entityId INT;            \n" +
                "	DECLARE v_dataElementId INT;            \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);            \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);            \n" +
                "	DECLARE strLabel VARCHAR(2000);            \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);            \n" +
                "	DECLARE StaticField VARCHAR(100);            \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';            \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');            \n" +
                "	DECLARE plen,slen INT;            \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;            \n" +
                "	DECLARE pbr_Separator VARCHAR(10);        \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;             \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error            \n" +
                "	(            \n" +
                "	     errorText NVARCHAR(2000),            \n" +
                "	     IsSuccess VARCHAR (2),  \n" +
                "	     MFGPart VARCHAR(100)                 \n" +
                "	);            \n" +
                "	-- get data from barcode templates with seprator            \n" +
                "	block1: BEGIN       \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND             \n" +
                "		pWhereClause REGEXP tempregexp;      \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID          \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND            \n" +
                "			pWhereClause REGEXP tempregexp;       \n" +
                "		ELSE    /* barcode 1D */  \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template           \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND             \n" +
                "			pWhereClause REGEXP tempregexp;       \n" +
                "		END IF;       \n" +
                "	END block1;            \n" +
                "  \n" +
                "	block2: BEGIN            \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found            \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR            \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter         \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND             \n" +
                "			pWhereClause REGEXP tempregexp) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		-- declare exit loop if data not found            \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;            \n" +
                "	        -- if any record match found than  check for delimiter and its value       \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN            \n" +
                "			-- create temporary table for deliemeter and component dataelement            \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	            \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(            \n" +
                "				pentityId INT,            \n" +
                "				pdataElementId INT,            \n" +
                "				pdelimiter_value VARCHAR(200)            \n" +
                "			);       \n" +
                "  \n" +
                "			-- create temporary table for separator string values            \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					            \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));  \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string            \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND             \n" +
                "				pWhereClause REGEXP tempregexp;   \n" +
                "  \n" +
                "			-- open cursor            \n" +
                "			OPEN barcodeMatch_cursor;            \n" +
                "  \n" +
                "			-- set str label as whereclause            \n" +
                "			SET strLabel=pWhereClause;     \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match            \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				            \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));            \n" +
                " 			 END IF;           \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match             \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN            \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);            \n" +
                "			 END IF;	  \n" +
                "  \n" +
                "			-- insert all values after seprator split             \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");            \n" +
                "			PREPARE stmt1 FROM @SQL;	            \n" +
                "			EXECUTE stmt1;            \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material            \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';     \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template            \n" +
                "			barcodeMatch_loop:LOOP            \n" +
                "				-- get all five selected values            \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;    \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match            \n" +
                "				IF exit_loop THEN       \n" +
                "					CLOSE barcodeMatch_cursor;            \n" +
                "					LEAVE barcodeMatch_loop;            \n" +
                "				END IF;       \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string            \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');            \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	            \n" +
                "				EXECUTE stmtdelimiter;  \n" +
                "  \n" +
                "				-- get delimiter values from string            \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));    \n" +
                "  \n" +
                "				-- check for field type is static or dynamic            \n" +
                "				-- if static field than check for mfg code and mfg part number            \n" +
                "				IF v_fieldType = 0  THEN        \n" +
                "  \n" +
                "					-- component_sid_stock             \n" +
                "					-- get static field name from barcode table delimiter data element id            \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);              \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys            \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "						SET MFG_Part_No = delimiter_value_data;  \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN  \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                            \n" +
                "						ELSE  \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				            \n" +
                "						END IF;   \n" +
                "					END IF;            \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys            \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN    \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                            \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN  \n" +
                "						CLOSE barcodeMatch_cursor;            \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;     \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);            \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');             \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;            \n" +
                "  \n" +
                "				ELSE           \n" +
                "					-- component_sid_stock_dataelement_Values              \n" +
                "					-- dynamic fields      \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE             \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;         \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)             \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);     \n" +
                "				END IF;            \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;            \n" +
                "  \n" +
                "			-- check if mfg and component both found than             \n" +
                "			IF (@componentCount > 1) THEN  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN fount',5,MFG_Part_No);            \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN            \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;            \n" +
                "                                   IF @Mfgmatched = 0  THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							            \n" +
                "				   END IF;									            \n" +
                "			 ELSE 		  \n" +
                "				IF @mfgCount = 0 THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);            \n" +
                "		                END IF;	            \n" +
                "				IF @componentCount = 0 THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfg PN does not exiest',4,MFG_Part_No);            \n" +
                "				END IF;	            \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN              \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);            \n" +
                "			        END IF;						            \n" +
                "			END IF;				            \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN            \n" +
                "  \n" +
                "				-- must call statements in sequence          				  \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		            \n" +
                "				PREPARE stmt1 FROM @SQL1;            \n" +
                "				EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @sql2 = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"',',nickName=','\"',pnickName,'\"',' where id=',LAST_INSERT_ID());	             \n" +
                "				PREPARE stmt2 FROM @SQL2;            \n" +
                "				EXECUTE stmt2;	            \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);            \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)             \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			            \n" +
                "				END IF;              \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "			ELSE           \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;            \n" +
                "			END IF;            \n" +
                "  \n" +
                "		ELSE        \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES             \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	            \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			              \n" +
                "		END IF;            \n" +
                "  \n" +
                "	END block2;                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (142,'2.00','V1','Change Sp and add new field for receiving module - FENIL '," + userid + ");"
            );
            break;
        case 142:
            allDbChangesArray.push(
                /*************************** New Script -> 28-01-2019  ********************************** */
                "DELETE FROM userpagedetail WHERE `pageID` in (SELECT a.pageid FROM page_detail a WHERE a.pageName = 'Bin');   \n" +
                "DELETE FROM rolepagedetail WHERE `pageID` in (SELECT a.pageid FROM page_detail a WHERE a.pageName = 'Bin'); \n" +
                "DELETE FROM page_detail WHERE pageName = 'Bin';  \n" +

                "INSERT INTO page_detail(pageName,RO,RW,menuRoute,pageRoute,pageURL,menuName,hasChild,orderBy,tabLevel,iconClass,isActive,createdBy,parentPageID) VALUES  \n" +
                "('Bin',0,0,'Materialmanagement.receiving.warehousebin.bin','app.transaction.warehousebin.bin','transaction/warehouse/bin','Bin',0,'13.16',2,'mdi mdi-ethernet',1,'1',  \n" +
                "(SELECT a.pageID FROM page_detail a WHERE a.pagename='Warehouse-Bin' LIMIT 1));  \n" +
                /*************************** Add Script Version -> 28-01-2019 **********************************/
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (143,'2.00','V1','Added tab bin master - Deepshikha '," + userid + ");"
            );
            break;
        case 143:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "ALTER TABLE rfq_assy_quantity_price_selection_setting ADD packagingID INT;  \n" +
                "DROP TABLE IF EXISTS `component_packagingmst`;  \n" +
                "CREATE TABLE `component_packagingmst` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `name` varchar(100) NOT NULL,  \n" +
                "  `isActive` tinyint(4) DEFAULT '1',  \n" +
                "  `isDeleted` tinyint(4) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;  \n" +
                "insert  into `component_packagingmst`(`id`,`name`,`isActive`,`isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`) values (1,'Tape & Reel',1,0,'1','2019-01-28 17:22:39',NULL,'2019-01-28 17:22:39',NULL,NULL),(2,'Cut Tape',1,0,'1','2019-01-28 17:22:52',NULL,'2019-01-28 17:22:52',NULL,NULL),(3,'Bulk ',1,0,'1','2019-01-28 17:24:12',NULL,'2019-01-28 17:24:12',NULL,NULL),(4,'Tray',1,0,'1','2019-01-28 17:29:28',NULL,'2019-01-28 17:29:28',NULL,NULL),(5,'Digi-Reel',1,0,'1','2019-01-28 17:34:20',NULL,'2019-01-28 17:34:20',NULL,NULL),(6,'Tube',1,0,'1','2019-01-28 17:35:06',NULL,'2019-01-28 17:35:06',NULL,NULL),(7,'MouseReel',1,0,'1','2019-01-28 17:38:57',NULL,'2019-01-28 17:38:57',NULL,NULL);  \n" +
                "ALTER TABLE rfq_assy_quantity_price_selection_setting  \n" +
                "ADD CONSTRAINT FK_rfq_assy_quantity_price_selection_setting_packagingID  \n" +
                "FOREIGN KEY (packagingID) REFERENCES component_packagingmst(id);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_AssyQuantityPriceSelectionSettings` ;  \n" +
                "CREATE PROCEDURE `Sproc_AssyQuantityPriceSelectionSettings`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "        IN pWhereClause VARCHAR(16383),      \n" +
                "        IN prfqAssyID INT (11)          \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	/* DECLARE SQLStatement varchar(255); */      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS PriceSetting AS      \n" +
                "      SELECT rq.id AS qtyID,rq.requestQty,  \n" +
                "     CASE WHEN  rq.quantityType=1 THEN 'Proto'  \n" +
                "     WHEN  rq.quantityType=2 THEN 'Neutral'   \n" +
                "     ELSE 'Production' END quantityTypeName,   \n" +
                "      rs.id,IFNULL(rs.stock,0) stock,IFNULL(rs.stockPercentage,0) stockPercentage,IFNULL(rs.price,0) price,rs.isCheckRequiredQty,rs.isLeadTime,rs.remark,cp.name,rs.packagingID       \n" +
                "       FROM rfq_assy_quantity rq LEFT OUTER JOIN rfq_assy_quantity_price_selection_setting rs  ON rq.id=rs.qtyID   \n" +
                "       LEFT JOIN component_packagingmst cp ON cp.id=rs.packagingID AND cp.isDeleted=0  \n" +
                "       WHERE IFNULL(rq.isdeleted,0) = 0 AND rq.rfqAssyID=prfqAssyID;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PriceSetting where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PriceSetting where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE PriceSetting;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                "INSERT  INTO `component_fields_genericalias_mst`  \n" +
                "(`refTableName`,`refId`,`alias`,`isDeleted`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`) VALUES   \n" +
                "('component_packagingmst',1,'TR',0,'1','2019-01-28 17:37:13',NULL,'2019-01-28 17:37:13',NULL,NULL),  \n" +
                "('component_packagingmst',2,'CT',0,'1','2019-01-28 17:37:38',NULL,'2019-01-28 17:37:38',NULL,NULL),  \n" +
                "('component_packagingmst',1,'Tape & Reel (TR)',0,'1','2019-01-28 17:41:05',NULL,'2019-01-28 17:41:05',NULL,NULL),  \n" +
                "('component_packagingmst',2,'Cut Tape (CT)',0,'1','2019-01-28 17:41:22',NULL,'2019-01-28 17:41:22',NULL,NULL),  \n" +
                "('component_packagingmst',1,'Reel',0,'1','2019-01-28 17:46:41',NULL,'2019-01-28 17:46:41',NULL,NULL),  \n" +
                "('component_packagingmst',5,'Digi-Reel®',0,'1','2019-01-28 17:49:29',NULL,'2019-01-28 17:49:29',NULL,NULL),  \n" +
                "('component_packagingmst',7,'MouseReel™',0,'1','2019-01-28 17:50:49',NULL,'2019-01-28 17:50:49',NULL,NULL),  \n" +
                "('component_packagingmst',1,'Tape and Reel',0,'1','2019-01-28 17:56:37',NULL,'2019-01-28 17:56:37',NULL,NULL);  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (144,'2.00','V1','Create Packaging Table-Champak'," + userid + ");"
            );
            break;
        case 144:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Detail',0,0,'','app.component.managecomponent.detail','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Alias & Alternate Groups',0,0,'','app.component.managecomponent.alternategroup','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Standards',0,0,'','app.component.managecomponent.standards','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Document',0,0,'','app.component.managecomponent.document','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Miscellaneous',0,0,'','app.component.managecomponent.otherdetail','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Pricing History',0,0,'','app.component.managecomponent.pricinghistory','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Customer LOA',0,0,'','app.component.managecomponent.customerloa','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component Comments',0,0,'','app.component.managecomponent.comments','/managecomponentr/:mfgType/:coid/:selectedTab','Component',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (145,'2.00','V1','Add Tab wise page rights -Ashish'," + userid + ");"
            );
            break;
        case 145:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "ALTER TABLE assembly_revisionmst DROP FOREIGN KEY FK_Assembly;  \n" +
                "ALTER TABLE assembly_revisionmst DROP COLUMN assemblyID;  \n" +
                "  \n" +
                "ALTER TABLE salesorderdet DROP FOREIGN KEY FK_AssemblyMst;  \n" +
                "ALTER TABLE salesorderdet DROP COLUMN assemblyID;  \n" +
                "  \n" +
                "ALTER TABLE assemblystock DROP FOREIGN KEY FK_assemblystock_assemblyID;  \n" +
                "ALTER TABLE assemblystock DROP COLUMN assemblyID;  \n" +
                "  \n" +
                "ALTER TABLE eco_request DROP FOREIGN KEY FK_eco_request_fromAssyID;  \n" +
                "ALTER TABLE eco_request DROP FOREIGN KEY FK_eco_request_toAssyID;  \n" +
                "ALTER TABLE eco_request DROP COLUMN fromAssyID;  \n" +
                "ALTER TABLE eco_request DROP COLUMN toAssyID;  \n" +
                "  \n" +
                "ALTER TABLE shippedassembly DROP FOREIGN KEY FK_outwardassembly_assemblyID;  \n" +
                "ALTER TABLE shippedassembly DROP COLUMN assemblyID;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies DROP FOREIGN KEY FK_rfq_assemblies_AssyID;  \n" +
                "ALTER TABLE rfq_assemblies DROP COLUMN AssyID;  \n" +
                "  \n" +
                "ALTER TABLE workorder_assembly_excessstock_location DROP FOREIGN KEY FK_workorder_assembly_excessstock_location_assyID;  \n" +
                "ALTER TABLE workorder_assembly_excessstock_location DROP COLUMN assyID;  \n" +
                "  \n" +
                "ALTER TABLE workorder DROP FOREIGN KEY FK_workorder_assyID;  \n" +
                "ALTER TABLE workorder DROP COLUMN assyID;  \n" +
                "  \n" +
                "DROP TABLE assembly_revisionmst;  \n" +
                "DROP TABLE assemblymst;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "ALTER TABLE eco_request ADD COLUMN fromPartID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE eco_request ADD CONSTRAINT FK_eco_request_fromPartID FOREIGN KEY  (`fromPartID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE eco_request ADD COLUMN toPartID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE eco_request ADD CONSTRAINT FK_eco_request_toPartID FOREIGN KEY  (`toPartID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE assemblystock ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE assemblystock ADD CONSTRAINT FK_assemblystock_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE salesorderdet ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE salesorderdet ADD CONSTRAINT FK_salesorderdet_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE shippedassembly ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE shippedassembly ADD CONSTRAINT FK_shippedassembly_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE workorder ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE workorder ADD CONSTRAINT FK_workorder_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE workorder_assembly_excessstock_location ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE workorder_assembly_excessstock_location ADD CONSTRAINT FK_workorder_assembly_excessstock_location_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_assembly_revisionmst`;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_assemblymst`;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblies`;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyRevision`;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssywiseAutoPricing`;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DELETE FROM `userpagedetail` WHERE pageID IN (SELECT pageid FROM page_detail WHERE displaymenuname='assemblies');  \n" +
                "DELETE FROM `rolepagedetail` WHERE pageID IN (SELECT pageid FROM page_detail WHERE displaymenuname='assemblies');  \n" +
                "DELETE FROM page_detail WHERE displaymenuname='assemblies';  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (146,'2.00','V1','Drop Assembly Field and Keys - Vaibhav'," + userid + ");"
            );
            break;
        case 146:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckCustomerUsedInFlow` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckCustomerUsedInFlow`(      \n" +
                "	IN pcustomerID INT(11)                \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	IF EXISTS (SELECT 1 FROM salesordermst WHERE deletedAt IS NULL AND customerID = pcustomerID LIMIT 1) THEN      \n" +
                "		SELECT 'customer_in_use';      \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM workorder WHERE deletedAt IS NULL AND customerID = pcustomerID LIMIT 1) THEN      \n" +
                "		SELECT 'customer_in_use';     \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM rfqforms WHERE deletedAt IS NULL AND customerId = pcustomerId LIMIT 1) THEN      \n" +
                "		SELECT 'customer_in_use';     \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM mfgcodemst WHERE deletedAt IS NULL AND customerID = pcustomerID LIMIT 1) THEN      \n" +
                "		SELECT 'customer_in_use';     \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM equipment WHERE deletedAt IS NULL AND customerId = pcustomerID LIMIT 1) THEN      \n" +
                "		SELECT 'customer_in_use'; 			     \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyStock` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyStock`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "	SELECT s.id,    \n" +
                "		s.openingdate,s.openingStock,  \n" +
                "		s.partID,  \n" +
                "		c.nickname,  \n" +
                "		c.rev,   \n" +
                "		c.PIDCode AS PIDCode     \n" +
                "	FROM assemblystock s       \n" +
                "		INNER JOIN component c ON c.id = s.partID AND IFNULL(c.category,0) = 3  \n" +
                "	WHERE IFNULL(s.isdeleted,0) = 0 ;    \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"PIDCode DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetECORequest` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetECORequest`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT er.*,     \n" +
                "        CONCAT(emp.firstName , ' ' , emp.lastName) fullName ,    \n" +
                "        tc.PIDCode AS toPIDCode,   \n" +
                "        fc.PIDCode AS fromPIDCode,    \n" +
                "        (CASE WHEN (`er`.`custECONumber` IS NULL OR `er`.`custECONumber` = '') THEN 'FCA'     \n" +
                "			ELSE 'CUSTOMER' END) AS `custECONumberConvertedValue` ,    \n" +
                "	(CASE WHEN (`er`.`status` = 'P') THEN 'Pending'     \n" +
                "		WHEN (`er`.`status` = 'C') THEN 'Closed' ELSE '' END) AS `statusConvertedValue`				     \n" +
                "        FROM eco_request er    \n" +
                "        JOIN employees emp ON er.initiateBy = emp.id AND IFNULL(emp.isDeleted, 0) = 0    \n" +
                "        JOIN component fc ON fc.id = er.fromPartID AND IFNULL(fc.isDeleted,0) = 0 AND IFNULL(fc.category,0) = 3  \n" +
                "        JOIN component tc ON tc.id = er.toPartID AND IFNULL(tc.isDeleted,0) = 0 AND IFNULL(tc.category,0) = 3  \n" +
                "        WHERE IFNULL(er.isDeleted,0) = 0;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ecoNumber ASC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(                  \n" +
                "	IN woID INT(1),                  \n" +
                "	IN woNumber VARCHAR(11),                  \n" +
                "	IN ppartID INT,                  \n" +
                "	IN poQty INT(1),                  \n" +
                "	IN excessQty INT(1),                  \n" +
                "	IN buildQty INT(1),                  \n" +
                "	IN userID INT(1),                  \n" +
                "	IN ECORemark VARCHAR(100),                  \n" +
                "	IN FCORemark VARCHAR(100),                  \n" +
                "	IN isRevision INT(1),            \n" +
                "	IN woType INT(11),          \n" +
                "	IN ecoReqID INT(11)                 \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "DECLARE insertedWOID INT(1);                \n" +
                "DECLARE insertedSubFormTransID INT(11);                \n" +
                "DECLARE lv_subFormTransID_from INT(11);                \n" +
                "DECLARE lv_parentDataElementID_from INT(11);                \n" +
                "DECLARE lv_rowNumber_from INT(11);                \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                    \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                    \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "  BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))                  \n" +
                "THEN SELECT 'woNumber' errorCode;                  \n" +
                "ELSE                  \n" +
                "	START TRANSACTION;                  \n" +
                "  \n" +
                "    # copy workorder                   \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`partID`,`customerID`,`poNumber`,                  \n" +
                "	`poQty`,`buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`                  \n" +
                "	,`woStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`,`LocationSampleDetails`                  \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`)                  \n" +
                "	SELECT woNumber `woNumber`, ppartID `partID`,`customerID`,`poNumber`,                  \n" +
                "	poQty `poQty`,buildQty `buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,woID,                  \n" +
                "	UTC_DATE() `createdAt`, userID `createdBy`,0 `woStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`,                  \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`LocationSampleDetails`,`isOperationTrackBySerialNo`,`isNoClean`,                  \n" +
                "	`isWatersoluble`,`isRevisedWO` , woType `woType` , ecoReqID `ecoReqID`                \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                  \n" +
                "	SET	insertedWOID = LAST_INSERT_ID();                  \n" +
                "  \n" +
                "    # copy workorder_certification                  \n" +
                "  \n" +
                "	INSERT INTO workorder_certification                  \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                  \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,UTC_DATE() `createdAt`,userID `createdBy`,`classIDs`, `isDeleted` FROM workorder_certification wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_operation                  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation                  \n" +
                "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                  \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                  \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                  \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,`colorcode`)                  \n" +
                "	SELECT insertedWOID `woID`,`opID`,UTC_DATE() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                  \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                  \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                  \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                  \n" +
                "    'A' opVersion, `colorCode`                  \n" +
                "	 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                  \n" +
                "  \n" +
                "	# copy workorder_cluster                  \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster                  \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)                  \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, UTC_DATE() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_operation_cluster                  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                  \n" +
                "	SELECT                   \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID                   \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID                   \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,                   \n" +
                "	woc.opID, woc.displayOrder, UTC_DATE() `createdAt`, userID `createdBy`,                  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`                  \n" +
                "	FROM workorder_operation_cluster woc                  \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)                  \n" +
                "	AND woc.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_operation_part                  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part                  \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,UTC_DATE() `createdAt`,userID `createdBy`,                  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	                  \n" +
                "	, `isDeleted` FROM workorder_operation_part wop WHERE wop.woID = woID AND wop.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_operation_equipment                  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment                  \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)                  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,UTC_DATE() `createdAt`,userID `createdBy`,                  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`                  \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy workorder_operation_employee                  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee                  \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,UTC_DATE() `createdAt`,userID `createdBy`,                  \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`                   \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields                 \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                  \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                  \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,UTC_DATE() `createdAt`,                  \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`               \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID                  \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)                  \n" +
                "	AND dt.deletedAt IS NULL;                  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form	              \n" +
                "  \n" +
                "	block1:BEGIN                   \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)              \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR               \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`              \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL              \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                  \n" +
                "						AND entityID = (SELECT entityID FROM entity en               \n" +
                "									WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)              \n" +
                "						AND refTransID = woID               \n" +
                "						ORDER BY refSubFormTransID ASC		              \n" +
                "					);                \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                    \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;                   \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;                    \n" +
                "	-- loop item till all records found in string match of sub-form data element              \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP                \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN              \n" +
                "			LEAVE wo_sub_Form_loop;                  \n" +
                "		 END IF;                      \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */	              \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)              \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);              \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	              \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */              \n" +
                "		UPDATE dataelement_transactionvalues              \n" +
                "		SET refSubFormTransID = insertedSubFormTransID              \n" +
                "		WHERE deletedAt IS NULL              \n" +
                "		AND refTransID = insertedWOID              \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;              \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;              \n" +
                "		SET lv_parentDataElementID_from = NULL;              \n" +
                "		SET lv_rowNumber_from = NULL;              \n" +
                "		SET insertedSubFormTransID = NULL;              \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;	              \n" +
                "	CLOSE subform_wo_from_data_cursor;	              \n" +
                "  \n" +
                "	END  block1;   				                \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement                  \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`                  \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                  \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,                  \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                  \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                      \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement                  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`                  \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                  \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,                  \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                  \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;                 \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields                 \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                  \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                  \n" +
                "	SELECT `dataElementID`,`value`,              \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo                \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom                   \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )              \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,              \n" +
                "	`entityID`,UTC_DATE() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`               \n" +
                "	FROM dataelement_transactionvalues dt               \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL              \n" +
                "					AND wop.woID = woID )              \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)                  \n" +
                "	AND dt.deletedAt IS NULL;               \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form	              \n" +
                "  \n" +
                "	block2:BEGIN                   \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)              \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR               \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`              \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL              \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                  \n" +
                "					AND entityID = (SELECT entityID FROM entity en               \n" +
                "						WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)              \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation               \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )               \n" +
                "					ORDER BY refSubFormTransID ASC		    	              \n" +
                "			);               \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                    \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;                   \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;                    \n" +
                "	-- loop item till all records found in string match of sub-form data element              \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP                \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN              \n" +
                "			LEAVE woop_sub_Form_loop;                      \n" +
                "		 END IF;                      \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */	              \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)              \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);              \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	              \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */              \n" +
                "		SET @SQl1 = CONCAT('              \n" +
                "				UPDATE dataelement_transactionvalues              \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,              \n" +
                "				' WHERE deletedAt IS NULL              \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation              \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )              \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';		              \n" +
                "			');		                                                  \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                  \n" +
                "		EXECUTE stmt1;     		              \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;              \n" +
                "		SET lv_parentDataElementID_from = NULL;              \n" +
                "		SET lv_rowNumber_from = NULL;              \n" +
                "		SET insertedSubFormTransID = NULL;              \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;	              \n" +
                "	CLOSE subform_woop_from_data_cursor;	              \n" +
                "  \n" +
                "	END  block2;                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp                  \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery                  \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`                  \n" +
                "    (`woID`,`partNumber`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)                  \n" +
                "	SELECT                   \n" +
                "    insertedWOID `woID`,`partNumber`,`woMultiplier`,`displayOrder`,userID `createdBy`,UTC_DATE() `createdAt`,`programName`,                  \n" +
                "    (SELECT woOPID FROM                   \n" +
                "    workorder_operation wop                   \n" +
                "	WHERE wop.opID IN (                  \n" +
                "		SELECT opID FROM workorder_operation wo                   \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID                  \n" +
                "		)                  \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID                  \n" +
                "	FROM workorder_preprogcomp wp                   \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator                  \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`                  \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)                  \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,                  \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.partNumber =                   \n" +
                "	(SELECT swp.partNumber FROM workorder_preprogcomp swp WHERE swp.woID = woID AND                  \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,                  \n" +
                "	userID `createdBy`,UTC_DATE() `createdAt`                  \n" +
                "	FROM workorder_preprogcomp_designator wpd                   \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;                  \n" +
                "  \n" +
                "    IF IFNULL(isRevision,0) = 0 THEN                  \n" +
                "	    # copy generic_folder                  \n" +
                "	    INSERT INTO generic_folder                  \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                  \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`)                  \n" +
                "			SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,                  \n" +
                "			0 isDeleted, UTC_DATE() createdAt, userID createdBy, a.gencFolderID copyGencFolderID                  \n" +
                "			FROM generic_folder a WHERE a.refTransID = woID AND a.gencFileOwnerType = 'workorder'  AND a.deletedAt IS NULL;                  \n" +
                "		UPDATE generic_folder gf1,                  \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID                  \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                  \n" +
                "			) gf2                  \n" +
                "			SET gf1.refParentId = gf2.gencFolderID                  \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                  \n" +
                "    END IF;                  \n" +
                "	COMMIT;                  \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;                  \n" +
                "END IF;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetMaxWorkorderNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetMaxWorkorderNumber`(              \n" +
                "	IN pwoID INT(11),      \n" +
                "	IN pisRepeat INT(11)      \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE woPartID INT(11) DEFAULT 0;      \n" +
                "	DECLARE woWONumber NVARCHAR(100);      \n" +
                "	SET woPartID = 0;      \n" +
                "  \n" +
                "	IF (pwoID IS NULL) THEN      \n" +
                "		SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder` AS `Workorder` WHERE `Workorder`.`deletedAt` IS NULL;      \n" +
                "	ELSE       \n" +
                "		-- commmented after discussion with dixit sir on 02/10/2018         \n" +
                "		SELECT partID, woNumber INTO woPartID, woWONumber FROM workorder WHERE woID=pwoID AND `deletedAt` IS NULL;      \n" +
                "		SET woWONumber = SUBSTRING_INDEX(woWONumber,'-',1);      \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT IFNULL(MAX(`woNumber`),0) AS `maxValue` FROM `workorder` Where woNumber LIKE '%\", woWONumber, \"%' AND `deletedAt` IS NULL\");      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;		      \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                  \n" +
                "	IN pCustomerID INT(11)            \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE mfgCodeID INT(11);            \n" +
                "	DECLARE whereClause VARCHAR(500);      \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";       \n" +
                "	IF pCustomerID IS NOT NULL THEN      \n" +
                "		SELECT id INTO mfgCodeID FROM mfgcodemst WHERE customerID = pCustomerID AND isCustomer = 1 AND deletedAt IS NULL;       \n" +
                "		IF mfgCodeID IS NOT NULL THEN       \n" +
                "			SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", mfgCodeID);      \n" +
                "		ELSE   \n" +
                "			SET whereClause = \"WHERE 1=0\";  \n" +
                "		END IF;	      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,   \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.description,ro.rohsIcon, mfg.mfgCode   \n" +
                "	FROM component c   \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0   \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);            \n" +
                "    PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;           \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),	              \n" +
                "    IN pWhereClause VARCHAR(16383)                  \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "	/* DECLARE SQLStatement varchar(255); */              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "		SELECT wo.*, co.PIDCODE AS PIDCode, co.nickname AS nickName,                \n" +
                "        (SELECT SUM(ws.poQty) FROM workorder_salesorder_details ws WHERE wo.woID = ws.woID AND IFNULL(ws.isDeleted,0) = 0 AND ws.deletedAt IS NULL) soPOQty ,              \n" +
                "        fun_getWoStatusNameByID(`wo`.`woStatus`) AS `woStatusConvertedValue` ,              \n" +
                "	`ro`.`name` AS `isLeadFreeConvertedValue` ,              \n" +
                "	(CASE WHEN (`wo`.`isSampleAvailable` = 0) THEN 'No'               \n" +
                "					WHEN (`wo`.`isSampleAvailable` = 1) THEN 'Yes' ELSE '' END) AS `isSampleAvailableConvertedValue` ,              \n" +
                "	(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'               \n" +
                "					WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,              \n" +
                "	fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,      \n" +
                "	(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'            \n" +
                "		ELSE 'No' END) AS `isHalt`,            \n" +
                "	(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN             \n" +
                "		(SELECT CONCAT(whu.reason, ' - Halt by ',             \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),             \n" +
                "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))             \n" +
                "			FROM workorder_trans_hold_unhold whu             \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0             \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL            \n" +
                "			ORDER BY whu.startDate DESC LIMIT 1)             \n" +
                "		ELSE              \n" +
                "		(SELECT CONCAT(whu.resumeReason, ' - Resume by ',             \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),             \n" +
                "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))            \n" +
                "			FROM workorder_trans_hold_unhold whu             \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0             \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL            \n" +
                "			ORDER BY whu.endDate DESC LIMIT 1)             \n" +
                "		END) AS reasonDetails,            \n" +
                "	(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0             \n" +
                "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount            \n" +
                "	FROM workorder wo              \n" +
                "        JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3    \n" +
                "        LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                      \n" +
                "		WHERE IFNULL(wo.isdeleted,0) = 0;                   \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName DESC\") ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );              \n" +
                "	PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;               \n" +
                "  \n" +
                "	/* to get total count of rows of workorder table */              \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM workorder where deletedAt IS NULL \" );              \n" +
                "	PREPARE query3 FROM @SQLStatement3;              \n" +
                "	EXECUTE query3;              \n" +
                "	DEALLOCATE PREPARE query3;              \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                            \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),	                            \n" +
                "    IN pWhereClause VARCHAR(16383)                                \n" +
                "    )  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	/* DECLARE SQLStatement varchar(255); */                            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                            \n" +
                "  \n" +
                "    SELECT COUNT(rl.id) AS lineItemCount, rf.id,                     \n" +
                "    (SELECT asb.id FROM rfq_assy_bom asb WHERE IFNULL(asb.isdeleted,0) = 0 AND asb.reqAssyID = ra.id  GROUP BY rf.id) AS assyBomID,                           \n" +
                "	part.PIDCode,part.RoHSStatusID, part.mfgPN,part.description,part.rev,part.assyCode,part.nickName,ro.rohsIcon,    \n" +
                "    (SELECT changeVersion FROM rfq_assembly_history WHERE rfqAssyID = ra.id ORDER BY id DESC LIMIT 1) AS InternalVersion,    \n" +
                "    (CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,                 \n" +
                "	ro.name AS `rohsComplientConvertedValue`,          \n" +
                "    -- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'                               \n" +
                "	-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,                      \n" +
                "	(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'                               \n" +
                "	WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,        \n" +
                "    (CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'                               \n" +
                "	WHEN (`ra`.`timePeriod` = 1) THEN 'W'      \n" +
                "    WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,       \n" +
                "	job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.customerCode,')',cu.companyName) AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,                            \n" +
                "	ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified                        \n" +
                "    FROM rfqforms rf                            \n" +
                "	INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0                            \n" +
                "	LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0                            \n" +
                "	LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0                            \n" +
                "	INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0                            \n" +
                "	INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0           \n" +
                "	#left JOIN rfq_rohsmst ro ON ra.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0        \n" +
                "	#JOIN rfq_assy_bom ab ON ab.reqAssyID = ra.id AND IFNULL(ab.isdeleted,0) = 0 AND ab.bomNumber IS NULL                        \n" +
                "    LEFT OUTER JOIN rfq_lineitems rl ON rl.rfqAssyID = ra.id AND rl.isDeleted = 0                                \n" +
                "    LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0    \n" +
                "    LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "	WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id ;                            \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                 \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                            \n" +
                "	PREPARE query3 FROM @SQLStatement3;                            \n" +
                "	EXECUTE query3;                            \n" +
                "	DEALLOCATE PREPARE query3;                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderHaltResumeReasonHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderHaltResumeReasonHistory`(	      \n" +
                "	IN pWoID INT(11),             \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),	          \n" +
                "	IN pWhereClause VARCHAR(16383)              \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "	/* DECLARE SQLStatement varchar(255); */          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS         \n" +
                "	(SELECT       \n" +
                "	wouh.woID,       \n" +
                "	'' AS woOPID,       \n" +
                "	'' AS OperationName,      \n" +
                "	DATE_FORMAT(wouh.startDate,'%m/%d/%Y %h:%i:%S %p') haltDate,      \n" +
                "	DATE_FORMAT(wouh.enddate,'%m/%d/%Y %h:%i:%S %p') resumeDate,      \n" +
                "	wouh.reason,      \n" +
                "	wouh.resumeReason,      \n" +
                "	(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp       \n" +
                "		WHERE emp.id=wouh.holdEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS holdEmployeeName,      \n" +
                "	(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp       \n" +
                "		WHERE emp.id=wouh.unHoldEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS unHoldEmployeeName,      \n" +
                "	'0' AS haltTypeVal,      \n" +
                "	'Work Order' AS haltTypeText      \n" +
                "	FROM workorder_trans_hold_unhold wouh      \n" +
                "	WHERE wouh.woID=pWoID)      \n" +
                "	UNION      \n" +
                "	(SELECT       \n" +
                "		wopuh.woID,       \n" +
                "		wopuh.woOPID,       \n" +
                "		(SELECT CONCAT(wop.opName, ' (',wop.opNumber, ')') FROM workorder_operation wop WHERE wop.woOPID=wopuh.woOPID AND wop.woID=wopuh.woID) AS OperationName,      \n" +
                "		DATE_FORMAT(wopuh.startDate,'%m/%d/%Y %h:%i:%S %p') haltDate,      \n" +
                "		DATE_FORMAT(wopuh.enddate,'%m/%d/%Y %h:%i:%S %p') resumeDate,      \n" +
                "		wopuh.reason,      \n" +
                "		wopuh.resumeReason,      \n" +
                "		(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp       \n" +
                "			WHERE emp.id=wopuh.holdEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS holdEmployeeName,      \n" +
                "		(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp       \n" +
                "			WHERE emp.id=wopuh.unHoldEmployeeId AND IFNULL(emp.isdeleted,0) = 0 AND emp.deletedAt IS NULL) AS unHoldEmployeeName,      \n" +
                "	'1' AS haltTypeVal,      \n" +
                "	'Work Order Operation' AS haltTypeText      \n" +
                "	FROM workorder_trans_operation_hold_unhold wopuh      \n" +
                "	WHERE wopuh.woID=pWoID);        \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"OperationName DESC\") ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippedAssembly` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedAssembly`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT ow.*, co.PIDCode AS PIDCode,  \n" +
                "		cu.companyName,wo.woNumber,  \n" +
                "		woop.opName,spm.description,som.salesOrderNumber    \n" +
                "		FROM shippedassembly ow    \n" +
                "	LEFT JOIN customers cu ON cu.id=ow.customerID AND IFNULL(cu.isdeleted,0)=0	    \n" +
                "        LEFT JOIN component co ON ow.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category, 0) = 3    \n" +
                "        LEFT JOIN workorder wo ON ow.workorderID = wo.woID AND IFNULL(wo.isdeleted,0) = 0    \n" +
                "        LEFT JOIN workorder_operation woop ON ow.woOPID=woop.woOPID AND IFNULL(woop.isdeleted,0) = 0    \n" +
                "        LEFT JOIN salesshippingmst spm ON spm.shippingID=ow.shippingId AND IFNULL(spm.isdeleted,0) = 0    \n" +
                "        LEFT JOIN salesorderdet sdet ON sdet.id=spm.sDetID AND IFNULL(sdet.isdeleted,0) = 0    \n" +
                "        LEFT JOIN salesordermst som ON som.id=sdet.refSalesOrderID AND IFNULL(som.isdeleted,0) = 0    \n" +
                "        WHERE IFNULL(ow.isdeleted,0) = 0;    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"PIDCode DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippingRequestDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippingRequestDet`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT srd.id, srd.woID, srd.note, srd.qty, srd.shippingRequestID, wo.woNumber,   \n" +
                "		wo.buildQty, wo.poQty, wo.poNumber,    \n" +
                "		co.nickname AS `nickName`, co.PIDcode AS `PIDCode`, cus.companyName    \n" +
                "        FROM shipping_requestdet srd    \n" +
                "        JOIN workorder wo ON srd.woID = wo.woID AND IFNULL(wo.isDeleted, 0) = 0    \n" +
                "        JOIN component co ON wo.partID = co.id AND IFNULL(co.isDeleted, 0) = 0  AND IFNULL(co.category, 0) = 3   \n" +
                "        JOIN customers cus ON wo.customerID = cus.id AND IFNULL(cus.isDeleted, 0) = 0    \n" +
                "        WHERE IFNULL(srd.isDeleted, 0) = 0;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\");    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetVUWorkorderReadyassyStk` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetVUWorkorderReadyassyStk`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "    IN pWhereClause VARCHAR(16383)       \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "	SELECT vu.woID, vu.opID, vu.woOPID,vu.woNumber, vu.shippedQty,    \n" +
                "	co.nickname AS `nickName`, co.PIDCODE AS `PIDCode`, co.mfgPN,   \n" +
                "	vu.woVersion, vu.inHouseStockQty,  \n" +
                "    wae.location, wae.serialNoDescription, wae.notes    \n" +
                "    FROM vu_workorder_readyAssy_stk vu    \n" +
                "    JOIN component co ON vu.partID = co.id AND IFNULL(co.isDeleted, 0) = 0    \n" +
                "    LEFT JOIN workorder_assembly_excessstock_location wae ON vu.woID = wae.woID AND wae.isdefault = 1 AND IFNULL(wae.isDeleted, 0) = 0;    \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"woNumber ASC\");    \n" +
                "	END IF;	    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;    \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (147,'2.00','V1','Alter SP related to assembly - Vaibhav'," + userid + ");"
            );
            break;
        case 147:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyidByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyidByID`(    \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(50);   \n" +
                "	SELECT PIDCode INTO @result FROM component WHERE id = ppartID   \n" +
                "	AND IFNULL(category,0) = 3;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyNameByID`(    \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(255);    \n" +
                "  \n" +
                "	SELECT mfgPN INTO @result FROM component WHERE id = ppartID  \n" +
                "	AND IFNULL(category,0) = 3;      \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyrevNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyrevNameByID`(    \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(50);    \n" +
                "  \n" +
                "	SELECT rev INTO @result FROM component WHERE id = ppartID  \n" +
                "	AND IFNULL(category,0) = 3;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getManualEntityTransValues` ;  \n" +
                "CREATE FUNCTION `fun_getManualEntityTransValues`(    \n" +
                "	pEntityID INT(11),    \n" +
                "	pDataElementID INT(11),    \n" +
                "	pValue LONGTEXT    \n" +
                "    ) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result LONGTEXT;    \n" +
                "	DECLARE lpControlTypeID  INT(3);    \n" +
                "	DECLARE lpIsDatasource  TINYINT(1);    \n" +
                "	DECLARE lpIsFixedEntity  TINYINT(1);    \n" +
                "	DECLARE lpDatasourceID  INT(11);    \n" +
                "	DECLARE lpTableName  VARCHAR(100);    \n" +
                "  \n" +
                "  \n" +
                "	SELECT controlTypeID,isDatasource ,isFixedEntity,datasourceID INTO lpControlTypeID,lpIsDatasource,lpIsFixedEntity,lpDatasourceID    \n" +
                "	FROM dataelement     \n" +
                "	WHERE entityID = pEntityID AND dataElementID = pDataElementID    \n" +
                "	;	    \n" +
                "  \n" +
                "	IF(lpControlTypeID = 9 OR lpControlTypeID = 10) THEN  /* controltypeid --> 9-option , 10-combobox */    \n" +
                "		IF(lpIsDatasource = 1) THEN  /* manual entry - 0 / datasource selection - 1 of dataelement */    \n" +
                "  \n" +
                "			IF(lpIsFixedEntity = 1) THEN  /* IsFixedEntity --> 1 - Fixed Entity Master */    \n" +
                "  \n" +
                "				SELECT tableName INTO lpTableName    \n" +
                "				FROM fixed_entity_dataelement WHERE id = lpDatasourceID;    \n" +
                "  \n" +
                "				CASE  lpTableName    \n" +
                "					WHEN 'employees' THEN      \n" +
                "						SELECT initialName INTO result FROM employees WHERE id = pValue;     \n" +
                "					WHEN 'department' THEN      \n" +
                "						SELECT deptName INTO result FROM department WHERE deptID = pValue;     \n" +
                "					WHEN 'operations' THEN      \n" +
                "						SELECT opName INTO result FROM operations WHERE opID = pValue;     \n" +
                "					WHEN 'parts' THEN      \n" +
                "						SELECT partNumber INTO result FROM parts WHERE partID = pValue;     \n" +
                "					WHEN 'defectcategory' THEN      \n" +
                "						SELECT defectcatName INTO result FROM defectcategory WHERE defectCatId = pValue;     \n" +
                "					WHEN 'workorder' THEN      \n" +
                "						SELECT woNumber INTO result FROM workorder WHERE woID = pValue;    \n" +
                "					WHEN 'customers' THEN      \n" +
                "						SELECT customerCode INTO result FROM customers WHERE id = pValue;	    \n" +
                "					WHEN 'genericcategory' THEN      \n" +
                "						SELECT gencCategoryName INTO result FROM genericcategory WHERE gencCategoryID = pValue;    \n" +
                "					WHEN 'equipment' THEN      \n" +
                "						SELECT assetName INTO result FROM equipment WHERE eqpID = pValue;    \n" +
                "					WHEN 'workorder_serialmst' THEN      \n" +
                "						SELECT SerialNo INTO result FROM workorder_serialmst WHERE id = pValue;								    \n" +
                "					ELSE     \n" +
                "						SET result = '';    \n" +
                "				END CASE;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			ELSE  /* IsFixedEntity --> 0 = Custom Forms */    \n" +
                "				SELECT VALUE INTO result FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID = pValue;    \n" +
                "			END IF;     \n" +
                "  \n" +
                "		ELSE     \n" +
                "			SELECT NAME INTO result FROM dataelement_keyvalues WHERE keyValueID = pValue;     \n" +
                "		END IF;    \n" +
                "  \n" +
                "	ELSEIF(lpControlTypeID = 8 OR lpControlTypeID = 11) THEN  /* controltypeid --> 8-MultipleChoice , 11-MultipleChoiceDropdown */    \n" +
                "		IF(lpIsDatasource = 1) THEN  /* manual entry - 0 / datasource selection - 1 of dataelement */    \n" +
                "  \n" +
                "			IF(lpIsFixedEntity = 1) THEN  /* IsFixedEntity --> 1 - Fixed Entity Master */    \n" +
                "  \n" +
                "				SELECT tableName INTO lpTableName    \n" +
                "				FROM fixed_entity_dataelement WHERE id = lpDatasourceID;    \n" +
                "  \n" +
                " 				CASE  lpTableName    \n" +
                " 					WHEN 'employees' THEN      \n" +
                "						SELECT GROUP_CONCAT(initialName) INTO result FROM employees WHERE FIND_IN_SET(id,REPLACE(pValue,'|',','));     \n" +
                " 					WHEN 'department' THEN      \n" +
                "						SELECT GROUP_CONCAT(deptName) INTO result FROM department WHERE FIND_IN_SET(deptID,REPLACE(pValue,'|',','));     \n" +
                "					WHEN 'operations' THEN    \n" +
                "						SELECT GROUP_CONCAT(opName) INTO result FROM operations WHERE FIND_IN_SET(opID,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'parts' THEN      \n" +
                "						SELECT GROUP_CONCAT(partNumber) INTO result FROM parts WHERE FIND_IN_SET(partID,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'defectcategory' THEN      \n" +
                "						SELECT GROUP_CONCAT(defectcatName) INTO result FROM defectcategory WHERE FIND_IN_SET(defectCatId,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'workorder' THEN      \n" +
                "						SELECT GROUP_CONCAT(woNumber) INTO result FROM workorder WHERE FIND_IN_SET(woID,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'customers' THEN      \n" +
                "						SELECT GROUP_CONCAT(customerCode) INTO result FROM customers WHERE FIND_IN_SET(id,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'genericcategory' THEN      \n" +
                "						SELECT GROUP_CONCAT(gencCategoryName) INTO result FROM genericcategory WHERE FIND_IN_SET(gencCategoryID,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'equipment' THEN      \n" +
                "						SELECT GROUP_CONCAT(assetName) INTO result FROM equipment WHERE FIND_IN_SET(eqpID,REPLACE(pValue,'|',','));    \n" +
                "					WHEN 'workorder_serialmst' THEN     \n" +
                "						SELECT GROUP_CONCAT(SerialNo) INTO result FROM workorder_serialmst WHERE FIND_IN_SET(id,REPLACE(pValue,'|',','));	    \n" +
                " 					ELSE     \n" +
                " 						SET result = '';    \n" +
                " 				END CASE;    \n" +
                "  \n" +
                "  \n" +
                "			ELSE  /* IsFixedEntity --> 0 = Custom Forms */    \n" +
                "			      SELECT GROUP_CONCAT(VALUE) INTO result FROM dataelement_transactionvalues_manual WHERE FIND_IN_SET(dataElementTransManualID,REPLACE(pValue,'|',','));    \n" +
                "			END IF;     \n" +
                "  \n" +
                "		ELSE     \n" +
                "			SELECT GROUP_CONCAT(NAME) INTO result FROM dataelement_keyvalues WHERE FIND_IN_SET(keyValueID,REPLACE(pValue,'|',','));     \n" +
                "		END IF;    \n" +
                "  \n" +
                "	ELSEIF(lpControlTypeID = 7) THEN    \n" +
                "  \n" +
                "		CASE pValue    \n" +
                " 			WHEN 'true' THEN      \n" +
                "				SET result = 'Yes';    \n" +
                " 			WHEN 'false' THEN      \n" +
                "				SET result = 'No';    \n" +
                "			ELSE     \n" +
                " 				SET result = pValue;    \n" +
                "		END CASE;			    \n" +
                "	ELSE     \n" +
                "		SET result = pValue;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (148,'2.00','V1','Alter Function related to assembly - Vaibhav'," + userid + ");"
            );
            break;
        case 148:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_readyassy_stk` ;  \n" +
                "CREATE VIEW `vu_workorder_readyassy_stk` AS   \n" +
                "SELECT `a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,  \n" +
                "`a`.`woID` AS `woID`,`a`.`woNumber` AS `woNumber`,  \n" +
                "`a`.`partID` AS `partID`,`a`.`buildQty` AS `buildQty`,  \n" +
                "`a`.`woStatus` AS `woStatus`,`a`.`woVersion` AS `woVersion`,  \n" +
                "`a`.`isDeleted` AS `isDeleted`,`a`.`StockQty` AS `StockQty`,  \n" +
                "`a`.`PassQty` AS `PassQty`,`a`.`reprocessQty` AS `reprocessQty`,  \n" +
                "`a`.`observedQty` AS `observedQty`,`a`.`reworkQty` AS `reworkQty`,  \n" +
                "`a`.`scrapQty` AS `scrapQty`,`a`.`TerminatedTransQty` AS `TerminatedTransQty`,  \n" +
                "(IFNULL(`a`.`ShippedQty_BeforLastOP`,0) + IFNULL(`a`.`ShippedQty_fromLastOP`,0)) AS `ShippedQty`,  \n" +
                "`a`.`ShippedQty_BeforLastOP` AS `ShippedQty_BeforLastOP`,`a`.`ShippedQty_fromLastOP` AS `ShippedQty_fromLastOP`,  \n" +
                "(`a`.`StockQty` - `a`.`ShippedQty_fromLastOP`) AS `inHouseStockQty` FROM (SELECT `a`.`opID` AS `opID`,  \n" +
                "`a`.`woOPID` AS `woOPID`,`a`.`woID` AS `woID`,`a`.`woNumber` AS `woNumber`,  \n" +
                "`a`.`partID` AS `partID`,  \n" +
                "`a`.`buildQty` AS `buildQty`,`a`.`woStatus` AS `woStatus`,`a`.`woVersion` AS `woVersion`,  \n" +
                "`a`.`isDeleted` AS `isDeleted`,IFNULL(`b`.`StockQty`,0) AS `StockQty`,  \n" +
                "IFNULL(`b`.`PassQty`,0) AS `PassQty`,IFNULL(`b`.`reprocessQty`,0) AS `reprocessQty`,  \n" +
                "IFNULL(`b`.`observedQty`,0) AS `observedQty`,IFNULL(`b`.`reworkQty`,0) AS `reworkQty`,  \n" +
                "IFNULL(`b`.`scrapQty`,0) AS `scrapQty`,  \n" +
                "(SELECT IFNULL(SUM(`workorder_transfer`.`transferQty`),0)   \n" +
                "FROM `workorder_transfer` WHERE ((`workorder_transfer`.`fromWOID` = `a`.`woID`)   \n" +
                "AND (IFNULL(`workorder_transfer`.`isDeleted`,0) = 0)   \n" +
                "AND (`workorder_transfer`.`fromWOOPID` = `a`.`woOPID`))) AS `TerminatedTransQty`,  \n" +
                "(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0) FROM `shippedassembly`   \n" +
                "WHERE ((`shippedassembly`.`workorderID` = `a`.`woID`)   \n" +
                "AND (`shippedassembly`.`woOPID` = `a`.`woOPID`)   \n" +
                "AND (IFNULL(`shippedassembly`.`isDeleted`,0) = 0))) AS `ShippedQty_fromLastOP`,  \n" +
                "(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0)   \n" +
                "FROM `shippedassembly` WHERE ((`shippedassembly`.`workorderID` = `a`.`woID`)   \n" +
                "AND (`shippedassembly`.`woOPID` <> `a`.`woOPID`)   \n" +
                "AND (IFNULL(`shippedassembly`.`isDeleted`,0) = 0))) AS `ShippedQty_BeforLastOP`   \n" +
                "FROM (((SELECT `a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,`b`.`woID` AS `woID`,`b`.`woNumber` AS `woNumber`,  \n" +
                "`b`.`partID` AS `partID`,`b`.`buildQty` AS `buildQty`,`b`.`woStatus` AS `woStatus`,`b`.`woVersion` AS `woVersion`,  \n" +
                "`a`.`isDeleted` AS `isDeleted` FROM (`workorder_operation` `a`   \n" +
                "JOIN `workorder` `b` ON((`a`.`woID` = `b`.`woID`)))   \n" +
                "WHERE (`a`.`woID`,`a`.`opNumber`) IN (SELECT `workorder_operation`.`woID`,  \n" +
                "MAX(`workorder_operation`.`opNumber`) FROM `workorder_operation`   \n" +
                "WHERE ((IFNULL(`workorder_operation`.`isDeleted`,0) = 0)   \n" +
                "AND (`workorder_operation`.`qtyControl` = 1))   \n" +
                "GROUP BY `workorder_operation`.`woID`))) `a`   \n" +
                "LEFT JOIN (SELECT `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,  \n" +
                "SUM(IFNULL(`a`.`IssueQty`,0)) AS `IssueQty`,SUM(`a`.`RecCnt`) AS `RecCnt`,  \n" +
                "SUM(`a`.`OPProdQty`) AS `OPProdQty`,SUM(`a`.`StockQty`) AS `StockQty`,  \n" +
                "SUM(`a`.`PassQty`) AS `PassQty`,SUM(`a`.`productionQty`) AS `productionQty`,  \n" +
                "SUM(`a`.`reprocessQty`) AS `reprocessQty`,SUM(`a`.`observedQty`) AS `observedQty`,  \n" +
                "SUM(`a`.`reworkQty`) AS `reworkQty`,SUM(`a`.`scrapQty`) AS `scrapQty`   \n" +
                "FROM (SELECT `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,`a`.`woOPID` AS `woOPID`,`a`.`woTransID` AS `woTransId`,  \n" +
                "IFNULL(`a`.`issueQty`,0) AS `IssueQty`,COUNT(1) AS `RecCnt`,SUM(IFNULL(`b`.`totalQty`,0)) AS `OPProdQty`,  \n" +
                "(SUM(IFNULL(`b`.`totalQty`,0)) - SUM(IFNULL(`b`.`scrapQty`,0))) AS `StockQty`,  \n" +
                "(SUM(IFNULL(`b`.`totalQty`,0)) + SUM(IFNULL(`b`.`reprocessQty`,0))) AS `productionQty`,  \n" +
                "SUM(IFNULL(`b`.`passQty`,0)) AS `PassQty`,SUM(IFNULL(`b`.`reprocessQty`,0)) AS `reprocessQty`,  \n" +
                "SUM(IFNULL(`b`.`observedQty`,0)) AS `observedQty`,SUM(IFNULL(`b`.`reworkQty`,0)) AS `reworkQty`,  \n" +
                "SUM(IFNULL(`b`.`scrapQty`,0)) AS `scrapQty` FROM (`workorder_trans` `a`   \n" +
                "LEFT JOIN `workorder_trans_production` `b` ON((`a`.`woTransID` = `b`.`woTransID`)))   \n" +
                "WHERE ((IFNULL(`a`.`isDeleted`,0) = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0))   \n" +
                "GROUP BY `a`.`woID`,`a`.`opID`,`a`.`woOPID`,`a`.`woTransID`,IFNULL(`a`.`issueQty`,0)) `a`   \n" +
                "GROUP BY `a`.`woID`,`a`.`opID`,`a`.`woOPID`) `b` ON(((`a`.`woID` = `b`.`woID`) AND (`a`.`opID` = `b`.`opID`))))) `a`;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_employeeproduction` ;  \n" +
                "CREATE VIEW `vu_employeeproduction` AS   \n" +
                "SELECT  \n" +
                "  `b`.`firstName`      AS `First Name`,  \n" +
                "  `b`.`lastName`       AS `Last Name`,  \n" +
                "  CONCAT(`b`.`firstName`,' ',`b`.`lastName`) AS `Full Name`,  \n" +
                "  `b`.`burdenRate`     AS `Burden Rate`,  \n" +
                "  `b`.`initialName`    AS `Initial Name`,  \n" +
                "  `a`.`woID`           AS `wo ID Identity`,  \n" +
                "  `wo`.`woNumber`      AS `WO Number`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`PIDCode`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE (`wo`.`partID` = `am`.`id`) AND (`am`.category = 3)) AS `Assy ID`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`mfgPN`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE (`wo`.`partID` = `am`.`id`) AND (`am`.category = 3)) AS `Assy Number`,  \n" +
                "  (SELECT  \n" +
                "     `arm`.`rev`  \n" +
                "   FROM `component` `arm`  \n" +
                "   WHERE (`wo`.`partID` = `arm`.`id`) AND (`arm`.category = 3)) AS `Revision`,  \n" +
                "  `a`.`opID`           AS `OP ID Identity`,  \n" +
                "  (SELECT  \n" +
                "     `wp`.`opName`  \n" +
                "   FROM `workorder_operation` `wp`  \n" +
                "   WHERE (`wp`.`woOPID` = `a`.`woOPID`)) AS `OP Name`,  \n" +
                "  `a`.`woOPID`         AS `woOP ID Identity`,  \n" +
                "  `a`.`woTransID`      AS `woTrans ID Identity`,  \n" +
                "  `a`.`workstationID`  AS `WorkStation ID Identity`,  \n" +
                "  `a`.`equipmentID`    AS `Equipment ID  Identity`,  \n" +
                "  (SELECT  \n" +
                "     CONCAT(`eqp`.`assetName`,' (',`eqp`.`eqpMake`,' | ',`eqp`.`eqpModel`,' | ',`eqp`.`eqpYear`,')')  \n" +
                "   FROM `equipment` `eqp`  \n" +
                "   WHERE (`a`.`equipmentID` = `eqp`.`eqpID`)) AS `Equipment Name`,  \n" +
                "  SEC_TO_TIME(`a`.`checkinSetupTime`) AS `Checkin SetupTime`,  \n" +
                "  `a`.`checkoutTime`   AS `Checkout Time`,  \n" +
                "  SEC_TO_TIME(`a`.`checkoutSetupTime`) AS `Checkout SetupTime`,  \n" +
                "  `a`.`totalTime`      AS `Total Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`totalTime`) AS `Total Time`,  \n" +
                "  `a`.`productionTime` AS `Production Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`productionTime`) AS `Production Time`,  \n" +
                "  `c`.`totalQty`       AS `Total Qty`,  \n" +
                "  IFNULL(ROUND((`a`.`productionTime` / `c`.`totalQty`),2),0) AS `Average Time In Sec`,  \n" +
                "  SEC_TO_TIME(IFNULL(ROUND((`a`.`productionTime` / `c`.`totalQty`),2),0)) AS `Average Time`,  \n" +
                "  `c`.`PassQty`        AS `Passed Qty`,  \n" +
                "  `c`.`reprocessQty`   AS `Reprocessed Qty`,  \n" +
                "  `c`.`observedQty`    AS `Defect Observed Qty`,  \n" +
                "  `c`.`reworkQty`      AS `Rework  Required Qty`,  \n" +
                "  `c`.`scrapQty`       AS `Scraped Qty`  \n" +
                "FROM (((`workorder_trans_empinout` `a`  \n" +
                "     JOIN `workorder` `wo`  \n" +
                "       ON ((`a`.`woID` = `wo`.`woID`)))  \n" +
                "    JOIN (SELECT  \n" +
                "            `workorder_trans_production`.`woTransID` AS `woTransId`,  \n" +
                "            SUM(`workorder_trans_production`.`totalQty`) AS `totalQty`,  \n" +
                "            SUM(`workorder_trans_production`.`passQty`) AS `PassQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "            SUM(`workorder_trans_production`.`observedQty`) AS `observedQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reworkQty`) AS `reworkQty`,  \n" +
                "            SUM(`workorder_trans_production`.`scrapQty`) AS `scrapQty`  \n" +
                "          FROM `workorder_trans_production`  \n" +
                "          GROUP BY `workorder_trans_production`.`woTransID`) `c`  \n" +
                "      ON ((`a`.`woTransID` = `c`.`woTransId`)))  \n" +
                "   JOIN `employees` `b`  \n" +
                "     ON ((`a`.`employeeID` = `b`.`id`)))  \n" +
                "WHERE `a`.`woTransID` IN(SELECT  \n" +
                "                           `a`.`woTransID`  \n" +
                "                         FROM `workorder_trans` `a`  \n" +
                "                         WHERE EXISTS(SELECT  \n" +
                "                                        'Y'  \n" +
                "                                      FROM `workorder_operation` `b`  \n" +
                "                                      WHERE ((`b`.`woID` = `a`.`woID`)  \n" +
                "                                             AND (`b`.`woOPID` = `a`.`woOPID`)  \n" +
                "                                             AND (`b`.`opID` = `a`.`opID`)  \n" +
                "                                             AND (IFNULL(`b`.`isTeamOperation`,0) = 0)  \n" +
                "                                             AND (`b`.`qtyControl` = 1))));  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_employeeproductionteamwise` ;  \n" +
                "CREATE VIEW `vu_employeeproductionteamwise` AS   \n" +
                "SELECT  \n" +
                "  `b`.`firstName`      AS `First Name`,  \n" +
                "  `b`.`lastName`       AS `Last Name`,  \n" +
                "  CONCAT(`b`.`firstName`,' ',`b`.`lastName`) AS `Full Name`,  \n" +
                "  `b`.`burdenRate`     AS `Burden Rate`,  \n" +
                "  `b`.`initialName`    AS `Initial Name`,  \n" +
                "  `a`.`woID`           AS `wo ID Identity`,  \n" +
                "  `wo`.`woNumber`      AS `WO Number`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`PIDCode`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE (`wo`.`partID` = `am`.`id`) AND (`am`.category = 3)) AS `Assy ID`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`mfgPN`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE (`wo`.`partID` = `am`.`id`) AND (`am`.category = 3)) AS `Assy Number`,  \n" +
                "  (SELECT  \n" +
                "     `arm`.`rev`  \n" +
                "   FROM `component` `arm`  \n" +
                "   WHERE (`wo`.`partID` = `arm`.`id`) AND (`arm`.category = 3)) AS `Revision`,  \n" +
                "  `a`.`opID`           AS `OP ID Identity`,  \n" +
                "  (SELECT  \n" +
                "     `wp`.`opName`  \n" +
                "   FROM `workorder_operation` `wp`  \n" +
                "   WHERE ((`wp`.`isTeamOperation` = 1)  \n" +
                "          AND (`wp`.`woOPID` = `a`.`woOPID`))) AS `OP Name`,  \n" +
                "  `a`.`woOPID`         AS `woOP ID Identity`,  \n" +
                "  `a`.`woTransID`      AS `woTrans ID Identity`,  \n" +
                "  `a`.`workstationID`  AS `WorkStation ID Identity`,  \n" +
                "  `a`.`equipmentID`    AS `Equipment ID  Identity`,  \n" +
                "  (SELECT  \n" +
                "     CONCAT(`eqp`.`assetName`,' (',`eqp`.`eqpMake`,' | ',`eqp`.`eqpModel`,' | ',`eqp`.`eqpYear`,')')  \n" +
                "   FROM `equipment` `eqp`  \n" +
                "   WHERE (`a`.`equipmentID` = `eqp`.`eqpID`)) AS `Equipment Name`,  \n" +
                "  SEC_TO_TIME(`a`.`checkinSetupTime`) AS `Checkin SetupTime`,  \n" +
                "  `a`.`checkoutTime`   AS `Checkout Time`,  \n" +
                "  SEC_TO_TIME(`a`.`checkoutSetupTime`) AS `Checkout SetupTime`,  \n" +
                "  `a`.`totalTime`      AS `Total Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`totalTime`) AS `Total Time`,  \n" +
                "  `a`.`productionTime` AS `Production Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`productionTime`) AS `Production Time`,  \n" +
                "  `c`.`totalQty`       AS `Original Total Qty`,  \n" +
                "  ROUND(((`c`.`totalQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Total Qty`,  \n" +
                "  IFNULL(ROUND((`a`.`productionTime` / ROUND(((`c`.`totalQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2)),2),0) AS `Average Time In Sec`,  \n" +
                "  SEC_TO_TIME(IFNULL(ROUND((`a`.`productionTime` / ROUND(((`c`.`totalQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2)),2),0)) AS `Average Time`,  \n" +
                "  `c`.`PassQty`        AS `Original Passed Qty`,  \n" +
                "  ROUND(((`c`.`PassQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Passed Qty`,  \n" +
                "  `c`.`reprocessQty`   AS `Original Reprocessed Qty`,  \n" +
                "  ROUND(((`c`.`reprocessQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Reprocessed Qty`,  \n" +
                "  `c`.`observedQty`    AS `Original Defect Observed Qty`,  \n" +
                "  ROUND(((`c`.`observedQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Defect Observed Qty`,  \n" +
                "  `c`.`reworkQty`      AS `Original Rework  Required Qty`,  \n" +
                "  ROUND(((`c`.`reworkQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Rework  Required Qty`,  \n" +
                "  `c`.`scrapQty`       AS `Original Scraped Qty`,  \n" +
                "  ROUND(((`c`.`scrapQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Scraped Qty`  \n" +
                "FROM ((((`workorder_trans_empinout` `a`  \n" +
                "      JOIN `workorder` `wo`  \n" +
                "        ON ((`a`.`woID` = `wo`.`woID`)))  \n" +
                "     JOIN `workorder_operation` `woo`  \n" +
                "       ON (((`woo`.`woOPID` = `a`.`woOPID`)  \n" +
                "            AND (`woo`.`isTeamOperation` = 1))))  \n" +
                "    JOIN (SELECT  \n" +
                "            `workorder_trans_production`.`woTransID` AS `woTransId`,  \n" +
                "            SUM(`workorder_trans_production`.`totalQty`) AS `totalQty`,  \n" +
                "            SUM(`workorder_trans_production`.`passQty`) AS `PassQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "            SUM(`workorder_trans_production`.`observedQty`) AS `observedQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reworkQty`) AS `reworkQty`,  \n" +
                "            SUM(`workorder_trans_production`.`scrapQty`) AS `scrapQty`  \n" +
                "          FROM `workorder_trans_production`  \n" +
                "          GROUP BY `workorder_trans_production`.`woTransID`) `c`  \n" +
                "      ON ((`a`.`woTransID` = `c`.`woTransId`)))  \n" +
                "   JOIN `employees` `b`  \n" +
                "     ON ((`a`.`employeeID` = `b`.`id`)));  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS   \n" +
                "SELECT `a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,  \n" +
                "`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment` AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,  \n" +
                "`a`.`PIDCode` AS `Assy ID`,  \n" +
                "`a`.`mfgPN` AS `Assy Name`,  \n" +
                "`a`.`rev` AS `Assy Revision`,  \n" +
                "`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName` AS `Company Name`,`a`.`fullName` AS `Full Name`,  \n" +
                "`a`.`gencCategoryCode` AS `GencCategory Code`,(IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,  \n" +
                "(CASE WHEN ((IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) > 0) THEN 'Pending' ELSE 'Completed' END) AS `Status`   \n" +
                "FROM (SELECT `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,  \n" +
                "`sm`.`poDate` AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "`sm`.`shippingMethodID` AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,  \n" +
                "`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`,  \n" +
                "`fun_getAssyidByID`(`a`.`partID`) AS `PIDCode`,  \n" +
                "`fun_getAssyNameByID`(`a`.`partID`) AS `mfgPN`,  \n" +
                "`fun_getAssyrevNameByID`(`a`.`partID`) AS `rev`,  \n" +
                "`cu`.`companyName` AS `companyName`,  \n" +
                "CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`a`.`qty` AS `qty`,  \n" +
                "(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0)   \n" +
                "FROM `shippedassembly`   \n" +
                "WHERE ((`shippedassembly`.`partID` = `a`.`partID`)   \n" +
                "AND (`shippedassembly`.`isDeleted` = 0) AND `shippedassembly`.`shippingId`   \n" +
                "IN (SELECT `salesshippingmst`.`shippingID` FROM `salesshippingmst`   \n" +
                "WHERE (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty`   \n" +
                "FROM ((((`salesorderdet` `a` JOIN `salesordermst` `sm`   \n" +
                "ON(((`sm`.`id` = `a`.`refSalesOrderID`) AND (IFNULL(`sm`.`isDeleted`,0) = 0))))   \n" +
                "LEFT JOIN `customers` `cu` ON(((`sm`.`customerID` = `cu`.`id`)   \n" +
                "AND (IFNULL(`cu`.`isDeleted`,0) = 0)))) LEFT JOIN `customer_contactperson` `cc`   \n" +
                "ON(((`sm`.`contactPersonID` = `cc`.`personId`) AND (IFNULL(`cc`.`isDeleted`,0) = 0))))   \n" +
                "LEFT JOIN `genericcategory` `gc` ON(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)   \n" +
                "AND (IFNULL(`gc`.`isDeleted`,0) = 0)))) WHERE (IFNULL(`a`.`isDeleted`,0) = 0)) `a`;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_bom_report` ;  \n" +
                "CREATE VIEW `vu_bom_report` AS   \n" +
                "SELECT  \n" +
                "  (SELECT  \n" +
                "     `customers`.`companyName`  \n" +
                "   FROM `customers`  \n" +
                "   WHERE (`customers`.`id` = (SELECT  \n" +
                "                                `rfqforms`.`customerId`  \n" +
                "                              FROM `rfqforms`  \n" +
                "                              WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)))) AS `CustomerName`,  \n" +
                "  `ra`.`rfqrefID`              AS `QuoteNumber`,  \n" +
                "  (SELECT  \n" +
                "     `rfqforms`.`quoteindate`  \n" +
                "   FROM `rfqforms`  \n" +
                "   WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)) AS `RFQDate`,  \n" +
                "  `comp`.`PIDCode`          AS `Assy ID`,  \n" +
                "  `comp`.`mfgPN`        AS `assemblyNumber`,  \n" +
                "  `comp`.`description` AS `assemblyDescription`,  \n" +
                "  `comp`.`rev`         AS `assemblyRev`,  \n" +
                "  `ra`.`bomFCAVersion`         AS `Version`,  \n" +
                "  `rl`.`lineID`                AS `lineID`,  \n" +
                "  `rl`.`qpa`                   AS `qpa`,  \n" +
                "  `rl`.`refDesig`              AS `refDesig`,  \n" +
                "  `rl`.`custPN`                AS `custPN`,  \n" +
                "  `rl`.`customerRev`           AS `customerRev`,  \n" +
                "  `rl`.`customerDescription`   AS `customerDescription`,  \n" +
                "  `rl`.`level`                 AS `level`,  \n" +
                "  `rl`.`partclassID`           AS `partclassID`,  \n" +
                "  `rl`.`refRFQLineItemID`      AS `ParentLine`,  \n" +
                "  `rl`.`numOfPosition`         AS `Lead`,  \n" +
                "  `rl`.`uomID`                 AS `uomID`,  \n" +
                "  `rl`.`dnpDesig`              AS `DNPREFDES`,  \n" +
                "  `rl`.`dnpQty`                AS `DNPQTY`,  \n" +
                "  `rl`.`isBuyDNPQty`           AS `BUYDNPQTY`,  \n" +
                "  `rl`.`isPurchase`            AS `IsBuy`,  \n" +
                "  `rl`.`isInstall`             AS `Populate`,  \n" +
                "  `rl`.`customerPartDesc`      AS `customerPartDesc`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`mfgPNDescription`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `InternalDescr`,  \n" +
                "  `rla`.`mfgCode`              AS `MFG`,  \n" +
                "  `rla`.`mfgPN`                AS `MFGPN`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`RoHSStatusID`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `RoHS`,  \n" +
                "  `rla`.`distributor`          AS `Distributor`,  \n" +
                "  `rla`.`distPN`               AS `DistributorPN`,  \n" +
                "  `rla`.`description`          AS `FlextronComment`,  \n" +
                "  (SELECT  \n" +
                "     `rfq_lineitems_approval_comment`.`comment`  \n" +
                "   FROM `rfq_lineitems_approval_comment`  \n" +
                "   WHERE (`rfq_lineitems_approval_comment`.`rfqLineItemsAlternatePartID` = `rla`.`id`)  \n" +
                "   ORDER BY `rfq_lineitems_approval_comment`.`approvalDate` DESC  \n" +
                "   LIMIT 0,1) AS `Approvalcomment`  \n" +
                "FROM (((`rfq_assemblies` `ra`  \n" +
                "     JOIN `rfq_lineitems` `rl`  \n" +
                "       ON ((`ra`.`id` = `rl`.`rfqAssyID`)))  \n" +
                "    JOIN `rfq_lineitems_alternatepart` `rla`  \n" +
                "      ON ((`rla`.`rfqLineItemsID` = `rl`.`id`)))  \n" +
                "   LEFT JOIN `component` `comp`  \n" +
                "     ON ((`comp`.`id` = `ra`.`partID`) AND (`comp`.category = 3)))  \n" +
                "WHERE ((`rl`.`isDeleted` = 0)  \n" +
                "       AND (`rla`.`isDeleted` = 0));  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_production_report_stk` ;  \n" +
                "CREATE VIEW `vu_workorder_production_report_stk` AS   \n" +
                "SELECT `a`.`woID` AS `wo ID Identity`,`w`.`woNumber` AS `wo Number`,  \n" +
                "`w`.`woVersion` AS `wo Version`,  \n" +
                "`comp`.`mfgPN` AS `assy Number`,  \n" +
                "`comp`.`nickName` AS `Assembly Nick Name`,  \n" +
                "`comp`.`rev` AS `Assy Revision`,  \n" +
                "`comp`.`PIDCode` AS `Assembly ID`,  \n" +
                "`w`.`buildQty` AS `Build Qty`,`a`.`opID` AS `OP ID Identity`,`a`.`woOPID` AS `woOP ID Identity`,  \n" +
                "`a`.`opName` AS `OP Name`,`a`.`opNumber` AS `OP Number`,`fun_getOpStatusNameByID`(`a`.`opStatus`) AS `OP Status`,  \n" +
                "SEC_TO_TIME(`a`.`processTime`) AS `Process Time`,SEC_TO_TIME(`a`.`setupTime`) AS `Setup Time`,SEC_TO_TIME(`a`.`perPieceTime`) AS `Per Piece Time`,  \n" +
                "(CASE WHEN (`a`.`qtyControl` = 0) THEN 'No' WHEN (`a`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `MFg Qty Required?`,  \n" +
                "(CASE WHEN (`a`.`isIssueQty` = 0) THEN 'No' WHEN (`a`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `ASK For Issue Qty?`,  \n" +
                "(CASE WHEN (`a`.`isRework` = 0) THEN 'No' WHEN (`a`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `is Rework Operation?`,  \n" +
                "(CASE WHEN (`a`.`isTeamOperation` = 0) THEN 'No' WHEN (`a`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `is Team Operation?`,  \n" +
                "(CASE WHEN (`a`.`isStopOperation` = 0) THEN 'No' WHEN (`a`.`isStopOperation` = 1) THEN 'Yes' ELSE '' END) AS `is Stop Operation?`,  \n" +
                "`a`.`opDescription` AS `OP Description`,`a`.`opDoes` AS `OP Does`,`a`.`opDonts` AS `OP Dont's`,  \n" +
                "`a`.`opWorkingCondition` AS `OP Working Condition`,`a`.`opManagementInstruction` AS `OP Management Instruction`,  \n" +
                "`a`.`opDeferredInstruction` AS `OP Deferred Instruction`,`a`.`opVersion` AS `OP Version`,`a`.`firstPcsModel` AS `First Pcs Model`,  \n" +
                "`a`.`firstPcsConclusion` AS `First Pcs Conclusion`,  \n" +
                "(CASE WHEN (`a`.`firstPcsStatus` = 1) THEN 'WIP' WHEN (`a`.`isStopOperation` = 2) THEN 'Pass' WHEN (`a`.`isStopOperation` = 3) THEN 'Needs Improvement' ELSE '' END) AS `First Pcs Status`,  \n" +
                "`c`.`clusterID` AS `Cluster ID Identity`,(SELECT `d`.`isParellelOperation` FROM `workorder_cluster` `d` WHERE (`d`.`clusterID` = `c`.`clusterID`)) AS `is Parellel Operation`,`b`.`RecCnt` AS `RecCnt`,  \n" +
                "IFNULL(`b`.`OPProdQty`,0) AS `OP Prod Qty`,IFNULL(`b`.`StockQty`,0) AS `OP Stock Qty`,IFNULL(`b`.`productionQty`,0) AS `OP Production Qty`,IFNULL(`b`.`passQty`,0) AS `OP Passed Qty`,IFNULL(`b`.`reprocessQty`,0) AS `OP Reprocessed Qty`,IFNULL(`b`.`observedQty`,0) AS `OP Defect Observed Qty`,  \n" +
                "IFNULL(`b`.`reworkQty`,0) AS `OP Rework  Required Qty`,IFNULL(`b`.`scrapQty`,0) AS `OP Scraped Qty`,IFNULL(`b`.`issueQty`,0) AS `Issue Qty`,(CASE WHEN (`a`.`isTerminated` = 1) THEN 'Yes' ELSE 'No' END) AS `isTerminated`,(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0) FROM `shippedassembly`   \n" +
                "WHERE ((`shippedassembly`.`woOPID` = `a`.`woOPID`) AND (`shippedassembly`.`isDeleted` = 0))) AS `Shipped Qty`,  \n" +
                "IFNULL((SELECT SUM(`workorder_transfer`.`transferQty`) FROM `workorder_transfer` WHERE ((`workorder_transfer`.`fromWOID` = `a`.`woID`) AND (`workorder_transfer`.`fromWOOPID` = `a`.`woOPID`))),0) AS `Transfer Qty`,  \n" +
                "IFNULL((SELECT DISTINCT `b`.`woNumber` FROM (`workorder_transfer` `a` JOIN `workorder` `b` ON((`b`.`woID` = `a`.`toWOID`))) WHERE ((`a`.`fromWOID` = `a`.`woID`)   \n" +
                "AND (`a`.`fromWOOPID` = `a`.`woOPID`))),'') AS `To Work Order`,IFNULL((SELECT `workorder_trans_operation_hold_unhold`.`reason` FROM `workorder_trans_operation_hold_unhold` WHERE ((`workorder_trans_operation_hold_unhold`.`woOPID` = `a`.`woOPID`)   \n" +
                "AND ISNULL(`workorder_trans_operation_hold_unhold`.`endDate`)) LIMIT 1),'') AS `reason`,  \n" +
                "(CASE WHEN (`w`.`woType` = 1) THEN 'New' WHEN (`w`.`woType` = 2) THEN 'Repeat order with same revision' WHEN (`w`.`woType` = 3) THEN 'Revision change' WHEN (`w`.`woType` = 4) THEN 'I-ECO' WHEN (`w`.`woType` = 5) THEN 'C-ECO' ELSE '' END) AS `wo Type` FROM ((((`workorder_operation` `a`   \n" +
                "LEFT JOIN `workorder` `w` ON((`a`.`woID` = `w`.`woID`)))   \n" +
                "JOIN `component` `comp` ON(((`w`.`partID` = `comp`.`id`) AND (IFNULL(`comp`.`category`,0) = 3) AND (IFNULL(`comp`.`isDeleted`,0) = 0)))) LEFT JOIN `workorder_operation_cluster` `c` ON(((`c`.`woOPID` = `a`.`woOPID`) AND (IFNULL(`c`.`isDeleted`,0) = 0))))   \n" +
                "LEFT JOIN (SELECT `g`.`woID` AS `woID`,`g`.`opID` AS `opID`,SUM(`g`.`issueQty`) AS `issueQty`,SUM(`g`.`RecCnt`) AS `RecCnt`,SUM(`g`.`OPProdQty`) AS `OPProdQty`,SUM(`g`.`StockQty`) AS `StockQty`,SUM(`g`.`productionQty`) AS `productionQty`,SUM(`g`.`passQty`) AS `passQty`,  \n" +
                "SUM(`g`.`reprocessQty`) AS `reprocessQty`,SUM(`g`.`observedQty`) AS `observedQty`,SUM(`g`.`reworkQty`) AS `reworkQty`,SUM(`g`.`scrapQty`) AS `scrapQty` FROM (SELECT `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,  \n" +
                "MAX(IFNULL(`a`.`issueQty`,0)) AS `issueQty`,`a`.`woOPID` AS `woOPID`,COUNT(1) AS `RecCnt`,SUM(IFNULL(`b`.`totalQty`,0)) AS `OPProdQty`,(SUM(IFNULL(`b`.`totalQty`,0)) - SUM(IFNULL(`b`.`scrapQty`,0))) AS `StockQty`,(SUM(IFNULL(`b`.`totalQty`,0)) + SUM(IFNULL(`b`.`reprocessQty`,0))) AS `productionQty`,  \n" +
                "SUM(IFNULL(`b`.`passQty`,0)) AS `passQty`,SUM(IFNULL(`b`.`reprocessQty`,0)) AS `reprocessQty`,SUM(IFNULL(`b`.`observedQty`,0)) AS `observedQty`,SUM(IFNULL(`b`.`reworkQty`,0)) AS `reworkQty`,SUM(IFNULL(`b`.`scrapQty`,0)) AS `scrapQty` FROM (`workorder_trans` `a`   \n" +
                "JOIN `workorder_trans_production` `b`) WHERE ((`a`.`woTransID` = `b`.`woTransID`) AND (IFNULL(`a`.`isDeleted`,0) = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0))   \n" +
                "GROUP BY `a`.`woTransID`,`a`.`woID`,`a`.`opID`,`a`.`woOPID`) `g` GROUP BY `g`.`woID`,`g`.`opID`,`g`.`woOPID`) `b` ON(((`a`.`woID` = `b`.`woID`) AND (`a`.`opID` = `b`.`opID`)))) WHERE (IFNULL(`a`.`deletedAt`,0) = 0);  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_serialdata_report` ;  \n" +
                "CREATE VIEW `vu_workorder_serialdata_report` AS   \n" +
                "SELECT `b`.`woID` AS `woID`,`b`.`woNumber` AS `WO#`,  \n" +
                "`comp`.`mfgPN` AS `Assembly#`,`comp`.`nickName` AS `Assembly Nick Name`,  \n" +
                "`comp`.`rev` AS `Assy Revision`,`comp`.`PIDCode` AS `Assembly ID`,  \n" +
                "`a`.`PrefixorSuffix` AS `prefixorSuffix`,`a`.`PreSuffix` AS `PreFixOrSuffix Contain`,  \n" +
                "`a`.`dateCode` AS `Date Code`,`a`.`noofDigit` AS `noofDigit`,`a`.`SerialNo` AS `SerialNo`,  \n" +
                "(SELECT `workorder_operation`.`opName` FROM `workorder_operation` WHERE (ISNULL(`workorder_operation`.`deletedAt`)   \n" +
                "AND (`workorder_operation`.`woID` = `b`.`woID`) AND (`workorder_operation`.`opID` = `a`.`curropID`))) AS `OP Name`,  \n" +
                "`fun_getSerailNoCurrentStatusNameByID`(`a`.`currStatus`) AS `currStatus`,(CASE WHEN (`a`.`serialType` = 1)   \n" +
                "THEN 'MFG' ELSE 'FINISH PRODUCT' END) AS `Serial Type` FROM ((`workorder_serialmst` `a`   \n" +
                "JOIN `workorder` `b` ON(((`a`.`woID` = `b`.`woID`) AND (IFNULL(`b`.`isDeleted`,0) = 0))))   \n" +
                "JOIN `component` `comp` ON(((`b`.`partID` = `comp`.`id`) AND (IFNULL(`comp`.`isDeleted`,0) = 0) AND (IFNULL(`comp`.`category`,0) = 3))));  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_workorder_transfer_report` ;  \n" +
                "CREATE VIEW `vu_workorder_transfer_report` AS   \n" +
                "SELECT `a`.`woID` AS `woID Identity`,  \n" +
                "`a`.`opID` AS `opID Identity`,  \n" +
                "`a`.`toWOID` AS `toWOID Identity`,  \n" +
                "`a`.`opName` AS `OP Name`,`a`.`opNumber` AS `OP Number`,  \n" +
                "`a`.`opVersion` AS `OP Version`,`fromwo`.`woNumber` AS `WO Number`,  \n" +
                "`fromwo`.`woVersion` AS `WO Version`,`fromwo`.`ECORemark` AS `ECO Remark`,  \n" +
                "`fromwo`.`FCORemark` AS `FCO Remark`,`fromwo`.`poQty` AS `PO Qty`,`towo`.`woNumber` AS `To WO Number`,  \n" +
                "`towo`.`woVersion` AS `To WO Version`,  \n" +
                "`fromcomp`.`mfgPN` AS `Assy Number`,  \n" +
                "`fromcomp`.`PIDCode` AS `Assembly ID`,  \n" +
                "`fromcomp`.`nickName` AS `Assy Nickname`,  \n" +
                "`fromcomp`.`rev` AS `Assy Revision`,  \n" +
                "`tocomp`.`mfgPN` AS `To Assy Number`,  \n" +
                "`tocomp`.`PIDCode` AS `To Assembly ID`,  \n" +
                "`tocomp`.`nickName` AS `To Assy Nickname`,  \n" +
                "`tocomp`.`rev` AS `To Assy Revision`  \n" +
                " FROM ((((((SELECT `wo`.`woID` AS `woID`,`wo`.`opID` AS `opID`,`wo`.`opName` AS `opName`,`wo`.`opNumber` AS `opNumber`,  \n" +
                " `wo`.`opVersion` AS `opVersion`,(SELECT `wt`.`toWOID` FROM `workorder_transfer` `wt`   \n" +
                " WHERE ((IFNULL(`wt`.`isDeleted`,0) = 0) AND (`wt`.`fromWOID` = `wo`.`woID`)) LIMIT 1) AS `toWOID`   \n" +
                " FROM `workorder_operation` `wo` WHERE ((`wo`.`isTerminated` = 1)   \n" +
                " AND (IFNULL(`wo`.`isDeleted`,0) = 0)))) `a` JOIN `workorder` `fromwo`   \n" +
                " ON(((`fromwo`.`woID` = `a`.`woID`) AND (IFNULL(`fromwo`.`isDeleted`,0) = 0))))   \n" +
                " JOIN `workorder` `towo` ON(((`towo`.`woID` = `a`.`toWOID`)   \n" +
                " AND (IFNULL(`towo`.`isDeleted`,0) = 0))))   \n" +
                " JOIN `component` `fromcomp`   \n" +
                " ON(((`fromwo`.`partID` = `fromcomp`.`id`) AND (IFNULL(`fromcomp`.`isDeleted`,0) = 0) AND (IFNULL(`fromcomp`.`category`,0) = 3))))   \n" +
                " JOIN `component` `tocomp` ON(((`towo`.`partID` = `tocomp`.`id`) AND (IFNULL(`tocomp`.`category`,0) = 3)  \n" +
                " AND (IFNULL(`tocomp`.`isDeleted`,0) = 0))));  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (149,'2.00','V1','Alter View related to assembly - Vaibhav'," + userid + ");"
            );
            break;
        case 149:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP TRIGGER `Trg_AU_WorkOrder`;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'WONUMBER',      \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.PARTID, 0) != IFNULL(NEW.PARTID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'PARTID',      \n" +
                "			CAST(OLD.PARTID AS CHAR),CAST(NEW.PARTID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;     \n" +
                "	IF IFNULL(OLD.PODATE, 0) != IFNULL(NEW.PODATE, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'PODATE',      \n" +
                "			CAST(OLD.poDate AS CHAR),CAST(NEW.poDate AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.PONUMBER, 0) != IFNULL(NEW.PONUMBER, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'PONUMBER',      \n" +
                "			CAST(OLD.poNumber AS CHAR),CAST(NEW.poNumber AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.POQTY, 0) != IFNULL(NEW.POQTY , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'POQTY',      \n" +
                "			CAST(OLD.poQty AS CHAR),CAST(NEW.poQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'EXCESSQTY',      \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'BUILDQTY',      \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'STARTTIME',      \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ENDTIME',      \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'MASTERTEMPLATEID',      \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'REFRENCEWOID',      \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'WOVERSION',      \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISSAMPLEAVAILABLE, 0) != IFNULL(NEW.ISSAMPLEAVAILABLE, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISSAMPLEAVAILABLE',      \n" +
                "			CAST(OLD.ISSAMPLEAVAILABLE AS CHAR),CAST(NEW.ISSAMPLEAVAILABLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISCLUSTERAPPLIED',      \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ROHSSTATUSID',      \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISNOCLEAN',      \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISWATERSOLUBLE',      \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',      \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.WOSTATUS, 0) != IFNULL(NEW.WOSTATUS , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'WOSTATUS',      \n" +
                "			CAST(OLD.WOSTATUS AS CHAR),CAST(NEW.WOSTATUS AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'CUSTOMERID',      \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ECOREMARK',      \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'FCOREMARK',      \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.LOCATIONSAMPLEDETAILS , 0)!= IFNULL(NEW.LOCATIONSAMPLEDETAILS , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'LOCATIONSAMPLEDETAILS',      \n" +
                "			CAST(OLD.LocationSampleDetails AS CHAR),CAST(NEW.LocationSampleDetails AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISDELETED',      \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISSTOPWORKORDER',      \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISREVISEDWO',      \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'ISOPERATIONSVERIFIED',      \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog       \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "		VALUES (\"WORKORDER\",      \n" +
                "			CAST(NEW.woID AS CHAR),      \n" +
                "			'TERMINATEWOID',      \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (150,'2.00','V1','Alter Trigger related to assembly - Vaibhav'," + userid + ");"
            );
            break;
        case 150:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_FindKeywordInDB` ;  \n" +
                "CREATE PROCEDURE `Sproc_FindKeywordInDB`(                         \n" +
                "	IN ptblName VARCHAR(5000),               \n" +
                "	IN pcolumnName VARCHAR(5000),    \n" +
                "	IN prefColumnName VARCHAR(5000)                  \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE dbName VARCHAR(1000);          \n" +
                "	SELECT DATABASE() INTO dbName;        \n" +
                "	IF (ptblName IS NOT NULL) THEN         \n" +
                "		SET @whereClause4 = NULL;			       \n" +
                "		IF (prefColumnName IS NOT NULL) THEN    \n" +
                "			SET @whereClause4 = '';    \n" +
                "			SET @whereClause4 = CONCAT(@whereClause4, \" AND REFERENCED_COLUMN_NAME = '\", prefColumnName ,\"'\");    \n" +
                "		END IF;    \n" +
                "		IF (@whereClause4 IS NULL) THEN    \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '\",dbName,\"' AND REFERENCED_TABLE_NAME = '\", ptblName ,\"';\");          \n" +
                "		ELSE     \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '\",dbName,\"' AND REFERENCED_TABLE_NAME = '\", ptblName ,\"'\",@whereClause4, \";\");          \n" +
                "		END IF;    \n" +
                "		PREPARE query4 FROM @SQLStatement4;          \n" +
                "		EXECUTE query4;          \n" +
                "		DEALLOCATE PREPARE query4;     \n" +
                "	END IF;      	       \n" +
                "	IF (pcolumnName IS NOT NULL) THEN  	      \n" +
                "		SET @orderBy5 = \"ORDER BY table_name\";     \n" +
                "		SET @SQLStatement5 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = '\",dbName,\"' AND column_name = '\", pcolumnName ,\"'\", @orderBy5, \";\");          \n" +
                "		PREPARE query5 FROM @SQLStatement5;          \n" +
                "		EXECUTE query5;          \n" +
                "		DEALLOCATE PREPARE query5;   			       \n" +
                "	END IF;       \n" +
                "	IF (ptblName IS NOT NULL OR pcolumnName IS NOT NULL) THEN     \n" +
                "		/* check in sp or function */         \n" +
                "		SET @orderBy1 = \"ORDER BY ROUTINE_NAME\";     \n" +
                "		SET @whereClause1 = NULL;    \n" +
                "		SET @whereClause11 = NULL;    \n" +
                "		SET @whereClause12 = NULL;    \n" +
                "		IF (ptblName IS NOT NULL) THEN    \n" +
                "			SET @whereClause11 = '';    \n" +
                "			SET @whereClause11 = CONCAT(@whereClause11, \" ROUTINE_DEFINITION LIKE '%\", ptblName, \"%'\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN    \n" +
                "			SET @whereClause12 = '';    \n" +
                "			SET @whereClause12 = CONCAT(@whereClause12, \" ROUTINE_DEFINITION LIKE '%\", pcolumnName, \"%'\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (@whereClause11 IS NOT NULL AND @whereClause12 IS NOT NULL) THEN    \n" +
                "			SET @whereClause1 = CONCAT(@whereClause11, \" OR\" ,@whereClause12);    \n" +
                "		ELSEIF (@whereClause11 IS NULL AND @whereClause12 IS NOT NULL) THEN    \n" +
                "			SET @whereClause1 = @whereClause12;    \n" +
                "		ELSEIF (@whereClause11 IS NOT NULL AND @whereClause12 IS NULL) THEN    \n" +
                "			SET @whereClause1 = @whereClause11;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ( \",@whereClause1,\" ) AND ROUTINE_SCHEMA = '\",dbName,\"'\",@orderBy1,\";\");          \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement1;          \n" +
                "		EXECUTE query1;          \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		/* check in trigger */  \n" +
                "		SET @orderBy2 = \"ORDER BY trigger_name\";    \n" +
                "		SET @whereClause2 = NULL;    \n" +
                "		SET @whereClause21 = NULL;    \n" +
                "		SET @whereClause22 = NULL;    \n" +
                "  \n" +
                "		IF (ptblName IS NOT NULL) THEN    \n" +
                "			SET @whereClause21 = '';    \n" +
                "			SET @whereClause21 = CONCAT(@whereClause21, \" ACTION_statement LIKE '%\", ptblName, \"%'\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN    \n" +
                "			SET @whereClause22 = '';    \n" +
                "			SET @whereClause22 = CONCAT(@whereClause22, \" ACTION_statement LIKE '%\", pcolumnName, \"%'\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (@whereClause21 IS NOT NULL AND @whereClause22 IS NOT NULL) THEN    \n" +
                "			SET @whereClause2 = CONCAT(@whereClause21, \" OR\" ,@whereClause22);    \n" +
                "		ELSEIF (@whereClause21 IS NULL AND @whereClause22 IS NOT NULL) THEN    \n" +
                "			SET @whereClause2 = @whereClause22;    \n" +
                "		ELSEIF (@whereClause21 IS NOT NULL AND @whereClause22 IS NULL) THEN    \n" +
                "			SET @whereClause2 = @whereClause21;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.triggers WHERE ( \",@whereClause2,\" ) AND trigger_SCHEMA = '\",dbName,\"'\", @orderBy2, \";\");          \n" +
                "  \n" +
                "		PREPARE query2 FROM @SQLStatement2;          \n" +
                "		EXECUTE query2;          \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		/* check in view */  \n" +
                "		SET @orderBy3 = \"ORDER BY TABLE_NAME\";    \n" +
                "		SET @whereClause3 = NULL;    \n" +
                "		SET @whereClause31 = NULL;    \n" +
                "		SET @whereClause32 = NULL;    \n" +
                "  \n" +
                "		IF (ptblName IS NOT NULL) THEN    \n" +
                "			SET @whereClause31 = '';    \n" +
                "			SET @whereClause31 = CONCAT(@whereClause31, \" VIEW_DEFINITION LIKE '%\", ptblName, \"%'\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN    \n" +
                "			SET @whereClause32 = '';    \n" +
                "			SET @whereClause32 = CONCAT(@whereClause32, \" VIEW_DEFINITION LIKE '%\", pcolumnName, \"%'\");    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (@whereClause31 IS NOT NULL AND @whereClause32 IS NOT NULL) THEN    \n" +
                "			SET @whereClause3 = CONCAT(@whereClause31, \" OR\" ,@whereClause32);    \n" +
                "		ELSEIF (@whereClause31 IS NULL AND @whereClause32 IS NOT NULL) THEN    \n" +
                "			SET @whereClause3 = @whereClause32;    \n" +
                "		ELSEIF (@whereClause31 IS NOT NULL AND @whereClause32 IS NULL) THEN    \n" +
                "			SET @whereClause3 = @whereClause31;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		SET @SQLStatement3 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE ( \",@whereClause3,\" ) AND table_SCHEMA = '\",dbName,\"'\", @orderBy3, \";\");          \n" +
                "		PREPARE query3 FROM @SQLStatement3;          \n" +
                "		EXECUTE query3;          \n" +
                "		DEALLOCATE PREPARE query3;      \n" +
                "  \n" +
                "	END IF;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                       \n" +
                "	IN pPassword VARCHAR(500)             \n" +
                ")  \n" +
                "BEGIN                   \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN              \n" +
                "		#Start - Delete Role            \n" +
                "		TRUNCATE TABLE rolepagedetail;            \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;            \n" +
                "		TRUNCATE TABLE component_standard_role;            \n" +
                "  \n" +
                "		#Start - Delete Features of roles            \n" +
                "		DELETE FROM feature_role_mapping;            \n" +
                "		#End - Delete Features of roles            \n" +
                "  \n" +
                "		#Start - Delete Generic Folder            \n" +
                "		UPDATE genericfiles SET refParentId = NULL       \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));           \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);            \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL       \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);      \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;            \n" +
                "  \n" +
                "		#End - Delete Generic Folder            \n" +
                "  \n" +
                "		#Start - Delete Generic Files            \n" +
                "		TRUNCATE TABLE genericfiles;            \n" +
                "		#End - Delete Generic Files            \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');            \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;            \n" +
                "		#End - Delete Role            \n" +
                "		#Start - Delete Generic Category            \n" +
                "			TRUNCATE TABLE employee_department;            \n" +
                "			#Start - Delete Part            \n" +
                "			TRUNCATE TABLE operation_part;            \n" +
                "			TRUNCATE TABLE workorder_operation_part;            \n" +
                "			DELETE FROM parts;            \n" +
                "			#End - Delete Part            \n" +
                "			#Start - Delete Equipment            \n" +
                "				TRUNCATE TABLE operation_equipment;            \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;            \n" +
                "				TRUNCATE TABLE equipment_dataelement;            \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;            \n" +
                "  \n" +
                "				#Start - Delete Equipment Task            \n" +
                "				TRUNCATE TABLE equipment_task_schedule;            \n" +
                "				DELETE FROM equipment_task;            \n" +
                "				#End - Delete Equipment Task            \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master            \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;            \n" +
                "				DELETE FROM workorder_serialmst;            \n" +
                "				# End - Delete Workorder Trans Serial Master            \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail            \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;            \n" +
                "				DELETE FROM workorder_trans_empinout;            \n" +
                "				#End - Delete Workorder Transaction InOut Detail            \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction            \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;            \n" +
                "				TRUNCATE TABLE workorder_trans_production;            \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;            \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;            \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;            \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;            \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;            \n" +
                "				DELETE FROM workorder_trans;            \n" +
                "				# End - Delete Workorder Transaction            \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;            \n" +
                "				DELETE FROM equipment;            \n" +
                "			#End - Delete Equipment            \n" +
                "			# Start - Delete Operation            \n" +
                "			TRUNCATE TABLE operation_equipment;            \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element            \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;            \n" +
                "			DELETE FROM workorder_operation_dataelement;            \n" +
                "			# End - Delete Workorder Operation Data Element            \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;            \n" +
                "			TRUNCATE TABLE workorder_operation_employee;            \n" +
                "			TRUNCATE TABLE operation_master_templates;            \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			            \n" +
                "				# Start - Delete ECO Request 			            \n" +
                "					# Start - Delete ECO Request Approval            \n" +
                "					TRUNCATE TABLE eco_request_department_employee;            \n" +
                "					DELETE FROM eco_request_department_approval;            \n" +
                "					# End - Delete ECO Request Approval            \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;            \n" +
                "				DELETE FROM eco_request;            \n" +
                "				# End - Delete ECO Request            \n" +
                "  \n" +
                "			# Start - Delete Shipping Details            \n" +
                "			TRUNCATE TABLE shippedassembly;            \n" +
                "			DELETE FROM salesshippingmst;            \n" +
                "			DELETE FROM workorder_salesorder_details;            \n" +
                "			DELETE FROM salesorderdet;            \n" +
                "			DELETE FROM salesordermst;            \n" +
                "			# End - Delete Shipping Details            \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review             \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;            \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;            \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;            \n" +
                "			DELETE FROM workorder_reqforreview;            \n" +
                "			# End - Delete Workorder Request Review             \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;            \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;            \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming            \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;            \n" +
                "			DELETE FROM workorder_preprogcomp_designator;            \n" +
                "			DELETE FROM workorder_preprogcomp;            \n" +
                "			# End - Delete Workorder Tran PreProgramming            \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;            \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;            \n" +
                "			# End - Delete Workorder Operation            \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;            \n" +
                "  \n" +
                "			#Start - Delete Chart            \n" +
                "			TRUNCATE TABLE chart_template_operations;      \n" +
                "			TRUNCATE TABLE chart_template_employee_details;           \n" +
                "			TRUNCATE TABLE chart_template_access;       \n" +
                "			DELETE FROM chart_templatemst;            \n" +
                "			#Start - End Chart            \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;            \n" +
                "			# End - Delete Operation            \n" +
                "			TRUNCATE TABLE standard_message;            \n" +
                "			# Start - Delete Component            \n" +
                "			TRUNCATE TABLE component_alias;           \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';        \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;            \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;            \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;      \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;         \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;         \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';        \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;        \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;        \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';        \n" +
                "			TRUNCATE TABLE component_goodbadpartmapping;            \n" +
                "			TRUNCATE TABLE component_processmaterial;            \n" +
                "			TRUNCATE TABLE component_drivetools;            \n" +
                "			TRUNCATE TABLE component_requiremapping_parts;            \n" +
                "			TRUNCATE TABLE component_standard_details;            \n" +
                "  \n" +
                "			# Start - Delete Recieving Material            \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;            \n" +
                "			DELETE FROM component_sid_stock;        \n" +
                "			DELETE FROM cost_category;                \n" +
                "			# End - Delete Recieving Material            \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;            \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;         \n" +
                "			TRUNCATE TABLE standard_class;           \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;      \n" +
                "			DELETE FROM certificate_standards;          \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;      \n" +
                "			DELETE FROM br_label_template;      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment Ownership';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Type';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment Type';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Type';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Work Area';      \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;            \n" +
                "			# End - Delete Component            \n" +
                "  \n" +
                "		#End - Delete Generic Category            \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;      \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;      \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;      \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;      \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;      \n" +
                "		TRUNCATE TABLE rfq_assembly_history;      \n" +
                "		DELETE FROM rfq_lineitems;      \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;      \n" +
                "		DELETE FROM component WHERE id > 0;       \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;            \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;       \n" +
                "		#Start - Delete Entity            \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;            \n" +
                "		DELETE FROM workorder_operation_dataelement;            \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;            \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;            \n" +
                "		DELETE FROM workorder_trans_subform_data;          \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;         \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';        \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;            \n" +
                "		DELETE FROM subform_transaction;            \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;            \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;      \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;      \n" +
                "		DELETE FROM dataelement;          \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;            \n" +
                "		#End - Delete Entity            \n" +
                "		#Start - Delete UOMS                 \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;      \n" +
                "		DELETE FROM rfq_assy_quotations;          \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;           \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;            \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;            \n" +
                "		#End - Delete UOMS            \n" +
                "		#Start - Delete MFG                \n" +
                "		TRUNCATE TABLE mfgcodealias;            \n" +
                "		TRUNCATE TABLE who_bought_who;            \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;            \n" +
                "		#End - Delete MFG                \n" +
                "		#Start - Delete BOM            \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;            \n" +
                "		DELETE FROM component_cust_alias_rev;            \n" +
                "		DELETE FROM rfq_assy_bom;            \n" +
                "		#End - Delete BOM            \n" +
                "		#Start - Delete RFQ            \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;            \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;            \n" +
                "		DELETE FROM rfq_assy_quantity;            \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;    \n" +
                "		DELETE FROM rfq_assemblies;            \n" +
                "		DELETE FROM rfqforms;            \n" +
                "		#End - Delete RFQ            \n" +
                "		DELETE FROM customer_addresses;            \n" +
                "		DELETE FROM customer_contactperson;            \n" +
                "		TRUNCATE TABLE assemblystock;            \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;            \n" +
                "		#Start - Delete Customer            \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;            \n" +
                "		DELETE FROM workorder_assy_designators;           \n" +
                "		DELETE FROM workorder_cluster;                \n" +
                "		DELETE FROM workorder_operation_firstpiece;            \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;            \n" +
                "		TRUNCATE TABLE shipping_requestdet;            \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;            \n" +
                "		DELETE FROM workorder;            \n" +
                "		TRUNCATE TABLE assembly_revision_comments;         \n" +
                "		DELETE FROM customers;            \n" +
                "		#End - Delete Customer            \n" +
                "		#Start - Delete Employee            \n" +
                "		UPDATE department SET parentDeptID=NULL;       \n" +
                "		DELETE FROM department;            \n" +
                "		TRUNCATE TABLE dynamicreportaccess;            \n" +
                "		UPDATE employees SET `managerID`=NULL;            \n" +
                "		TRUNCATE TABLE notificationdet;            \n" +
                "		DELETE FROM notificationmst;            \n" +
                "		TRUNCATE TABLE group_participant_details;            \n" +
                "		TRUNCATE TABLE group_chat_log;            \n" +
                "		DELETE FROM group_chat;            \n" +
                "		TRUNCATE TABLE chat;            \n" +
                "		TRUNCATE TABLE feature_user_mapping;            \n" +
                "		TRUNCATE TABLE user_agreement;            \n" +
                "		TRUNCATE TABLE userpagedetail;            \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');            \n" +
                "		TRUNCATE TABLE shipping_request_empdet;            \n" +
                "		DELETE FROM shipping_request;            \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');            \n" +
                "		#End - Delete Employee            \n" +
                "  \n" +
                "		DELETE FROM master_templates;            \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards            \n" +
                "		TRUNCATE TABLE component_standard_details;            \n" +
                "		DELETE FROM component_standard_class;            \n" +
                "		DELETE FROM component_standard;            \n" +
                "		#End - Delete Component Standards            \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log            \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;            \n" +
                "		#End - Delete Data Entry Audit Log            \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	            \n" +
                "		TRUNCATE TABLE dynamicreportfields;              \n" +
                "		DELETE FROM dynamicreportmst;            \n" +
                "		#End - Delete Dynamic Report            \n" +
                "  \n" +
                "		#Start - Delete Job Type            \n" +
                "		DELETE FROM jobtype;            \n" +
                "		#End - Delete Job Type            \n" +
                "  \n" +
                "		#Start - Delete Log Master            \n" +
                "		TRUNCATE TABLE logmst;            \n" +
                "		#End - Delete Log Master            \n" +
                "  \n" +
                "		#Start - Delete Order Type            \n" +
                "		-- DELETE FROM ordertype;            \n" +
                "		#End - Delete Order Type            \n" +
                "  \n" +
                "		#Start - Delete Reason            \n" +
                "		DELETE FROM reasonmst;            \n" +
                "		#End - Delete Reason            \n" +
                "  \n" +
                "		#Start - Delete Requirement            \n" +
                "		DELETE FROM requirement;            \n" +
                "		#End - Delete Requirement            \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data            \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;            \n" +
                "		#End - Delete Assy Auto Pricing Data            \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log            \n" +
                "		TRUNCATE TABLE taskconfirmation;            \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log            \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log            \n" +
                "		TRUNCATE TABLE timeline;            \n" +
                "		#End - Delete All Timeline Log            \n" +
                "  \n" +
                "		#Start - Delete All Chart Category            \n" +
                "		DELETE FROM chart_category;            \n" +
                "		#End - Delete All Chart Category            \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias            \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;            \n" +
                "		#End - Delete All Component Generic Alias            \n" +
                "  \n" +
                "		#Start - Delete All Defect Category            \n" +
                "		-- DELETE FROM defectcategory;            \n" +
                "		#End - Delete All Defect Category            \n" +
                "  \n" +
                "		#Start - Delete All ECO Category            \n" +
                "		DELETE FROM eco_type_values;            \n" +
                "		DELETE FROM eco_type_category;            \n" +
                "		#End - Delete All ECO Category            \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;        \n" +
                "  \n" +
                "		SELECT 'Done';            \n" +
                "	ELSE             \n" +
                "		SELECT 'Invalid Argument';            \n" +
                "	END IF;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (151,'2.00','V1',' Utiltiy Scripts - Vaibhav '," + userid + ");"
            );
            break;
        case 151:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "TRUNCATE TABLE shippedassembly;  \n" +
                "DELETE FROM salesshippingmst;  \n" +
                "TRUNCATE TABLE workorder_salesorder_details;  \n" +
                "DELETE FROM salesorderdet;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "TRUNCATE TABLE eco_request_department_employee;  \n" +
                "DELETE FROM eco_request_department_approval;  \n" +
                "UPDATE workorder SET ecoReqID = NULL;  \n" +
                "TRUNCATE TABLE eco_request_type_values;  \n" +
                "DELETE FROM eco_request;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "TRUNCATE TABLE workorder_trans_serialno;  \n" +
                "TRUNCATE TABLE workorder_trans_packagingdetail;  \n" +
                "TRUNCATE TABLE workorder_trans_operation_hold_unhold;  \n" +
                "TRUNCATE TABLE workorder_trans_production;  \n" +
                "TRUNCATE TABLE workorder_trans_assy_defectdet;  \n" +
                "TRUNCATE TABLE workorder_trans_emp_pausedet;  \n" +
                "DELETE FROM workorder_trans_empinout;  \n" +
                "TRUNCATE TABLE workorder_trans_firstpcsdet;  \n" +
                "TRUNCATE TABLE workorder_trans_dataelement_values;  \n" +
                "TRUNCATE TABLE workorder_trans_preprogramcomp;  \n" +
                "TRUNCATE TABLE workorder_trans_equipment_dataelement_values;  \n" +
                "DELETE FROM workorder_trans;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_reqrevinvitedemp;  \n" +
                "TRUNCATE TABLE workorder_reqrevcomments;  \n" +
                "TRUNCATE TABLE workorder_reqforreview_values;  \n" +
                "DELETE FROM workorder_reqforreview;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_operation_dataelement_role;  \n" +
                "DELETE FROM workorder_operation_dataelement;  \n" +
                "TRUNCATE TABLE workorder_transfer;  \n" +
                "TRUNCATE TABLE shippedassembly;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_operation_cluster;  \n" +
                "TRUNCATE TABLE workorder_operation_part;  \n" +
                "TRUNCATE TABLE workorder_operation_employee;  \n" +
                "TRUNCATE TABLE workorder_operation_equipment;  \n" +
                "TRUNCATE TABLE workorder_operation_equipment_dataelement;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_trans_preprogramcomp;  \n" +
                "DELETE FROM workorder_preprogcomp_designator;  \n" +
                "DELETE FROM workorder_preprogcomp;  \n" +
                "DELETE FROM workorder_operation;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_assembly_excessstock_location;  \n" +
                "TRUNCATE TABLE workorder_certification;  \n" +
                "TRUNCATE TABLE shippedassembly;  \n" +
                "UPDATE workorder SET refrenceWOID=NULL;  \n" +
                "TRUNCATE TABLE workorder_salesorder_details;  \n" +
                "TRUNCATE TABLE workorder_trans_packagingdetail;  \n" +
                "DELETE FROM workorder_serialmst;  \n" +
                "  \n" +
                "TRUNCATE TABLE shipping_requestdet;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_trans_assy_defectdet;  \n" +
                "DELETE FROM workorder_assy_designators;  \n" +
                "  \n" +
                "DELETE FROM workorder_cluster;  \n" +
                "  \n" +
                "TRUNCATE TABLE workorder_trans_hold_unhold;  \n" +
                "TRUNCATE TABLE workorder_trans_firstpcsdet;  \n" +
                "DELETE FROM workorder_operation_firstpiece;  \n" +
                "  \n" +
                "DELETE FROM workorder;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (152,'2.00','V1','Delete Records related to assembly - Vaibhav '," + userid + ");"
            );
            break;
        case 152:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "ALTER TABLE component ADD COLUMN isCPN TINYINT(1) DEFAULT 0;  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "INSERT  INTO `genericcategory`(`gencCategoryName`,`gencCategoryCode`,`categoryType`,`displayOrder`,`isDeleted`,  \n" +
                "`parentGencCategoryID`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`systemGenerated`,`colorCode`)   \n" +
                "VALUES   \n" +
                "('Military Standard',NULL,'Standard Type','111.00',0,  \n" +
                "NULL,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL,'1',NULL,NULL,1,NULL);  \n" +
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "UPDATE rfq_connectertypemst   \n" +
                "SET `name`='TBD'  \n" +
                "WHERE `name`='none';  \n" +
                "  \n" +
                "UPDATE rfq_mountingtypemst   \n" +
                "SET `name`='TBD'  \n" +
                "WHERE `name`='none';  \n" +
                "  \n" +
                "UPDATE rfq_parttypemst   \n" +
                "SET `partTypeName`='TBD'  \n" +
                "WHERE `partTypeName`='none';  \n" +
                "  \n" +
                "UPDATE rfq_rohsmst   \n" +
                "SET `name`='TBD'  \n" +
                "WHERE `name`='none';  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (153,'2.00','V1','Update None to TBD and Add isCPN - Vaibhav '," + userid + ");"
            );
            break;
        case 153:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "UPDATE page_detail SET displaymenuname='Bin',isDisplay=1 WHERE pageName='Bin';  \n" +
                /* **************************** Add Script Version ->29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (154,'2.00','V1',' Update value of displaymenuname - Deepshikha '," + userid + ");"
            );
            break;
        case 154:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-01-2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(	                \n" +
                "	IN ppageIndex INT(11),                \n" +
                "	IN precordPerPage INT(11),                \n" +
                "	IN pOrderBy VARCHAR(255),	                \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pIsMFG TINYINT(1)              \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "	/* DECLARE SQLStatement varchar(255); */                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "		SELECT DISTINCT co.*, mf.mfgCode,              \n" +
                "		gc.gencCategoryName AS partStatusValue,                \n" +
                "		mf.mfgType,              \n" +
                "		vu_co.MFGPN AS AliasMFGPN,              \n" +
                "		vu_co.mfgcode AS AliasMFGCode,              \n" +
                "		ro.name AS `rohsComplientConvertedValue`,    \n" +
                "		ro.rohsIcon AS `rohsIcon`,       \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 0) THEN 'No'                 \n" +
                "					WHEN (`co`.`isGoodPart` = 1) THEN 'Yes' ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        mt.name mountingTypeName,  \n" +
                "        case when co.category=1 then  \n" +
                "					'PCB'  \n" +
                "			when co.category=2 then  \n" +
                "					'Component'  \n" +
                "			when co.category=3 then  \n" +
                "					'SubAssembly'  \n" +
                "			end categoryName  \n" +
                "		FROM component co                  \n" +
                "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0               \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus           \n" +
                "		 LEFT JOIN component_alias ca ON ca.aliasgroupID = co.aliasgroupID AND IFNULL(ca.isDeleted,0)=0 AND ca.deletedAt IS NULL        \n" +
                "		LEFT JOIN vu_component_dist_comp_details vu_co ON ca.aliasgroupID = vu_co.aliasgroupID              \n" +
                "		LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0      \n" +
                "        left join rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                "        left join rfq_mountingtypemst mt on mt.id = co.mountingTypeID  \n" +
                "	-- LEFT JOIN vu_component_dist_comp_details vu_co ON co.id = vu_co.compID               \n" +
                "		WHERE IFNULL(co.isdeleted,0) = 0;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "	ELSE	                \n" +
                "		SET rowNumWhere = '';                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF pIsMFG THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );                \n" +
                "	ELSE              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );                \n" +
                "	END IF;              \n" +
                "  \n" +
                "	/* to get total count of rows */                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);             \n" +
                "    PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 29-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (155,'2.00','V1','Sproc_GetComponentList Changes-Ashish'," + userid + ");"
            );
            break;
        case 155:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-01-2019  *********************************** */
                "ALTER TABLE component_sid_stock ADD COLUMN cpn TINYINT(1) NULL DEFAULT 0;  \n" +
                "	ALTER TABLE component_sid_stock ADD COLUMN salesOrderDetailID INT NULL;  \n" +
                "	ALTER TABLE component_sid_stock ADD COLUMN RefCPNMFGPNID INT NULL;  \n" +
                "	ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_SalesOrderDetailID FOREIGN KEY (salesOrderDetailID) REFERENCES salesorderdet(id);  \n" +
                "	ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_RefCPNMFGPNID FOREIGN KEY (refCPNMFGPNID) REFERENCES component(id);  \n" +
                "	ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_binID FOREIGN KEY (binID) REFERENCES binmst(id);  \n" +
                /* **************************** Add Script Version -> 30-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		              \n" +
                "    IN pWhereClause VARCHAR(16383),              \n" +
                "    IN puserID VARCHAR(50),        \n" +
                "    IN pnickName VARCHAR(20),        \n" +
                "    IN pprefix VARCHAR(20),        \n" +
                "    IN puid VARCHAR(20),    \n" +
                "    IN pComponentID INT        \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;              \n" +
                "	DECLARE v_delimiter VARCHAR(10);              \n" +
                "	DECLARE v_length INT;               \n" +
                "	DECLARE v_fieldType INT;                   \n" +
                "	DECLARE v_entityId INT;              \n" +
                "	DECLARE v_dataElementId INT;              \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);              \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);              \n" +
                "	DECLARE strLabel VARCHAR(2000);              \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);              \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';              \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');              \n" +
                "	DECLARE plen,slen INT;              \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;              \n" +
                "	DECLARE pbr_Separator VARCHAR(10);          \n" +
                "	DECLARE barcode_type_id INT;    \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;               \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error              \n" +
                "	(              \n" +
                "	     errorText NVARCHAR(2000),              \n" +
                "	     IsSuccess VARCHAR (2),    \n" +
                "	     MFGPart VARCHAR(100)                   \n" +
                "	);              \n" +
                "	-- get data from barcode templates with seprator              \n" +
                "	block1: BEGIN         \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND               \n" +
                "		pWhereClause REGEXP tempregexp;        \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */    \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID            \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND              \n" +
                "			pWhereClause REGEXP tempregexp;         \n" +
                "		ELSE    /* barcode 1D */    \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template             \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND               \n" +
                "			pWhereClause REGEXP tempregexp;         \n" +
                "		END IF;         \n" +
                "	END block1;              \n" +
                "  \n" +
                "	block2: BEGIN              \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found              \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR              \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter           \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND               \n" +
                "			pWhereClause REGEXP tempregexp) AND deletedAt IS NULL;       \n" +
                "  \n" +
                "		-- declare exit loop if data not found              \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;              \n" +
                "	        -- if any record match found than  check for delimiter and its value         \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN              \n" +
                "			-- create temporary table for deliemeter and component dataelement              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	              \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(              \n" +
                "				pentityId INT,              \n" +
                "				pdataElementId INT,              \n" +
                "				pdelimiter_value VARCHAR(200)              \n" +
                "			);         \n" +
                "  \n" +
                "			-- create temporary table for separator string values              \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					              \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));    \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string              \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND               \n" +
                "				pWhereClause REGEXP tempregexp;     \n" +
                "  \n" +
                "			-- open cursor              \n" +
                "			OPEN barcodeMatch_cursor;              \n" +
                "  \n" +
                "			-- set str label as whereclause              \n" +
                "			SET strLabel=pWhereClause;       \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match              \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				              \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));              \n" +
                " 			 END IF;             \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match               \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN              \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);              \n" +
                "			 END IF;	    \n" +
                "  \n" +
                "			-- insert all values after seprator split               \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");              \n" +
                "			PREPARE stmt1 FROM @SQL;	              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material              \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';       \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template              \n" +
                "			barcodeMatch_loop:LOOP              \n" +
                "				-- get all five selected values              \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;      \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match              \n" +
                "				IF exit_loop THEN         \n" +
                "					CLOSE barcodeMatch_cursor;              \n" +
                "					LEAVE barcodeMatch_loop;              \n" +
                "				END IF;         \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string              \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');              \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	              \n" +
                "				EXECUTE stmtdelimiter;    \n" +
                "  \n" +
                "				-- get delimiter values from string              \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));      \n" +
                "  \n" +
                "				-- check for field type is static or dynamic              \n" +
                "				-- if static field than check for mfg code and mfg part number              \n" +
                "				IF v_fieldType = 0  THEN          \n" +
                "  \n" +
                "					-- component_sid_stock               \n" +
                "					-- get static field name from barcode table delimiter data element id              \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys              \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN    \n" +
                "						SET MFG_Part_No = delimiter_value_data;    \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN    \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                              \n" +
                "						ELSE    \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;    \n" +
                "						END IF;    \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');              \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				              \n" +
                "						END IF;     \n" +
                "					END IF;              \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys              \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN      \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                              \n" +
                "					END IF;    \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN    \n" +
                "						CLOSE barcodeMatch_cursor;              \n" +
                "						LEAVE barcodeMatch_loop;    \n" +
                "					END IF;       \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);              \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');               \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;              \n" +
                "  \n" +
                "				ELSE             \n" +
                "					-- component_sid_stock_dataelement_Values                \n" +
                "					-- dynamic fields        \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE               \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;           \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)               \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);       \n" +
                "				END IF;              \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;              \n" +
                "  \n" +
                "			-- check if mfg and component both found than               \n" +
                "			IF (@componentCount > 1) THEN    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN fount',5,MFG_Part_No);              \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN              \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;              \n" +
                "                                   IF @Mfgmatched = 0  THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							              \n" +
                "				   END IF;									              \n" +
                "			 ELSE 		    \n" +
                "				IF @mfgCount = 0 THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);              \n" +
                "		                END IF;	              \n" +
                "				IF @componentCount = 0 THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfg PN does not exist',4,MFG_Part_No);              \n" +
                "				END IF;	              \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);              \n" +
                "			        END IF;						              \n" +
                "			END IF;				              \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN              \n" +
                "  \n" +
                "				-- must call statements in sequence          				    \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		              \n" +
                "				PREPARE stmt1 FROM @SQL1;              \n" +
                "				EXECUTE stmt1;            \n" +
                "  \n" +
                "				IF (pnickName = '') THEN  \n" +
                "					SET @sql2 = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"',',nickName=NULL where id=',LAST_INSERT_ID());	             		  \n" +
                "				ELSE  \n" +
                "					SET @sql2 = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"',',nickName=','\"', pnickName,'\"',' where id=',LAST_INSERT_ID());	               \n" +
                "				END IF;  \n" +
                "  \n" +
                "				PREPARE stmt2 FROM @SQL2;              \n" +
                "				EXECUTE stmt2;	              \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);              \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN    \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)               \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			              \n" +
                "				END IF;                \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;              \n" +
                "			ELSE             \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;              \n" +
                "			END IF;              \n" +
                "  \n" +
                "		ELSE          \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES               \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	              \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                \n" +
                "		END IF;              \n" +
                "  \n" +
                "	END block2;                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (156,'2.00','V1','Add field and chnage in SP of receiving module - FENIL '," + userid + ");"
            );
            break;
        case 156:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-01-2019  *********************************** */
                "DELETE FROM userpagedetail WHERE `pageID` IN (SELECT a.pageid FROM page_detail a WHERE a.pageName = 'Manage Generic Category');  \n" +
                "DELETE FROM rolepagedetail WHERE `pageID` IN (SELECT a.pageid FROM page_detail a WHERE a.pageName = 'Manage Generic Category');  \n" +
                "DELETE FROM page_detail WHERE pageName = 'Manage Generic Category';  \n" +
                /* **************************** Add Script Version -> 30-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (157,'2.00','V1','Removed Manage category page details entry - Vaibhav '," + userid + ");"
            );
            break;
        case 157:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(	        \n" +
                "	IN ppartID INT(11)  \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		(  \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID  \n" +
                "			FROM   \n" +
                "			(  \n" +
                "					SELECT rl.qpa, ra.mountingtypeID, mt.name AS `mountingType`, rl.id, rl.partID  \n" +
                "							FROM rfq_lineitems rl  \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id AND ram.mountingtypeID = ra.mountingtypeID AND ram.id != ra.id  \n" +
                "					LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0  \n" +
                "					WHERE rl.partID = ppartID AND rl.id NOT IN   \n" +
                "						(  \n" +
                "							SELECT rl.id FROM rfq_lineitems_alternatepart ra  \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
                "							LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID  \n" +
                "							LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0  \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID AND ram.mountingtypeID != ra.mountingtypeID  \n" +
                "							GROUP BY rl.id  \n" +
                "						)  \n" +
                "					GROUP BY rl.id  \n" +
                "			) a  \n" +
                "			GROUP BY mountingtypeID  \n" +
                "		) UNION   \n" +
                "		(  \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID  \n" +
                "			FROM  \n" +
                "			(  \n" +
                "				SELECT rl.qpa, ra.mountingtypeID, 'Mismatched' AS `mountingType`, rl.id, rl.partID  \n" +
                "				FROM rfq_lineitems_alternatepart ra  \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID  \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0  \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID AND ram.mountingtypeID != ra.mountingtypeID  \n" +
                "				GROUP BY rl.id  \n" +
                "			)a  \n" +
                "		);  \n" +
                "  \n" +
                "  \n" +
                "		SELECT sum(rl.qpa) as `QPA`, ra.RoHSStatusID, ro.name AS `RoHSStatus`, count(rl.id) as `ItemCount`, rl.partID  \n" +
                "		FROM rfq_lineitems rl  \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "		WHERE rl.partID = ppartID  \n" +
                "		GROUP BY ra.RoHSStatusID;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;   \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                            \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),	                            \n" +
                "    IN pWhereClause VARCHAR(16383)                                \n" +
                "    )  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	/* DECLARE SQLStatement varchar(255); */                            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                            \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,  \n" +
                "		#(SELECT asb.id FROM rfq_assy_bom asb WHERE IFNULL(asb.isdeleted,0) = 0 AND asb.reqAssyID = ra.id  GROUP BY rf.id) AS assyBomID,  \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN,part.description,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "		(SELECT changeVersion FROM rfq_assembly_history WHERE rfqAssyID = ra.id ORDER BY id DESC LIMIT 1) AS InternalVersion,  \n" +
                "		(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "		-- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'  \n" +
                "		-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,  \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,  \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.customerCode,') ',cu.companyName) AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,  \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0  \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0  \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0  \n" +
                "		INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0  \n" +
                "		INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0  \n" +
                "		#left JOIN rfq_rohsmst ro ON ra.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		#JOIN rfq_assy_bom ab ON ab.reqAssyID = ra.id AND IFNULL(ab.isdeleted,0) = 0 AND ab.bomNumber IS NULL  \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0  \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                         \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                 \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                            \n" +
                "	PREPARE query3 FROM @SQLStatement3;                            \n" +
                "	EXECUTE query3;                            \n" +
                "	DEALLOCATE PREPARE query3;                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (158,'2.00','V1','assy at glance related changes  - shirish'," + userid + ");"
            );
            break;
        case 158:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-01-2019  *********************************** */
                "ALTER TABLE part_sub_assy_relationship CHANGE COLUMN parentPartID prPerPartID INT(11);  \n" +
                "ALTER TABLE part_sub_assy_relationship CHANGE COLUMN partLineItemID prPartLineItemID INT(11);  \n" +
                "ALTER TABLE part_sub_assy_relationship ADD lineitemID INT(11);  \n" +
                "UPDATE rfq_lineitems_headers SET isAvlField = NULL, isAvlMfgField = NULL , isActive = 0 WHERE `field` IN ('refRFQLineItemID','level');  \n" +
                /* **************************** Add Script Version -> 30-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (159,'2.00','V1','part_sub_assy_relationship table column changes - Jignesh K '," + userid + ");"
            );
            break;
        case 159:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "alter table component_standard_role modify column standardClassID int(11) null;  \n" +
                "alter table certificate_standards Add column passwordProtected tinyint(1) default 0 not null;  \n" +
                "alter table component_standard_role add column standardID int(11);  \n" +
                "  \n" +
                "ALTER TABLE component_standard_role  \n" +
                "ADD CONSTRAINT FK_certificate_standards_standardID  \n" +
                "FOREIGN KEY (standardID) REFERENCES certificate_standards(certificateStandardID);  \n" +
                "  \n" +
                "RENAME TABLE component_standard_role TO standard_role;  \n" +
                /* **************************** Add Script Version -> 31-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (160,'2.00','V1','Alter table certificate standard and change table name component Standard role - Mona '," + userid + ");"
            );
            break;
        case 160:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "UPDATE customers   \n" +
                "SET companyName  = CONCAT(companyName,\"1\"),  \n" +
                "   customerCode = CONCAT(customerCode,\"1\")  \n" +
                "  WHERE   \n" +
                "companyName IN (  \n" +
                "SELECT mfgCode FROM mfgcodemst WHERE iscustomer = 0  \n" +
                "UNION ALL  \n" +
                "SELECT mfgname FROM mfgcodemst WHERE iscustomer = 0  \n" +
                "UNION ALL  \n" +
                "SELECT alias FROM mfgcodeAlias WHERE mfgcodeid IN (SELECT id FROM mfgcodemst WHERE iscustomer = 0)  \n" +
                ") OR   \n" +
                "customercode IN (  \n" +
                "SELECT mfgCode FROM mfgcodemst  WHERE iscustomer = 0  \n" +
                "UNION ALL  \n" +
                "SELECT mfgname FROM mfgcodemst WHERE iscustomer = 0  \n" +
                "UNION ALL  \n" +
                "SELECT alias FROM mfgcodeAlias WHERE mfgcodeid IN (SELECT id FROM mfgcodemst WHERE iscustomer = 0)  \n" +
                ")  ;  \n" +
                "UPDATE customers   \n" +
                "SET CustomerCode = id   \n" +
                "WHERE customerCode IS NULL ;  \n" +
                "  \n" +
                "INSERT INTO mfgcodemst (mfgcode,mfgName,isdeleted,createdAt,createdBy,mfgType,isCustomer,customerID)   \n" +
                "SELECT customerCode `mfgcode`,companyName `mfgName`,0,SYSDATE(),1,\"MFG\",1,id `customerID`  \n" +
                "FROM customers   \n" +
                "WHERE id NOT IN (SELECT IFNULL(customerID,0) FROM mfgcodemst) ;  \n" +
                "  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllManufacturers` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllManufacturers`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "	SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,  \n" +
                "		(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias       \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist      \n" +
                "	FROM mfgcodemst mc	  \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0  \n" +
                "	AND  deletedAt IS NULL  \n" +
                "	AND mfgType IN ('MFG','DIST');    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode ASC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN   \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );     \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                "  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "    IN pWhereClause VARCHAR(16383),      \n" +
                "    IN pIsMFG TINYINT(1)       \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	/* DECLARE SQLStatement varchar(255); */      \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.createdAt,mc.updatedAt,emp.firstName, emp.lastName,      \n" +
                "    CONCAT(emp.firstName, ' ', emp.lastName) AS fullName, wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,      \n" +
                "(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias       \n" +
                "WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist      \n" +
                "FROM mfgcodemst mc       \n" +
                "JOIN users us ON mc.createdBy = us.id AND us.deletedAt IS NULL       \n" +
                "JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL        \n" +
                "LEFT JOIN who_bought_who wbw ON wbw.buyTo = mc.id    \n" +
                "WHERE IFNULL(mc.isdeleted,0) = 0 ;      \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "    IF pIsMFG THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );                  \n" +
                "	ELSE                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );                  \n" +
                "	END IF;          \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (161,'2.00','V1',' Updated customer and manufacturer - KETAN '," + userid + ");"
            );
            break;
        case 161:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "ALTER TABLE `component`   \n" +
                "ADD COLUMN `matingPartRquired` TINYINT(1) NULL DEFAULT 0 ,  \n" +
                "ADD COLUMN `driverToolRequired` TINYINT(1) NULL DEFAULT 0 ,  \n" +
                "ADD COLUMN `pickupPadRequired` TINYINT(1) NULL DEFAULT 0 ,  \n" +
                "ADD COLUMN `programingRequired` TINYINT(1) NULL DEFAULT 0 ,  \n" +
                "ADD COLUMN `functionalTestingRequired` TINYINT(1) NULL DEFAULT 0 ;  \n" +
                "ALTER TABLE `component_alternatepn`   \n" +
                "ADD COLUMN `Type` INT(11) NOT NULL COMMENT '1-Alternate part\n2-PickupPadRequired\n3-ProgrammingRequired\n4-FunctionaTestingRequired\n5-MatingPartRequired' ;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (162,'2.00','V1','fields added - Ashish'," + userid + ");"
            );
            break;
        case 162:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation Group',menuName='Equipment & Workstation  Group' WHERE pageName='Equipment Group';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation Ownership',menuName='Equipment & Workstation Ownership' WHERE pageName='Equipment Ownership';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation Types',menuName='Equipment & Workstation Types'  WHERE pageName='Equipment Type';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation',menuName='Equipment & Workstation' WHERE menuName='Equipment & Tools';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation',menuName='Equipment & Workstation' WHERE menuName='Equipment & Special Tools';  \n" +

                "UPDATE page_detail SET deletedAt=NOW(),isDeleted=1  WHERE pageName='Workstation';   \n" +
                "UPDATE page_detail SET deletedAt=NOW(),isDeleted=1  WHERE pageName='Manage Workstation';   \n" +
                "UPDATE page_detail SET deletedAt=NOW(),isDeleted=1  WHERE pageName='Workstation Profile';  \n" +
                /* **************************** Add Script Version ->31-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (163,'2.00','V1','Update menu name and delete workstation menu  - DEEPSHIKHA '," + userid + ");"
            );
            break;
        case 163:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "DROP TABLE IF EXISTS `component_logicalgroup`;  \n" +
                "  \n" +
                "CREATE TABLE `component_logicalgroup` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `name` varchar(255) NOT NULL,  \n" +
                "  `isActive` tinyint(1) NOT NULL DEFAULT '1',  \n" +
                "  `createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "insert  into `component_logicalgroup`(`id`,`name`,`isActive`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`isDeleted`,`deletedBy`,`deletedAt`) values (1,'Supplies',1,NULL,'2019-01-31 18:35:53',NULL,'2019-01-31 18:35:53',0,NULL,NULL),(2,'Materials',1,NULL,'2019-01-31 18:36:01',NULL,'2019-01-31 18:36:01',0,NULL,NULL),(3,'Tools',1,NULL,'2019-01-31 18:36:10',NULL,'2019-01-31 18:36:10',0,NULL,NULL);  \n" +
                "DROP TABLE IF EXISTS `component_logicalgroup_detail`;  \n" +
                "  \n" +
                "CREATE TABLE `component_logicalgroup_detail` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `logicalgroupID` int(11) NOT NULL,  \n" +
                "  `rfqMountingTypeID` int(11) NOT NULL,  \n" +
                "  `isActive` tinyint(1) NOT NULL DEFAULT '1',  \n" +
                "  `createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_component_logicalgroup_detail_rfqMountingTypeID` (`rfqMountingTypeID`),  \n" +
                "  KEY `FK_component_logicalgroup_detail_logicalgroupID` (`logicalgroupID`),  \n" +
                "  CONSTRAINT `FK_component_logicalgroup_detail_logicalgroupID` FOREIGN KEY (`logicalgroupID`) REFERENCES `component_logicalgroup` (`id`),  \n" +
                "  CONSTRAINT `FK_component_logicalgroup_detail_rfqMountingTypeID` FOREIGN KEY (`rfqMountingTypeID`) REFERENCES `rfq_mountingtypemst` (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 31-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (164,'2.00','V1','Component Logical Group table data - Vaibhav '," + userid + ");"
            );
            break;
        case 164:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (22,'MATINGPARTREQUIRED','#d05821','Mating part is required for <% MFG %> <% MFGPN %>.','Mating part is required for <% MFG %> <% MFGPN %>.','<% MFG %>,<% MFGPN %>','1','2019-01-31',NULL,NULL,NULL,NULL,NULL,'Mating Part Required');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (23,'DRIVETOOLSREQUIRED','#d09875','Drive tools required for <% MFG %> <% MFGPN %>.','Drive tools required for <% MFG %> <% MFGPN %>.','<% MFG %>,<% MFGPN %>','1','2019-01-31',NULL,NULL,NULL,NULL,NULL,'Drive Tools Required');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (24,'PICKUPPADREQUIRED','#985623','Pickup pad required for <% MFG %> <% MFGPN %>.','Pickup pad required for <% MFG %> <% MFGPN %>.','<% MFG %>,<% MFGPN %>','1','2019-01-01',NULL,NULL,NULL,NULL,NULL,'Pickup Pad Required');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (25,'RESTRICTUSEWITHPERMISSION','#fe4512','This <% MFG %> <% MFGPN %> is restricted, but you can use by customer permission.','This <% MFG %> <% MFGPN %> is restricted, but you can use by customer permission.','<% MFG %>,<% MFGPN %>','1','2019-01-01',NULL,NULL,NULL,NULL,NULL,'Restrict Use With Permission');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (26,'RESTRICTUSEPERMANENTLY','#ee6e6e','This <% MFG %> <% MFGPN %> is restricted.','This <% MFG %> <% MFGPN %> is restricted.','<% MFG %>,<% MFGPN %>','1','2019-01-01',NULL,NULL,NULL,NULL,NULL,'Restrict Use Permanently');  \n" +
                "  \n" +
                "ALTER TABLE component ADD refCPNPartID INT(11);  \n" +
                "ALTER TABLE component    \n" +
                "ADD CONSTRAINT FK_component_refCPNPartID  \n" +
                "FOREIGN KEY (refCPNPartID) REFERENCES component(id);   \n" +
                "ALTER TABLE component ADD refPartID INT(11);  \n" +
                "ALTER TABLE component    \n" +
                "ADD CONSTRAINT FK_component_refPartID  \n" +
                "FOREIGN KEY (refPartID) REFERENCES component(id);  \n" +
                "ALTER TABLE component ADD internalVersion INT;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData1 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData2 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData3 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData4 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData5 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData6 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData7 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData8 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData9 TEXT;  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD userData10 TEXT;  \n" +
                /* **************************** Add Script Version -> 31-01-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                \n" +
                "	IN ppageIndex INT(11),                \n" +
                "	IN precordPerPage INT(11),                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383)                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE pOffset INT(11);                \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                 \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                 \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                               \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'     \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'        \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,                 \n" +
                "              description, systemVariable,logicID, displayName, org_description                \n" +
                "			FROM `rfq_lineitems_errorcode`                \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                \n" +
                "		ELSE                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "			SET pWhereClause = '1=1' ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "		ELSE	                \n" +
                "			SET rowNumWhere = '';                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "		/* to get total count of rows */                \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                \n" +
                "		PREPARE query1 FROM @SQLStatement1;                \n" +
                "		EXECUTE query1;                \n" +
                "		DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "		PREPARE query2 FROM @SQLStatement2;                \n" +
                "		EXECUTE query2;                \n" +
                "		DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (165,'2.00','V1',' CPN related DB changes , 10 column add in alternate part table, added error code   - Jignesh K '," + userid + ");"
            );
            break;
        case 165:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2019  *********************************** */
                "ALTER TABLE component_logicalgroup ADD COLUMN systemGenerated TINYINT DEFAULT 0;  \n" +
                "UPDATE component_logicalgroup   \n" +
                "SET systemGenerated=1;  \n" +
                /* **************************** Add Script Version -> 31-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (166,'2.00','V1','Component logiccal group system generated flag added - Vaibhav'," + userid + ");"
            );
            break;
        case 166:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2019  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD rfqQtySupplierID VARCHAR (50);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                              \n" +
                "	IN ppageIndex INT(11),                                              \n" +
                "	IN precordPerPage INT(11),                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                              \n" +
                "	IN rfqAssyID INT(11),                                              \n" +
                "	IN puserID INT (11)                                              \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                              \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                              \n" +
                "	    SET @SQLString = NULL;                                              \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "		ELSE                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                               \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                              \n" +
                "			SET pWhereClause = '1=1' ;                                              \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "		ELSE	                                              \n" +
                "			SET rowNumWhere = '';                                              \n" +
                "		END IF;	                                              \n" +
                "		SELECT                                              \n" +
                "                     GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(ra.requestQty = ''',                                              \n" +
                "						ra.requestQty,                                              \n" +
                "					''', rq.finalPrice, null))) AS ''',                                              \n" +
                "						ra.requestQty,''''                                              \n" +
                "					)                                              \n" +
                "					) INTO @SQLString                                              \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                              \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                              \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                              \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                              \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                              \n" +
                "					SELECT                                               \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                                \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                            \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                              \n" +
                "					(SELECT                                           \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)           \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                    \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                           \n" +
                "component c ON rla.mfgpnid=c.id                                           \n" +
                "LEFT JOIN mfgcodemst mg ON                                            \n" +
                "c.mfgCodeID=mg.id           \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0          \n" +
                " LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0              \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0          \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0          \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0          \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                              \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                               \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                           \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                  \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0         \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                                \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                               \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                              \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                              \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                              \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                              \n" +
                "  \n" +
                "			ELSE                                              \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                              \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,refDesig                             \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                              \n" +
                "					(SELECT                                           \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)           \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'','''') END)                                                     \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                           \n" +
                "component c ON rla.mfgpnid=c.id                                           \n" +
                "LEFT JOIN mfgcodemst mg ON                                            \n" +
                "c.mfgCodeID=mg.id           \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0          \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0          \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0          \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0          \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0          \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                                        \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\".\"),\"N/A\"),''@@@'', c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                               \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                               \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                              \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                              \n" +
                "			END IF;                                              \n" +
                "			PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;	                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                              \n" +
                "			EXECUTE query1;                                              \n" +
                "			DEALLOCATE PREPARE query1;                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                              \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "			EXECUTE query2;                                              \n" +
                "			DEALLOCATE PREPARE query2;                                              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                              \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                              \n" +
                "			EXECUTE query3;                                              \n" +
                "			DEALLOCATE PREPARE query3;                                              \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                              \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                              \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                              \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                              \n" +
                "			EXECUTE query4;                                              \n" +
                "			DEALLOCATE PREPARE query4;                                          \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                         \n" +
                "					rq.finalPrice,                         \n" +
                "					rq.unitPrice,                        \n" +
                "					rq.supplier,                        \n" +
                "					rq.min,                        \n" +
                "					rq.mult,                         \n" +
                "					rq.selectedMpn,                         \n" +
                "					rq.selectionMode,                        \n" +
                "					rq.qtyID,                                         \n" +
                "					rq.currentStock,                                        \n" +
                "					rq.leadTime,                                         \n" +
                "					rq.supplierStock,                                        \n" +
                "					rq.grossStock,                                            \n" +
                "					rq.selectedPIDCode,                                          \n" +
                "					rq.pricingSuppliers,    \n" +
                "					rq.packaging,   \n" +
                "					rq.rfqQtySupplierID,                         \n" +
                "					c.noOfPosition ApiNoOfPosition,                            \n" +
                "					ct.qpa,                         \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                   \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                        \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                           \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                           \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                                  \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                      \n" +
                "			EXECUTE query5;                                                      \n" +
                "			DEALLOCATE PREPARE query5;                                             \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                                       \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                                       \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                                      \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                          \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                           \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                           \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                            \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                            \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                              \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                                  \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                      \n" +
                "			EXECUTE query6;                                                      \n" +
                "			DEALLOCATE PREPARE query6;                                                          \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (167,'2.00','V1','Alter table rfq_consolidate_mfgpn_lineitem_quantity-Champak'," + userid + ");"
            );
            break;
        case 167:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "Drop PROCEDURE if Exists `Sproc_RetrieveMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMasterTemplate`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "		SET @SQL = NULL;      \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "			SELECT * ,  \n" +
                "            (CASE WHEN (`mt`.`isMasterTemplate` = 0) THEN 'No'                 \n" +
                "					WHEN (`mt`.`isMasterTemplate` = 1) THEN 'Yes' ELSE '' END) AS `isMasterTemplateValue`,  \n" +
                "			   (SELECT COUNT(*) FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateID = mt.id      \n" +
                "				AND operationId IN (SELECT opID FROM operations WHERE deletedAt IS NULL AND opStatus = 1)) AS operationCount /* 1 - published op */      \n" +
                "			FROM master_templates mt      \n" +
                "			WHERE mt.`deletedAt` IS NULL      \n" +
                "		;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"masterTemplate ASC\") ;      \n" +
                "		ELSE      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 01-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (168,'2.00','V1','Sproc_RetrieveMasterTemplate-Mona '," + userid + ");"
            );
            break;
        case 168:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-02-2019  *********************************** */
                "ALTER TABLE equipment MODIFY assetNumber VARCHAR(255);  \n" +
                /* **************************** Add Script Version ->04-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (169,'2.00','V1','Alter column datatype - DEEPSHIKHA '," + userid + ");"
            );
            break;
        case 169:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-02-2019  *********************************** */
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)   \n" +
                "	VALUES ('Manage CPN Receiving Material',0,0,'','app.transaction.receivingmaterial.cpnreceive','managecpnreceivingmaterial/:id','CPN Receive',NULL,174,0,'13.09',NULL,'mdi mdi-cube-send',1,'2018-03-22 09:03:07','2018-03-22 09:03:07',NULL,'1',NULL,NULL,0,NULL,0,'CPN Receive');  \n" +
                /* **************************** Add Script Version -> 04-02-2019 *********************************** */
                "ALTER TABLE component_sid_stock ADD COLUMN mfgAvailabel TINYINT(1) NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 04-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBarcodeUID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBarcodeUID`(	      \n" +
                "	IN pPrifix VARCHAR(14)    \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pUID VARCHAR(14);      \n" +
                "	DECLARE pFinalPrefix VARCHAR(14);  \n" +
                "	IF(pPrifix IS NULL)THEN    \n" +
                "		SELECT 	`values` INTO  pPrifix FROM systemconfigrations WHERE `key`='BarcodePreFix';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SELECT LEFT(pPrifix, 8) INTO pFinalPrefix;  \n" +
                "	SELECT uid INTO pUID FROM (SELECT uid,prefix,isDeleted FROM component_sid_stock ORDER BY uid DESC)t WHERE prefix=pFinalPrefix AND isDeleted=0 LIMIT 1;    \n" +
                "  \n" +
                "	IF(pUID IS NULL)THEN    \n" +
                "		SELECT  CONCAT(pFinalPrefix,LPAD( '1', 14-LENGTH(pFinalPrefix), '0' )) INTO pUID ;    \n" +
                "	ELSE    \n" +
                "		SELECT LEFT(pPrifix, 8) INTO pFinalPrefix;  \n" +
                "		SELECT SUBSTRING(pUID, LENGTH(pFinalPrefix)+1,LENGTH(pUID)) INTO  pUID;    \n" +
                "		SELECT  CONCAT(pFinalPrefix,LPAD( CAST(pUID AS UNSIGNED) +1, 14-LENGTH(pFinalPrefix), '0' )) INTO pUID;    \n" +
                "	END IF;   \n" +
                "  \n" +
                "	SELECT pUID,pPrifix;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBarcodeUIDForCPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBarcodeUIDForCPN`(	      \n" +
                "	IN pPrifix VARCHAR(14)    \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pNewUID VARCHAR(14);  \n" +
                "	DECLARE pFinalPrefix VARCHAR(14);      \n" +
                "	IF(pPrifix IS NULL)THEN    \n" +
                "		SELECT 	`values` INTO  pPrifix FROM systemconfigrations WHERE `key`='BarcodePreFix';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SELECT RIGHT(pPrifix, 8) INTO pFinalPrefix;  \n" +
                "  \n" +
                "	SELECT uid INTO pNewUID FROM (SELECT uid,prefix,isDeleted FROM component_sid_stock ORDER BY uid DESC)t WHERE prefix=pFinalPrefix AND isDeleted=0 LIMIT 1;    \n" +
                "	IF(pNewUID IS NULL)THEN  \n" +
                "		SELECT  CONCAT(LPAD( '1', 14-LENGTH(pFinalPrefix), '0' ), pFinalPrefix) INTO pNewUID ;    \n" +
                "	ELSE    \n" +
                "		SELECT SUBSTRING(pNewUID, 1,LENGTH(pNewUID)-LENGTH(pFinalPrefix)) INTO  pNewUID;    \n" +
                "		SELECT  CONCAT(LPAD( CAST(pNewUID AS UNSIGNED) +1, 14-LENGTH(pFinalPrefix), '0' ), pFinalPrefix) INTO pNewUID;    \n" +
                "	END IF;   \n" +
                "  \n" +
                "	SELECT pNewUID,pFinalPrefix;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempNewUIDForCPN;	                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempNewUIDForCPN AS                \n" +
                "		SELECT pNewUID,pFinalPrefix;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                \n" +
                "    IN pWhereClause VARCHAR(16383),                \n" +
                "    IN puserID VARCHAR(50),          \n" +
                "    IN pnickName VARCHAR(20),          \n" +
                "    IN pprefix VARCHAR(20),          \n" +
                "    IN puid VARCHAR(20),      \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT         \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                \n" +
                "	DECLARE v_delimiter VARCHAR(10);                \n" +
                "	DECLARE v_length INT;                 \n" +
                "	DECLARE v_fieldType INT;                     \n" +
                "	DECLARE v_entityId INT;                \n" +
                "	DECLARE v_dataElementId INT;                \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                \n" +
                "	DECLARE strLabel VARCHAR(2000);                \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                \n" +
                "	DECLARE StaticField VARCHAR(100);                \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                \n" +
                "	DECLARE plen,slen INT;                \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                \n" +
                "	DECLARE pbr_Separator VARCHAR(10);            \n" +
                "	DECLARE barcode_type_id INT;      \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                 \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                \n" +
                "	(                \n" +
                "	     errorText NVARCHAR(2000),                \n" +
                "	     IsSuccess VARCHAR (2),      \n" +
                "	     MFGPart VARCHAR(100)                     \n" +
                "	);                \n" +
                "	-- get data from barcode templates with seprator                \n" +
                "	block1: BEGIN           \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                 \n" +
                "		pWhereClause REGEXP tempregexp;          \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */      \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID              \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                \n" +
                "			pWhereClause REGEXP tempregexp;           \n" +
                "		ELSE    /* barcode 1D */      \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template               \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                 \n" +
                "			pWhereClause REGEXP tempregexp;           \n" +
                "		END IF;           \n" +
                "	END block1;                \n" +
                "  \n" +
                "	block2: BEGIN                \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter             \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                 \n" +
                "			pWhereClause REGEXP tempregexp) AND deletedAt IS NULL;         \n" +
                "  \n" +
                "		-- declare exit loop if data not found                \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                \n" +
                "	        -- if any record match found than  check for delimiter and its value           \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                \n" +
                "			-- create temporary table for deliemeter and component dataelement                \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                \n" +
                "				pentityId INT,                \n" +
                "				pdataElementId INT,                \n" +
                "				pdelimiter_value VARCHAR(200)                \n" +
                "			);           \n" +
                "  \n" +
                "			-- create temporary table for separator string values                \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));      \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                 \n" +
                "				pWhereClause REGEXP tempregexp;       \n" +
                "  \n" +
                "			-- open cursor                \n" +
                "			OPEN barcodeMatch_cursor;                \n" +
                "  \n" +
                "			-- set str label as whereclause                \n" +
                "			SET strLabel=pWhereClause;         \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                \n" +
                " 			 END IF;               \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                 \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                \n" +
                "			 END IF;	      \n" +
                "  \n" +
                "			-- insert all values after seprator split                 \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                \n" +
                "			PREPARE stmt1 FROM @SQL;	                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';         \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                \n" +
                "			barcodeMatch_loop:LOOP                \n" +
                "				-- get all five selected values                \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;        \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                \n" +
                "				IF exit_loop THEN           \n" +
                "					CLOSE barcodeMatch_cursor;                \n" +
                "					LEAVE barcodeMatch_loop;                \n" +
                "				END IF;           \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                \n" +
                "				EXECUTE stmtdelimiter;      \n" +
                "  \n" +
                "				-- get delimiter values from string                \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));        \n" +
                "  \n" +
                "				-- check for field type is static or dynamic                \n" +
                "				-- if static field than check for mfg code and mfg part number                \n" +
                "				IF v_fieldType = 0  THEN            \n" +
                "  \n" +
                "					-- component_sid_stock                 \n" +
                "					-- get static field name from barcode table delimiter data element id                \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                  \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN      \n" +
                "						SET MFG_Part_No = delimiter_value_data;      \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN      \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                                \n" +
                "						ELSE      \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;      \n" +
                "						END IF;      \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                \n" +
                "						END IF;       \n" +
                "					END IF;                \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN        \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN      \n" +
                "						CLOSE barcodeMatch_cursor;                \n" +
                "						LEAVE barcodeMatch_loop;      \n" +
                "					END IF;         \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                 \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                \n" +
                "  \n" +
                "				ELSE               \n" +
                "					-- component_sid_stock_dataelement_Values                  \n" +
                "					-- dynamic fields          \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                 \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;             \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                 \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);         \n" +
                "				END IF;                \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                \n" +
                "  \n" +
                "			-- check if mfg and component both found than                 \n" +
                "			IF (@componentCount > 1) THEN      \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                \n" +
                "                                   IF @Mfgmatched = 0  THEN                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                \n" +
                "				   END IF;									                \n" +
                "			 ELSE 		      \n" +
                "				IF @mfgCount = 0 THEN                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                \n" +
                "		                END IF;	                \n" +
                "				IF @componentCount = 0 THEN                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                \n" +
                "				END IF;	                \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                  \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                \n" +
                "			        END IF;						                \n" +
                "			END IF;				                \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN  \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;  \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;  \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	  \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					  \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				-- must call statements in sequence          				      \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                \n" +
                "				PREPARE stmt1 FROM @SQL1;                \n" +
                "				EXECUTE stmt1;              \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');  \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);  \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	  \n" +
                "  \n" +
                "				SET @sql2 = UpdateValue;	                 \n" +
                "				PREPARE stmt2 FROM @SQL2;                \n" +
                "				EXECUTE stmt2;	                \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN      \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                 \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                \n" +
                "			ELSE               \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                \n" +
                "			END IF;                \n" +
                "  \n" +
                "		ELSE            \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                 \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                  \n" +
                "		END IF;                \n" +
                "  \n" +
                "	END block2;                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (170,'2.00','V1','Db and SP changes of receiving module - FENIL '," + userid + ");"
            );
            break;

        case 170:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "ALTER TABLE binmst MODIFY  COLUMN isPermanentBin TINYINT(1) DEFAULT 0;  \n" +

                "UPDATE genericcategory SET categoryType = \"Equipment & Workstation Group\" WHERE categoryType=\"Equipment Group\";  \n" +
                "UPDATE genericcategory SET categoryType = \"Equipment & Workstation Type\" WHERE categoryType=\"Equipment Type\";  \n" +
                "UPDATE genericcategory SET categoryType = \"Equipment & Workstation Possession\" WHERE categoryType=\"Equipment Possession\";  \n" +
                "UPDATE genericcategory SET categoryType = \"Equipment & Workstation Ownership\" WHERE categoryType=\"Equipment Ownership\";  \n" +
                "  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation Type' WHERE PageName='Manage Equipment Type Generic Category';  \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation Ownership' WHERE PageName='Manage Equipment Ownership Generic Category';   \n" +
                "UPDATE page_detail SET displayMenuName='Equipment & Workstation Group' WHERE PageName='Manage Equipment Group Generic Category';  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveEquipment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEquipment`(  \n" +
                "   IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT `eqp`.* ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory   \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpTypeID) AS `eqpTypeIDConvertedValue` ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory   \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpGroupID) AS `eqpGroupIDConvertedValue` ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory   \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpSubGroupID) AS `eqpSubGroupIDConvertedValue` ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory   \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpOwnershipTypeID) AS `eqpOwnershipTypeIDConvertedValue` ,  \n" +
                "			(CASE WHEN (`eqp`.`equipmentAs` = 'E') THEN 'Equipment'   \n" +
                "					WHEN (`eqp`.`equipmentAs` = 'W') THEN 'Workstation' ELSE '' END) AS `equipmentAsConvertedValue` ,  \n" +
                "			(CASE WHEN (`eqp`.`isActive` = 0) THEN 'Inactive'   \n" +
                "					WHEN (`eqp`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`						  \n" +
                "			FROM `equipment` AS `eqp`   \n" +
                "			WHERE `deletedAt` IS NULL    \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"assetName ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +

                /* **************************** Add Script Version ->05-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (171,'2.00','V1','Update label name of Equipment & Workstation - DEEPSHIKAH '," + userid + ");"
            );
            break;
        case 171:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-02-2019  *********************************** */
                "truncate component_standard_details;  \n" +
                "Alter table component_standard_details add column certificateStandardID int(11) not null;  \n" +
                "Alter table component_standard_details add column ClassID int(11) ;  \n" +
                "Alter table component_standard_details modify column standardClassID int(11) null;  \n" +
                "  \n" +
                "ALTER TABLE component_standard_details  \n" +
                "ADD CONSTRAINT FK_certificate_standards_certificateStandardID  \n" +
                "FOREIGN KEY (certificateStandardID) REFERENCES certificate_standards(certificateStandardID);  \n" +
                "  \n" +
                "ALTER TABLE component_standard_details  \n" +
                "ADD CONSTRAINT FK_standard_class_ClassID  \n" +
                "FOREIGN KEY (ClassID) REFERENCES standard_class(classID);  \n" +
                /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (172,'2.00','V1','alter table component_Standrd_detail-Mona'," + userid + ");"
            );
            break;
        case 172:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-02-2019  *********************************** */
                "CREATE TABLE `rfq_assemblies_quotation_submitted` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `rfqAssyID` int(11) NOT NULL,  \n" +
                "  `quoteNumber` varchar(50) NOT NULL,  \n" +
                "  `quoteRev` int(11) DEFAULT '0',  \n" +
                "  `quoteInDate` datetime NOT NULL,  \n" +
                "  `quoteDueDate` datetime NOT NULL,  \n" +
                "  `quoteSubmitDate` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `bomInternalVersion` varchar(25) DEFAULT NULL,  \n" +
                "  `BOMIssues` longtext DEFAULT NULL,  \n" +
                "  `OtherNotes` longtext DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_assemblies_quotation_submitted_rfqAssyID` (`rfqAssyID`),  \n" +
                "  CONSTRAINT `FK_rfq_assemblies_quotation_submitted_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "ALTER TABLE rfq_assy_quotations ADD COLUMN refSubmitedQuoteID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assy_quotations add constraint FK_rfq_assy_quotations_refSubmitedQuoteID   \n" +
                "foreign key (`refSubmitedQuoteID`) References rfq_assemblies_quotation_submitted(`id`);  \n" +
                /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (173,'2.00','V1','rfq_assemblies_quotation_submitted table  - shirish'," + userid + ");"
            );
            break;
        case 173:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyQuoteSummary`(            \n" +
                "	IN prfqAssyID INT(1),          \n" +
                "    IN UserID INT(1)  \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "  BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "    START TRANSACTION;      \n" +
                "		INSERT INTO `rfq_assy_quotations`  \n" +
                "		(`rfqAssyID`, `rfqAssyQtyID`, `rfqAssyQtyTurnTimeID`, `requestedQty`, `turnTime`, `timeType`, `unitPrice`, `materialCost`, `total`,   \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `excessQtyTotalPrice`, `days`)  \n" +
                "		select rfqAssyID, rfqAssyQtyID, rfqAssyQtyTurnTimeID, requestedQty, turnTime, timeType, unitPrice, materialCost, total,   \n" +
                "		UserID `createdBy`, utc_timestamp() `createdAt`, UserID `updatedBy`, UTC_TIMESTAMP() `updatedAt`, excessQtyTotalPrice, days from rfq_assy_quotations aq  \n" +
                "		where aq.rfqAssyID = prfqAssyID and aq.isDeleted = 0   \n" +
                "        and aq.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "		INSERT INTO `rfq_assy_quotations_additionalcost`  \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,   \n" +
                "        `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`)  \n" +
                "		select raqn.`id` `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,   \n" +
                "        UserID `createdBy`, utc_timestamp() `createdAt`, UserID `updatedBy`, UTC_TIMESTAMP() `updatedAt`, raqa.`days` from rfq_assy_quotations_additionalcost raqa  \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0   \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1)  \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL;   \n" +
                "        update rfq_assemblies ra,  \n" +
                "		(select DATE_ADD(utc_timestamp(), INTERVAL TIMESTAMPDIFF(day,quoteInDate,quoteDueDate) DAY) as duedate  \n" +
                "		from rfq_assemblies where id=prfqAssyID) ran  \n" +
                "		set ra.isSummaryComplete = FALSE, ra.quoteNumber = NULL, ra.quoteSubmitDate = NULL, ra.updatedAt = UTC_TIMESTAMP(),  \n" +
                "		ra.quoteInDate = utc_timestamp(), ra.quoteDueDate = ran.duedate,updatedBy = UserID  \n" +
                "		where ra.id = prfqAssyID;  \n" +
                "  \n" +
                " COMMIT;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (174,'2.00','V1','copy quote summary sp - shirish'," + userid + ");"
            );
            break;
        case 174:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-02-2019  *********************************** */
                "ALTER TABLE rfq_assy_quotations DROP FOREIGN KEY FK_rfq_assy_quotations_refSubmitedQuoteID;  \n" +
                "ALTER TABLE rfq_assy_quotations DROP COLUMN refSubmitedQuoteID;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assy_quotations ADD COLUMN refSubmittedQuoteID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assy_quotations add constraint FK_rfq_assy_quotations_refSubmittedQuoteID   \n" +
                "foreign key (`refSubmittedQuoteID`) References rfq_assemblies_quotation_submitted(`id`);  \n" +
                /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (175,'2.00','V1','rfq assy quotation foreign key changes  - shirish'," + userid + ");"
            );
            break;
        case 175:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-02-2019  *********************************** */
                "CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent AS   \n" +
                "SELECT a.id FROM component_alias a WHERE a.componentID IN   \n" +
                "(SELECT c.id FROM component c WHERE c.mfgcodeid IN   \n" +
                "(SELECT m.id FROM mfgcodemst m WHERE m.mfgType='DIST')  \n" +
                ");  \n" +
                "DELETE  FROM rfq_lineitems_alternatepart WHERE mfgcodeid IN (SELECT id FROM mfgcodemst m WHERE m.mfgType='DIST');  \n" +
                "DELETE   FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID IN (SELECT id FROM rfq_lineitems_alternatepart WHERE distMfgCodeID IS NOT NULL);  \n" +
                "DELETE FROM rfq_lineitems_alternatepart WHERE distMfgCodeID IS NOT NULL;  \n" +
                "DELETE FROM rfq_lineitems_alternatepart WHERE distMfgPNID IS NOT NULL;  \n" +
                "DELETE FROM component_goodbadpartmapping  WHERE goodcomponentid IN     \n" +
                "            (SELECT c.id FROM component c WHERE c.mfgcodeid IN    \n" +
                "            (SELECT m.id FROM mfgcodemst m WHERE m.mfgType='DIST') );    \n" +
                "DELETE FROM component_goodbadpartmapping  WHERE badcomponentid IN     \n" +
                "            (SELECT c.id FROM component c WHERE c.mfgcodeid IN    \n" +
                "            (SELECT m.id FROM mfgcodemst m WHERE m.mfgType='DIST') );    \n" +
                "DELETE FROM component_alternatepn  WHERE componentid IN     \n" +
                "            (SELECT c.id FROM component c WHERE c.mfgcodeid IN    \n" +
                "            (SELECT m.id FROM mfgcodemst m WHERE m.mfgType='DIST') );   \n" +
                "DELETE FROM component_alternatepn  WHERE componentid IN     \n" +
                "            (SELECT c.id FROM component c WHERE c.mfgcodeid IN    \n" +
                "            (SELECT m.id FROM mfgcodemst m WHERE m.mfgType='DIST') );  \n" +
                "DELETE FROM component_alias  WHERE id IN  (SELECT id FROM tempcomponent);  \n" +
                "DELETE FROM component WHERE mfgcodeid IN (SELECT id FROM mfgcodemst m WHERE m.mfgType='DIST');  \n" +
                "DELETE  FROM mfgcodealias WHERE mfgcodeid IN (SELECT id FROM mfgcodemst m WHERE m.mfgType='DIST');  \n" +
                "DELETE FROM mfgcodemst WHERE mfgType='DIST';  \n" +
                "DROP TABLE tempcomponent;  \n" +
                "ALTER TABLE mfgcodemst ADD isPricingApi TINYINT NOT NULL DEFAULT 0; \n" +
                "INSERT INTO  mfgcodemst(mfgcode,mfgType,mfgName,createdBy,isCustomer,isPricingApi) VALUES  \n" +
                "('DK','DIST','DIGI-KEY','1',0,1),  \n" +
                "('NW','DIST','NEWARK','1',0,1),  \n" +
                "('MOUSER','DIST','MOUSER','1',0,1),  \n" +
                "('TTI','DIST','TTI','1',0,1),  \n" +
                "('AR','DIST','ARROW','1',0,1),  \n" +
                "('AV','DIST','AVNET','1',0,1);  \n" +
                "UPDATE mfgcodemst SET id=-1 WHERE mfgcode='DK' LIMIT 1;  \n" +
                "UPDATE mfgcodemst SET id=-2 WHERE mfgcode='NW' LIMIT 1;  \n" +
                "UPDATE mfgcodemst SET id=-3 WHERE mfgcode='MOUSER' LIMIT 1;  \n" +
                "UPDATE mfgcodemst SET id=-4 WHERE mfgcode='TTI' LIMIT 1;  \n" +
                "UPDATE mfgcodemst SET id=-5 WHERE mfgcode='AR' LIMIT 1;  \n" +
                "UPDATE mfgcodemst SET id=-6 WHERE mfgcode='AV' LIMIT 1;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (176,'2.00','V1','Component field changes  - Champak'," + userid + ");"
            );
            break;
        case 176:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-02-2019  *********************************** */
                "SELECT pd.pageID INTO @pageId FROM page_detail pd WHERE pd.pageName = 'Manage Receiving Material';  \n" +
                "	UPDATE page_detail p SET p.parentPageID = @pageId WHERE p.pageName = 'Manage CPN Receiving Material';  \n" +
                "  \n" +
                "	SELECT pd.pageID INTO @pageDetailId FROM page_detail pd WHERE pd.pageName = 'Manage Receiving Material';  \n" +
                "	INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)   \n" +
                "	VALUES ('Manage Reserve Stock',0,0,'','app.transaction.receivingmaterial.reservestock','managereservestockmaterial/:id','Reserve Stock',NULL,@pageDetailId,0,'13.10',NULL,'mdi mdi-cube-send',1,'2018-03-22 09:03:07','2018-03-22 09:03:07',NULL,'1',NULL,NULL,0,NULL,0,'Reserve Stock');  \n" +
                "  \n" +
                "	DELETE FROM br_label_template_delimiter WHERE refbrID IN (SELECT id FROM br_label_template WHERE tempregexp LIKE '%[)%');  \n" +
                "	DELETE FROM br_label_template WHERE tempregexp LIKE '%[)%';  \n" +
                "	DELETE FROM br_label_template WHERE tempregexp = '';  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBarcodeUID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBarcodeUID`(	        \n" +
                "	IN pPrifix VARCHAR(14)      \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pUID VARCHAR(14);        \n" +
                "	DECLARE pFinalPrefix VARCHAR(14);    \n" +
                "	IF(pPrifix IS NULL)THEN      \n" +
                "		SELECT 	`values` INTO  pPrifix FROM systemconfigrations WHERE `key`='BarcodePreFix';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SELECT LEFT(pPrifix, 8) INTO pFinalPrefix;    \n" +
                "	SELECT uid INTO pUID FROM (SELECT uid,prefix,isDeleted FROM component_sid_stock ORDER BY uid DESC)t WHERE prefix=pFinalPrefix AND isDeleted=0 LIMIT 1;      \n" +
                "  \n" +
                "	IF(pUID IS NULL)THEN      \n" +
                "		SELECT  CONCAT(pFinalPrefix,LPAD( '1', 14-LENGTH(pFinalPrefix), '0' )) INTO pUID ;      \n" +
                "	ELSE      \n" +
                "		SELECT LEFT(pPrifix, 8) INTO pFinalPrefix;    \n" +
                "		SELECT SUBSTRING(pUID, LENGTH(pFinalPrefix)+1,LENGTH(pUID)) INTO  pUID;      \n" +
                "		SELECT  CONCAT(pFinalPrefix,LPAD( CAST(pUID AS UNSIGNED) +1, 14-LENGTH(pFinalPrefix), '0' )) INTO pUID;      \n" +
                "	END IF;     \n" +
                "  \n" +
                "	SELECT pUID,pPrifix;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBarcodeUIDForCPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBarcodeUIDForCPN`(	        \n" +
                "	IN pPrifix VARCHAR(50)      \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pNewUID VARCHAR(50);    \n" +
                "	DECLARE pFinalPrefix VARCHAR(50);        \n" +
                "	IF(pPrifix IS NULL)THEN      \n" +
                "		SELECT 	`values` INTO  pPrifix FROM systemconfigrations WHERE `key`='BarcodePreFix';      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SELECT RIGHT(pPrifix, 8) INTO pFinalPrefix;    \n" +
                "  \n" +
                "	SELECT uid INTO pNewUID FROM (SELECT uid,prefix,isDeleted FROM component_sid_stock ORDER BY uid DESC)t WHERE prefix=pFinalPrefix AND isDeleted=0 LIMIT 1;      \n" +
                "	IF(pNewUID IS NULL)THEN    \n" +
                "		SELECT  CONCAT(LPAD( '1', 14-LENGTH(pFinalPrefix), '0' ), pFinalPrefix) INTO pNewUID ;      \n" +
                "	ELSE      \n" +
                "		SELECT SUBSTRING(pNewUID, 1,LENGTH(pNewUID)-LENGTH(pFinalPrefix)) INTO  pNewUID;      \n" +
                "		SELECT  CONCAT(LPAD( CAST(pNewUID AS UNSIGNED) +1, 14-LENGTH(pFinalPrefix), '0' ), pFinalPrefix) INTO pNewUID;      \n" +
                "	END IF;     \n" +
                "  \n" +
                "	SELECT pNewUID,pFinalPrefix;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempNewUIDForCPN;	                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempNewUIDForCPN AS                  \n" +
                "		SELECT pNewUID,pFinalPrefix;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                  \n" +
                "    IN pWhereClause VARCHAR(16383),                  \n" +
                "    IN puserID VARCHAR(50),            \n" +
                "    IN pnickName VARCHAR(20),            \n" +
                "    IN pprefix VARCHAR(20),            \n" +
                "    IN puid VARCHAR(20),        \n" +
                "    IN pComponentID INT,    \n" +
                "    IN pCustomerID INT,    \n" +
                "    IN pCPN BOOL,    \n" +
                "    IN pMFGAvailabel BOOL,    \n" +
                "    IN pRefCpnMfgID INT           \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                  \n" +
                "	DECLARE v_delimiter VARCHAR(10);                  \n" +
                "	DECLARE v_length INT;                   \n" +
                "	DECLARE v_fieldType INT;                       \n" +
                "	DECLARE v_entityId INT;                  \n" +
                "	DECLARE v_dataElementId INT;                  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                  \n" +
                "	DECLARE strLabel VARCHAR(2000);                  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                  \n" +
                "	DECLARE StaticField VARCHAR(100);                  \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                  \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                  \n" +
                "	DECLARE plen,slen INT;                  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                  \n" +
                "	DECLARE pbr_Separator VARCHAR(10);              \n" +
                "	DECLARE barcode_type_id INT;        \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);    \n" +
                "	DECLARE UpdateValue VARCHAR(16383);        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                   \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                  \n" +
                "	(                  \n" +
                "	     errorText NVARCHAR(2000),                  \n" +
                "	     IsSuccess VARCHAR (2),        \n" +
                "	     MFGPart VARCHAR(100)                       \n" +
                "	);       \n" +
                "	-- get data from barcode templates with seprator                  \n" +
                "	block1: BEGIN             \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                   \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);            \n" +
                "		-- tempregexp;  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */        \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);             \n" +
                "		ELSE    /* barcode 1D */        \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                 \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                   \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);             \n" +
                "		END IF;             \n" +
                "	END block1;                  \n" +
                "  \n" +
                "	block2: BEGIN                  \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                  \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                  \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter               \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                   \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;           \n" +
                "  \n" +
                "		-- declare exit loop if data not found                  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                  \n" +
                "	        -- if any record match found than  check for delimiter and its value             \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                  \n" +
                "			-- create temporary table for deliemeter and component dataelement                  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                  \n" +
                "				pentityId INT,                  \n" +
                "				pdataElementId INT,                  \n" +
                "				pdelimiter_value VARCHAR(200)                  \n" +
                "			);             \n" +
                "  \n" +
                "			-- create temporary table for separator string values                  \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                  \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));        \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                  \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                   \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);         \n" +
                "  \n" +
                "			-- open cursor                  \n" +
                "			OPEN barcodeMatch_cursor;                  \n" +
                "  \n" +
                "			-- set str label as whereclause                  \n" +
                "			SET strLabel=pWhereClause;           \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                  \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                  \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                  \n" +
                " 			 END IF;                 \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                   \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                  \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                  \n" +
                "			 END IF;	        \n" +
                "  \n" +
                "			-- insert all values after seprator split                   \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                  \n" +
                "			PREPARE stmt1 FROM @SQL;	                  \n" +
                "			EXECUTE stmt1;                  \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                  \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';           \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                  \n" +
                "			barcodeMatch_loop:LOOP                  \n" +
                "				-- get all five selected values                  \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;          \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                  \n" +
                "				IF exit_loop THEN             \n" +
                "					CLOSE barcodeMatch_cursor;                  \n" +
                "					LEAVE barcodeMatch_loop;                  \n" +
                "				END IF;             \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                  \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                  \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                  \n" +
                "				EXECUTE stmtdelimiter;        \n" +
                "  \n" +
                "				-- get delimiter values from string                  \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));          \n" +
                "				-- check for field type is static or dynamic                  \n" +
                "				-- if static field than check for mfg code and mfg part number                  \n" +
                "				IF v_fieldType = 0  THEN              \n" +
                "					-- component_sid_stock                   \n" +
                "					-- get static field name from barcode table delimiter data element id                  \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                    \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                  \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN        \n" +
                "						SET MFG_Part_No = delimiter_value_data;        \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN        \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                                  \n" +
                "						ELSE        \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;        \n" +
                "						END IF;        \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                  \n" +
                "						END IF;         \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                  \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN          \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                  \n" +
                "					END IF;    \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\") THEN  \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                  \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN        \n" +
                "						CLOSE barcodeMatch_cursor;                  \n" +
                "						LEAVE barcodeMatch_loop;        \n" +
                "					END IF;           \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                  \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                   \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                  \n" +
                "  \n" +
                "				ELSE                 \n" +
                "					-- component_sid_stock_dataelement_Values                    \n" +
                "					-- dynamic fields            \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                   \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;               \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                   \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);           \n" +
                "				END IF;                  \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                  \n" +
                "  \n" +
                "			-- check if mfg and component both found than                   \n" +
                "			IF (@componentCount > 1) THEN        \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                  \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                  \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                  \n" +
                "                                   IF @Mfgmatched = 0  THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                  \n" +
                "				   END IF;									                  \n" +
                "			 ELSE 		        \n" +
                "				IF @mfgCount = 0 THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                  \n" +
                "		                END IF;	                  \n" +
                "				IF @componentCount = 0 THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                  \n" +
                "				END IF;	                  \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                    \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                  \n" +
                "			        END IF;						                  \n" +
                "			END IF;				                  \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN    \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;    \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;    \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                  \n" +
                "				END IF;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                  \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	    \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					    \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;    \n" +
                "				END IF;    \n" +
                "  \n" +
                "				-- must call statements in sequence          				        \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                  \n" +
                "				PREPARE stmt1 FROM @SQL1;                  \n" +
                "				EXECUTE stmt1;                \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');    \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');    \n" +
                "				END IF;    \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);    \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);    \n" +
                "				END IF;    \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);    \n" +
                "				END IF;    \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	    \n" +
                "  \n" +
                "				SET @sql2 = UpdateValue;	                   \n" +
                "				PREPARE stmt2 FROM @SQL2;                  \n" +
                "				EXECUTE stmt2;	                  \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                  \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN        \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                   \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                  \n" +
                "				END IF;                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                  \n" +
                "			ELSE                 \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                  \n" +
                "			END IF;                  \n" +
                "  \n" +
                "		ELSE              \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                   \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                  \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                    \n" +
                "		END IF;                  \n" +
                "  \n" +
                "	END block2;                             \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (177,'2.00','V1','Receiving Module changes SP and DB - FENIL '," + userid + ");"
            );
            break;
        case 177:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (27,'MISMATCHMOUNTINGTYPE','#963258','<% MFG %> <% MFG PN %> mounting type is mismatched. Please advise.','<% MFG %> <% MFG PN %> mounting type is mismatch. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Mounting Type');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (28,'MISMATCHFUNCTIONALCATEGOR','#753698','<% MFG %> <% MFG PN %> functional category is mismatched. Please advise.','<% MFG %> <% MFG PN %> functional category is mismatched. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Functional Category');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (29,'MISMATCHPITCH','#258465','<% MFG %> <% MFG PN %> pitch is mismatched. Please advise.','<% MFG %> <% MFG PN %> pitch is mismatched. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Pitch');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (30,'MISMATCHTOLERANCE','#de2584','<% MFG %> <% MFG PN %> tolerance is mismatched. Please advise.','<% MFG %> <% MFG PN %> tolerance is mismatched. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Tolerance');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (31,'MISMATCHVOLTAGE','#ad6582','<% MFG %> <% MFG PN %> voltage is mismatched. Please advise.','<% MFG %> <% MFG PN %> voltage is mismatched. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Voltage');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (32,'MISMATCHPACKAGE','#d96384','<% MFG %> <% MFG PN %> package is mismatched. Please advise.','<% MFG %> <% MFG PN %> package is mismatched. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Package');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (33,'MISMATCHVALUE','#ead235','<% MFG %> <% MFG PN %> value is mismatched. Please advise.','<% MFG %> <% MFG PN %> value is mismatched. Please advise.','<% MFG %>,<% MFG PN %>','1','2019-02-01',NULL,NULL,NULL,NULL,NULL,'Mismatch Value');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (34,'DUPLICATECPN','#ead235','Customer PN <% CPN %> <% Rev %> is duplcate. Please advise.','Customer PN <% CPN %> <% Rev %> is duplcate. Please advise.','<% CPN %>,<% Rev %>','1','2019-02-04',NULL,NULL,NULL,NULL,NULL,'Duplicate CPN');  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchMountingTypeStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchFunctionalCategoryStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `restrictUseWithPermissionStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `restrictUsePermanentlyStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems ADD COLUMN `duplicateCPNStep` TINYINT(1);  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                  \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "	IN pWhereClause VARCHAR(16383)                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "DECLARE pOffset INT(11);                  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                   \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                   \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                                 \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'       \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'          \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,                   \n" +
                "              description, systemVariable,logicID, displayName, org_description                  \n" +
                "			FROM `rfq_lineitems_errorcode`                  \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                  \n" +
                "		ELSE                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "			SET pWhereClause = '1=1' ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "		ELSE	                  \n" +
                "			SET rowNumWhere = '';                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		/* to get total count of rows */                  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                  \n" +
                "		PREPARE query1 FROM @SQLStatement1;                  \n" +
                "		EXECUTE query1;                  \n" +
                "		DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "		PREPARE query2 FROM @SQLStatement2;                  \n" +
                "		EXECUTE query2;                  \n" +
                "		DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                        \n" +
                "	IN ppartID INT                \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                \n" +
                "	SELECT 	a.id,     \n" +
                "		a.lineID,     \n" +
                "		a.qpa,     \n" +
                "		a.refDesig,     \n" +
                "		a.custPN,    \n" +
                "		a.custPNID,                             \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                            \n" +
                "		a.description,    \n" +
                "		a.level,    \n" +
                "		a.numOfPosition,    \n" +
                "		a.customerRev,     \n" +
                "		a.customerDescription,     \n" +
                "		a.customerPartDesc,                             \n" +
                "		CONCAT(part.partTypeName) partclassID,     \n" +
                "		a.isInstall,     \n" +
                "		a.isPurchase,     \n" +
                "		a.leadQty,     \n" +
                "		a.attritionRate,    \n" +
                "		a.valueAddedCost,    \n" +
                "		a.refRFQLineItemID,                  \n" +
                "		a.dnpQty,     \n" +
                "		a.dnpDesig,     \n" +
                "		a.qpaDesignatorStep,    \n" +
                "		a.duplicateCPNStep,  \n" +
                "		a.qpaDesignatorColorPriority,    \n" +
                "		a.mergeLines,    \n" +
                "		a.lineMergeStep,    \n" +
                "		a.isBuyDNPQty                  \n" +
                "	FROM rfq_lineitems a                  \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                  \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0       \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                            \n" +
                "  \n" +
                "	SELECT 	b.id,    \n" +
                "		b.lineID,     \n" +
                "		b.qpa,     \n" +
                "		b.refDesig,                         \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                        \n" +
                "		a.mfgCodeID,     \n" +
                "		a.mfgPN,     \n" +
                "		a.mfgPNID,                            \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                        \n" +
                "		a.distMfgCodeID,     \n" +
                "		a.distPN,     \n" +
                "		a.distMfgPNID,                             \n" +
                "		b.custPN,     \n" +
                "		b.custPNID,     \n" +
                "		b.uomID,     \n" +
                "		a.description descriptionAlternate,     \n" +
                "		b.description,     \n" +
                "		b.level,     \n" +
                "		b.numOfPosition,     \n" +
                "		b.customerRev,     \n" +
                "		b.customerDescription,     \n" +
                "		b.customerPartDesc,                      \n" +
                "		b.partclassID,     \n" +
                "		b.isInstall,     \n" +
                "		b.isPurchase,     \n" +
                "		b.leadQty,     \n" +
                "		b.attritionRate,     \n" +
                "		b.valueAddedCost,     \n" +
                "		b.refRFQLineItemID,                             \n" +
                "		b.dnpQty,     \n" +
                "		b.dnpDesig,     \n" +
                "		a.id AS rfqAlternatePartID,     \n" +
                "		b.qpaDesignatorStep,    \n" +
                "		b.qpaDesignatorColorPriority,     \n" +
                "		b.duplicateCPNStep,  \n" +
                "		b.isBuyDNPQty,                  \n" +
                "		a.mfgVerificationStep,     \n" +
                "		a.mfgDistMappingStep,    \n" +
                "		a.mfgCodeStep,    \n" +
                "		a.customerApproval,    \n" +
                "		a.org_mfgCode,     \n" +
                "		a.org_mfgPN,                          \n" +
                "		a.org_distributor,     \n" +
                "		a.org_distPN,                          \n" +
                "		a.distVerificationStep,     \n" +
                "		a.distCodeStep,     \n" +
                "		a.getMFGPNStep,     \n" +
                "		a.obsoletePartStep,    \n" +
                "		a.mfgGoodPartMappingStep,    \n" +
                "		a.mfgPNStep,     \n" +
                "		a.distPNStep,                        \n" +
                "		a.badMfgPN,     \n" +
                "		a.distGoodPartMappingStep,     \n" +
                "		a.nonRohsStep,     \n" +
                "		a.oneRohsComponentStep,     \n" +
                "		a.epoxyStep,     \n" +
                "		a.invalidConnectorTypeStep,    \n" +
                "		a.duplicateMPNInSameLineStep,  \n" +
                "		a.mismatchMountingTypeStep,  \n" +
                "		a.mismatchFunctionalCategoryStep,     \n" +
                "		a.restrictUseWithPermissionStep,  \n" +
                "		a.restrictUsePermanentlyStep,     \n" +
                "		CONCAT(part.partTypeName) parttypeID,    \n" +
                "		CONCAT(mount.name) mountingtypeID,     \n" +
                "		CONCAT(cat.categoryname) partcategoryID,    \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                      \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                    \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                  \n" +
                "		CASE WHEN                   \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                  \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                  \n" +
                "			THEN 1 ELSE 0 END isObsolete,                  \n" +
                "		co.mfgPNDescription,    \n" +
                "		co.pitch,  \n" +
                "		co.partPackage,  \n" +
                "		co.value,  \n" +
                "		co.tolerance,  \n" +
                "		co.voltage,  \n" +
                "		co.packaging,  \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment              \n" +
                "	FROM rfq_lineitems_alternatepart a                              \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                               \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                        \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0     \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0    \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0    \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                     \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                      \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                    \n" +
                "	IN pRfqAssyID INT(11)               \n" +
                "	)  \n" +
                "BEGIN                        \n" +
                "	DECLARE pValidCount INT(11);                    \n" +
                "	DECLARE pInValidCount INT(11);                    \n" +
                "	DECLARE pTotalCount INT(11);                \n" +
                "	DECLARE pProgress INT(11);                    \n" +
                "	DECLARE pPartID INT(11);    \n" +
                "	SET pProgress = 0;              \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_assemblies WHERE id = pRfqAssyID;         \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "  \n" +
                "	SELECT  p.rfqLineItemsID,               \n" +
                "	CASE               \n" +
                "		WHEN               \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND               \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND          \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND         \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND               \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND               \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND               \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND               \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND               \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND               \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND               \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND               \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND               \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND               \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND               \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND              \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND        \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND    \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND    \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND    \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND      \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1  AND  \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND      \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1              \n" +
                "		THEN 1              \n" +
                "		ELSE 0              \n" +
                "	END AS ProgressCount              \n" +
                "	FROM rfq_lineitems l              \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id              \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;              \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;              \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;              \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;              \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN              \n" +
                "		SET pProgress = 0;              \n" +
                "	ELSE               \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	SELECT pProgress;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (178,'2.00','V1',' BOM Validation entry - Jignesh K '," + userid + ");"
            );
            break;
        case 178:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "ALTER TABLE component CHANGE `internalVersion` `liveInternalVersion` INT(11);  \n" +
                "ALTER TABLE component DROP FOREIGN KEY FK_component_refCPNPartID;  \n" +
                "ALTER TABLE component DROP INDEX FK_component_refCPNPartID;  \n" +
                "ALTER TABLE component DROP COLUMN refCPNPartID;  \n" +
                "ALTER TABLE component DROP FOREIGN KEY FK_component_refPartID;  \n" +
                "ALTER TABLE component DROP INDEX FK_component_refPartID;  \n" +
                "ALTER TABLE component DROP COLUMN refPartID;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (179,'2.00','V1',' Remove Mismatch field add in component - Jignesh K '," + userid + ");"
            );
            break;
        case 179:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-06-2019  *********************************** */
                "DROP TABLE IF EXISTS `uid_verification_history`;    \n" +
                "CREATE TABLE `uid_verification_history` (      \n" +
                "	`id` INT(11) NOT NULL AUTO_INCREMENT,    \n" +
                "	`scanString1` VARCHAR(255) NOT NULL,      \n" +
                "	`scanString2` VARCHAR(255) NOT NULL,      \n" +
                "	`verificationType` VARCHAR(100) NOT NULL,      \n" +
                "	`string1PartID` INT(11) NULL,    \n" +
                "	`scanString1MFG` VARCHAR(100) NULL,      \n" +
                "	`scanString1MFGPNID` VARCHAR(100) NULL,     \n" +
                "	`string2PartID` INT(11) NULL,    \n" +
                "	`scanString2MFG` VARCHAR(100) NULL,      \n" +
                "	`scanString2MFGPNID` VARCHAR(100) NULL,       \n" +
                "	`status` VARCHAR(100) NULL,     \n" +
                "	`isDeleted` TINYINT(1) NOT NULL DEFAULT '0',     \n" +
                "	`createdBy` VARCHAR(255) NOT NULL,     \n" +
                "	`updatedBy` VARCHAR(255) DEFAULT NULL,     \n" +
                "	`deletedBy` VARCHAR(255) DEFAULT NULL,    \n" +
                "	`createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,     \n" +
                "	`updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP,      \n" +
                "	`deletedAt` DATETIME DEFAULT NULL,      \n" +
                "	`unlockUserID` VARCHAR(255) NULL,      \n" +
                "	`unLockNotes` VARCHAR(255) NULL,      \n" +
                "	PRIMARY KEY (`id`),      \n" +
                "	KEY `FK_uid_verification_history_string1PartID` (`string1PartID`),    \n" +
                "	CONSTRAINT `FK_uid_verification_history_string1PartID` FOREIGN KEY (`string1PartID`) REFERENCES `component` (`id`),     \n" +
                "	KEY `FK_uid_verification_history_string2PartID` (`string2PartID`),    \n" +
                "	CONSTRAINT `FK_uid_verification_history_string2PartID` FOREIGN KEY (`string2PartID`) REFERENCES `component` (`id`)    \n" +
                ") ENGINE=INNODB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;  \n" +

                /* **************************** New Script -> 02-06-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_verify_UID` ;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(     \n" +
                "	IN pVerificationType VARCHAR(14),     					  \n" +
                "	IN pUID VARCHAR(14),                                                          \n" +
                "	IN pScanMFGPN VARCHAR(100),                                                          \n" +
                "	IN pScanPID VARCHAR(50),                                                          \n" +
                "	IN pScanCPN VARCHAR(50),                                                          \n" +
                "	IN pScanUID VARCHAR(14)                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "	SELECT 	cs.id, cs.uid, cs.scanlabel, cs.refcompid, c.mfgcodeID, c.mfgPN, c.PIDCode  \n" +
                "        FROM 	component_sid_stock cs   \n" +
                "        INNER JOIN component c ON cs.refcompid = c.id   \n" +
                "        WHERE 	cs.uid = pUID   \n" +
                "        AND 	cs.isDeleted  = 0  \n" +
                "        LIMIT 	1;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(255) NULL, 	scanString2 VARCHAR(255) NULL,   \n" +
                "        	string1PartID INT(11) NULL,	scanString1MFG VARCHAR(100) NULL,   scanString1MFGPNID VARCHAR(100) NULL,   \n" +
                "        	string2PartID INT(11) NULL,	scanString2MFG VARCHAR(100) NULL,   scanString2MFGPNID VARCHAR(100) NULL,      \n" +
                "        	STATUS VARCHAR(100) NULL,   	isDeleted TINYINT(1) DEFAULT '0',   \n" +
                "        	createdBy VARCHAR(255) NULL,   	createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`)  \n" +
                "	SELECT 	pUID scanString1, 		IFNULL(pScanMFGPN,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))) scanString2,	  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 		UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,		NULL STATUS  \n" +
                "        FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "        SELECT  u.mfgcodeID, 	u.mfgPN, 	u.PIDCode   \n" +
                "	INTO 	@mfgcodeID,	@mfgPN, 	@PIDCode  \n" +
                "	FROM    tempUIDDet u;  \n" +
                "  \n" +
                "  \n" +
                "        IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPN IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN   \n" +
                "  \n" +
                "			SELECT  c.id, c.mfgcodeID, c.mfgPN   \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "			FROM    component c  \n" +
                "			WHERE 	c.PIDCode =  IFNULL(pScanPID,pScanCPN);  \n" +
                "  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = @mfgcodeID  AND c.mfgPN = @mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		-- ELSEIF (pScanCPN IS NOT NULL) THEN   \n" +
                "		-- 	IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = pScanCPN AND c.mfgcodeID = mfgcodeID  AND c.mfgPN = mfgPN LIMIT 1) THEN  \n" +
                "		-- 		SET uidVerified = 1;  \n" +
                "		-- 	END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "  \n" +
                "			SELECT  c.refcompid, c.mfgcodeID, c.mfgPN   \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "			FROM    tempUIDDet c;  \n" +
                "  \n" +
                "			SET uidVerified = 1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = @string2PartID,  \n" +
                "			scanString2MFG = @scanString2MFG,  \n" +
                "			scanString2MFGPNID = @scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "		VALUES 	(pUID, IFNULL(pScanMFGPN,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`verificationType`,  \n" +
                "		`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	  \n" +
                "		`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	  \n" +
                "		`status`,		  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	UH.scanString1MFGPNID,	  \n" +
                "		UH.string2PartID,	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Verified' ELSE 'Unverified' END,  \n" +
                "		0,			'',			CURRENT_TIMESTAMP   \n" +
                "	FROM 	tempUIDHistory UH;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT *, @PIDCode PIDCode FROM uid_verification_history WHERE id = LAST_INSERT_ID();	  \n" +
                "	-- if(uidVerified = 1) then  \n" +
                "	-- 	SELECT *, LAST_INSERT_ID() UIDHistoryID, 'Verified' verificationStatus FROM tempUIDDet cs;  \n" +
                "	-- else   \n" +
                "	-- 	SELECT LAST_INSERT_ID() UIDHistoryID, 'Unverified' verificationStatus;  \n" +
                "	-- end if;	  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE tempUIDHistory;  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (180,'2.00','V1',' Created table for UID verification history and uid verify sproc - Dharmishtha '," + userid + ");"
            );
            break;
        case 180:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-02-2019  *********************************** */
                "ALTER TABLE rfq_assy_quotations ADD manualTurnTime INT NULL;  \n" +
                "ALTER TABLE rfq_assy_quotations ADD manualTurnType VARCHAR(5) NULL;  \n" +
                "ALTER TABLE rfq_assy_quotations ADD laborCost DECIMAL(16,6) NULL;  \n" +
                "ALTER TABLE rfq_assy_quotations ADD laborDays INT NULL;  \n" +
                "ALTER TABLE rfq_consolidated_mfgpn_lineitem ADD numOfRows INT NULL;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (181,'2.00','V1','Change in  rfq_assy_quotations and rfq_consolidated_mfgpn_lineitem table-Champak'," + userid + ");"
            );
            break;
        case 181:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-02-2019  *********************************** */
                "UPDATE `component_alternatepn` a SET `Type`='1' WHERE `Type`='0' or `Type` is null;  \n" +
                "ALTER TABLE `component`   \n" +
                "ADD COLUMN `custAssyPN` VARCHAR(20) NULL DEFAULT NULL; \n" +
                "  \n" +
                "CREATE TABLE `component_otherpn` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `name` varchar(100) NOT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `refComponentID` int(11) NOT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `UK_component_otherpn_RefcomponentID_name_deletedAt` (`refComponentID`,`name`,`deletedAt`),  \n" +
                "  KEY `FK_component_otherpn_refComponentID` (`refComponentID`),  \n" +
                "  CONSTRAINT `FK_component_otherpn_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 06-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (182,'2.00','V1','Create table component_otherpn - Ashish'," + userid + ");"
            );
            break;
        case 182:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                              \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),	                              \n" +
                "    IN pWhereClause VARCHAR(16383)                                  \n" +
                "    )  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	/* DECLARE SQLStatement varchar(255); */                              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,  \n" +
                "        (select count(*) from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id) as revisedQuoteCount,  \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN,part.description,part.rev,part.assyCode,part.nickName,ro.rohsIcon,   \n" +
                "        part.liveInternalVersion as liveInternalVersion,  \n" +
                "		#(SELECT changeVersion FROM rfq_assembly_history WHERE rfqAssyID = ra.id ORDER BY id DESC LIMIT 1) AS InternalVersion,    \n" +
                "		(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,    \n" +
                "		ro.name AS `rohsComplientConvertedValue`,    \n" +
                "		-- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'    \n" +
                "		-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,    \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'    \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,    \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'    \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'    \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,    \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.customerCode,') ',cu.companyName) AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,    \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified    \n" +
                "		FROM rfqforms rf    \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0    \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0    \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0   \n" +
                "        INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0    \n" +
                "		INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0    \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0    \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0    \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                           \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                   \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                              \n" +
                "	PREPARE query3 FROM @SQLStatement3;                              \n" +
                "	EXECUTE query3;                              \n" +
                "	DEALLOCATE PREPARE query3;                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQassyRequoteHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQassyRequoteHistory`(	                              \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),	                              \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN prfqAssyID INT(11)  \n" +
                "    )  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	/* DECLARE SQLStatement varchar(255); */                              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "  \n" +
                "		select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                   \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                              \n" +
                "	PREPARE query3 FROM @SQLStatement3;                              \n" +
                "	EXECUTE query3;                              \n" +
                "	DEALLOCATE PREPARE query3;                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (183,'2.00','V1','RFQ list page changes  - shirish'," + userid + ");"
            );
            break;
        case 183:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2019  *********************************** */
                "ALTER TABLE component_sid_stock ADD COLUMN assyID INT NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_AssyID FOREIGN KEY (assyID) REFERENCES component(id);  \n" +
                /* **************************** New Script -> 07-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                    \n" +
                "    IN pWhereClause VARCHAR(16383),                    \n" +
                "    IN puserID VARCHAR(50),              \n" +
                "    IN pnickName VARCHAR(20),              \n" +
                "    IN pprefix VARCHAR(20),              \n" +
                "    IN puid VARCHAR(20),          \n" +
                "    IN pComponentID INT,      \n" +
                "    IN pCustomerID INT,      \n" +
                "    IN pCPN BOOL,      \n" +
                "    IN pMFGAvailabel BOOL,      \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT             \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                    \n" +
                "	DECLARE v_length INT;                     \n" +
                "	DECLARE v_fieldType INT;                         \n" +
                "	DECLARE v_entityId INT;                    \n" +
                "	DECLARE v_dataElementId INT;                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                    \n" +
                "	DECLARE StaticField VARCHAR(100);                    \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                    \n" +
                "	DECLARE plen,slen INT;                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                \n" +
                "	DECLARE barcode_type_id INT;          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                    \n" +
                "	(                    \n" +
                "	     errorText NVARCHAR(2000),                    \n" +
                "	     IsSuccess VARCHAR (2),          \n" +
                "	     MFGPart VARCHAR(100)                         \n" +
                "	);         \n" +
                "	-- get data from barcode templates with seprator                    \n" +
                "	block1: BEGIN               \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                     \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);              \n" +
                "		-- tempregexp;    \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */          \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "		ELSE    /* barcode 1D */          \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "		END IF;               \n" +
                "	END block1;                    \n" +
                "  \n" +
                "	block2: BEGIN                    \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                    \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                    \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                 \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;             \n" +
                "  \n" +
                "		-- declare exit loop if data not found                    \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                    \n" +
                "	        -- if any record match found than  check for delimiter and its value               \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                    \n" +
                "			-- create temporary table for deliemeter and component dataelement                    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                    \n" +
                "				pentityId INT,                    \n" +
                "				pdataElementId INT,                    \n" +
                "				pdelimiter_value VARCHAR(200)                    \n" +
                "			);               \n" +
                "  \n" +
                "			-- create temporary table for separator string values                    \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                    \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));          \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                    \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);           \n" +
                "  \n" +
                "			-- open cursor                    \n" +
                "			OPEN barcodeMatch_cursor;                    \n" +
                "  \n" +
                "			-- set str label as whereclause                    \n" +
                "			SET strLabel=pWhereClause;             \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                    \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                    \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                    \n" +
                " 			 END IF;                   \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                     \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                    \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                    \n" +
                "			 END IF;	          \n" +
                "  \n" +
                "			-- insert all values after seprator split                     \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                    \n" +
                "			PREPARE stmt1 FROM @SQL;	                    \n" +
                "			EXECUTE stmt1;                    \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                    \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';             \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                    \n" +
                "			barcodeMatch_loop:LOOP                    \n" +
                "				-- get all five selected values                    \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;            \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                    \n" +
                "				IF exit_loop THEN               \n" +
                "					CLOSE barcodeMatch_cursor;                    \n" +
                "					LEAVE barcodeMatch_loop;                    \n" +
                "				END IF;               \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                    \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                    \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                    \n" +
                "				EXECUTE stmtdelimiter;          \n" +
                "  \n" +
                "				-- get delimiter values from string                    \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));            \n" +
                "				-- check for field type is static or dynamic                    \n" +
                "				-- if static field than check for mfg code and mfg part number                    \n" +
                "				IF v_fieldType = 0  THEN                \n" +
                "					-- component_sid_stock                     \n" +
                "					-- get static field name from barcode table delimiter data element id                    \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                      \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                    \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN          \n" +
                "						SET MFG_Part_No = delimiter_value_data;          \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN          \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                                    \n" +
                "						ELSE          \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;          \n" +
                "						END IF;          \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                    \n" +
                "						END IF;           \n" +
                "					END IF;                    \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                    \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN            \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                    \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\") THEN    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "					END IF;    \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN          \n" +
                "						CLOSE barcodeMatch_cursor;                    \n" +
                "						LEAVE barcodeMatch_loop;          \n" +
                "					END IF;             \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                    \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                     \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                    \n" +
                "  \n" +
                "				ELSE                   \n" +
                "					-- component_sid_stock_dataelement_Values                      \n" +
                "					-- dynamic fields              \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                     \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                 \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                     \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);             \n" +
                "				END IF;                    \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                    \n" +
                "  \n" +
                "			-- check if mfg and component both found than                     \n" +
                "			IF (@componentCount > 1) THEN          \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                    \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                    \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                    \n" +
                "                                   IF @Mfgmatched = 0  THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                    \n" +
                "				   END IF;									                    \n" +
                "			 ELSE 		          \n" +
                "				IF @mfgCount = 0 THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                    \n" +
                "		                END IF;	                    \n" +
                "				IF @componentCount = 0 THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                    \n" +
                "				END IF;	                    \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                      \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                    \n" +
                "			        END IF;						                    \n" +
                "			END IF;				                    \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN      \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;      \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;      \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                    \n" +
                "				END IF;      \n" +
                "			END IF;      \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                    \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	      \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					      \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				-- must call statements in sequence          				          \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                    \n" +
                "				PREPARE stmt1 FROM @SQL1;                    \n" +
                "				EXECUTE stmt1;                  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');      \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);      \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);      \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	      \n" +
                "  \n" +
                "				SET @sql2 = UpdateValue;	                     \n" +
                "				PREPARE stmt2 FROM @SQL2;                    \n" +
                "				EXECUTE stmt2;	                    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                    \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN          \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                     \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                    \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                    \n" +
                "			ELSE                   \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                    \n" +
                "			END IF;                    \n" +
                "  \n" +
                "		ELSE                \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                     \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                    \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                      \n" +
                "		END IF;                    \n" +
                "  \n" +
                "	END block2;                               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (184,'2.00','V1',' Sample entry - KETAN '," + userid + ");"
            );
            break;
        case 184:
            allDbChangesArray.push(
                /* **************************** New Script -> 00-08-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_verify_UID` ;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(     \n" +
                "	IN pVerificationType VARCHAR(100),     					  \n" +
                "	IN pUID VARCHAR(14),                                                          \n" +
                "	IN pScanMFGPN VARCHAR(100),                                                          \n" +
                "	IN pScanPID VARCHAR(50),                                                          \n" +
                "	IN pScanCPN VARCHAR(50),                                                          \n" +
                "	IN pScanUID VARCHAR(14),  \n" +
                "	IN pCreatedBy VARCHAR(255)                                                         \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "	SELECT 	cs.id, cs.uid, cs.scanlabel, cs.refcompid, c.mfgcodeID, c.mfgPN, c.PIDCode, c.RoHSStatusID  \n" +
                "        FROM 	component_sid_stock cs   \n" +
                "        INNER JOIN component c ON cs.refcompid = c.id   \n" +
                "        WHERE 	cs.uid = pUID   \n" +
                "        AND 	cs.isDeleted  = 0  \n" +
                "        LIMIT 	1;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(255) NULL, 	scanString2 VARCHAR(255) NULL,   \n" +
                "        	string1PartID INT(11) NULL,	scanString1MFG VARCHAR(100) NULL,   scanString1MFGPNID VARCHAR(100) NULL,   \n" +
                "        	string2PartID INT(11) NULL,	scanString2MFG VARCHAR(100) NULL,   scanString2MFGPNID VARCHAR(100) NULL,      \n" +
                "        	STATUS VARCHAR(100) NULL,   	isDeleted TINYINT(1) DEFAULT '0',   \n" +
                "        	createdBy VARCHAR(255) NULL,   	createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`)  \n" +
                "	SELECT 	pUID scanString1, 		IFNULL(pScanMFGPN,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))) scanString2,	  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 		UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,		NULL STATUS  \n" +
                "        FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "        SELECT  u.mfgcodeID, 	u.mfgPN, 	u.PIDCode,	u.RoHSStatusID  \n" +
                "	INTO 	@mfgcodeID,	@mfgPN, 	@PIDCode,	@RoHSStatusID  \n" +
                "	FROM    tempUIDDet u;  \n" +
                "  \n" +
                "  \n" +
                "        IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPN IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN   \n" +
                "  \n" +
                "			SELECT  c.id, c.mfgcodeID, c.mfgPN   \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "			FROM    component c  \n" +
                "			WHERE 	c.PIDCode =  IFNULL(pScanPID,pScanCPN);  \n" +
                "  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = @mfgcodeID  AND c.mfgPN = @mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		-- ELSEIF (pScanCPN IS NOT NULL) THEN   \n" +
                "		-- 	IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = pScanCPN AND c.mfgcodeID = mfgcodeID  AND c.mfgPN = mfgPN LIMIT 1) THEN  \n" +
                "		-- 		SET uidVerified = 1;  \n" +
                "		-- 	END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "  \n" +
                "			SELECT  c.refcompid, c.mfgcodeID, c.mfgPN   \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "			FROM    tempUIDDet c;  \n" +
                "  \n" +
                "			SET uidVerified = 1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = @string2PartID,  \n" +
                "			scanString2MFG = @scanString2MFG,  \n" +
                "			scanString2MFGPNID = @scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "		VALUES 	(pUID, IFNULL(pScanMFGPN,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`verificationType`,  \n" +
                "		`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	  \n" +
                "		`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	  \n" +
                "		`status`,		  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	UH.scanString1MFGPNID,	  \n" +
                "		UH.string2PartID,	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Verified' ELSE 'Unverified' END,  \n" +
                "		0,			IFNULL(pCreatedBy,''),	CURRENT_TIMESTAMP   \n" +
                "	FROM 	tempUIDHistory UH;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT *, @PIDCode PIDCode, @RoHSStatusID RoHSStatusID FROM uid_verification_history WHERE id = LAST_INSERT_ID();	  \n" +
                "	-- if(uidVerified = 1) then  \n" +
                "	-- 	SELECT *, LAST_INSERT_ID() UIDHistoryID, 'Verified' verificationStatus FROM tempUIDDet cs;  \n" +
                "	-- else   \n" +
                "	-- 	SELECT LAST_INSERT_ID() UIDHistoryID, 'Unverified' verificationStatus;  \n" +
                "	-- end if;	  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE tempUIDHistory;  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-08-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (185,'2.00','V1',' Modified sproc Sproc_verify_UID to return RoHSStatus - Dharmishtha '," + userid + ");"
            );
            break;
        case 185:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "SELECT pd.pageID INTO @partToKitParentId FROM page_detail pd WHERE pd.pageName = 'Manage Receiving Material';  \n" +
                "	INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)   \n" +
                "	VALUES ('Manage Part To Kit',0,0,'','app.transaction.receivingmaterial.parttokit','manageparttokitmaterial/:id','Part To Kit',NULL,@partToKitParentId,0,'13.13',NULL,'mdi mdi-cube-send',1,'2018-03-22 09:03:07','2018-03-22 09:03:07',NULL,'1',NULL,NULL,0,NULL,0,'Part To Kit');  \n" +
                "  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN receiveMaterialType VARCHAR(100) NULL;  \n" +
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                    \n" +
                "    IN pWhereClause VARCHAR(16383),                    \n" +
                "    IN puserID VARCHAR(50),              \n" +
                "    IN pnickName VARCHAR(20),              \n" +
                "    IN pprefix VARCHAR(20),              \n" +
                "    IN puid VARCHAR(20),          \n" +
                "    IN pComponentID INT,      \n" +
                "    IN pCustomerID INT,      \n" +
                "    IN pCPN BOOL,      \n" +
                "    IN pMFGAvailabel BOOL,      \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,		  \n" +
                "    IN pReceiveMaterialType VARCHAR(255) 	  \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                    \n" +
                "	DECLARE v_length INT;                     \n" +
                "	DECLARE v_fieldType INT;                         \n" +
                "	DECLARE v_entityId INT;                    \n" +
                "	DECLARE v_dataElementId INT;                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                    \n" +
                "	DECLARE StaticField VARCHAR(100);                    \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                    \n" +
                "	DECLARE plen,slen INT;                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                \n" +
                "	DECLARE barcode_type_id INT;          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                    \n" +
                "	(                    \n" +
                "	     errorText NVARCHAR(2000),                    \n" +
                "	     IsSuccess VARCHAR (2),          \n" +
                "	     MFGPart VARCHAR(100)                         \n" +
                "	);         \n" +
                "	-- get data from barcode templates with seprator                    \n" +
                "	block1: BEGIN               \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                     \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);              \n" +
                "		-- tempregexp;    \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */          \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "		ELSE    /* barcode 1D */          \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "		END IF;               \n" +
                "	END block1;                    \n" +
                "  \n" +
                "	block2: BEGIN                    \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                    \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                    \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                 \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;             \n" +
                "  \n" +
                "		-- declare exit loop if data not found                    \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                    \n" +
                "	        -- if any record match found than  check for delimiter and its value               \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                    \n" +
                "			-- create temporary table for deliemeter and component dataelement                    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                    \n" +
                "				pentityId INT,                    \n" +
                "				pdataElementId INT,                    \n" +
                "				pdelimiter_value VARCHAR(200)                    \n" +
                "			);               \n" +
                "  \n" +
                "			-- create temporary table for separator string values                    \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                    \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));          \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                    \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);           \n" +
                "  \n" +
                "			-- open cursor                    \n" +
                "			OPEN barcodeMatch_cursor;                    \n" +
                "  \n" +
                "			-- set str label as whereclause                    \n" +
                "			SET strLabel=pWhereClause;             \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                    \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                    \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                    \n" +
                " 			 END IF;                   \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                     \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                    \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                    \n" +
                "			 END IF;	          \n" +
                "  \n" +
                "			-- insert all values after seprator split                     \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                    \n" +
                "			PREPARE stmt1 FROM @SQL;	                    \n" +
                "			EXECUTE stmt1;                    \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                    \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';             \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                    \n" +
                "			barcodeMatch_loop:LOOP                    \n" +
                "				-- get all five selected values                    \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;            \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                    \n" +
                "				IF exit_loop THEN               \n" +
                "					CLOSE barcodeMatch_cursor;                    \n" +
                "					LEAVE barcodeMatch_loop;                    \n" +
                "				END IF;               \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                    \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                    \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                    \n" +
                "				EXECUTE stmtdelimiter;          \n" +
                "  \n" +
                "				-- get delimiter values from string                    \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));            \n" +
                "				-- check for field type is static or dynamic                    \n" +
                "				-- if static field than check for mfg code and mfg part number                    \n" +
                "				IF v_fieldType = 0  THEN                \n" +
                "					-- component_sid_stock                     \n" +
                "					-- get static field name from barcode table delimiter data element id                    \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                      \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                    \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN          \n" +
                "						SET MFG_Part_No = delimiter_value_data;          \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN          \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                                    \n" +
                "						ELSE          \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;          \n" +
                "						END IF;          \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                    \n" +
                "						END IF;           \n" +
                "					END IF;                    \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                    \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN            \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                    \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\") THEN    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "					END IF;    \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN          \n" +
                "						CLOSE barcodeMatch_cursor;                    \n" +
                "						LEAVE barcodeMatch_loop;          \n" +
                "					END IF;             \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                    \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                     \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                    \n" +
                "  \n" +
                "				ELSE                   \n" +
                "					-- component_sid_stock_dataelement_Values                      \n" +
                "					-- dynamic fields              \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                     \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                 \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                     \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);             \n" +
                "				END IF;                    \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                    \n" +
                "  \n" +
                "			-- check if mfg and component both found than                     \n" +
                "			IF (@componentCount > 1) THEN          \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                    \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                    \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                    \n" +
                "                                   IF @Mfgmatched = 0  THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                    \n" +
                "				   END IF;									                    \n" +
                "			 ELSE 		          \n" +
                "				IF @mfgCount = 0 THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                    \n" +
                "		                END IF;	                    \n" +
                "				IF @componentCount = 0 THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                    \n" +
                "				END IF;	                    \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                      \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                    \n" +
                "			        END IF;						                    \n" +
                "			END IF;				                    \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN      \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;      \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;      \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                    \n" +
                "				END IF;      \n" +
                "			END IF;      \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                    \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	      \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					      \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				-- must call statements in sequence          				          \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                    \n" +
                "				PREPARE stmt1 FROM @SQL1;                    \n" +
                "				EXECUTE stmt1;                  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');      \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);      \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);      \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);      \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');   \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	      \n" +
                "  \n" +
                "				SET @sql2 = UpdateValue;	                     \n" +
                "				PREPARE stmt2 FROM @SQL2;                    \n" +
                "				EXECUTE stmt2;	                    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                    \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN          \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                     \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                    \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                    \n" +
                "			ELSE                   \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                    \n" +
                "			END IF;                    \n" +
                "  \n" +
                "		ELSE                \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                     \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                    \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                      \n" +
                "		END IF;                    \n" +
                "  \n" +
                "	END block2;                               \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),	              \n" +
                "        IN pWhereClause VARCHAR(16383)                  \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "               SELECT 	css.id,css.scanlabel,css.pkgQty,css.price,css.uid,              \n" +
                "			css.printStatus,cc.categoryName,css.lotCode,css.dateCode,              \n" +
                "			c.mfgcodeID,c.mfgPN,c.PIDCode,c.packaginggroupID,0 AS dedicatedQty,0 AS reservedQty,              \n" +
                "			mfg.id AS mfgID,mfg.mfgCode, ro.rohsIcon,ro.name AS rohsName,IFNULL(c.packageQty,1) packageQty,(SELECT csl.location FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isActive=1 AND csl.isdeleted=0 LIMIT 1) location,          \n" +
                "			(SELECT csl.qty FROM component_sid_stock_location csl WHERE csl.refsidid=css.id AND csl.isdeleted=0 AND csl.isActive=1 LIMIT 1) Qty ,c.mfgPNDescription, css.receiveMaterialType               \n" +
                "               FROM component_sid_stock css              \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0             \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0              \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0           \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0            \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;              \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );              \n" +
                "	PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (186,'2.00','V1','Changes of SP And Add new field related to Receiving Material - FENIL '," + userid + ");"
            );
            break;
        case 186:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-08-2019  *********************************** */
                "UPDATE systemconfigrations SET `key`='VerificationRoleAccess' WHERE `key`='AddMFGRoleAccessLevel';  \n" +
                /* **************************** Add Script Version -> 02-08-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (187,'2.00','V1',' Update data key AddMFGRoleAccessLevel to VerificationRoleAccess - Dharmishtha '," + userid + ");"
            );
            break;
        case 187:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "DELETE FROM component_cust_alias_rev_pn;  \n" +
                "ALTER TABLE component_cust_alias_rev_pn DROP FOREIGN KEY FK_component_cust_alias_rev_refComponentCustAliasID;  \n" +
                "ALTER TABLE component_cust_alias_rev_pn DROP INDEX FK_component_cust_alias_rev_refComponentCustAliasID;  \n" +
                "ALTER TABLE component_cust_alias_rev_pn DROP COLUMN refComponentCustAliasRevID;  \n" +
                "ALTER TABLE component_cust_alias_rev_pn ADD refCPNPartID INT(11);  \n" +
                "ALTER TABLE component_cust_alias_rev_pn ADD CONSTRAINT FK_component_refCPNPartID FOREIGN KEY (refCPNPartID) REFERENCES component(id);  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pUserID INT    \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE totalCount INT DEFAULT 0;      \n" +
                "	DECLARE currIndex INT DEFAULT 0;      \n" +
                "	DECLARE prevLineID INT;      \n" +
                "	DECLARE currCustPNID INT;      \n" +
                "	DECLARE currMFGPNID INT;  \n" +
                "	DECLARE currLineID INT;  \n" +
                "	DECLARE mountingTypeID INT;  \n" +
                "	DECLARE functionalCategoryID INT;  \n" +
                "	DECLARE rohsStatusID INT;  \n" +
                "	DECLARE categoryID INT;  \n" +
                "	DECLARE statusID INT;  \n" +
                "	DECLARE mfgPNID INT;     \n" +
                "	DECLARE currCustRev VARCHAR(10);      \n" +
                "	DECLARE currCustPN VARCHAR(500);  \n" +
                "	DECLARE mfgPN VARCHAR(500);  \n" +
                "	DECLARE mfgPID VARCHAR(500);      \n" +
                "	DECLARE maxDisplayOrder DECIMAL;  \n" +
                "  \n" +
                "	SET categoryID = 2;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   \n" +
                "		rla.id,  \n" +
                "		rla.rfqLineItemsID,  \n" +
                "		rl.custPNID,   \n" +
                "		rl.custPN,  \n" +
                "		rl.customerRev,  \n" +
                "		rla.mfgPNID,   \n" +
                "		c.RoHSStatusID  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	LEFT JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id   \n" +
                "	LEFT JOIN component c ON c.id = rla.mfgPNID  \n" +
                "	WHERE 	rl.custPN IS NOT NULL AND rla.mfgPNID IS NOT NULL   \n" +
                "		AND rl.partID = pPartID   \n" +
                "		AND rl.isDeleted = 0   \n" +
                "		AND rl.duplicateCPNStep = 1 );    		  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;      \n" +
                "	SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;  \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "	SELECT gencCategoryID INTO statusID FROM genericcategory WHERE categoryType = 'Part Status' AND gencCategoryName = 'Active';  \n" +
                "  \n" +
                "	IF functionalCategoryID IS NULL THEN   \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy)  \n" +
                "				VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID);  \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF mountingTypeID IS NULL THEN   \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy)VALUES('CPN', 1, pUserID);  \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	WHILE currIndex < totalCount DO      \n" +
                "		SET currCustPN = NULL;    \n" +
                "		SET currCustRev = NULL;    \n" +
                "  \n" +
                "		SELECT 	a.custPN, 	a.custPNID,   \n" +
                "			a.customerRev, 	a.mfgPNID,   \n" +
                "			a.rfqLineItemsID  \n" +
                "		INTO 	currCustPN,	currCustPNID,  \n" +
                "			currCustRev,	currMFGPNID,  \n" +
                "			currLineID   \n" +
                "		FROM 	temp_component_cust_alias_rev a LIMIT currIndex, 1;      \n" +
                "  \n" +
                "		SET currIndex = currIndex + 1;     \n" +
                "  \n" +
                "		IF (currCustPNID IS NOT NULL) THEN  \n" +
                "			IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN  \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (currCustPNID , currMFGPNID, pUserID);   \n" +
                "				IF (prevLineID IS NULL OR  prevLineID != currLineID) THEN  \n" +
                "					UPDATE component SET liveInternalVersion = (IFNULL(liveInternalVersion,0) + 1) WHERE id = currCustPNID;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (currCustPNID IS NULL) THEN  \n" +
                "			IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "				SET rohsStatusID = 0;  \n" +
                "			ELSE   \n" +
                "				SET rohsStatusID = 1;	  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "			SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "  \n" +
                "			SELECT id INTO mfgPNID FROM component WHERE PIDCode = mfgPID AND isDeleted = 0;  \n" +
                "  \n" +
                "			IF mfgPNID IS NULL THEN   \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,   \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,   \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt,liveInternalVersion)   \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							SYSDATE(), 0);  \n" +
                "				SELECT LAST_INSERT_ID() INTO @maxPartId;  \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (@maxPartId , currMFGPNID, pUserID);  \n" +
                "				UPDATE rfq_lineitems SET custPNID = @maxPartId WHERE id = currLineID;  \n" +
                "  \n" +
                "			ELSE   \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (mfgPNID , currMFGPNID, pUserID);  \n" +
                "				IF (prevLineID IS NULL OR  prevLineID  != currLineID) THEN  \n" +
                "					UPDATE component SET liveInternalVersion = (IFNULL(liveInternalVersion,0) + 1) WHERE id = mfgPNID;  \n" +
                "				END IF;  \n" +
                "				UPDATE rfq_lineitems SET custPNID = mfgPNID WHERE id = currLineID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET prevLineID = currLineID;  \n" +
                "  \n" +
                "	END WHILE;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (188,'2.00','V1',' CPN Related DB and functionality changes for BOM. - Jignesh K '," + userid + ");"
            );
            break;
        case 188:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyQuoteSummary`(              \n" +
                "	IN prfqAssyID INT(1),            \n" +
                "    IN UserID INT(1)    \n" +
                ")  \n" +
                "BEGIN              \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION              \n" +
                "BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING              \n" +
                "  BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "    START TRANSACTION;        \n" +
                "		INSERT INTO `rfq_assy_quotations`    \n" +
                "		(`rfqAssyID`, `rfqAssyQtyID`, `rfqAssyQtyTurnTimeID`, `requestedQty`, `turnTime`, `timeType`, `unitPrice`, `materialCost`, `total`,     \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `excessQtyTotalPrice`, `days`)    \n" +
                "		select rfqAssyID, rfqAssyQtyID, rfqAssyQtyTurnTimeID, requestedQty, turnTime, timeType, unitPrice, materialCost, total,     \n" +
                "		UserID `createdBy`, utc_timestamp() `createdAt`, UserID `updatedBy`, UTC_TIMESTAMP() `updatedAt`, excessQtyTotalPrice, days from rfq_assy_quotations aq    \n" +
                "		where aq.rfqAssyID = prfqAssyID and aq.isDeleted = 0     \n" +
                "        and aq.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "  \n" +
                "        INSERT INTO `rfq_assy_quotations_additionalcost`    \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,     \n" +
                "        `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`)    \n" +
                "		select raqn.`id` `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,     \n" +
                "        UserID `createdBy`, utc_timestamp() `createdAt`, UserID `updatedBy`, UTC_TIMESTAMP() `updatedAt`, raqa.`days` from rfq_assy_quotations_additionalcost raqa    \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0     \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1)    \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL;     \n" +
                "        update rfq_assemblies ra,    \n" +
                "		(select DATE_ADD(utc_timestamp(), INTERVAL TIMESTAMPDIFF(day,quoteInDate,quoteDueDate) DAY) as duedate    \n" +
                "		from rfq_assemblies where id=prfqAssyID) ran    \n" +
                "		set ra.isSummaryComplete = FALSE, ra.quoteNumber = NULL, ra.quoteSubmitDate = NULL, ra.updatedAt = UTC_TIMESTAMP(),    \n" +
                "		ra.quoteInDate = utc_timestamp(), ra.quoteDueDate = ran.duedate,updatedBy = UserID    \n" +
                "		where ra.id = prfqAssyID;    \n" +
                "  select * from rfq_assy_quotations where rfqAssyID = prfqAssyID ;  \n" +
                " COMMIT;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_barcode_label`;  \n" +
                "CREATE VIEW `vu_barcode_label` AS  \n" +
                "   /* SELECT   \n" +
                "        `css`.`uid` AS `uid`,  \n" +
                "        `css`.`priceCategoryID` AS `costID`,  \n" +
                "        `css`.`dateCode` AS `dateCode`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `r`.`name` AS `RoHS`  \n" +
                "    FROM  \n" +
                "        ((`component_sid_stock` `css`  \n" +
                "        LEFT JOIN `component` `c` ON (((`c`.`id` = `css`.`refcompid`)  \n" +
                "            AND (`c`.`isCustomCPN` = 0)  \n" +
                "            AND (`c`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `r` ON ((`r`.`id` = `c`.`RoHSStatusID`)))  \n" +
                "    WHERE  \n" +
                "        (`css`.`isDeleted` = 0);*/  \n" +
                "select * from component;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (189,'2.00','V1','RFQ list & Copy quote summary sp changes  - shirish'," + userid + ");"
            );
            break;

        case 189:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                                \n" +
                "	IN ppageIndex INT(11),                                                \n" +
                "	IN precordPerPage INT(11),                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                \n" +
                "	IN rfqAssyID INT(11),                                                \n" +
                "	IN puserID INT (11)                                                \n" +
                "    )  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                \n" +
                "	    SET @SQLString = NULL;                                                \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                    \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                \n" +
                "		ELSE                                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                                 \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                \n" +
                "			SET pWhereClause = '1=1' ;                                                \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                \n" +
                "		ELSE	                                                \n" +
                "			SET rowNumWhere = '';                                                \n" +
                "		END IF;	                                                \n" +
                "		SELECT                                                \n" +
                "                     GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                                \n" +
                "						ra.requestQty,                                                \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                \n" +
                "						ra.requestQty,''''                                                \n" +
                "					)                                                \n" +
                "					) INTO @SQLString                                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                                \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                                \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                \n" +
                "					SELECT                                                 \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,                                                  \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                              \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                \n" +
                "					(SELECT                                             \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)             \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                      \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                             \n" +
                "component c ON rla.mfgpnid=c.id                                             \n" +
                "LEFT JOIN mfgcodemst mg ON                                              \n" +
                "c.mfgCodeID=mg.id             \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0            \n" +
                " LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0            \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0            \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0            \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                                 \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                             \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                    \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0           \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                                  \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                                 \n" +
                "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                                \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                                                \n" +
                "  \n" +
                "			ELSE                                                \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                \n" +
                "					SELECT  id,isPurchase,numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,refDesig                               \n" +
                "						(SELECT fun_getLineItemByConsolidateID(consolidatedLineItemIDs)) as description,                                \n" +
                "					(SELECT                                             \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)             \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'','''') END)                                                       \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                             \n" +
                "component c ON rla.mfgpnid=c.id                                             \n" +
                "LEFT JOIN mfgcodemst mg ON                                              \n" +
                "c.mfgCodeID=mg.id             \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0            \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0            \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0            \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0            \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0            \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                                          \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\".\"),\"N/A\"),''@@@'', c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                                                 \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                                 \n" +
                "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                                                \n" +
                "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                                                \n" +
                "			END IF;                                                \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                \n" +
                "			EXECUTE stmt;	                                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                \n" +
                "			EXECUTE query1;                                                \n" +
                "			DEALLOCATE PREPARE query1;                                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "			EXECUTE query2;                                                \n" +
                "			DEALLOCATE PREPARE query2;                                                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` IS NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                                                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                \n" +
                "			EXECUTE query3;                                                \n" +
                "			DEALLOCATE PREPARE query3;                                                \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                                \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                                \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                \n" +
                "			EXECUTE query4;                                                \n" +
                "			DEALLOCATE PREPARE query4;                                            \n" +
                "  \n" +
                "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty,                           \n" +
                "					rq.finalPrice,                           \n" +
                "					rq.unitPrice,                          \n" +
                "					rq.supplier,                          \n" +
                "					rq.min,                          \n" +
                "					rq.mult,                           \n" +
                "					rq.selectedMpn,                           \n" +
                "					rq.selectionMode,                          \n" +
                "					rq.qtyID,                                           \n" +
                "					rq.currentStock,                                          \n" +
                "					rq.leadTime,                                           \n" +
                "					rq.supplierStock,                                          \n" +
                "					rq.grossStock,                                              \n" +
                "					rq.selectedPIDCode,                                            \n" +
                "					rq.pricingSuppliers,      \n" +
                "					rq.packaging,     \n" +
                "					rq.rfqQtySupplierID,                           \n" +
                "					c.noOfPosition ApiNoOfPosition,                              \n" +
                "					ct.qpa,                           \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                     \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                          \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                             \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id                                             \n" +
                "				WHERE ct.rfqAssyID=\",rfqAssyID);                                                    \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                        \n" +
                "			EXECUTE query5;                                                        \n" +
                "			DEALLOCATE PREPARE query5;                                               \n" +
                "  \n" +
                "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,                                         \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                                         \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                                        \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                            \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                             \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                             \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                              \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                            \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                              \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                                \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                                                    \n" +
                "  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                        \n" +
                "			EXECUTE query6;                                                        \n" +
                "			DEALLOCATE PREPARE query6;     \n" +
                "  \n" +
                "                     SET @SQLStatement7= CONCAT(\"SELECT (SELECT c.iscustom FROM rfq_consolidated_mfgpn_lineitem_alternate ra JOIN component c ON ra.mfgpnid=c.id WHERE c.iscustom=1 AND ra.consolidateid=rl.id AND rl.isdeleted=0 LIMIT 1)   \n" +
                "                     AS custom,rl.id FROM rfq_consolidated_mfgpn_lineitem rl\");                                                    \n" +
                "  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                        \n" +
                "			EXECUTE query7;                                                        \n" +
                "			DEALLOCATE PREPARE query7;       \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (190,'2.00','V1','Alter sp Sproc_GetRFQConsolidateRfqLineItem - Champak '," + userid + ");"
            );
            break;
        case 190:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfq_parttypemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_parttypemst`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                                                          \n" +
                "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "			    FROM                                                           \n" +
                "			    (                                                     \n" +
                "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM                                                   \n" +
                "	            component WHERE deletedAt IS NULL AND functionalCategoryID IN(',IDs,') LIMIT 1)                            \n" +
                "                 UNION ALL                               \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_fields_genericalias_mst\" else \"\" end as msg FROM component_fields_genericalias_mst WHERE deletedAt IS NULL AND refTableName = ''rfq_parttypemst'' AND refId IN(',IDs,') LIMIT 1)                            \n" +
                "                ) q');                                                          \n" +
                "	  	        PREPARE stmt FROM @SQL;                                                          \n" +
                "		        EXECUTE stmt;                                                    \n" +
                "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                                                      \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',                                                   \n" +
                "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "	  				PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "						EXECUTE stmt1;                                                    \n" +
                "	            	SELECT * FROM temprfqparttypemst;                                                          \n" +
                "			ELSE                                                          \n" +
                "				SELECT * FROM temprfqparttypemst;                                                          \n" +
                "  \n" +
                "			END IF;                                                          \n" +
                "            DROP TABLE temprfqparttypemst;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (191,'2.00','V1','delete parttype  sp changes  - shirish'," + userid + ");"
            );
            break;
        case 191:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2019  *********************************** */
                "alter table rfq_assemblies_quotation_submitted drop column quoteRev;  \n" +
                "alter table eco_type_category Add column category int(11) default null;  \n" +
                /* **************************** Add Script Version -> 08-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (192,'2.00','V1','remove column form rfq_assemblies_quotation_submitted add column in eco category  changes  - shirish'," + userid + ");"
            );
            break;
        case 192:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-08-2019  *********************************** */
                "SELECT pd.pageID INTO @verificationHistoryParentID FROM page_detail pd WHERE pd.pageName = 'Manage Receiving Material';  \n" +
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)   \n" +
                "VALUES ('Verification History',0,0,'','app.transaction.receivingmaterial.verificationhistory','verificationhistory','Verification History',NULL,@verificationHistoryParentID,0,'13.16',NULL,NULL,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL,'1',NULL,NULL,0,NULL,0,'Verification History');  \n" +
                /* **************************** Add Script Version -> 02-08-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (193,'2.00','V1',' Added page detail for verification history - Dharmishtha '," + userid + ");"
            );
            break;
        case 193:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveUIDVerificationHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveUIDVerificationHistory`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS History AS  \n" +
                "			SELECT *, CAST(NULL AS CHAR(255)) createdByName, CAST(NULL AS CHAR(255)) unlockByName  \n" +
                "			FROM `uid_verification_history`;  \n" +
                "  \n" +
                "		UPDATE History h, users u  \n" +
                "		SET h.createdByName = u.username  \n" +
                "		WHERE h.createdBy = u.id;  \n" +
                "  \n" +
                "		UPDATE History h, users u  \n" +
                "		SET h.unlockByName = u.username  \n" +
                "		WHERE h.unlockUserID = u.id;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM History where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  History where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE History;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-09-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (194,'2.00','V1',' Added sproc for verification history - Dharmishtha '," + userid + ");"
            );
            break;
        case 194:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "TRUNCATE TABLE operation_part;  \n" +
                "TRUNCATE TABLE workorder_operation_part;  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "ALTER TABLE operation_part DROP FOREIGN KEY FK_operation_part_partID;  \n" +
                "ALTER TABLE operation_part DROP COLUMN partID;  \n" +
                "  \n" +
                "ALTER TABLE workorder_operation_part DROP FOREIGN KEY FK_workorder_operation_part_partID;  \n" +
                "ALTER TABLE workorder_operation_part DROP COLUMN partID;  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "ALTER TABLE operation_part ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE operation_part ADD CONSTRAINT FK_operation_part_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);   \n" +
                "  \n" +
                "ALTER TABLE workorder_operation_part ADD COLUMN partID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE workorder_operation_part ADD CONSTRAINT FK_workorder_operation_part_partID FOREIGN KEY  (`partID`) REFERENCES component(`id`);  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP TABLE parts;  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_parts`;  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveParts`;  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "DELETE FROM userpagedetail WHERE `pageID`   \n" +
                "IN (SELECT a.pageid FROM page_detail a WHERE a.pageRoute IN ('app.parttype','app.part','app.part.manage','app.parttype.managegenericcategory'));  \n" +
                "DELETE FROM rolepagedetail WHERE `pageID`   \n" +
                "IN (SELECT a.pageid FROM page_detail a WHERE a.pageRoute IN ('app.parttype','app.part','app.part.manage','app.parttype.managegenericcategory'));  \n" +
                "  \n" +
                "DELETE FROM page_detail WHERE pageRoute IN ('app.parttype','app.part','app.part.manage','app.parttype.managegenericcategory');  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "ALTER TABLE operation_part   \n" +
                "   DROP INDEX operation_part_unique,   \n" +
                "   ADD UNIQUE KEY `operation_part_unique` (`opID`,`partID`,`deletedAt`);  \n" +
                /* **************************** New Script -> 02-09-2019  *********************************** */
                "ALTER TABLE workorder_operation_part   \n" +
                "   DROP INDEX workorder_operation_part_unique,   \n" +
                "   ADD UNIQUE KEY `workorder_operation_part_part_unique` (`woOPID`,`partID`,`deletedAt`);  \n" +
                /* **************************** Add Script Version -> 02-09-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (195,'2.00','V1','Remove Fields for Supply and Material - Vaibhav'," + userid + ");"
            );
            break;
        case 195:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2019  *********************************** */
            "DROP FUNCTION IF EXISTS `fun_getManualEntityTransValues` ;  \n" +
              "CREATE FUNCTION `fun_getManualEntityTransValues`(      \n" +
              "	pEntityID INT(11),      \n" +
              "	pDataElementID INT(11),      \n" +
              "	pValue LONGTEXT      \n" +
              "    ) RETURNS LONGTEXT CHARSET utf8  \n" +
              "BEGIN      \n" +
              "	DECLARE result LONGTEXT;      \n" +
              "	DECLARE lpControlTypeID  INT(3);      \n" +
              "	DECLARE lpIsDatasource  TINYINT(1);      \n" +
              "	DECLARE lpIsFixedEntity  TINYINT(1);      \n" +
              "	DECLARE lpDatasourceID  INT(11);      \n" +
              "	DECLARE lpTableName  VARCHAR(100);      \n" +
              "  \n" +
              "  \n" +
              "	SELECT controlTypeID,isDatasource ,isFixedEntity,datasourceID INTO lpControlTypeID,lpIsDatasource,lpIsFixedEntity,lpDatasourceID      \n" +
              "	FROM dataelement       \n" +
              "	WHERE entityID = pEntityID AND dataElementID = pDataElementID      \n" +
              "	;	      \n" +
              "  \n" +
              "	IF(lpControlTypeID = 9 OR lpControlTypeID = 10) THEN  /* controltypeid --> 9-option , 10-combobox */      \n" +
              "		IF(lpIsDatasource = 1) THEN  /* manual entry - 0 / datasource selection - 1 of dataelement */      \n" +
              "  \n" +
              "			IF(lpIsFixedEntity = 1) THEN  /* IsFixedEntity --> 1 - Fixed Entity Master */      \n" +
              "  \n" +
              "				SELECT tableName INTO lpTableName      \n" +
              "				FROM fixed_entity_dataelement WHERE id = lpDatasourceID;      \n" +
              "  \n" +
              "				CASE  lpTableName      \n" +
              "					WHEN 'employees' THEN        \n" +
              "						SELECT initialName INTO result FROM employees WHERE id = pValue;       \n" +
              "					WHEN 'department' THEN        \n" +
              "						SELECT deptName INTO result FROM department WHERE deptID = pValue;       \n" +
              "					WHEN 'operations' THEN        \n" +
              "						SELECT opName INTO result FROM operations WHERE opID = pValue;      \n" +
              "					WHEN 'defectcategory' THEN        \n" +
              "						SELECT defectcatName INTO result FROM defectcategory WHERE defectCatId = pValue;       \n" +
              "					WHEN 'workorder' THEN        \n" +
              "						SELECT woNumber INTO result FROM workorder WHERE woID = pValue;      \n" +
              "					WHEN 'customers' THEN        \n" +
              "						SELECT customerCode INTO result FROM customers WHERE id = pValue;	      \n" +
              "					WHEN 'genericcategory' THEN        \n" +
              "						SELECT gencCategoryName INTO result FROM genericcategory WHERE gencCategoryID = pValue;      \n" +
              "					WHEN 'equipment' THEN        \n" +
              "						SELECT assetName INTO result FROM equipment WHERE eqpID = pValue;      \n" +
              "					WHEN 'workorder_serialmst' THEN        \n" +
              "						SELECT SerialNo INTO result FROM workorder_serialmst WHERE id = pValue;								      \n" +
              "					ELSE       \n" +
              "						SET result = '';      \n" +
              "				END CASE;      \n" +
              "  \n" +
              "  \n" +
              "  \n" +
              "			ELSE  /* IsFixedEntity --> 0 = Custom Forms */      \n" +
              "				SELECT VALUE INTO result FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID = pValue;      \n" +
              "			END IF;       \n" +
              "  \n" +
              "		ELSE       \n" +
              "			SELECT NAME INTO result FROM dataelement_keyvalues WHERE keyValueID = pValue;       \n" +
              "		END IF;      \n" +
              "  \n" +
              "	ELSEIF(lpControlTypeID = 8 OR lpControlTypeID = 11) THEN  /* controltypeid --> 8-MultipleChoice , 11-MultipleChoiceDropdown */      \n" +
              "		IF(lpIsDatasource = 1) THEN  /* manual entry - 0 / datasource selection - 1 of dataelement */      \n" +
              "  \n" +
              "			IF(lpIsFixedEntity = 1) THEN  /* IsFixedEntity --> 1 - Fixed Entity Master */      \n" +
              "  \n" +
              "				SELECT tableName INTO lpTableName      \n" +
              "				FROM fixed_entity_dataelement WHERE id = lpDatasourceID;      \n" +
              "  \n" +
              " 				CASE  lpTableName      \n" +
              " 					WHEN 'employees' THEN        \n" +
              "						SELECT GROUP_CONCAT(initialName) INTO result FROM employees WHERE FIND_IN_SET(id,REPLACE(pValue,'|',','));       \n" +
              " 					WHEN 'department' THEN        \n" +
              "						SELECT GROUP_CONCAT(deptName) INTO result FROM department WHERE FIND_IN_SET(deptID,REPLACE(pValue,'|',','));       \n" +
              "					WHEN 'operations' THEN      \n" +
              "						SELECT GROUP_CONCAT(opName) INTO result FROM operations WHERE FIND_IN_SET(opID,REPLACE(pValue,'|',','));       \n" +
              "					WHEN 'defectcategory' THEN        \n" +
              "						SELECT GROUP_CONCAT(defectcatName) INTO result FROM defectcategory WHERE FIND_IN_SET(defectCatId,REPLACE(pValue,'|',','));      \n" +
              "					WHEN 'workorder' THEN        \n" +
              "						SELECT GROUP_CONCAT(woNumber) INTO result FROM workorder WHERE FIND_IN_SET(woID,REPLACE(pValue,'|',','));      \n" +
              "					WHEN 'customers' THEN        \n" +
              "						SELECT GROUP_CONCAT(customerCode) INTO result FROM customers WHERE FIND_IN_SET(id,REPLACE(pValue,'|',','));      \n" +
              "					WHEN 'genericcategory' THEN        \n" +
              "						SELECT GROUP_CONCAT(gencCategoryName) INTO result FROM genericcategory WHERE FIND_IN_SET(gencCategoryID,REPLACE(pValue,'|',','));      \n" +
              "					WHEN 'equipment' THEN        \n" +
              "						SELECT GROUP_CONCAT(assetName) INTO result FROM equipment WHERE FIND_IN_SET(eqpID,REPLACE(pValue,'|',','));      \n" +
              "					WHEN 'workorder_serialmst' THEN       \n" +
              "						SELECT GROUP_CONCAT(SerialNo) INTO result FROM workorder_serialmst WHERE FIND_IN_SET(id,REPLACE(pValue,'|',','));	      \n" +
              " 					ELSE       \n" +
              " 						SET result = '';      \n" +
              " 				END CASE;      \n" +
              "  \n" +
              "  \n" +
              "			ELSE  /* IsFixedEntity --> 0 = Custom Forms */      \n" +
              "			      SELECT GROUP_CONCAT(VALUE) INTO result FROM dataelement_transactionvalues_manual WHERE FIND_IN_SET(dataElementTransManualID,REPLACE(pValue,'|',','));      \n" +
              "			END IF;       \n" +
              "  \n" +
              "		ELSE       \n" +
              "			SELECT GROUP_CONCAT(NAME) INTO result FROM dataelement_keyvalues WHERE FIND_IN_SET(keyValueID,REPLACE(pValue,'|',','));       \n" +
              "		END IF;      \n" +
              "  \n" +
              "	ELSEIF(lpControlTypeID = 7) THEN      \n" +
              "  \n" +
              "		CASE pValue      \n" +
              " 			WHEN 'true' THEN        \n" +
              "				SET result = 'Yes';      \n" +
              " 			WHEN 'false' THEN        \n" +
              "				SET result = 'No';      \n" +
              "			ELSE       \n" +
              " 				SET result = pValue;      \n" +
              "		END CASE;			      \n" +
              "	ELSE       \n" +
              "		SET result = pValue;      \n" +
              "	END IF;      \n" +
              "  \n" +
              "	RETURN result;      \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 02-09-2019 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (196,'2.00','V1','Alter Function for Supply and Material Fields - Vaibhav '," + userid + ");"
            );
            break;
        case 196:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-09-2019  *********************************** */
            "DROP TRIGGER `Trg_BI_TimeLineLog`;  \n" +
              "CREATE TRIGGER `Trg_BI_TimeLineLog` BEFORE INSERT ON `timeline`   \n" +
              "    FOR EACH ROW BEGIN          \n" +
              "	DECLARE lvRefTransID INT(11);          \n" +
              "	DECLARE lvGencFileOwnerType VARCHAR(255);          \n" +
              "	DECLARE lvGencOriginalName VARCHAR(255);	          \n" +
              "	DECLARE lvWoID INT(11);	          \n" +
              "	DECLARE lvWoNumber VARCHAR(255);          \n" +
              "	DECLARE lvOpName VARCHAR(255);          \n" +
              "	DECLARE lvActionType VARCHAR(50);          \n" +
              "	DECLARE lvClusterName VARCHAR(255);          \n" +
              "	DECLARE lvPartNumber VARCHAR(255);          \n" +
              "	DECLARE lvAssetName VARCHAR(255);           \n" +
              "	DECLARE lvEmpName VARCHAR(255);           \n" +
              "	DECLARE lvEcoNumber VARCHAR(255);          \n" +
              "	DECLARE lvClusterID INT(11);          \n" +
              "	DECLARE lvWoOpIDs VARCHAR(16383);          \n" +
              "	DECLARE lvPartID INT(11);          \n" +
              "	DECLARE lvEqpID INT(11);          \n" +
              "	DECLARE lvEmpID INT(11);          \n" +
              "	DECLARE lvEntityID INT(11);          \n" +
              "	DECLARE lvRefParentId INT(11);          \n" +
              "	DECLARE lvGencFolderName VARCHAR(255);          \n" +
              "	DECLARE lvSalesOrderNumber VARCHAR(100);        \n" +
              "	DECLARE lvUid INT(11);        \n" +
              "  \n" +
              "       CASE  NEW.refTransTable          \n" +
              "  \n" +
              "	 WHEN \"genericfiles\" THEN           \n" +
              "  \n" +
              "		SELECT refTransID,gencFileOwnerType,gencOriginalName,refParentId           \n" +
              "				INTO lvRefTransID,lvGencFileOwnerType,lvGencOriginalName,lvRefParentId          \n" +
              "		FROM genericfiles WHERE gencFileID = NEW.refTransID ;          \n" +
              "  \n" +
              "  \n" +
              "	       IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN          \n" +
              "  \n" +
              "	       SELECT CASE NEW.eventAction WHEN 1 THEN \"uploaded\" WHEN 2 THEN \"updated\" WHEN 3 THEN \"deleted\"          \n" +
              "				WHEN 4 THEN \"downloaded\" WHEN 5 THEN \"moved to folder\" WHEN 6 THEN \"moved to other folder\"          \n" +
              "				WHEN 7 THEN \"viewed\" WHEN 8 THEN \"opened in edit mode\"          \n" +
              "				END AS actionType INTO lvActionType;          \n" +
              "  \n" +
              "		CASE  lvGencFileOwnerType          \n" +
              "		   WHEN 'workorder' THEN  	          \n" +
              "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for work order\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 5) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',          \n" +
              "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',          \n" +
              "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE          \n" +
              " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "			SET NEW.eventType = 4.22;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "		   WHEN 'workorder_operation' THEN  	          \n" +
              "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber           \n" +
              "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for work order operation\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 5) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',          \n" +
              "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;	          \n" +
              "			ELSE          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			END IF;				          \n" +
              "  \n" +
              "			SET NEW.eventType = 4.23;				          \n" +
              "			IF(NEW.eventAction <> 3) THEN				          \n" +
              "			  SET NEW.url = CONCAT(\"workorder/manage/operation/documents/\",lvRefTransID) ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "		   WHEN 'eco_request' THEN  	          \n" +
              "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber           \n" +
              "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for eco request in work order\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 5) THEN			          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',          \n" +
              "			   (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ',lvActionType,' for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			END IF;		          \n" +
              "  \n" +
              "			SET NEW.eventType = 4.24;				          \n" +
              "			IF(NEW.eventAction <> 3) THEN				          \n" +
              "			  SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "		  WHEN 'salesorder' THEN          \n" +
              "  \n" +
              "		   	SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for sales order\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 5) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',          \n" +
              "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for sales order ',lvSalesOrderNumber,' by ',          \n" +
              "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE          \n" +
              " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for sales order ',lvSalesOrderNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "			SET NEW.eventType = 6.01;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			  SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;          \n" +
              "			END IF;         \n" +
              "  \n" +
              "  \n" +
              "		  WHEN 'component_sid_stock' THEN          \n" +
              "  \n" +
              "		   	SELECT uid INTO lvUid FROM component_sid_stock WHERE id = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for receiving material\") ;          \n" +
              "  \n" +
              " 			SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for receiving material of UID \"',lvUid,'\" by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "  \n" +
              "			SET NEW.eventType = 7.02;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			  SET NEW.url = CONCAT(\"transaction/receivingmaterial/managereceivingmaterial/\",lvRefTransID) ;          \n" +
              "			END IF; 	 		        \n" +
              "  \n" +
              "  		   ELSE           \n" +
              "			BEGIN END;  	          \n" +
              " 		END CASE;	          \n" +
              "  \n" +
              "	       END IF;          \n" +
              "  \n" +
              "	WHEN \"generic_folder\" THEN           \n" +
              "  \n" +
              "		SELECT refTransID,gencFileOwnerType,gencFolderName,refParentId           \n" +
              "					INTO lvRefTransID,lvGencFileOwnerType,lvGencFolderName,lvRefParentId           \n" +
              "		FROM generic_folder WHERE gencFolderID = NEW.refTransID ;          \n" +
              "  \n" +
              "    	   IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN          \n" +
              "  \n" +
              "		SELECT CASE NEW.eventAction WHEN 1 THEN \"created\" WHEN 2 THEN \"renamed\" WHEN 3 THEN \"removed\"           \n" +
              "		WHEN 6 THEN \"moved to other folder\" END AS actionType INTO lvActionType;          \n" +
              "  \n" +
              "		CASE  lvGencFileOwnerType          \n" +
              "		   WHEN 'workorder' THEN  	          \n" +
              "  \n" +
              "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 6) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',          \n" +
              "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',          \n" +
              "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE           \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',          \n" +
              "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;					          \n" +
              "			END IF;          \n" +
              "  \n" +
              "			SET NEW.eventType = 4.25;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "		  WHEN 'workorder_operation' THEN  	          \n" +
              "  \n" +
              "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber           \n" +
              "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order operation\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 6) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',          \n" +
              "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE           \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'           \n" +
              "			     for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "			SET NEW.eventType = 4.26;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			   SET NEW.url = CONCAT(\"workorder/manage/operation/documents/\",lvRefTransID) ;          \n" +
              "			END IF;          \n" +
              "  \n" +
              "		  WHEN 'eco_request' THEN  	          \n" +
              "  \n" +
              "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber           \n" +
              "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;			          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType,\" for eco request in work order\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 6) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',          \n" +
              "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'          \n" +
              "			    for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				          \n" +
              "			END IF;          \n" +
              "  \n" +
              "			SET NEW.eventType = 4.27;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			   SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;          \n" +
              "			END IF;	          \n" +
              "  \n" +
              "		  WHEN 'salesorder' THEN          \n" +
              "  \n" +
              "		   	SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;          \n" +
              "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for sales order\") ;          \n" +
              "  \n" +
              "			IF(NEW.eventAction = 6) THEN          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',          \n" +
              "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for sales order \"',lvSalesOrderNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			ELSE          \n" +
              "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'          \n" +
              "			    for sales order \"',lvSalesOrderNumber,'\" by ',(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				          \n" +
              "			END IF;  			        \n" +
              "  \n" +
              "			SET NEW.eventType = 6.02;          \n" +
              "			IF(NEW.eventAction <> 3) THEN          \n" +
              "			  SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;          \n" +
              "			END IF;  	        \n" +
              "		   ELSE           \n" +
              "			BEGIN END;  		          \n" +
              "  \n" +
              "		   END CASE;	          \n" +
              "  \n" +
              "	   END IF;		          \n" +
              "  \n" +
              "  \n" +
              "	WHEN \"workorder_operation_cluster\" THEN           \n" +
              "		IF(NEW.eventAction = 1 OR NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN          \n" +
              "  \n" +
              "			SELECT CASE NEW.eventAction WHEN 1 THEN \"moved\" WHEN 2 THEN \"moved\" END AS actionType INTO lvActionType;		          \n" +
              "  \n" +
              "			SELECT  clusterID,GROUP_CONCAT(woOPID) INTO lvClusterID,lvWoOpIDs          \n" +
              "			FROM  workorder_operation_cluster          \n" +
              "			WHERE FIND_IN_SET(woClusterID,NEW.refTransID);           \n" +
              "  \n" +
              "			SELECT clusterName,woID INTO lvClusterName,lvWoID FROM workorder_cluster WHERE clusterID = lvClusterID ;          \n" +
              "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;          \n" +
              "  \n" +
              "			SELECT GROUP_CONCAT(opName) INTO lvOpName          \n" +
              "			FROM workorder_operation          \n" +
              "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);          \n" +
              "  \n" +
              "			SET NEW.eventTitle = CONCAT(\"Operation(s) \",lvActionType,\" to cluster in work order\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT('Operation(s) \"',lvOpName ,'\" ',lvActionType,' to cluster \"',lvClusterName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "		END IF;          \n" +
              "  \n" +
              "	WHEN \"workorder_operation_part\" THEN 	          \n" +
              "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN          \n" +
              "  \n" +
              "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			          \n" +
              "  \n" +
              "			SELECT woID,partID,GROUP_CONCAT(woOPID) INTO lvWoID,lvPartID,lvWoOpIDs          \n" +
              "			FROM  workorder_operation_part          \n" +
              "			WHERE FIND_IN_SET(woOPPartID,NEW.refTransID);           \n" +
              "  \n" +
              "			SELECT PIDCode INTO lvPartNumber FROM component WHERE id = lvPartID;          \n" +
              "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;          \n" +
              "  \n" +
              "			SELECT GROUP_CONCAT(opName) INTO lvOpName          \n" +
              "			FROM workorder_operation          \n" +
              "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);          \n" +
              "  \n" +
              "  \n" +
              "			SET NEW.eventTitle = CONCAT(\"Supplies, Materials & Tools \",lvActionType,\" to work order operation(s)\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT('Supplies, Materials & Tools \"',lvPartNumber ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			SET NEW.url = CONCAT(\"workorder/manage/parts/\",lvWoID) ;          \n" +
              "  \n" +
              "		END IF;          \n" +
              "  \n" +
              "	WHEN \"workorder_operation_equipment\" THEN 	          \n" +
              "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN          \n" +
              "  \n" +
              "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			          \n" +
              "  \n" +
              "			SELECT woID,eqpID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEqpID,lvWoOpIDs          \n" +
              "			FROM  workorder_operation_equipment          \n" +
              "			WHERE FIND_IN_SET(woOpEqpID,NEW.refTransID);           \n" +
              "  \n" +
              "			SELECT assetName INTO lvAssetName FROM equipment WHERE eqpID = lvEqpID;          \n" +
              "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;          \n" +
              "  \n" +
              "			SELECT GROUP_CONCAT(opName) INTO lvOpName          \n" +
              "			FROM workorder_operation          \n" +
              "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);          \n" +
              "  \n" +
              "  \n" +
              "			SET NEW.eventTitle = CONCAT(\"Equipments \",lvActionType,\" to work order operation(s)\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT('Equipments \"',lvAssetName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			SET NEW.url = CONCAT(\"workorder/manage/equipments/\",lvWoID) ;          \n" +
              "  \n" +
              "		END IF;	          \n" +
              "	WHEN \"workorder_operation_employee\" THEN 	          \n" +
              "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN          \n" +
              "  \n" +
              "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			          \n" +
              "  \n" +
              "			SELECT woID,employeeID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEmpID,lvWoOpIDs          \n" +
              "			FROM  workorder_operation_employee          \n" +
              "			WHERE FIND_IN_SET(woOpEmployeeID,NEW.refTransID);           \n" +
              "  \n" +
              "			SELECT CONCAT(firstName,\" \",lastName) INTO lvEmpName FROM employees WHERE id=lvEmpID;          \n" +
              "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;          \n" +
              "  \n" +
              "			SELECT GROUP_CONCAT(opName) INTO lvOpName          \n" +
              "			FROM workorder_operation          \n" +
              "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);          \n" +
              "  \n" +
              "  \n" +
              "			SET NEW.eventTitle = CONCAT(\"Employee \",lvActionType,\" to work order operation(s)\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT('Employee \"',lvEmpName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			SET NEW.url = CONCAT(\"workorder/manage/employees/\",lvWoID) ;          \n" +
              "  \n" +
              "		END IF;	          \n" +
              "  \n" +
              "	WHEN \"dataelement_transactionvalues\" THEN 	          \n" +
              "  \n" +
              "	    IF(NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN          \n" +
              "  \n" +
              "		SELECT entityID,RefTransID INTO lvEntityID,lvRefTransID          \n" +
              "		FROM dataelement_transactionvalues          \n" +
              "		WHERE dataElementTransID = NEW.refTransID           \n" +
              "		LIMIT 1;        \n" +
              "  \n" +
              "		SELECT CASE NEW.eventAction WHEN 2 THEN \"updated\" END AS actionType INTO lvActionType;          \n" +
              "  \n" +
              "		CASE  lvEntityID          \n" +
              "		   WHEN \"-7\" THEN  /* -7 --> work order */          \n" +
              "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvRefTransID;           \n" +
              "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT(\"Other details \",lvActionType,\" for work order \",lvWoNumber,\" by \",          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),\".\") ;          \n" +
              "			SET NEW.url = CONCAT(\"workorder/manage/otherdetails/\",lvRefTransID) ;          \n" +
              "			SET NEW.eventType = 4.20;          \n" +
              "		   WHEN \"-1\" THEN  /* -1 --> work order operation */          \n" +
              "  \n" +
              "			SELECT (SELECT woNumber FROM workorder wo WHERE woID = woop.woID),woop.opName          \n" +
              "			INTO lvWoNumber,lvOpName           \n" +
              "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID;           \n" +
              "  \n" +
              "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order operation\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			SET NEW.url = CONCAT(\"workorder/manage/operation/otherdetails/\",lvRefTransID) ;	          \n" +
              "			SET NEW.eventType = 4.21;          \n" +
              "  \n" +
              "		  WHEN \"-10\" THEN  /* -10 --> sales order */          \n" +
              "  \n" +
              "			SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;         \n" +
              "  \n" +
              "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for sales order\") ;          \n" +
              "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for sales order \"',lvSalesOrderNumber,'\" by ',          \n" +
              "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;          \n" +
              "			SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;	          \n" +
              "			SET NEW.eventType = 6.03;          \n" +
              "  \n" +
              "		   ELSE           \n" +
              "			BEGIN END;  	          \n" +
              "		END CASE;	          \n" +
              "	    END IF;	         \n" +
              "  \n" +
              "  \n" +
              "	ELSE           \n" +
              "		BEGIN END;           \n" +
              "  \n" +
              "	END CASE;          \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 02-09-2019 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (197,'2.00','V1','Trigger Changes in Supply & Material flow - Vaibhav'," + userid + ");"
            );
            break;
            case 197:
              allDbChangesArray.push(
              /* **************************** New Script -> 02-09-2019  *********************************** */
              "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                       \n" +
                "	IN pPassword VARCHAR(500)             \n" +
                ")  \n" +
                "BEGIN                   \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN              \n" +
                "		#Start - Delete Role            \n" +
                "		TRUNCATE TABLE rolepagedetail;            \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;            \n" +
                "		TRUNCATE TABLE component_standard_role;            \n" +
                "  \n" +
                "		#Start - Delete Features of roles            \n" +
                "		DELETE FROM feature_role_mapping;            \n" +
                "		#End - Delete Features of roles            \n" +
                "  \n" +
                "		#Start - Delete Generic Folder            \n" +
                "		UPDATE genericfiles SET refParentId = NULL       \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));           \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);            \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL       \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);      \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;            \n" +
                "  \n" +
                "		#End - Delete Generic Folder            \n" +
                "  \n" +
                "		#Start - Delete Generic Files            \n" +
                "		TRUNCATE TABLE genericfiles;            \n" +
                "		#End - Delete Generic Files            \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');            \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;            \n" +
                "		#End - Delete Role            \n" +
                "		#Start - Delete Generic Category            \n" +
                "			TRUNCATE TABLE employee_department;            \n" +
                "			#Start - Delete Part            \n" +
                "			TRUNCATE TABLE operation_part;            \n" +
                "			TRUNCATE TABLE workorder_operation_part;   \n" +
                "			#End - Delete Part            \n" +
                "			#Start - Delete Equipment            \n" +
                "				TRUNCATE TABLE operation_equipment;            \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;            \n" +
                "				TRUNCATE TABLE equipment_dataelement;            \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;            \n" +
                "  \n" +
                "				#Start - Delete Equipment Task            \n" +
                "				TRUNCATE TABLE equipment_task_schedule;            \n" +
                "				DELETE FROM equipment_task;            \n" +
                "				#End - Delete Equipment Task            \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master            \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;            \n" +
                "				DELETE FROM workorder_serialmst;            \n" +
                "				# End - Delete Workorder Trans Serial Master            \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail            \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;            \n" +
                "				DELETE FROM workorder_trans_empinout;            \n" +
                "				#End - Delete Workorder Transaction InOut Detail            \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction            \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;            \n" +
                "				TRUNCATE TABLE workorder_trans_production;            \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;            \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;            \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;            \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;            \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;            \n" +
                "				DELETE FROM workorder_trans;            \n" +
                "				# End - Delete Workorder Transaction            \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;            \n" +
                "				DELETE FROM equipment;            \n" +
                "			#End - Delete Equipment            \n" +
                "			# Start - Delete Operation            \n" +
                "			TRUNCATE TABLE operation_equipment;            \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element            \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;            \n" +
                "			DELETE FROM workorder_operation_dataelement;            \n" +
                "			# End - Delete Workorder Operation Data Element            \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;            \n" +
                "			TRUNCATE TABLE workorder_operation_employee;            \n" +
                "			TRUNCATE TABLE operation_master_templates;            \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			            \n" +
                "				# Start - Delete ECO Request 			            \n" +
                "					# Start - Delete ECO Request Approval            \n" +
                "					TRUNCATE TABLE eco_request_department_employee;            \n" +
                "					DELETE FROM eco_request_department_approval;            \n" +
                "					# End - Delete ECO Request Approval            \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;            \n" +
                "				DELETE FROM eco_request;            \n" +
                "				# End - Delete ECO Request            \n" +
                "  \n" +
                "			# Start - Delete Shipping Details            \n" +
                "			TRUNCATE TABLE shippedassembly;            \n" +
                "			DELETE FROM salesshippingmst;            \n" +
                "			DELETE FROM workorder_salesorder_details;            \n" +
                "			DELETE FROM salesorderdet;            \n" +
                "			DELETE FROM salesordermst;            \n" +
                "			# End - Delete Shipping Details            \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review             \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;            \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;            \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;            \n" +
                "			DELETE FROM workorder_reqforreview;            \n" +
                "			# End - Delete Workorder Request Review             \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;            \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;            \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming            \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;            \n" +
                "			DELETE FROM workorder_preprogcomp_designator;            \n" +
                "			DELETE FROM workorder_preprogcomp;            \n" +
                "			# End - Delete Workorder Tran PreProgramming            \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;            \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;            \n" +
                "			# End - Delete Workorder Operation            \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;            \n" +
                "  \n" +
                "			#Start - Delete Chart            \n" +
                "			TRUNCATE TABLE chart_template_operations;      \n" +
                "			TRUNCATE TABLE chart_template_employee_details;           \n" +
                "			TRUNCATE TABLE chart_template_access;       \n" +
                "			DELETE FROM chart_templatemst;            \n" +
                "			#Start - End Chart            \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;            \n" +
                "			# End - Delete Operation            \n" +
                "			TRUNCATE TABLE standard_message;            \n" +
                "			# Start - Delete Component            \n" +
                "			TRUNCATE TABLE component_alias;           \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';        \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;            \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;            \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;      \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;         \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;         \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';        \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;        \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;        \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';        \n" +
                "			TRUNCATE TABLE component_goodbadpartmapping;            \n" +
                "			TRUNCATE TABLE component_processmaterial;            \n" +
                "			TRUNCATE TABLE component_drivetools;            \n" +
                "			TRUNCATE TABLE component_requiremapping_parts;            \n" +
                "			TRUNCATE TABLE component_standard_details;            \n" +
                "  \n" +
                "			# Start - Delete Recieving Material            \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;            \n" +
                "			DELETE FROM component_sid_stock;        \n" +
                "			DELETE FROM cost_category;                \n" +
                "			# End - Delete Recieving Material            \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;            \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;         \n" +
                "			TRUNCATE TABLE standard_class;           \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;      \n" +
                "			DELETE FROM certificate_standards;          \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;      \n" +
                "			DELETE FROM br_label_template;      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment Ownership';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Type';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment Type';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Type';      \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL      \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Work Area';      \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;            \n" +
                "			# End - Delete Component            \n" +
                "  \n" +
                "		#End - Delete Generic Category            \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;      \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;      \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;      \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;      \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;      \n" +
                "		TRUNCATE TABLE rfq_assembly_history;      \n" +
                "		DELETE FROM rfq_lineitems;      \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;      \n" +
                "		DELETE FROM component WHERE id > 0;       \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;            \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;       \n" +
                "		#Start - Delete Entity            \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;            \n" +
                "		DELETE FROM workorder_operation_dataelement;            \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;            \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;            \n" +
                "		DELETE FROM workorder_trans_subform_data;          \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;         \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';        \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;            \n" +
                "		DELETE FROM subform_transaction;            \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;            \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;      \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;      \n" +
                "		DELETE FROM dataelement;          \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;            \n" +
                "		#End - Delete Entity            \n" +
                "		#Start - Delete UOMS                 \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;      \n" +
                "		DELETE FROM rfq_assy_quotations;          \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;           \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;            \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;            \n" +
                "		#End - Delete UOMS            \n" +
                "		#Start - Delete MFG                \n" +
                "		TRUNCATE TABLE mfgcodealias;            \n" +
                "		TRUNCATE TABLE who_bought_who;            \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;            \n" +
                "		#End - Delete MFG                \n" +
                "		#Start - Delete BOM            \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;            \n" +
                "		DELETE FROM component_cust_alias_rev;            \n" +
                "		DELETE FROM rfq_assy_bom;            \n" +
                "		#End - Delete BOM            \n" +
                "		#Start - Delete RFQ            \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;            \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;            \n" +
                "		DELETE FROM rfq_assy_quantity;            \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;    \n" +
                "		DELETE FROM rfq_assemblies;            \n" +
                "		DELETE FROM rfqforms;            \n" +
                "		#End - Delete RFQ            \n" +
                "		DELETE FROM customer_addresses;            \n" +
                "		DELETE FROM customer_contactperson;            \n" +
                "		TRUNCATE TABLE assemblystock;            \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;            \n" +
                "		#Start - Delete Customer            \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;            \n" +
                "		DELETE FROM workorder_assy_designators;           \n" +
                "		DELETE FROM workorder_cluster;                \n" +
                "		DELETE FROM workorder_operation_firstpiece;            \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;            \n" +
                "		TRUNCATE TABLE shipping_requestdet;            \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;            \n" +
                "		DELETE FROM workorder;            \n" +
                "		TRUNCATE TABLE assembly_revision_comments;         \n" +
                "		DELETE FROM customers;            \n" +
                "		#End - Delete Customer            \n" +
                "		#Start - Delete Employee            \n" +
                "		UPDATE department SET parentDeptID=NULL;       \n" +
                "		DELETE FROM department;            \n" +
                "		TRUNCATE TABLE dynamicreportaccess;            \n" +
                "		UPDATE employees SET `managerID`=NULL;            \n" +
                "		TRUNCATE TABLE notificationdet;            \n" +
                "		DELETE FROM notificationmst;            \n" +
                "		TRUNCATE TABLE group_participant_details;            \n" +
                "		TRUNCATE TABLE group_chat_log;            \n" +
                "		DELETE FROM group_chat;            \n" +
                "		TRUNCATE TABLE chat;            \n" +
                "		TRUNCATE TABLE feature_user_mapping;            \n" +
                "		TRUNCATE TABLE user_agreement;            \n" +
                "		TRUNCATE TABLE userpagedetail;            \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');            \n" +
                "		TRUNCATE TABLE shipping_request_empdet;            \n" +
                "		DELETE FROM shipping_request;            \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');            \n" +
                "		#End - Delete Employee            \n" +
                "  \n" +
                "		DELETE FROM master_templates;            \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards            \n" +
                "		TRUNCATE TABLE component_standard_details;            \n" +
                "		DELETE FROM component_standard_class;            \n" +
                "		DELETE FROM component_standard;            \n" +
                "		#End - Delete Component Standards            \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log            \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;            \n" +
                "		#End - Delete Data Entry Audit Log            \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	            \n" +
                "		TRUNCATE TABLE dynamicreportfields;              \n" +
                "		DELETE FROM dynamicreportmst;            \n" +
                "		#End - Delete Dynamic Report            \n" +
                "  \n" +
                "		#Start - Delete Job Type            \n" +
                "		DELETE FROM jobtype;            \n" +
                "		#End - Delete Job Type            \n" +
                "  \n" +
                "		#Start - Delete Log Master            \n" +
                "		TRUNCATE TABLE logmst;            \n" +
                "		#End - Delete Log Master            \n" +
                "  \n" +
                "		#Start - Delete Order Type            \n" +
                "		-- DELETE FROM ordertype;            \n" +
                "		#End - Delete Order Type            \n" +
                "  \n" +
                "		#Start - Delete Reason            \n" +
                "		DELETE FROM reasonmst;            \n" +
                "		#End - Delete Reason            \n" +
                "  \n" +
                "		#Start - Delete Requirement            \n" +
                "		DELETE FROM requirement;            \n" +
                "		#End - Delete Requirement            \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data            \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;            \n" +
                "		#End - Delete Assy Auto Pricing Data            \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log            \n" +
                "		TRUNCATE TABLE taskconfirmation;            \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log            \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log            \n" +
                "		TRUNCATE TABLE timeline;            \n" +
                "		#End - Delete All Timeline Log            \n" +
                "  \n" +
                "		#Start - Delete All Chart Category            \n" +
                "		DELETE FROM chart_category;            \n" +
                "		#End - Delete All Chart Category            \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias            \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;            \n" +
                "		#End - Delete All Component Generic Alias            \n" +
                "  \n" +
                "		#Start - Delete All Defect Category            \n" +
                "		-- DELETE FROM defectcategory;            \n" +
                "		#End - Delete All Defect Category            \n" +
                "  \n" +
                "		#Start - Delete All ECO Category            \n" +
                "		DELETE FROM eco_type_values;            \n" +
                "		DELETE FROM eco_type_category;            \n" +
                "		#End - Delete All ECO Category            \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;        \n" +
                "  \n" +
                "		SELECT 'Done';            \n" +
                "	ELSE             \n" +
                "		SELECT 'Invalid Argument';            \n" +
                "	END IF;              \n" +
                "END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_genericcategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(                                                              \n" +
                "	IN tableName VARCHAR(255),                                                              \n" +
                "	IN IDs LONGTEXT,                                                              \n" +
                "	IN deletedBy INT,                                                              \n" +
                "	IN entityID VARCHAR(255),                                                              \n" +
                "	IN refrenceIDs LONGTEXT                                                              \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                                                              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                              \n" +
                "		    FROM                                                               \n" +
                "		    (                                                              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                                                              \n" +
                "		 UNION ALL      \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericcategory\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)                                                              \n" +
                "		 UNION ALL      \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                                                              \n" +
                "		UNION ALL                                                              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                                                              \n" +
                "		UNION ALL                                                              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                              \n" +
                "		UNION ALL                                                              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                                                              \n" +
                "		UNION ALL                                                              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                                                              \n" +
                "		UNION ALL                                                              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                                                              \n" +
                "	        UNION ALL                      \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)         \n" +
                "            UNION ALL                      \n" +
                "	        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)        \n" +
                "	        UNION ALL                                                            \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)           \n" +
                "             UNION ALL                                                             \n" +
                "           (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                                                                \n" +
                "  \n" +
                "	      ) q');                                                              \n" +
                "	PREPARE stmt FROM @SQL;                                                              \n" +
                "	EXECUTE stmt;                                                              \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                                                              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                                                              \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                              \n" +
                "			EXECUTE stmt1;                                                              \n" +
                "  \n" +
                "			SELECT                                                               \n" +
                "    *                                                              \n" +
                "FROM                                                              \n" +
                "    tempGenericCategory;                                                              \n" +
                "		ELSE                                                              \n" +
                "			SELECT * FROM tempGenericCategory;                                                              \n" +
                "		END IF;                                                              \n" +
                "    DROP TABLE tempGenericCategory;        \n" +
                "END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation_part` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_part`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;    \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                            \n" +
                "			) q');                                                            \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete parts from work order */                                                            \n" +
                "			SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                            \n" +
                "			FROM workorder_operation                                                             \n" +
                "			WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                             \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                                                            \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(PIDCode) INTO @lvPartNums FROM component                                                            \n" +
                "			WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                                                             \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Supplies, Materials & Tools deleted from work order\");                                                            \n" +
                "			SET @lvEventDescription = CONCAT(\"Supplies, Materials & Tools \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                            \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                                                            \n" +
                "			/* [E] - Add Time line log for delete parts from work order */                                                            \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                            \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "			EXECUTE stmt1;                                                            \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderPart;    \n" +
                "  \n" +
                "			COMMIT;    \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempWorkorderPart;                                                            \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE tempWorkorderPart;       \n" +
                "        END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_workorder_operation_equipment` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_operation_equipment`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;     \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                                                            \n" +
                "			) q');                                                            \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete Equipment from work order */                                                            \n" +
                "			SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                                                            \n" +
                "			FROM workorder_operation                                                             \n" +
                "			WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                                                             \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                                                            \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                                                            \n" +
                "			WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                                                             \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Equipments deleted from work order\");                                                            \n" +
                "			SET @lvEventDescription = CONCAT(\"Equipments \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                            \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                                                            \n" +
                "			/* [E] -  Add Time line log for delete Equipment from work order */                                                            \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                                                            \n" +
                "			SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                                                            \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "			PREPARE stmt2 FROM @SQL2;                                                            \n" +
                "			EXECUTE stmt1;                                                            \n" +
                "			EXECUTE stmt2;                                                            \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEquipment;         \n" +
                "  \n" +
                "			COMMIT;    \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempWorkorderEquipment;                                                            \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE tempWorkorderEquipment;                                                             \n" +
                "END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCompnentSuppliesMaterialsAndTools` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetCompnentSuppliesMaterialsAndTools`(  \n" +
            "			IN ppartID INT(11)  \n" +
            "		)  \n" +
            "BEGIN   \n" +
            "	DECLARE pWhereClause VARCHAR(2000);  \n" +
            "	SET pWhereClause = '';  \n" +
            "	IF ppartID IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(\" AND c.id=\" , ppartID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\"SELECT c.id,  \n" +
            "	c.PIDCode,  \n" +
            "	c.mfgPN,  \n" +
            "	c.rev,  \n" +
            "	c.imageURL,  \n" +
            "	c.dataSheetLink,  \n" +
            "	c.mountingTypeID,  \n" +
            "	rr.name rohsStatus,  \n" +
            "	rr.rohsIcon rohsIcon FROM component c  \n" +
            "	LEFT JOIN rfq_rohsmst rr ON rr.id = c.roHSStatusID AND c.deletedAt IS NULL AND IFNULL(rr.isDeleted,0) =0  \n" +
            "		WHERE mountingTypeID IN (SELECT id FROM rfq_mountingtypemst   \n" +
            "			WHERE id IN (SELECT rfqmountingTypeID FROM component_logicalgroup_detail   \n" +
            "				WHERE logicalgroupID IN ('1','2','3'))) AND c.deletedAt IS NULL AND IFNULL(c.isDeleted,0) =0 \", pWhereClause);    \n" +
            "	PREPARE query1 FROM @SQLStatement1;    \n" +
            "	EXECUTE query1;    \n" +
            "	DEALLOCATE PREPARE query1;    \n" +
            "END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetWOSuppliesMaterialsAndTools` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetWOSuppliesMaterialsAndTools`(  \n" +
            "			IN ppartID INT(11)  \n" +
            "		)  \n" +
            "BEGIN   \n" +
            "	DECLARE pWhereClause VARCHAR(2000);  \n" +
            "	SET pWhereClause = '';  \n" +
            "	IF ppartID IS NOT NULL THEN  \n" +
            "		SET pWhereClause = CONCAT(\" AND c.id=\" , ppartID);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement1 = CONCAT(\"SELECT c.id,  \n" +
            "	c.PIDCode,  \n" +
            "	c.mfgPN,  \n" +
            "	c.rev,  \n" +
            "	c.imageURL,  \n" +
            "	c.dataSheetLink,  \n" +
            "	c.mountingTypeID,  \n" +
            "	rr.name rohsStatus,  \n" +
            "	rr.rohsIcon rohsIcon FROM workorder_operation_part wop  \n" +
            "LEFT JOIN component c ON c.id = wop.partID AND c.deletedAt IS NULL AND IFNULL(c.isDeleted,0) =0   \n" +
            "LEFT JOIN rfq_rohsmst rr ON rr.id = c.roHSStatusID AND c.deletedAt IS NULL AND IFNULL(rr.isDeleted,0) =0  \n" +
            "WHERE c.mountingTypeID IN (SELECT id FROM rfq_mountingtypemst   \n" +
            "			WHERE id IN (SELECT rfqmountingTypeID FROM component_logicalgroup_detail   \n" +
            "				WHERE logicalgroupID IN ('1','2','3'))) AND wop.deletedAt IS NULL AND IFNULL(wop.isDeleted,0) =0\", pWhereClause);    \n" +
            "	PREPARE query1 FROM @SQLStatement1;    \n" +
            "	EXECUTE query1;    \n" +
            "	DEALLOCATE PREPARE query1;    \n" +
            "END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(                                                                      \n" +
            "	IN tableName VARCHAR(255),                                                                      \n" +
            "	IN IDs LONGTEXT,                                                                      \n" +
            "	IN deletedBy INT,                                                                      \n" +
            "	IN entityID VARCHAR(255),                                                                      \n" +
            "	IN refrenceIDs LONGTEXT                                                                      \n" +
            "    )  \n" +
            "BEGIN                                                                      \n" +
            "IF tableName=\"employees\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"eco_type_category\" THEN                                                                      \n" +
            "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"eco_type_values\" THEN                                                                      \n" +
            "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"customers\" THEN                                                                      \n" +
            "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"certificate_standards\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"department\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"genericcategory\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"equipment\" THEN                                                                      \n" +
            "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
            "END IF;                                                                    \n" +
            "IF tableName=\"master_templates\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"operations\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"roles\" THEN                                                                     \n" +
            "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"standard_class\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"dataelement\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_preprogcomp\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"component\" THEN                                                                      \n" +
            "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                     \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_cluster\" THEN                                                                       \n" +
            "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_operation\" THEN                                                                     \n" +
            "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_operation_part\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_operation_employee\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                        \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"entity\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"salesordermst\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"mfgcodemst\" THEN                                                                      \n" +
            "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                      \n" +
            "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"shippedassembly\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                       \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);                 \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"br_label_template\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);                 \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"measurement_types\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"uoms\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"jobtypes\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfqtype\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"reasonmst\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"component_sid_stock\" THEN	                                                                      \n" +
            "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                      \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                      \n" +
            "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"chart_templatemst\" THEN	                                                                      \n" +
            "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"shipping_request\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"chart_rawdata_category\" THEN                                                                      \n" +
            "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"component_standard\" THEN                                                                      \n" +
            "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"component_standard_class\" THEN                                                                      \n" +
            "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfq_lineitems\" THEN                                                                      \n" +
            "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                                 \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"requirement\" THEN                                                                      \n" +
            "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                                 \n" +
            "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                                 \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"customer_addresses\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfqforms\" THEN                                                                      \n" +
            "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN                                                                      \n" +
            "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"who_bought_who\" THEN                                                                      \n" +
            "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfq_parttypemst\" THEN                                                                      \n" +
            "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                      \n" +
            "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                      \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                      \n" +
            "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;                                                                \n" +
            "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                      \n" +
            "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
            "END IF;                                                  \n" +
            "IF tableName=\"cost_category\" THEN                                                                      \n" +
            "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                  \n" +
            "END IF;                                   \n" +
            "IF tableName=\"chartypemst\" THEN                                                                      \n" +
            "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                               \n" +
            "END IF;                  \n" +
            "IF tableName=\"countrymst\" THEN                  \n" +
            "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;              \n" +
            "IF tableName=\"rfq_connectertypemst\" THEN                  \n" +
            "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
            "END IF;             \n" +
            "IF tableName=\"component_cust_alias_rev\" THEN              \n" +
            "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
            "END IF;         \n" +
            "IF tableName=\"rfq_assy_typemst\" THEN              \n" +
            "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
            "END IF;          \n" +
            "IF tableName=\"warehousemst\" THEN              \n" +
            "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
            "END IF;       \n" +
            "IF tableName=\"binmst\" THEN              \n" +
            "	 CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
            "END IF;                    \n" +
            "END;  \n" +
              /* **************************** New Script -> 02-09-2019  *********************************** */
              /* **************************** Add Script Version -> 02-09-2019 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
              "VALUES (198,'2.00','V1','SP Changes in Supply & Material flow - Vaibhav'," + userid + ");"
              );
              break;
                case 198:
                  allDbChangesArray.push(
                  /* **************************** New Script -> 11-02-2019  *********************************** */
                 "INSERT INTO page_detail(pageName,RO,RW,menuRoute,pageRoute,pageURL,menuName,hasChild,orderBy,tabLevel,iconClass,isActive,createdBy,parentPageID,isDisplay,displayMenuName)   \n" +
                 "VALUES  \n" +
                 "('Component Logical Group',0,0,'setting.partmaintenance.componentlogicalgroup','app.componentLogicalGroup','/component/componentlogicalgroup',  \n" +
                 "'Mounting Group',0,'32.52',2,'icon-security-network',1,'1',(SELECT a.pageID FROM page_detail a WHERE a.pagename='Component Logical Group' LIMIT 1)  \n" +
                 ",1,'Mounting Group');  \n" +

                 "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_logical_group` ;  \n" +
                   "CREATE PROCEDURE `Sproc_checkDelete_component_logical_group`(                                                            \n" +
                   "	IN tableName VARCHAR(255),                                                            \n" +
                   "	IN IDs LONGTEXT,                                                            \n" +
                   "	IN deletedBy INT,                                                            \n" +
                   "	IN entityID VARCHAR(255),                                                            \n" +
                   "	IN refrenceIDs LONGTEXT                                                            \n" +
                   "    )  \n" +
                   "BEGIN       \n" +
                   "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                   "BEGIN                  \n" +
                   "	ROLLBACK;                  \n" +
                   "	RESIGNAL;                  \n" +
                   "END;                  \n" +
                   "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                   "BEGIN                  \n" +
                   "	ROLLBACK;                  \n" +
                   "	RESIGNAL;                  \n" +
                   "END;     \n" +
                   "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentLogicalGroup as                                                            \n" +
                   "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                   "			FROM                                                             \n" +
                   "			(                                                            \n" +
                   "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_logicalgroup_detail\" else \"\" end as msg     \n" +
                   "					FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND id IN (',IDs,') LIMIT 1)    \n" +
                   "			) q');                                                            \n" +
                   "  \n" +
                   "		PREPARE stmt FROM @SQL;                                                            \n" +
                   "		EXECUTE stmt;                                                            \n" +
                   "		IF (SELECT TotalCount FROM tempcomponentLogicalGroup)=0 THEN                                                            \n" +
                   "			START TRANSACTION;    \n" +
                   "  \n" +
                   "			SET @SQl1 = CONCAT('update component_logicalgroup set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                            \n" +
                   "				PREPARE stmt1 FROM @SQL1;                                                            \n" +
                   "				EXECUTE stmt1;                                                                \n" +
                   "			SELECT * FROM tempcomponentLogicalGroup;                                                    \n" +
                   "		ELSE                                                            \n" +
                   "			SELECT * FROM tempcomponentLogicalGroup;                                                            \n" +
                   "  \n" +
                   "		END IF;                                                            \n" +
                   "		DROP TABLE tempcomponentLogicalGroup;       \n" +
                   "END;  \n" +

                   "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                    "CREATE PROCEDURE `Sproc_checkDelete`(                                                                      \n" +
                    "	IN tableName VARCHAR(255),                                                                      \n" +
                    "	IN IDs LONGTEXT,                                                                      \n" +
                    "	IN deletedBy INT,                                                                      \n" +
                    "	IN entityID VARCHAR(255),                                                                      \n" +
                    "	IN refrenceIDs LONGTEXT                                                                      \n" +
                    "    )  \n" +
                    "BEGIN                                                                      \n" +
                    "IF tableName=\"employees\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"eco_type_category\" THEN                                                                      \n" +
                    "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"eco_type_values\" THEN                                                                      \n" +
                    "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"customers\" THEN                                                                      \n" +
                    "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"certificate_standards\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"department\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"genericcategory\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"equipment\" THEN                                                                      \n" +
                    "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"parts\" THEN                                                                     \n" +
                    "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"master_templates\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"operations\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"roles\" THEN                                                                     \n" +
                    "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"standard_class\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"dataelement\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_preprogcomp\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"component\" THEN                                                                      \n" +
                    "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                     \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_cluster\" THEN                                                                       \n" +
                    "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_operation\" THEN                                                                     \n" +
                    "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_operation_part\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_operation_equipment\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_operation_employee\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                        \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_operation_cluster\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"entity\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"salesordermst\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"mfgcodemst\" THEN                                                                      \n" +
                    "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                      \n" +
                    "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"shippedassembly\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"assemblymst\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"assembly_revisionmst\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_trans_serialno\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);                 \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"br_label_template\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);                 \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"measurement_types\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"uoms\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"jobtypes\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfqtype\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"reasonmst\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"component_sid_stock\" THEN	                                                                      \n" +
                    "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                      \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                      \n" +
                    "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"chart_templatemst\" THEN	                                                                      \n" +
                    "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"shipping_request\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"chart_rawdata_category\" THEN                                                                      \n" +
                    "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"component_standard\" THEN                                                                      \n" +
                    "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"component_standard_class\" THEN                                                                      \n" +
                    "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfq_lineitems\" THEN                                                                      \n" +
                    "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                                 \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"requirement\" THEN                                                                      \n" +
                    "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                                 \n" +
                    "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                                 \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"customer_addresses\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfqforms\" THEN                                                                      \n" +
                    "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfq_mountingtypemst\" THEN                                                                      \n" +
                    "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"who_bought_who\" THEN                                                                      \n" +
                    "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfq_parttypemst\" THEN                                                                      \n" +
                    "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                      \n" +
                    "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                      \n" +
                    "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                      \n" +
                    "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;                                                                \n" +
                    "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                      \n" +
                    "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                    "END IF;                                                  \n" +
                    "IF tableName=\"cost_category\" THEN                                                                      \n" +
                    "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                  \n" +
                    "END IF;                                   \n" +
                    "IF tableName=\"chartypemst\" THEN                                                                      \n" +
                    "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                               \n" +
                    "END IF;                  \n" +
                    "IF tableName=\"countrymst\" THEN                  \n" +
                    "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;              \n" +
                    "IF tableName=\"rfq_connectertypemst\" THEN                  \n" +
                    "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                    "END IF;             \n" +
                    "IF tableName=\"component_cust_alias_rev\" THEN              \n" +
                    "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                    "END IF;         \n" +
                    "IF tableName=\"rfq_assy_typemst\" THEN              \n" +
                    "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                    "END IF;          \n" +
                    "IF tableName=\"warehousemst\" THEN              \n" +
                    "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                    "END IF;       \n" +
                    "IF tableName=\"binmst\" THEN              \n" +
                    "	 CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                    "END IF;   \n" +
                    "IF tableName=\"component_logicalgroup\" THEN      \n" +
                    "	 CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                    "END IF;                    \n" +
                    "END;  \n" +

                   "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_logical_group` ;  \n" +
                    "CREATE PROCEDURE `Sproc_checkDelete_component_logical_group`(                                                            \n" +
                    "	IN tableName VARCHAR(255),                                                            \n" +
                    "	IN IDs LONGTEXT,                                                            \n" +
                    "	IN deletedBy INT,                                                            \n" +
                    "	IN entityID VARCHAR(255),                                                            \n" +
                    "	IN refrenceIDs LONGTEXT                                                            \n" +
                    "    )  \n" +
                    "BEGIN       \n" +
                    "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                    "BEGIN                  \n" +
                    "	ROLLBACK;                  \n" +
                    "	RESIGNAL;                  \n" +
                    "END;                  \n" +
                    "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                    "BEGIN                  \n" +
                    "	ROLLBACK;                  \n" +
                    "	RESIGNAL;                  \n" +
                    "END;     \n" +
                    "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentLogicalGroup as                                                            \n" +
                    "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                    "			FROM                                                             \n" +
                    "			(                                                            \n" +
                    "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_logicalgroup_detail\" else \"\" end as msg     \n" +
                    "					FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND id IN (',IDs,') LIMIT 1)    \n" +
                    "			) q');                                                            \n" +
                    "  \n" +
                    "		PREPARE stmt FROM @SQL;                                                            \n" +
                    "		EXECUTE stmt;                                                            \n" +
                    "		IF (SELECT TotalCount FROM tempcomponentLogicalGroup)=0 THEN                                                            \n" +
                    "			START TRANSACTION;    \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update component_logicalgroup set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                            \n" +
                    "				PREPARE stmt1 FROM @SQL1;                                                            \n" +
                    "				EXECUTE stmt1;                                                                \n" +
                    "			SELECT * FROM tempcomponentLogicalGroup;                                                    \n" +
                    "		ELSE                                                            \n" +
                    "			SELECT * FROM tempcomponentLogicalGroup;                                                            \n" +
                    "  \n" +
                    "		END IF;                                                            \n" +
                    "		DROP TABLE tempcomponentLogicalGroup;       \n" +
                    "END;  \n" +


                 /* **************************** Add Script Version -> 11-02-2019*********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                  "VALUES (199,'2.00','V1','Added menu and created sp for display and delete - DEEPSHIKHA '," + userid + ");"
                  );
                  break;

                    /*********************************************************************************************/
                    /******************** Don't add more here, We have shifted next part to "dbscript_dev_2.js" ***********************/
                    /*********************************************************************************************/
    }
    return allDbChangesArray;
});


// sample
//break;
//case 1:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 01-01-2019  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 01-01-2019 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
//  "VALUES (2,'2.00','V1',' Sample entry - KETAN '," + userid + ");"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/