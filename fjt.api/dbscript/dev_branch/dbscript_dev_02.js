(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 198:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (199,'2.00','V1',' Sample entry - KETAN '," + userid + ");"
            );
            break;
        case 199:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveQuoteDynamicFields`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveQuoteDynamicFields`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383)          \n" +
                "	)  \n" +
                "BEGIN          \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);          \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "		 SELECT qc.id, qc.fieldName, qc.dataType, qc.costingType, qc.displayPercentage, qc.displayMargin, qc.displayOrder,qc.isDaysRequire, qc.updatedAt,          \n" +
                "		 (CASE WHEN (qc.displayPercentage = 0) THEN 'No'           \n" +
                "				WHEN (qc.displayPercentage = 1) THEN 'Yes' ELSE '' END) AS `displayPercentageConvertedValue`,          \n" +
                "		(CASE WHEN (qc.displayMargin = 0) THEN 'No'           \n" +
                "				WHEN (qc.displayMargin = 1) THEN 'Yes' ELSE '' END) AS `displayMarginConvertedValue`          \n" +
                "		FROM `quotecharges_dynamic_fields_mst` AS qc           \n" +
                "		WHERE qc.`deletedAt` IS NULL          \n" +
                "		;          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"displayOrder ASC\") ;          \n" +
                "		ELSE          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "			SET pWhereClause = '1=1' ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "		ELSE	          \n" +
                "			SET rowNumWhere = '';          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		/* to get total count of rows */          \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "		PREPARE query1 FROM @SQLStatement1;          \n" +
                "		EXECUTE query1;          \n" +
                "		DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "		PREPARE query2 FROM @SQLStatement2;          \n" +
                "		EXECUTE query2;          \n" +
                "		DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                    \n" +
                "	IN ppageIndex INT(11),                    \n" +
                "	IN precordPerPage INT(11),                    \n" +
                "	IN pOrderBy VARCHAR(255),                    \n" +
                "	IN pWhereClause VARCHAR(16383)                    \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "DECLARE pOffset INT(11);                    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                     \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                     \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                                   \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'         \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'            \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,                     \n" +
                "              description, systemVariable,logicID, displayName, org_description,updatedAt                 \n" +
                "			FROM `rfq_lineitems_errorcode`                    \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                    \n" +
                "		ELSE                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "			SET pWhereClause = '1=1' ;                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "		ELSE	                    \n" +
                "			SET rowNumWhere = '';                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "		/* to get total count of rows */                    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                    \n" +
                "		PREPARE query1 FROM @SQLStatement1;                    \n" +
                "		EXECUTE query1;                    \n" +
                "		DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "		PREPARE query2 FROM @SQLStatement2;                    \n" +
                "		EXECUTE query2;                    \n" +
                "		DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetKeywords`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKeywords`(	  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "    IN pWhereClause VARCHAR(16383)      \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKeyword AS  \n" +
                "		SELECT rk.id,rk.keyword,rk.displayOrder,rk.isActive,rk.updatedAt,  \n" +
                "		(CASE WHEN (rk.isActive = 0) THEN 'NO'   \n" +
                "		WHEN (rk.isActive = 1) THEN 'YES'  \n" +
                "		ELSE '' END) AS Active  \n" +
                "  \n" +
                "        FROM rfq_lineitems_keywords rk  \n" +
                "        WHERE IFNULL(rk.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"displayOrder ASC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM tempKeyword where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM tempKeyword where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempKeyword;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveECOCategory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveECOCategory`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT *,  \n" +
                "        (CASE WHEN (`category` = 1) THEN 'Workorder' WHEN (`category` = 2) THEN 'RFQ Terms & Condition' ELSE '' END) AS `reqCategory`    \n" +
                "		FROM eco_type_category  \n" +
                "		WHERE deletedAt IS NULL  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (200,'2.00','V1','add modified date changes sp changes  - shirish'," + userid + ");"
            );
            break;
        case 200:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-11-2019  *********************************** */
                "UPDATE page_detail SET displayMenuName = 'Label Format' WHERE displayMenuName = 'Print Format';  \n" +
                /* **************************** Add Script Version -> 02-11-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                \n" +
                "	IN ppageIndex INT(11),                \n" +
                "	IN precordPerPage INT(11),                \n" +
                "	IN pOrderBy VARCHAR(255),	                \n" +
                "        IN pWhereClause VARCHAR(16383)                    \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.price, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,  \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,            \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,            \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,  \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,  \n" +
                "			(SELECT CONCAT('(', cus.customerCode, ')',cus.companyName) FROM customers cus WHERE cus.id=css.customerID AND cus.deletedAt IS NULL LIMIT 1) customer,  \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,  \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,  \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "			(SELECT mcm.mfgCode FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,  \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,  \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray                 \n" +
                "               FROM component_sid_stock css                \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0               \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0             \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0              \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "	ELSE                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "	ELSE	                \n" +
                "		SET rowNumWhere = '';                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-11-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                      \n" +
                "    IN pWhereClause VARCHAR(16383),                      \n" +
                "    IN puserID VARCHAR(50),                \n" +
                "    IN pnickName VARCHAR(20),                \n" +
                "    IN pprefix VARCHAR(20),                \n" +
                "    IN puid VARCHAR(20),            \n" +
                "    IN pComponentID INT,        \n" +
                "    IN pCustomerID INT,        \n" +
                "    IN pCPN BOOL,        \n" +
                "    IN pMFGAvailabel BOOL,        \n" +
                "    IN pRefCpnMfgID INT,    \n" +
                "    IN pAssyID INT,    \n" +
                "    IN pSalesOrderDetailID INT,		    \n" +
                "    IN pReceiveMaterialType VARCHAR(255) 	    \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                      \n" +
                "	DECLARE v_delimiter VARCHAR(10);                      \n" +
                "	DECLARE v_length INT;                       \n" +
                "	DECLARE v_fieldType INT;                           \n" +
                "	DECLARE v_entityId INT;                      \n" +
                "	DECLARE v_dataElementId INT;                      \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                      \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                      \n" +
                "	DECLARE strLabel VARCHAR(2000);                      \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                      \n" +
                "	DECLARE StaticField VARCHAR(100);                      \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                      \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                      \n" +
                "	DECLARE plen,slen INT;                      \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                      \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                  \n" +
                "	DECLARE barcode_type_id INT;            \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);        \n" +
                "	DECLARE UpdateValue VARCHAR(16383);            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                       \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                      \n" +
                "	(                      \n" +
                "	     errorText NVARCHAR(2000),                      \n" +
                "	     IsSuccess VARCHAR (2),            \n" +
                "	     MFGPart VARCHAR(100)                           \n" +
                "	);           \n" +
                "	-- get data from barcode templates with seprator                      \n" +
                "	block1: BEGIN                 \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                       \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                \n" +
                "		-- tempregexp;      \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */            \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                    \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                      \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                 \n" +
                "		ELSE    /* barcode 1D */            \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                     \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                       \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                 \n" +
                "		END IF;                 \n" +
                "	END block1;                      \n" +
                "  \n" +
                "	block2: BEGIN                      \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                      \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                      \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                   \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                       \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		-- declare exit loop if data not found                      \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                      \n" +
                "	        -- if any record match found than  check for delimiter and its value                 \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                      \n" +
                "			-- create temporary table for deliemeter and component dataelement                      \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                      \n" +
                "				pentityId INT,                      \n" +
                "				pdataElementId INT,                      \n" +
                "				pdelimiter_value VARCHAR(200)                      \n" +
                "			);                 \n" +
                "  \n" +
                "			-- create temporary table for separator string values                      \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                      \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));            \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                      \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                       \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);             \n" +
                "  \n" +
                "			-- open cursor                      \n" +
                "			OPEN barcodeMatch_cursor;                      \n" +
                "  \n" +
                "			-- set str label as whereclause                      \n" +
                "			SET strLabel=pWhereClause;               \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                      \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                      \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                      \n" +
                " 			 END IF;                     \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                       \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                      \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                      \n" +
                "			 END IF;	            \n" +
                "  \n" +
                "			-- insert all values after seprator split                       \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                      \n" +
                "			PREPARE stmt1 FROM @SQL;	                      \n" +
                "			EXECUTE stmt1;                      \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                      \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                      \n" +
                "			barcodeMatch_loop:LOOP                      \n" +
                "				-- get all five selected values                      \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;              \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                      \n" +
                "				IF exit_loop THEN                 \n" +
                "					CLOSE barcodeMatch_cursor;                      \n" +
                "					LEAVE barcodeMatch_loop;                      \n" +
                "				END IF;                 \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                      \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                      \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                      \n" +
                "				EXECUTE stmtdelimiter;            \n" +
                "  \n" +
                "				-- get delimiter values from string                      \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));              \n" +
                "				-- check for field type is static or dynamic                      \n" +
                "				-- if static field than check for mfg code and mfg part number                      \n" +
                "				IF v_fieldType = 0  THEN                  \n" +
                "					-- component_sid_stock                       \n" +
                "					-- get static field name from barcode table delimiter data element id                      \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                        \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                      \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN            \n" +
                "						SET MFG_Part_No = delimiter_value_data;            \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN            \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                                      \n" +
                "						ELSE            \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;            \n" +
                "						END IF;            \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                      \n" +
                "						END IF;             \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                      \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN              \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                      \n" +
                "					END IF;        \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\") THEN      \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                      \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');      \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN            \n" +
                "						CLOSE barcodeMatch_cursor;                      \n" +
                "						LEAVE barcodeMatch_loop;            \n" +
                "					END IF;               \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                      \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                       \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                      \n" +
                "  \n" +
                "				ELSE                     \n" +
                "					-- component_sid_stock_dataelement_Values                        \n" +
                "					-- dynamic fields                \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                       \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                   \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                       \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);               \n" +
                "				END IF;                      \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                      \n" +
                "  \n" +
                "			-- check if mfg and component both found than                       \n" +
                "			IF (@componentCount > 1) THEN            \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                      \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                      \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                      \n" +
                "                                   IF @Mfgmatched = 0  THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                      \n" +
                "				   END IF;									                      \n" +
                "			 ELSE 		            \n" +
                "				IF @mfgCount = 0 THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                      \n" +
                "		                END IF;	                      \n" +
                "				IF @componentCount = 0 THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                      \n" +
                "				END IF;	                      \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                        \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                      \n" +
                "			        END IF;						                      \n" +
                "			END IF;				                      \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN        \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;        \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;        \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                      \n" +
                "				END IF;        \n" +
                "			END IF;        \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                      \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	        \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					        \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				-- must call statements in sequence          				            \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                      \n" +
                "				PREPARE stmt1 FROM @SQL1;                      \n" +
                "				EXECUTE stmt1;                    \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');        \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN        \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);        \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN        \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN        \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN        \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);        \n" +
                "				END IF;    \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN        \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);        \n" +
                "				END IF;    \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN        \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');     \n" +
                "				END IF;    \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	        \n" +
                "  \n" +
                "				SET @sql2 = UpdateValue;	                       \n" +
                "				PREPARE stmt2 FROM @SQL2;                      \n" +
                "				EXECUTE stmt2;	                      \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                      \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN            \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                       \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                      \n" +
                "				END IF;                        \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                      \n" +
                "			ELSE                     \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                      \n" +
                "			END IF;                      \n" +
                "  \n" +
                "		ELSE                  \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                       \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                      \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                        \n" +
                "		END IF;                      \n" +
                "  \n" +
                "	END block2;                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-11-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (201,'2.00','V1',' Changes of print label - FENIL '," + userid + ");"
            );
            break;
        case 201:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-11-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_verify_UID` ;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(       \n" +
                "	IN pVerificationType VARCHAR(100),     					    \n" +
                "	IN pUID VARCHAR(14),                                                            \n" +
                "	IN pScanMFGPN VARCHAR(100),                                                            \n" +
                "	IN pScanPID VARCHAR(50),                                                            \n" +
                "	IN pScanCPN VARCHAR(50),                                                            \n" +
                "	IN pScanUID VARCHAR(14),    \n" +
                "	IN pCreatedBy VARCHAR(255)                                                           \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;    \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS    \n" +
                "	SELECT 	cs.id, cs.uid, cs.scanlabel, cs.refcompid, c.mfgcodeID, c.mfgPN, c.PIDCode, c.RoHSStatusID    \n" +
                "        FROM 	component_sid_stock cs     \n" +
                "        INNER JOIN component c ON cs.refcompid = c.id     \n" +
                "        WHERE 	cs.uid = pUID     \n" +
                "        AND 	cs.isDeleted  = 0    \n" +
                "        LIMIT 	1;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (    \n" +
                "		scanString1 VARCHAR(255) NULL, 	scanString2 VARCHAR(255) NULL,     \n" +
                "        	string1PartID INT(11) NULL,	scanString1MFG VARCHAR(100) NULL,   scanString1MFGPNID VARCHAR(100) NULL,     \n" +
                "        	string2PartID INT(11) NULL,	scanString2MFG VARCHAR(100) NULL,   scanString2MFGPNID VARCHAR(100) NULL,        \n" +
                "        	STATUS VARCHAR(100) NULL,   	isDeleted TINYINT(1) DEFAULT '0',     \n" +
                "        	createdBy VARCHAR(255) NULL,   	createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);    \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(    \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,    \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	    \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`)    \n" +
                "	SELECT 	pUID scanString1, 		IFNULL(pScanMFGPN,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))) scanString2,	    \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 		UH.mfgPN scanString1MFGPNID,    \n" +
                "		NULL string2PartID,    \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,		NULL STATUS    \n" +
                "        FROM 	tempUIDDet UH;    \n" +
                "  \n" +
                "        SELECT  u.mfgcodeID, 	u.mfgPN, 	u.PIDCode,	u.RoHSStatusID,		u.id    \n" +
                "	INTO 	@mfgcodeID,	@mfgPN, 	@PIDCode,	@RoHSStatusID,		@compStockID    \n" +
                "	FROM    tempUIDDet u;    \n" +
                "  \n" +
                "  \n" +
                "        IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN    \n" +
                "		IF (pScanMFGPN IS NOT NULL) THEN    \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPN LIMIT 1) THEN    \n" +
                "				SET uidVerified = 1;    \n" +
                "			END IF;    \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN     \n" +
                "  \n" +
                "			SELECT  c.id, c.mfgcodeID, c.mfgPN     \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID    \n" +
                "			FROM    component c    \n" +
                "			WHERE 	c.PIDCode =  IFNULL(pScanPID,pScanCPN);    \n" +
                "  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = @mfgcodeID  AND c.mfgPN = @mfgPN LIMIT 1) THEN    \n" +
                "				SET uidVerified = 1;    \n" +
                "			END IF	;    \n" +
                "		-- ELSEIF (pScanCPN IS NOT NULL) THEN     \n" +
                "		-- 	IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = pScanCPN AND c.mfgcodeID = mfgcodeID  AND c.mfgPN = mfgPN LIMIT 1) THEN    \n" +
                "		-- 		SET uidVerified = 1;    \n" +
                "		-- 	END IF	;    \n" +
                "		ELSEIF (pUID = pScanUID) THEN    \n" +
                "  \n" +
                "			SELECT  c.refcompid, c.mfgcodeID, c.mfgPN     \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID    \n" +
                "			FROM    tempUIDDet c;    \n" +
                "  \n" +
                "			SET uidVerified = 1;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		UPDATE 	tempUIDHistory    \n" +
                "		SET 	string2PartID = @string2PartID,    \n" +
                "			scanString2MFG = @scanString2MFG,    \n" +
                "			scanString2MFGPNID = @scanString2MFGPNID;    \n" +
                "	ELSE    \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)    \n" +
                "		VALUES 	(pUID, IFNULL(pScanMFGPN,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(    \n" +
                "		`scanString1`,		`scanString2`,		`verificationType`,    \n" +
                "		`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	    \n" +
                "		`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	    \n" +
                "		`status`,		    \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`)    \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,    \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	UH.scanString1MFGPNID,	    \n" +
                "		UH.string2PartID,	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	    \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Verified' ELSE 'Unverified' END,    \n" +
                "		0,			IFNULL(pCreatedBy,''),	CURRENT_TIMESTAMP     \n" +
                "	FROM 	tempUIDHistory UH;    \n" +
                "  \n" +
                "  \n" +
                "	SELECT *, @PIDCode PIDCode, @RoHSStatusID RoHSStatusID, @compStockID compStockID FROM uid_verification_history WHERE id = LAST_INSERT_ID();	    \n" +
                "	-- if(uidVerified = 1) then    \n" +
                "	-- 	SELECT *, LAST_INSERT_ID() UIDHistoryID, 'Verified' verificationStatus FROM tempUIDDet cs;    \n" +
                "	-- else     \n" +
                "	-- 	SELECT LAST_INSERT_ID() UIDHistoryID, 'Unverified' verificationStatus;    \n" +
                "	-- end if;	    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempUIDDet;    \n" +
                "	DROP TEMPORARY TABLE tempUIDHistory;    \n" +
                "	COMMIT;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-11-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (202,'2.00','V1',' Added customer stock id in sproc Sproc_verify_UID - Dharmishtha '," + userid + ");"
            );
            break;
        case 202:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2019  *********************************** */
                "ALTER TABLE employees  \n" +
                "ADD COLUMN street3 VARCHAR(255) ;  \n" +
                "  \n" +
                "ALTER TABLE customer_contactperson  \n" +
                "ADD COLUMN middleName VARCHAR(255) ;  \n" +
                /* **************************** Add Script Version -> 11-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (203,'2.00','V1',' new field for employee and contact person - KETAN '," + userid + ");"
            );
            break;
        case 203:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                  \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),	                  \n" +
                "        IN pWhereClause VARCHAR(16383)                      \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.price, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,    \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,              \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,              \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,    \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,    \n" +
                "			(SELECT CONCAT('(', cus.customerCode, ')',cus.companyName) FROM customers cus WHERE cus.id=css.customerID AND cus.deletedAt IS NULL LIMIT 1) customer,    \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,    \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,    \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,    \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,    \n" +
                "			(SELECT mcm.mfgCode FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,    \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,    \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray, css.updatedAt                   \n" +
                "               FROM component_sid_stock css                  \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                 \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                  \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0               \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
                "		SET pWhereClause = '1=1' ;                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "	ELSE	                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                  \n" +
                "	EXECUTE query1;                  \n" +
                "	DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (204,'2.00','V1','Change the SP related to receiving material - FENIL '," + userid + ");"
            );
            break;
        case 204:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2019  *********************************** */
                "ALTER TABLE `rfq_partcategory`  \n" +
                "ADD COLUMN `partCategory` INT(11) NOT NULL COMMENT '1 = PCB \n 2 = Component \n 3 = Assembly';  \n" +
                "update rfq_partcategory set partCategory = id;  \n" +
                "UPDATE `rfq_partcategory` SET `categoryName` = 'Sales Kit', `partCategory` = '3' WHERE (`id` = '1');  \n" +
                "UPDATE `rfq_partcategory` SET `categoryName` = 'Assembly' WHERE (`id` = '3');  \n" +
                "ALTER TABLE `component` ADD COLUMN `partType` INT(11) NOT NULL;  \n" +
                "update component set partType = category where category is not null;  \n" +
                "update component set category = 3 where category = 1;  \n" +
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(	                \n" +
                "	IN ppageIndex INT(11),                \n" +
                "	IN precordPerPage INT(11),                \n" +
                "	IN pOrderBy VARCHAR(255),	                \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT(1)/*,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT*/  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "	/* DECLARE SQLStatement varchar(255); */                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "		SELECT DISTINCT co.*, mf.mfgCode,              \n" +
                "		gc.gencCategoryName AS partStatusValue,                \n" +
                "		mf.mfgType,              \n" +
                "		vu_co.MFGPN AS AliasMFGPN,              \n" +
                "		vu_co.mfgcode AS AliasMFGCode,              \n" +
                "		ro.name AS `rohsComplientConvertedValue`,    \n" +
                "		ro.rohsIcon AS `rohsIcon`,       \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 0) THEN 'No'  \n" +
                "					WHEN (`co`.`isGoodPart` = 1) THEN 'Yes' ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        mt.name mountingTypeName,  \n" +
                "		pc.categoryName  \n" +
                "		FROM component co  \n" +
                "        LEFT JOIN rfq_partcategory pc on pc.id = co.partType  \n" +
                "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0  \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus  \n" +
                "		 LEFT JOIN component_alias ca ON ca.aliasgroupID = co.aliasgroupID AND IFNULL(ca.isDeleted,0)=0 AND ca.deletedAt IS NULL  \n" +
                "		LEFT JOIN vu_component_dist_comp_details vu_co ON ca.aliasgroupID = vu_co.aliasgroupID  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "        left join rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                "        left join rfq_mountingtypemst mt on mt.id = co.mountingTypeID  \n" +
                "	-- LEFT JOIN vu_component_dist_comp_details vu_co ON co.id = vu_co.compID  \n" +
                "		WHERE IFNULL(co.isdeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsMFG THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );  \n" +
                "	ELSE  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +
                "CREATE TABLE `component_functionaltestingequipment` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `eqpID` int(11) NOT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime  DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `refComponentID` int(11) NOT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_component_functionaltestingequipment_eqpID` (`eqpID`),  \n" +
                "  KEY `FK_component_functionaltestingequipment_refComponentID` (`refComponentID`),  \n" +
                "  CONSTRAINT `FK_component_functionaltestingequipment_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_component_functionaltestingequipment_eqpID` FOREIGN KEY (`eqpID`) REFERENCES `equipment` (`eqpID`)  \n" +
                ");  \n" +
                "drop procedure if exists `Sproc_GetComponentFunctionalTestingEquipmentSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentFunctionalTestingEquipmentSearch`(  \n" +
                "IN pSearch VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                " SELECT * FROM  \n" +
                "    (select e.eqpID, e.assetName  \n" +
                " 	   from equipment e  \n" +
                "	  where e.deletedAt is null  \n" +
                "	    and e.equipmentAs = 'E'  \n" +
                "	) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND assetName LIKE CONCAT('%', pSearch , '%')));  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (205,'2.00','V1','create and alter tables, change and create SP - Ashish'," + userid + ");"
            );
            break;
        case 205:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2019 *********************************** */
                "rename table component_requiremapping_parts to component_requiremating_parts;  \n" +
                "ALTER TABLE `component_alternatepn`   \n" +
                "CHANGE COLUMN `Type` `Type` INT(11) NOT NULL COMMENT '1-Alternate part\\\n2-PickupPadRequired\\\n3-ProgrammingRequired\\\n4-FunctionaTestingRequired' ;  \n" +
                /* **************************** Add Script Version -> 11-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (206,'2.00','V1','Change Require Mating Parts table name - Ashish'," + userid + ");"
            );
            break;
        case 206:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "ALTER TABLE `component`   \n" +
                "ADD COLUMN `functionalTypePartRequired` TINYINT(1) DEFAULT 0 ,  \n" +
                "ADD COLUMN `mountingTypePartRequired` TINYINT(1) DEFAULT 0 ;  \n" +
                "drop table component_requiremating_parts;  \n" +
                "ALTER TABLE `component_alternatepn`   \n" +
                "CHANGE COLUMN `Type` `Type` INT(11) NOT NULL COMMENT '1-Alternate part\\\n2-PickupPadRequired\\\n3-ProgrammingRequired\\\n4-FunctionaTestingRequired\\\n5-MatingPartRequired' ;  \n" +
                "ALTER TABLE `component`  \n" +
                "DROP COLUMN `requiredMatingPartgroupID`;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (207,'2.00','V1','removed component_requiremating_parts table - Ashish'," + userid + ");"
            );
            break;
        case 207:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-02-2019  *********************************** */
                "ALTER TABLE rfq_lineitems_headers ADD COLUMN isAdditionalField TINYINT(1) DEFAULT 0;  \n" +
                "  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData1','userData1',101,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData2','userData2',102,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData3','userData3',103,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData4','userData4',104,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData5','userData5',105,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData6','userData6',106,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData7','userData7',107,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData8','userData8',108,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData9','userData9',109,'1',1,1);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('UserData10','userData10',110,'1',1,1);  \n" +
                "  \n" +
                " CREATE TABLE `rfq_bom_header_component_configuration` (    \n" +
                "   `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "   `refComponentID` INT(11) NOT NULL,  \n" +
                "   `refHeaderID` INT(11) NOT NULL,  \n" +
                "   `isDeleted` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "   `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "   `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "   `updatedAt` DATETIME DEFAULT NULL,  \n" +
                "   `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "   `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "   `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "   PRIMARY KEY (`id`),  \n" +
                "   KEY `FK_rfq_bom_header_component_configuration_refComponentID` (`refComponentID`),  \n" +
                "   CONSTRAINT `FK_rfq_bom_header_component_configuration_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`),  \n" +
                "   KEY `FK_rfq_lineitems_headers_refHeaderID` (`refHeaderID`),  \n" +
                "   CONSTRAINT `FK_rfq_lineitems_headers_refHeaderID` FOREIGN KEY (`refHeaderID`) REFERENCES `rfq_lineitems_headers` (`id`)  \n" +
                " ) ENGINE=INNODB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;  \n" +
                "  \n" +
                " ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `pickupPadRequiredStep` TINYINT(1);  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQAdditionalHeaderConfigurations` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQAdditionalHeaderConfigurations`(  \n" +
                "IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	h.id,   \n" +
                "		h.name,   \n" +
                "		h.field,  \n" +
                "		map.refComponentID,  \n" +
                "		CASE map.refComponentID   \n" +
                "		WHEN pPartID THEN TRUE   \n" +
                "		ELSE FALSE END AS isConfigured  \n" +
                "	FROM 	rfq_lineitems_headers h   \n" +
                "	LEFT JOIN rfq_bom_header_component_configuration map ON  map.refHeaderID = h.id   \n" +
                "	AND	map.refComponentID = pPartID AND map.isDeleted = 0  \n" +
                "	WHERE 	h.isAdditionalField = 1 AND h.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RFQAdditionalCommentManage` ;  \n" +
                "CREATE PROCEDURE `Sproc_RFQAdditionalCommentManage`(      \n" +
                "	IN pHeaderIDS VARCHAR(5000),  -- comma seperated headerIDs      \n" +
                "	IN pPartID INT,    \n" +
                "	IN pUserID INT      \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE totalCount INT DEFAULT 0;      \n" +
                "	DECLARE currIndex INT DEFAULT 0;      \n" +
                "	DECLARE currHeaderItem VARCHAR(8);      \n" +
                "	DECLARE currCustRev VARCHAR(10);      \n" +
                "	DECLARE currCustPN VARCHAR(500);      \n" +
                "  \n" +
                "	-- This procedure will insert data into temporary table 'tmp_sproc_stringtotable'      \n" +
                "	CALL Sproc_StringToTable(pHeaderIDS);      \n" +
                "	-- get data inserted by SP      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM tmp_sproc_stringtotable WHERE item != \"\";      \n" +
                "	-- Delete Existing Data  \n" +
                "	DELETE FROM rfq_bom_header_component_configuration WHERE refComponentID = pPartID;  \n" +
                "  \n" +
                "	WHILE currIndex < totalCount DO      \n" +
                "  \n" +
                "		SELECT a.item INTO currHeaderItem FROM tmp_sproc_stringtotable a LIMIT currIndex, 1;      \n" +
                "		SET currIndex = currIndex + 1;     \n" +
                "  \n" +
                "		INSERT INTO rfq_bom_header_component_configuration (refComponentID, refHeaderID, createdBy) VALUES (pPartID, currHeaderItem, pUserID);  \n" +
                "  \n" +
                "	END WHILE;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                          \n" +
                "	IN ppartID INT                  \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                  \n" +
                "	SELECT 	a.id,       \n" +
                "		a.lineID,       \n" +
                "		a.qpa,       \n" +
                "		a.refDesig,       \n" +
                "		a.custPN,      \n" +
                "		a.custPNID,                               \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                              \n" +
                "		a.description,      \n" +
                "		a.level,      \n" +
                "		a.numOfPosition,      \n" +
                "		a.customerRev,       \n" +
                "		a.customerDescription,       \n" +
                "		a.customerPartDesc,                               \n" +
                "		CONCAT(part.partTypeName) partclassID,       \n" +
                "		a.isInstall,       \n" +
                "		a.isPurchase,       \n" +
                "		a.leadQty,       \n" +
                "		a.attritionRate,      \n" +
                "		a.valueAddedCost,      \n" +
                "		a.refRFQLineItemID,                    \n" +
                "		a.dnpQty,       \n" +
                "		a.dnpDesig,       \n" +
                "		a.qpaDesignatorStep,      \n" +
                "		a.duplicateCPNStep,    \n" +
                "		a.qpaDesignatorColorPriority,      \n" +
                "		a.mergeLines,      \n" +
                "		a.lineMergeStep,      \n" +
                "		a.isBuyDNPQty                    \n" +
                "	FROM rfq_lineitems a                    \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                    \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0         \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                              \n" +
                "  \n" +
                "	SELECT 	b.id,      \n" +
                "		b.lineID,       \n" +
                "		b.qpa,       \n" +
                "		b.refDesig,                           \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                          \n" +
                "		a.mfgCodeID,       \n" +
                "		a.mfgPN,       \n" +
                "		a.mfgPNID,                              \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                          \n" +
                "		a.distMfgCodeID,       \n" +
                "		a.distPN,       \n" +
                "		a.distMfgPNID,                               \n" +
                "		b.custPN,       \n" +
                "		b.custPNID,       \n" +
                "		b.uomID,       \n" +
                "		a.description descriptionAlternate,       \n" +
                "		b.description,       \n" +
                "		b.level,       \n" +
                "		b.numOfPosition,       \n" +
                "		b.customerRev,       \n" +
                "		b.customerDescription,       \n" +
                "		b.customerPartDesc,                        \n" +
                "		b.partclassID,       \n" +
                "		b.isInstall,       \n" +
                "		b.isPurchase,       \n" +
                "		b.leadQty,       \n" +
                "		b.attritionRate,       \n" +
                "		b.valueAddedCost,       \n" +
                "		b.refRFQLineItemID,                               \n" +
                "		b.dnpQty,       \n" +
                "		b.dnpDesig,       \n" +
                "		a.id AS rfqAlternatePartID,       \n" +
                "		b.qpaDesignatorStep,      \n" +
                "		b.qpaDesignatorColorPriority,       \n" +
                "		b.duplicateCPNStep,    \n" +
                "		b.isBuyDNPQty,                    \n" +
                "		a.mfgVerificationStep,       \n" +
                "		a.mfgDistMappingStep,      \n" +
                "		a.mfgCodeStep,      \n" +
                "		a.customerApproval,      \n" +
                "		a.org_mfgCode,       \n" +
                "		a.org_mfgPN,                            \n" +
                "		a.org_distributor,       \n" +
                "		a.org_distPN,                            \n" +
                "		a.distVerificationStep,       \n" +
                "		a.distCodeStep,       \n" +
                "		a.getMFGPNStep,       \n" +
                "		a.obsoletePartStep,      \n" +
                "		a.mfgGoodPartMappingStep,      \n" +
                "		a.mfgPNStep,       \n" +
                "		a.distPNStep,                          \n" +
                "		a.badMfgPN,       \n" +
                "		a.distGoodPartMappingStep,       \n" +
                "		a.nonRohsStep,       \n" +
                "		a.oneRohsComponentStep,       \n" +
                "		a.epoxyStep,       \n" +
                "		a.invalidConnectorTypeStep,      \n" +
                "		a.duplicateMPNInSameLineStep,    \n" +
                "		a.mismatchMountingTypeStep,    \n" +
                "		a.mismatchFunctionalCategoryStep,       \n" +
                "		a.restrictUseWithPermissionStep,    \n" +
                "		a.restrictUsePermanentlyStep,      \n" +
                "		a.userData1,      \n" +
                "		a.userData2,  \n" +
                "		a.userData3,  \n" +
                "		a.userData4,  \n" +
                "		a.userData5,  \n" +
                "		a.userData6,  \n" +
                "		a.userData7,  \n" +
                "		a.userData8,  \n" +
                "		a.userData9,  \n" +
                "		a.userData10,  \n" +
                "		CONCAT(part.partTypeName) parttypeID,      \n" +
                "		CONCAT(mount.name) mountingtypeID,       \n" +
                "		CONCAT(cat.categoryname) partcategoryID,      \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                        \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                      \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                    \n" +
                "		CASE WHEN                     \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                    \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                    \n" +
                "			THEN 1 ELSE 0 END isObsolete,                    \n" +
                "		co.mfgPNDescription,      \n" +
                "		co.pitch,    \n" +
                "		co.partPackage,    \n" +
                "		co.value,    \n" +
                "		co.tolerance,    \n" +
                "		co.voltage,    \n" +
                "		co.packaging,    \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment                \n" +
                "	FROM rfq_lineitems_alternatepart a                                \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                                 \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                          \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0       \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0      \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0      \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                       \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                        \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                      \n" +
                "	IN pRfqAssyID INT(11)                 \n" +
                "	)  \n" +
                "BEGIN                          \n" +
                "	DECLARE pValidCount INT(11);                      \n" +
                "	DECLARE pInValidCount INT(11);                      \n" +
                "	DECLARE pTotalCount INT(11);                  \n" +
                "	DECLARE pProgress INT(11);                      \n" +
                "	DECLARE pPartID INT(11);      \n" +
                "	SET pProgress = 0;                \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_assemblies WHERE id = pRfqAssyID;           \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "  \n" +
                "	SELECT  p.rfqLineItemsID,                 \n" +
                "	CASE                 \n" +
                "		WHEN                 \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                 \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND            \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND           \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND                 \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                 \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND                 \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND                 \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND                 \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND                 \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND                 \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                 \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND                 \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND                 \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                 \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND                \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND          \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND      \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND      \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND      \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND        \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1  AND    \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND        \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND  \n" +
                "			IFNULL(p.pickupPadRequiredStep,0) = 1                             \n" +
                "		THEN 1                \n" +
                "		ELSE 0                \n" +
                "	END AS ProgressCount                \n" +
                "	FROM rfq_lineitems l                \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;                \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;                \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                \n" +
                "		SET pProgress = 0;                \n" +
                "	ELSE                 \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	SELECT pProgress;                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (208,'2.00','V1',' Manage Additional Column settings - Jignesh K '," + userid + ");"
            );
            break;
        case 208:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-02-2019  *********************************** */
                "UPDATE component_sid_stock SET receiveMaterialType = 'Receive Part To Stock' WHERE receiveMaterialType IS NULL;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                    \n" +
                "	IN ppageIndex INT(11),                    \n" +
                "	IN precordPerPage INT(11),                    \n" +
                "	IN pOrderBy VARCHAR(255),	                    \n" +
                "        IN pWhereClause VARCHAR(16383)                        \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.price, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,      \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,                \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,                \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,      \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,      \n" +
                "			(SELECT CONCAT('(', cus.customerCode, ')',cus.companyName) FROM customers cus WHERE cus.id=css.customerID AND cus.deletedAt IS NULL LIMIT 1) customer,      \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,      \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,      \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,      \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,      \n" +
                "			(SELECT mcm.mfgCode FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,      \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,      \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray, css.updatedAt, css.nickName                     \n" +
                "               FROM component_sid_stock css                    \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                   \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                    \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                 \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                  \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "	ELSE                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
                "		SET pWhereClause = '1=1' ;                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "	ELSE	                    \n" +
                "		SET rowNumWhere = '';                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "SELECT pd.pageID INTO @transferStockParentId FROM page_detail pd WHERE pd.pageName = 'Material Management';  \n" +
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)   \n" +
                "VALUES ('Transfer Stock',0,0,'Materialmanagement.transferstock','app.transaction.transferstock','transferstock','Transfer Stock',NULL,@transferStockParentId,0,'13.04',1,'mdi mdi-cube-send',1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL,'1',NULL,NULL,0,NULL,1,'Transfer Stock');  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (209,'2.00','V1',' Add new menu - FENIL '," + userid + ");"
            );
            break;
        case 209:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT(11)  ,  \n" +
                "	IN pwoOPID INT(11)                                                                     \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`FCORemark`, `wo`.`buildQty`,  \n" +
                "			    `wo`.`woVersion`, `wo`.`isNoClean`, `wo`.`isWatersoluble`,  \n" +
                "			    GROUP_CONCAT((SELECT fullName FROM certificate_standards   \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',  \n" +
                "					(SELECT className FROM standard_class   \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,   \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL   \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL   \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			    `ca`.`PIDCode` , `ca`.`mfgPNDescription` , `ca`.`liveInternalVersion` , `ca`.`RoHSStatusID` ,  \n" +
                "			    (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,  \n" +
                "			       salesorddet.totalpoQty, salesorddet.poQty ,  \n" +
                "   			       salesorddet.totalmrpQty, salesorddet.mrpQty ,  \n" +
                "				salesorddet.poNumber , salesorddet.salesOrderNumber  \n" +
                "		FROM workorder AS `wo`   \n" +
                "  \n" +
                "		 LEFT OUTER JOIN `workorder_certification` AS `wocerti`   \n" +
                "		     ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL     \n" +
                "  \n" +
                "		  LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		  ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL      \n" +
                "  \n" +
                "			LEFT OUTER JOIN (SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,  \n" +
                "					SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,  \n" +
                "					GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber  \n" +
                "  \n" +
                "					FROM `workorder_salesorder_details` AS `wsd`   \n" +
                "  \n" +
                "						INNER JOIN `salesorderdet` AS `sod`   \n" +
                "						ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "						INNER JOIN `salesordermst` AS `som`   \n" +
                "						ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL   \n" +
                "					WHERE `wsd`.`deletedAt` IS NULL ) AS salesorddet  \n" +
                "  \n" +
                "			ON salesorddet.woID = `wo`.`woID`  \n" +
                "  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "  \n" +
                "  \n" +
                "		SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`FCORemark`, `wo`.`buildQty`,  \n" +
                "			`wo`.`woVersion`, `wo`.`isNoClean`, `wo`.`isWatersoluble`,  \n" +
                "			 GROUP_CONCAT((SELECT fullName FROM certificate_standards   \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',  \n" +
                "					(SELECT className FROM standard_class   \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,  \n" +
                "			`woop`.opName , `woop`.opNumber , `woop`.opVersion ,  \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , `ca`.`liveInternalVersion` , `ca`.`RoHSStatusID` ,  \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,  \n" +
                "			  salesorddet.totalpoQty, salesorddet.poQty ,  \n" +
                "   			       salesorddet.totalmrpQty, salesorddet.mrpQty ,  \n" +
                "				salesorddet.poNumber , salesorddet.salesOrderNumber  \n" +
                "		FROM workorder AS `wo`   \n" +
                "  \n" +
                "		LEFT OUTER JOIN `workorder_certification` AS `wocerti`   \n" +
                "		 ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL     \n" +
                "  \n" +
                "			LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "			  ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID   \n" +
                "  \n" +
                "			  LEFT OUTER JOIN `component` AS `ca`  \n" +
                "			  ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL      \n" +
                "  \n" +
                "			      LEFT OUTER JOIN (SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,  \n" +
                "						SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,  \n" +
                "						GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber  \n" +
                "  \n" +
                "						FROM `workorder_salesorder_details` AS `wsd`   \n" +
                "  \n" +
                "							INNER JOIN `salesorderdet` AS `sod`   \n" +
                "							ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "							INNER JOIN `salesordermst` AS `som`   \n" +
                "							ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL   \n" +
                "						WHERE `wsd`.`deletedAt` IS NULL ) AS salesorddet  \n" +
                "  \n" +
                "			ON salesorddet.woID = `wo`.`woID`  \n" +
                "  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (210,'2.00','V1',' Sproc_GetWOHeaderDisplayDetails - KETAN '," + userid + ");"
            );
            break;
        case 210:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                      \n" +
                "	IN ppageIndex INT(11),                      \n" +
                "	IN precordPerPage INT(11),                      \n" +
                "	IN pOrderBy VARCHAR(255),	                      \n" +
                "        IN pWhereClause VARCHAR(16383)                          \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.price, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,        \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,                  \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,                  \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,        \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,        \n" +
                "			(SELECT CONCAT('(', cus.customerCode, ')',cus.companyName) FROM customers cus WHERE cus.id=css.customerID AND cus.deletedAt IS NULL LIMIT 1) customer,        \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,        \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,        \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,        \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,        \n" +
                "			(SELECT mcm.mfgCode FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,        \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,        \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray, css.updatedAt, css.nickName                       \n" +
                "               FROM component_sid_stock css                      \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                     \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                      \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                   \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                    \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "	ELSE                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                      \n" +
                "		SET pWhereClause = '1=1' ;                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "	ELSE	                      \n" +
                "		SET rowNumWhere = '';                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (211,'2.00','V1',' Sproc_GetReceivingMaterial - FENIL '," + userid + ");"
            );
            break;
        case 211:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 13-02-2019  *********************************** */
                "Alter table roles add column isActive tinyint(1) default 0;  \n" +
                //  /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_GetGenericFolders`;  \n" +
                "CREATE PROCEDURE `Sproc_GetGenericFolders`(   \n" +
                "IN pRefTransId INT,   \n" +
                "IN pEntityId INT,   \n" +
                "IN pAccessLevel DECIMAL(6,2),   \n" +
                "IN pGencFileOwnerType VARCHAR(255),   \n" +
                "IN pIsTraveler TINYINT(1)   \n" +
                ")  \n" +
                "BEGIN   \n" +
                "DECLARE whereClauseFolder VARCHAR(1000);   \n" +
                "DECLARE whereClauseAllFolder VARCHAR(1000);   \n" +
                "DECLARE CountFolder VARCHAR(10000);   \n" +
                "SET pEntityId = IFNULL(pEntityId,0);   \n" +
                "SET whereClauseFolder = CONCAT(\" IFNULL(gf.entityID,0) = IFNULL(\",pEntityId,\",0)   \n" +
                "AND gf.refTransID = \", pRefTransId,   \n" +
                "\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");   \n" +
                "SET whereClauseAllFolder = CONCAT(\" gf.refTransID = \", 0,   \n" +
                "\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");   \n" +
                "-- if workorder operation then show operation data too   \n" +
                "IF (pGencFileOwnerType = 'workorder_operation') THEN   \n" +
                "SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR   \n" +
                "(IFNULL(gf.entityID,0) = -1   \n" +
                "AND gf.refTransID   \n" +
                "IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)   \n" +
                "AND gf.gencFileOwnerType = 'operations')   \n" +
                "AND gf.deletedAt IS NULL\");   \n" +
                "END IF;   \n" +
                "-- if traveler page than get data of operation, workorder, workorder operation   \n" +
                "IF (pIsTraveler = 1) THEN   \n" +
                "SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR   \n" +
                "(IFNULL(gf.entityID,0) = -7   \n" +
                "AND gf.refTransID IN   \n" +
                "(SELECT woID FROM workorder_operation   \n" +
                "WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)   \n" +
                "AND gf.gencFileOwnerType = 'workorder')   \n" +
                "AND gf.deletedAt IS NULL\");   \n" +
                "END IF;   \n" +
                "SET @SQLStatement1 = CONCAT(\"SELECT * FROM (SELECT   \n" +
                "gf.gencFolderName,   \n" +
                "gf.gencFolderID AS gencFolderID,   \n" +
                "gf.entityID,   \n" +
                "gf.refTransID,   \n" +
                "gf.gencFileOwnerType,   \n" +
                "gf.roleId,   \n" +
                "gf.refParentId AS folderParentID,   \n" +
                "rol.accessLevel,   \n" +
                "(SELECT fun_getFolderCountByParentID(\",pAccessLevel,\",\",prefTransID,\",gf.gencFolderID,'\", pGencFileOwnerType ,\"',\",pIsTraveler,\")) AS totalInnerFileFolder   \n" +
                "FROM generic_folder gf   \n" +
                "LEFT JOIN roles rol ON rol.id = gf.roleId AND rol.deletedAt IS NULL   \n" +
                "WHERE\", whereClauseFolder,\"   \n" +
                "UNION   \n" +
                "SELECT   \n" +
                "gf.gencFolderName,   \n" +
                "gf.gencFolderID AS gencFolderID,   \n" +
                "gf.entityID,   \n" +
                "gf.refTransID,   \n" +
                "gf.gencFileOwnerType,   \n" +
                "gf.roleId,   \n" +
                "gf.refParentId AS folderParentID,   \n" +
                "rol.accessLevel,   \n" +
                "(SELECT fun_getFolderCountByParentID(\",pAccessLevel,\",\",prefTransID,\",gf.gencFolderID,'\", pGencFileOwnerType ,\"',\",pIsTraveler,\")) AS totalInnerFileFolder   \n" +
                "FROM generic_folder gf   \n" +
                "LEFT JOIN roles rol ON rol.id = gf.roleId AND rol.deletedAt IS NULL   \n" +
                "WHERE\", whereClauseAllFolder,\")   \n" +
                "q   \n" +
                " where (q.roleId in (select rls.id from roles rls where rls.deletedAt IS NULL and IFNULL(rls.isActive,0) = 1) OR (q.totalInnerFileFolder > 0))  \n" +
                "ORDER BY q.accessLevel,q.gencFolderID ASC\");   \n" +
                "PREPARE query1 FROM @SQLStatement1;   \n" +
                "EXECUTE query1;   \n" +
                "DEALLOCATE PREPARE query1;   \n" +
                "END;  \n" +
                //  /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_RetrieveRole`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRole`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT * ,  \n" +
                "            (CASE WHEN (`isActive` = 0) THEN 'Inactive'     \n" +
                "				WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`   \n" +
                "            FROM roles  \n" +
                "			WHERE deletedAt IS NULL   \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (212,'2.00','V1','Alter roles table change in Sproc_GetGenericFolders-Mona'," + userid + ");"
            );
            break;
        case 212:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveBin` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "			SELECT   `binm`.`id`, `binm`.`Name` AS `Name`,`binm`.`Description`,`binm`.`WarehouseID`,`binm`.`isActive`,`binm`.`isPermanentBin`,`warem`.`Name` AS wareHoueseName,`binm`.`updatedAt`,   \n" +
                "				(CASE WHEN (binm.isActive= 0) THEN 'Inactive'         \n" +
                "					WHEN (binm.isActive = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,    \n" +
                "				(CASE WHEN (isPermanentBin = 0) THEN 'No'       \n" +
                "					WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS `isPermanentBinConvertedValue`	        \n" +
                "			FROM binmst binm    \n" +
                "			LEFT JOIN warehousemst warem ON `binm`.`WarehouseID` = `warem`.`ID`    \n" +
                "			WHERE binm.deletedAt IS NULL;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY\",\"Name ASC\") ;      \n" +
                "		ELSE      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );   		    \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);     \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (213,'2.00','V1','Display modify date in bin master - DEEPSHIKHA '," + userid + ");"
            );
            break;
        case 213:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "ALTER TABLE workorder CHANGE `LocationSampleDetails` `sampleDetails` VARCHAR(100);  \n" +
                "  \n" +
                "ALTER TABLE workorder ADD COLUMN locationDetails VARCHAR(100);  \n" +
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(                    \n" +
                "	IN woID INT(1),                    \n" +
                "	IN woNumber VARCHAR(11),                    \n" +
                "	IN ppartID INT,                    \n" +
                "	IN poQty INT(1),                    \n" +
                "	IN excessQty INT(1),                    \n" +
                "	IN buildQty INT(1),                    \n" +
                "	IN userID INT(1),                    \n" +
                "	IN ECORemark VARCHAR(100),                    \n" +
                "	IN FCORemark VARCHAR(100),                    \n" +
                "	IN isRevision INT(1),              \n" +
                "	IN woType INT(11),            \n" +
                "	IN ecoReqID INT(11)                   \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "DECLARE insertedWOID INT(1);                  \n" +
                "DECLARE insertedSubFormTransID INT(11);                  \n" +
                "DECLARE lv_subFormTransID_from INT(11);                  \n" +
                "DECLARE lv_parentDataElementID_from INT(11);                  \n" +
                "DECLARE lv_rowNumber_from INT(11);                  \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                      \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                      \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "  BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))                    \n" +
                "THEN SELECT 'woNumber' errorCode;                    \n" +
                "ELSE                    \n" +
                "	START TRANSACTION;                    \n" +
                "  \n" +
                "    # copy workorder                     \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`partID`,`customerID`,`poNumber`,                    \n" +
                "	`poQty`,`buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`                    \n" +
                "	,`woStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`,`sampleDetails`                    \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`,`locationDetails`)                    \n" +
                "	SELECT woNumber `woNumber`, ppartID `partID`,`customerID`,`poNumber`,                    \n" +
                "	poQty `poQty`,buildQty `buildQty`,`poDate`,`startTime`,`endTime`,`isSampleAvailable`,`masterTemplateID`,woID,                    \n" +
                "	UTC_DATE() `createdAt`, userID `createdBy`,0 `woStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`,                    \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`sampleDetails`,`isOperationTrackBySerialNo`,`isNoClean`,                    \n" +
                "	`isWatersoluble`,`isRevisedWO` , woType `woType` , ecoReqID `ecoReqID` , `locationDetails`                  \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                    \n" +
                "	SET	insertedWOID = LAST_INSERT_ID();                    \n" +
                "  \n" +
                "    # copy workorder_certification                    \n" +
                "  \n" +
                "	INSERT INTO workorder_certification                    \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                    \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,UTC_DATE() `createdAt`,userID `createdBy`,`classIDs`, `isDeleted` FROM workorder_certification wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_operation                    \n" +
                "  \n" +
                "    INSERT INTO workorder_operation                    \n" +
                "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                    \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                    \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                    \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,`colorcode`)                    \n" +
                "	SELECT insertedWOID `woID`,`opID`,UTC_DATE() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                    \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                    \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                    \n" +
                "    `isNoClean`,`isWatersoluble`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                    \n" +
                "    'A' opVersion, `colorCode`                    \n" +
                "	 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                    \n" +
                "  \n" +
                "	# copy workorder_cluster                    \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster                    \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)                    \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, UTC_DATE() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_operation_cluster                    \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                    \n" +
                "	SELECT                     \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID                     \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID                     \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,                     \n" +
                "	woc.opID, woc.displayOrder, UTC_DATE() `createdAt`, userID `createdBy`,                    \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`                    \n" +
                "	FROM workorder_operation_cluster woc                    \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)                    \n" +
                "	AND woc.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_operation_part                    \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part                    \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                    \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,UTC_DATE() `createdAt`,userID `createdBy`,                    \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	                    \n" +
                "	, `isDeleted` FROM workorder_operation_part wop WHERE wop.woID = woID AND wop.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_operation_equipment                    \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment                    \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)                    \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,UTC_DATE() `createdAt`,userID `createdBy`,                    \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`                    \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy workorder_operation_employee                    \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee                    \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                    \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,UTC_DATE() `createdAt`,userID `createdBy`,                    \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`                     \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields                   \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                    \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                    \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,UTC_DATE() `createdAt`,                    \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`                 \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID                    \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)                    \n" +
                "	AND dt.deletedAt IS NULL;                    \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form	                \n" +
                "  \n" +
                "	block1:BEGIN                     \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)                \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR                 \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL                \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                    \n" +
                "						AND entityID = (SELECT entityID FROM entity en                 \n" +
                "									WHERE en.entityName = 'Work Order' AND en.deletedAt IS NULL)                \n" +
                "						AND refTransID = woID                 \n" +
                "						ORDER BY refSubFormTransID ASC		                \n" +
                "					);                  \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                      \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;                     \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;                      \n" +
                "	-- loop item till all records found in string match of sub-form data element                \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP                  \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                  \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN                \n" +
                "			LEAVE wo_sub_Form_loop;                    \n" +
                "		 END IF;                        \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */	                \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);                \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	                \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */                \n" +
                "		UPDATE dataelement_transactionvalues                \n" +
                "		SET refSubFormTransID = insertedSubFormTransID                \n" +
                "		WHERE deletedAt IS NULL                \n" +
                "		AND refTransID = insertedWOID                \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;                \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;                \n" +
                "		SET lv_parentDataElementID_from = NULL;                \n" +
                "		SET lv_rowNumber_from = NULL;                \n" +
                "		SET insertedSubFormTransID = NULL;                \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;	                \n" +
                "	CLOSE subform_wo_from_data_cursor;	                \n" +
                "  \n" +
                "	END  block1;   				                  \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement                    \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`                    \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                    \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,                    \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                    \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                        \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement                    \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`                    \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                    \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,                    \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                    \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;                   \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields                   \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                    \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                    \n" +
                "	SELECT `dataElementID`,`value`,                \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo                  \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom                     \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )                \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,                \n" +
                "	`entityID`,UTC_DATE() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`                 \n" +
                "	FROM dataelement_transactionvalues dt                 \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL                \n" +
                "					AND wop.woID = woID )                \n" +
                "	AND entityID = (SELECT entityID FROM entity en WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)                    \n" +
                "	AND dt.deletedAt IS NULL;                 \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form	                \n" +
                "  \n" +
                "	block2:BEGIN                     \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)                \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR                 \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL                \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                    \n" +
                "					AND entityID = (SELECT entityID FROM entity en                 \n" +
                "						WHERE en.entityName = 'Operation' AND en.deletedAt IS NULL)                \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation                 \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )                 \n" +
                "					ORDER BY refSubFormTransID ASC		    	                \n" +
                "			);                 \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                      \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;                     \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;                      \n" +
                "	-- loop item till all records found in string match of sub-form data element                \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP                  \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                  \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN                \n" +
                "			LEAVE woop_sub_Form_loop;                        \n" +
                "		 END IF;                        \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */	                \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,UTC_DATE(), userID,0);                \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	                \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */                \n" +
                "		SET @SQl1 = CONCAT('                \n" +
                "				UPDATE dataelement_transactionvalues                \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,                \n" +
                "				' WHERE deletedAt IS NULL                \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation                \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )                \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';		                \n" +
                "			');		                                                    \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                    \n" +
                "		EXECUTE stmt1;     		                \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;                \n" +
                "		SET lv_parentDataElementID_from = NULL;                \n" +
                "		SET lv_rowNumber_from = NULL;                \n" +
                "		SET insertedSubFormTransID = NULL;                \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;	                \n" +
                "	CLOSE subform_woop_from_data_cursor;	                \n" +
                "  \n" +
                "	END  block2;                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp                    \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery                    \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`                    \n" +
                "    (`woID`,`partNumber`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)                    \n" +
                "	SELECT                     \n" +
                "    insertedWOID `woID`,`partNumber`,`woMultiplier`,`displayOrder`,userID `createdBy`,UTC_DATE() `createdAt`,`programName`,                    \n" +
                "    (SELECT woOPID FROM                     \n" +
                "    workorder_operation wop                     \n" +
                "	WHERE wop.opID IN (                    \n" +
                "		SELECT opID FROM workorder_operation wo                     \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID                    \n" +
                "		)                    \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID                    \n" +
                "	FROM workorder_preprogcomp wp                     \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                      \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator                    \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`                    \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)                    \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,                    \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.partNumber =                     \n" +
                "	(SELECT swp.partNumber FROM workorder_preprogcomp swp WHERE swp.woID = woID AND                    \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,                    \n" +
                "	userID `createdBy`,UTC_DATE() `createdAt`                    \n" +
                "	FROM workorder_preprogcomp_designator wpd                     \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;                    \n" +
                "  \n" +
                "    IF IFNULL(isRevision,0) = 0 THEN                    \n" +
                "	    # copy generic_folder                    \n" +
                "	    INSERT INTO generic_folder                    \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                    \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`)                    \n" +
                "			SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,                    \n" +
                "			0 isDeleted, UTC_DATE() createdAt, userID createdBy, a.gencFolderID copyGencFolderID                    \n" +
                "			FROM generic_folder a WHERE a.refTransID = woID AND a.gencFileOwnerType = 'workorder'  AND a.deletedAt IS NULL;                    \n" +
                "		UPDATE generic_folder gf1,                    \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID                    \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                    \n" +
                "			) gf2                    \n" +
                "			SET gf1.refParentId = gf2.gencFolderID                    \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                    \n" +
                "    END IF;                    \n" +
                "	COMMIT;                    \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;                    \n" +
                "END IF;                    \n" +
                "END;  \n" +
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_WorkOrder` ;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'WONUMBER',        \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.PARTID, 0) != IFNULL(NEW.PARTID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'PARTID',        \n" +
                "			CAST(OLD.PARTID AS CHAR),CAST(NEW.PARTID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;       \n" +
                "	IF IFNULL(OLD.PODATE, 0) != IFNULL(NEW.PODATE, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'PODATE',        \n" +
                "			CAST(OLD.poDate AS CHAR),CAST(NEW.poDate AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.PONUMBER, 0) != IFNULL(NEW.PONUMBER, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'PONUMBER',        \n" +
                "			CAST(OLD.poNumber AS CHAR),CAST(NEW.poNumber AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.POQTY, 0) != IFNULL(NEW.POQTY , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'POQTY',        \n" +
                "			CAST(OLD.poQty AS CHAR),CAST(NEW.poQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'EXCESSQTY',        \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'BUILDQTY',        \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'STARTTIME',        \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ENDTIME',        \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'MASTERTEMPLATEID',        \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'REFRENCEWOID',        \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'WOVERSION',        \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISSAMPLEAVAILABLE, 0) != IFNULL(NEW.ISSAMPLEAVAILABLE, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISSAMPLEAVAILABLE',        \n" +
                "			CAST(OLD.ISSAMPLEAVAILABLE AS CHAR),CAST(NEW.ISSAMPLEAVAILABLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISCLUSTERAPPLIED',        \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ROHSSTATUSID',        \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISNOCLEAN',        \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISWATERSOLUBLE',        \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',        \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.WOSTATUS, 0) != IFNULL(NEW.WOSTATUS , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'WOSTATUS',        \n" +
                "			CAST(OLD.WOSTATUS AS CHAR),CAST(NEW.WOSTATUS AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'CUSTOMERID',        \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ECOREMARK',        \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'FCOREMARK',        \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.SAMPLEDETAILS , 0)!= IFNULL(NEW.SAMPLEDETAILS , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'SAMPLEDETAILS',        \n" +
                "			CAST(OLD.sampleDetails AS CHAR),CAST(NEW.sampleDetails AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.LOCATIONDETAILS , 0)!= IFNULL(NEW.LOCATIONDETAILS , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'LOCATIONDETAILS',        \n" +
                "			CAST(OLD.locationDetails AS CHAR),CAST(NEW.locationDetails AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISDELETED',        \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISSTOPWORKORDER',        \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISREVISEDWO',        \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'ISOPERATIONSVERIFIED',        \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog         \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "		VALUES (\"WORKORDER\",        \n" +
                "			CAST(NEW.woID AS CHAR),        \n" +
                "			'TERMINATEWOID',        \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (214,'2.00','V1',' Sample and Location field for work order - KETAN '," + userid + ");"
            );
            break;
        case 214:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-01-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_verify_UID` ;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(     \n" +
                "	IN pVerificationType VARCHAR(100),     					  \n" +
                "	IN pUID VARCHAR(14),                                                          \n" +
                "	IN pScanMFGPNLabel VARCHAR(100),                                                          \n" +
                "	IN pScanPID VARCHAR(50),                                                          \n" +
                "	IN pScanCPN VARCHAR(50),                                                          \n" +
                "	IN pScanUID VARCHAR(14),   \n" +
                "	IN pScanMFGPN VARCHAR(100),     \n" +
                "	IN pCreatedBy VARCHAR(255)                                                           \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "	SELECT 	cs.id, cs.uid, cs.scanlabel, cs.refcompid, c.mfgcodeID, c.mfgPN, c.PIDCode, c.RoHSStatusID      \n" +
                "        FROM 	component_sid_stock cs   \n" +
                "        INNER JOIN component c ON cs.refcompid = c.id   \n" +
                "        WHERE 	cs.uid = pUID   \n" +
                "        AND 	cs.isDeleted  = 0  \n" +
                "        LIMIT 	1;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(255) NULL, 	scanString2 VARCHAR(255) NULL,   \n" +
                "        	string1PartID INT(11) NULL,	scanString1MFG VARCHAR(100) NULL,   scanString1MFGPNID VARCHAR(100) NULL,   \n" +
                "        	string2PartID INT(11) NULL,	scanString2MFG VARCHAR(100) NULL,   scanString2MFGPNID VARCHAR(100) NULL,      \n" +
                "        	STATUS VARCHAR(100) NULL,   	isDeleted TINYINT(1) DEFAULT '0',   \n" +
                "        	createdBy VARCHAR(255) NULL,   	createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`)  \n" +
                "	SELECT 	pUID scanString1, 		IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,	  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 		UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,		NULL STATUS  \n" +
                "        FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "        SELECT  u.mfgcodeID, 	u.mfgPN, 	u.PIDCode,	u.RoHSStatusID,		u.id      \n" +
                "	INTO 	@mfgcodeID,	@mfgPN, 	@PIDCode,	@RoHSStatusID,		@compStockID    \n" +
                "	FROM    tempUIDDet u;    \n" +
                "  \n" +
                "  \n" +
                "        IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN   \n" +
                "  \n" +
                "			SELECT  c.id, c.mfgcodeID, c.mfgPN   \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "			FROM    component c  \n" +
                "			WHERE 	c.PIDCode =  IFNULL(pScanPID,pScanCPN);  \n" +
                "  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = @mfgcodeID  AND c.mfgPN = @mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		-- ELSEIF (pScanCPN IS NOT NULL) THEN   \n" +
                "		-- 	IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = pScanCPN AND c.mfgcodeID = mfgcodeID  AND c.mfgPN = mfgPN LIMIT 1) THEN  \n" +
                "		-- 		SET uidVerified = 1;  \n" +
                "		-- 	END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "  \n" +
                "			SELECT  c.refcompid, c.mfgcodeID, c.mfgPN   \n" +
                "			INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "			FROM    tempUIDDet c;  \n" +
                "  \n" +
                "			SET uidVerified = 1;  \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN   \n" +
                "  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
                "  \n" +
                "				SELECT  c.refcompid, c.mfgcodeID, c.mfgPN   \n" +
                "				INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "				FROM    tempUIDDet c;  \n" +
                "  \n" +
                "				SET uidVerified = 1;  \n" +
                "			ELSE  \n" +
                "				SELECT  c.id, c.mfgcodeID, c.mfgPN   \n" +
                "				INTO 	@string2PartID,	@scanString2MFG, @scanString2MFGPNID  \n" +
                "				FROM    component c  \n" +
                "				WHERE 	c.mfgPN =  pScanMFGPN;  \n" +
                "			END IF	;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = @string2PartID,  \n" +
                "			scanString2MFG = @scanString2MFG,  \n" +
                "			scanString2MFGPNID = @scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "		VALUES 	(pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(    \n" +
                "		`scanString1`,		`scanString2`,		`verificationType`,     \n" +
                "		`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	    \n" +
                "		`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	     \n" +
                "		`status`,		     \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`)     \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	UH.scanString1MFGPNID,	     \n" +
                "		UH.string2PartID,	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	    \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Verified' ELSE 'Unverified' END,   \n" +
                "		0,			IFNULL(pCreatedBy,''),	CURRENT_TIMESTAMP     \n" +
                "	FROM 	tempUIDHistory UH;     \n" +
                "  \n" +
                "  \n" +
                "	SELECT *, @PIDCode PIDCode, @RoHSStatusID RoHSStatusID, @compStockID compStockID FROM uid_verification_history WHERE id = LAST_INSERT_ID();	    \n" +
                "	-- if(uidVerified = 1) then  \n" +
                "	-- 	SELECT *, LAST_INSERT_ID() UIDHistoryID, 'Verified' verificationStatus FROM tempUIDDet cs;  \n" +
                "	-- else   \n" +
                "	-- 	SELECT LAST_INSERT_ID() UIDHistoryID, 'Unverified' verificationStatus;  \n" +
                "	-- end if;	  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE tempUIDHistory;  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-01-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (215,'2.00','V1',' Modify sproc Sproc_verify_UID to add one parameter - Dharmishtha '," + userid + ");"
            );
            break;
        case 215:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "UPDATE page_detail SET displayMenuName = 'UID Management', menuName = 'UID Management' WHERE pageName = 'Manage Receiving Material';  \n" +
                "UPDATE page_detail SET pageURL = 'managereceivingmaterial/:id/:type' WHERE pageURL = 'managereceivingmaterial/:id';  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN uom INT NULL;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (216,'2.00','V1',' Changes of receiving material - FENIL '," + userid + ");"
            );
            break;

        case 216:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */

                "ALTER TABLE rfq_assembly_history ADD COLUMN partID INT(11);	  \n" +
                "	ALTER TABLE rfq_assembly_history ADD COLUMN description VARCHAR(200);  \n" +
                "	ALTER TABLE rfq_assembly_history ADD COLUMN refInternalHistoryID INT(11);  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetAllUniqueSubAssemblyByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllUniqueSubAssemblyByPartID`(  \n" +
                "	IN pAssemblyID INT                \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "  \n" +
                "	SELECT DISTINCT rfa.id rfqAssyID,  \n" +
                "		psa.prPerPartID,   \n" +
                "		co.PIDCode AS PIDCode   \n" +
                "	FROM part_sub_assy_relationship psa  \n" +
                "	INNER JOIN component co ON psa.prPerPartId = co.id   \n" +
                "	LEFT OUTER JOIN rfq_assemblies rfa ON psa.prPerPartID = rfa.partID  \n" +
                "	INNER JOIN rfq_assemblies rfb ON psa.partId = rfb.partID  \n" +
                "	WHERE co.deletedAt IS NULL AND rfb.id = pAssemblyID  \n" +
                "	ORDER BY psa.prPerPartId;  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_CreatePartAssyBomRelationship` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreatePartAssyBomRelationship`(          \n" +
                "	IN pPartID INT,   \n" +
                "	IN pUserID INT  \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE subAssyType INT(11);          \n" +
                "	SET subAssyType = 3;          \n" +
                "  \n" +
                "	START TRANSACTION;          \n" +
                "  \n" +
                "		DELETE FROM part_sub_assy_relationship WHERE partId=pPartID;  \n" +
                "		INSERT INTO part_sub_assy_relationship(partId, prPerPartId, LEVEL, lineItemId, prPartLineItemID, createdAt, createdBy)  \n" +
                "  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "		(  \n" +
                "		  SELECT  rl.Id  AS lineItemId, 0  AS parentLineItemId, c.Id AS mfgPNID, 1 AS LEVEL, c.Id partId, c.Id AS ParentPartId  \n" +
                "		  FROM rfq_lineitems rl , rfq_lineitems_alternatepart rla, component c   \n" +
                "		  WHERE  rl.Id = rla.rfqLineItemsID AND rla.mfgPNID = c.Id  AND rl.partId=pPartID  AND  c.category=subAssyType  \n" +
                "		  AND c.deletedAt IS NULL AND rl.deletedAT IS NULL AND rla.deletedAt IS NULL  \n" +
                "  \n" +
                "		  UNION ALL  \n" +
                "		  SELECT rlp.Id AS lineItemId, parent.lineItemId  AS parentLineItemId, cp.Id AS mfgPNID, (parent.LEVEL +1)  AS LEVEL, cp.Id AS partId, parent.partId ParentPartId  \n" +
                "		  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte parent   \n" +
                "		  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlp.partId = parent.partId AND  cp.category=subAssyType  \n" +
                "		  AND cp.deletedAt IS NULL AND rlp.deletedAT IS NULL AND rlap.deletedAt IS NULL  \n" +
                "		)  \n" +
                "  \n" +
                "		SELECT pPartID AS PartId, pPartID prPerPartId, 0 LEVEL,  NULL lineItemId, NULL prParentLineItemID,  NOW(), pUserID  \n" +
                "		UNION ALL  \n" +
                "		SELECT pPartID AS partId, IF(parentPartId = 0, NULL,parentPartId) , LEVEL, IF(lineItemId = 0,NULL,lineItemId) , IF(parentLineItemid = 0, NULL,parentLineItemid),  NOW(), pUserID FROM cte;  \n" +
                "	COMMIT;          \n" +
                "  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                        \n" +
                "	IN pPartID INT(11)                   \n" +
                "	)  \n" +
                "BEGIN                            \n" +
                "	DECLARE pValidCount INT(11);                        \n" +
                "	DECLARE pInValidCount INT(11);                        \n" +
                "	DECLARE pTotalCount INT(11);                    \n" +
                "	DECLARE pProgress INT(11);                        \n" +
                "	DECLARE pPartID INT(11);        \n" +
                "	SET pProgress = 0;                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "  \n" +
                "	SELECT  p.rfqLineItemsID,                   \n" +
                "	CASE                   \n" +
                "		WHEN                   \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                   \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND              \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND             \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND                   \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                   \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND                   \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND                   \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND                   \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND                   \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND                   \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                   \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND                   \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND                   \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                   \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND                  \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND            \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND        \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND        \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND        \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND          \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1  AND      \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND          \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND    \n" +
                "			IFNULL(p.pickupPadRequiredStep,0) = 1                               \n" +
                "		THEN 1                  \n" +
                "		ELSE 0                  \n" +
                "	END AS ProgressCount                  \n" +
                "	FROM rfq_lineitems l                  \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                  \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;                  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                  \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;                  \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                  \n" +
                "		SET pProgress = 0;                  \n" +
                "	ELSE                   \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	SELECT pProgress;                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                        \n" +
                "  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_UpdatePartInternalVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePartInternalVersion`(  \n" +
                "    IN pPartId INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE subAssyType INT(11);  \n" +
                "	SET  subAssyType = 3;  \n" +
                "  \n" +
                "	UPDATE component  \n" +
                "	SET liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1))  \n" +
                "	WHERE id IN(  \n" +
                "	WITH RECURSIVE cte AS  \n" +
                "	(  \n" +
                "	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM component c   \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
                "  \n" +
                "	  UNION ALL  \n" +
                "	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child   \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
                "	)  \n" +
                "	SELECT DISTINCT partId FROM cte);  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAllParentPartInternalVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAllParentPartInternalVersion`(  \n" +
                "    IN pPartId INT(11),   \n" +
                "    IN pTableName VARCHAR(50),  \n" +
                "    IN pUpdatedBy VARCHAR(255)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE lastAssemblyHistoryId INT(11);  \n" +
                "	DECLARE subAssyType INT(11);  \n" +
                "	DECLARE parentPartsCount INT;  \n" +
                "	DECLARE currentPartId INT(11);  \n" +
                "	DECLARE parentPartId INT(11);  \n" +
                "	DECLARE description VARCHAR(200);  \n" +
                "	DECLARE parentPartLiveInternalVersion INT(11);  \n" +
                "	DECLARE parentMfgPN VARCHAR(100);  \n" +
                "	DECLARE parentLineItemId INT(11);  \n" +
                "	DECLARE currentPartLiveInternalVersion INT(11);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "  \n" +
                "	SET  subAssyType = 3;  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TempAllParentParts AS        \n" +
                "  \n" +
                "	WITH RECURSIVE cte AS  \n" +
                "	(  \n" +
                "	  SELECT  0 AS rfqlineItemId, c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM component c   \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
                "  \n" +
                "	  UNION ALL  \n" +
                "	  SELECT rlp.id AS rfqlineItemId, rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child   \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
                "	)  \n" +
                "	SELECT  rfqlineItemId, partId, childPartId, liveinternalversion FROM cte;  \n" +
                "all_parent_part_loop: LOOP  \n" +
                "	SELECT COUNT(1) INTO parentPartsCount FROM TempAllParentParts;  \n" +
                "	IF parentPartsCount = 0 THEN                \n" +
                "		LEAVE all_parent_part_loop;              \n" +
                "	END IF;     \n" +
                "  \n" +
                "	SELECT rfqlineItemId, partId, childPartId, liveInternalVersion INTO parentLineItemId, parentPartId, currentPartId, parentPartLiveInternalVersion  FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "	IF currentPartId = parentPartId AND currentPartId = pPartId THEN  \n" +
                "		DELETE FROM TempAllParentParts LIMIT 1;  \n" +
                "		ITERATE  all_parent_part_loop;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT id INTO lastAssemblyHistoryId FROM rfq_assembly_history WHERE partId = currentPartId ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "	SET description = CONCAT(pCompanyName,'-',CAST((parentPartLiveInternalVersion-1) AS CHAR), ' to change ', pCompanyName,'-',CAST(parentPartLiveInternalVersion AS CHAR));  \n" +
                "  \n" +
                "	SELECT mfgPN, liveinternalversion  INTO parentMfgPN, currentPartLiveInternalVersion FROM component WHERE id = currentPartId;  \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history             \n" +
                "	 (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "	 oldValue,newValue,changeVersion, description, refInternalHistoryID,  \n" +
                "	 createdAt, createdBy)             \n" +
                "	VALUES 	(pTableName, parentLineItemId, parentLineItemId, NULL, parentPartId, \"MFG PN\",            \n" +
                "	 CAST(parentMfgPN AS CHAR), CAST(parentMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(currentPartLiveInternalVersion AS CHAR)), description, lastAssemblyHistoryId,  \n" +
                "	 SYSDATE(),pUpdatedBy);  \n" +
                "	 DELETE FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "	END LOOP all_parent_part_loop;  \n" +
                "	DROP TEMPORARY TABLE TempAllParentParts;	  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMAssyHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMAssyHistory`(        \n" +
                "	IN pPartID INT(11),        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                "	)  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS       \n" +
                "	SELECT 	h.id,      \n" +
                "		h.tableName,      \n" +
                "		h.rfqLineItemID,      \n" +
                "		h.rfqAssyID,      \n" +
                "		h.columnName,      \n" +
                "		h.oldValue,      \n" +
                "		h.newValue,      \n" +
                "		h.changeVersion,      \n" +
                "		h.createdAt,      \n" +
                "		h.description,  \n" +
                "		CONCAT(u.firstName ,\" \", u.lastName) AS CreatedUser,      \n" +
                "		i.lineID,      \n" +
                "		a.assemblyNumber,      \n" +
                "		a.assemblyRev,      \n" +
                "		a.assemblyDescription,      \n" +
                "		a.assemblyVersion,      \n" +
                "		c.liveInternalVersion  \n" +
                "	FROM rfq_assembly_history h      \n" +
                "	INNER JOIN component c ON c.id = h.partId  \n" +
                "	LEFT OUTER JOIN rfq_lineitems i ON i.id = h.rfqLineItemID      \n" +
                "	LEFT OUTER JOIN rfq_assemblies a ON a.id = h.rfqAssyID      \n" +
                "	LEFT OUTER JOIN users u ON u.id = h.createdBy      \n" +
                "	WHERE h.partID = pPartID;      \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT(11);       \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);            \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);            \n" +
                "	DECLARE newPartTypeName VARCHAR(50);            \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);            \n" +
                "	DECLARE oldUOM VARCHAR(50);            \n" +
                "	DECLARE newUOM VARCHAR(50);            \n" +
                "	DECLARE pCompanyName VARCHAR(100);          \n" +
                "	DECLARE pRfqAssID INT(11);         \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(id,0) INTO pRfqAssID FROM rfq_assemblies WHERE partID = New.partID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0),IFNULL(id,0) INTO pLiveInternalVersion, pRfqAssID FROM component WHERE id = New.partID;   \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",            \n" +
                "			CAST(OLD.lineID AS CHAR), CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN        \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",            \n" +
                "			CAST(OLD.qpa AS CHAR), CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",            \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN        \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",            \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",            \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Install\",            \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Buy\",            \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",            \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN        \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",            \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN        \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",            \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",            \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN             \n" +
                "		IF OLD.partclassID != 0            \n" +
                "			THEN             \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;            \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;            \n" +
                "			ELSE             \n" +
                "				SET oldPartTypeName = '';            \n" +
                "				SET oldMountingTypeName = '';            \n" +
                "		END IF;            \n" +
                "		IF NEW.partclassID != 0            \n" +
                "			THEN             \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;            \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;            \n" +
                "			ELSE             \n" +
                "				SET newPartTypeName = '';            \n" +
                "				SET newMountingTypeName = '';            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",            \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),            \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),            \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",            \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead\",            \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;		  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",            \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",            \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN             \n" +
                "		IF OLD.uomID IS NOT NULL            \n" +
                "			THEN             \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;            \n" +
                "			ELSE             \n" +
                "				SET oldUOM = '';            \n" +
                "		END IF;            \n" +
                "		IF NEW.uomID IS NOT NULL            \n" +
                "			THEN             \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;            \n" +
                "			ELSE             \n" +
                "				SET newUOM = '';            \n" +
                "		END IF;            \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",            \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",            \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",            \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history             \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "			oldValue,newValue,changeVersion,            \n" +
                "			createdAt,createdBy)             \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",            \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "			SYSDATE(),NEW.updatedBy);            \n" +
                "	END IF;     \n" +
                "  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	  \n" +
                "    	DECLARE pLiveInternalVersion INT(11);               \n" +
                "	DECLARE pRfqAssID INT(11);       \n" +
                "	DECLARE pPartID INT(11);              \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);              \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);              \n" +
                "	DECLARE pCompanyName VARCHAR(100);               \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);      \n" +
                "  \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;         \n" +
                "	SELECT IFNULL(id,0) INTO  pRfqAssID FROM rfq_assemblies WHERE partID = pPartID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0),IFNULL(id,0) INTO pLiveInternalVersion, pRfqAssID FROM component WHERE id = pPartID;    \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';              \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN         \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor\",              \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor PN\",              \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",              \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;	              \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",              \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN          \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN      \n" +
                "			SET pDeleteMessage =\"MFG PN \";         \n" +
                "		ELSE      \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);        \n" +
                "		END IF;      \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",              \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.deletedBy);              \n" +
                "	END IF;	              \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN               \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL              \n" +
                "			THEN               \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;              \n" +
                "			ELSE               \n" +
                "				SET oldRfqAssyBom = '';              \n" +
                "		END IF;              \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL              \n" +
                "			THEN               \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;              \n" +
                "			ELSE               \n" +
                "				SET newRfqAssyBom = '';              \n" +
                "		END IF;        \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",              \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.updatedBy);              \n" +
                "		END IF;      \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN      \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",              \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",              \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` AFTER UPDATE ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	DECLARE pLiveInternalVersion INT(11);       \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = NEW.partID;      \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';      \n" +
                "  \n" +
                "	IF IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0) THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",      \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.updatedBy);      \n" +
                "  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);  \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +


                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (217,'2.00','V1','Changes for recursive sub assembly and internal part recursive history manage - Shailesh '," + userid + ");"
            );
            break;
        case 217:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2019  *********************************** */

                /* **************************** Add Script Version -> 14-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (218,'2.00','V1',' RFQ Assembly history table remove RFQ assembly id reference  - Jignesh K '," + userid + ");"
            );
            break
        case 218:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2019  *********************************** */
                "CREATE TABLE `component_functionaltypepart` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `partTypeID` int(11) NOT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `refComponentID` int(11) NOT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `UK_component_functionaltypepart` (`refComponentID`,`partTypeID`,`deletedAt`),  \n" +
                "  KEY `FK_component_functionaltypepart_partTypeID` (`partTypeID`),  \n" +
                "  KEY `FK_component_functionaltypepart_refComponentID` (`refComponentID`),  \n" +
                "  CONSTRAINT `FK_component_functionaltypepart_partTypeID` FOREIGN KEY (`partTypeID`) REFERENCES `rfq_parttypemst` (`id`),  \n" +
                "  CONSTRAINT `FK_component_functionaltypepart_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
                ");  \n" +
                "CREATE TABLE `component_mountingtypepart` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `partTypeID` int(11) NOT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `refComponentID` int(11) NOT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `UK_component_mountingtypepart` (`refComponentID`,`partTypeID`,`deletedAt`),  \n" +
                "  KEY `FK_component_mountingtypepart_partTypeID` (`partTypeID`),  \n" +
                "  KEY `FK_component_mountingtypepart_refComponentID` (`refComponentID`),  \n" +
                "  CONSTRAINT `FK_component_mountingtypepart_partTypeID` FOREIGN KEY (`partTypeID`) REFERENCES `rfq_mountingtypemst` (`id`),  \n" +
                "  CONSTRAINT `FK_component_mountingtypepart_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
                ");  \n" +
                "ALTER TABLE `component` ADD COLUMN `shelfListDaysThresholdPercentage` INT(11) NULL;  \n" +
                /* **************************** Add Script Version -> 14-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (219,'2.00','V1','create component_functionaltypepart component_mountingtypepart tables - Ashish'," + userid + ");"
            );
            break;

        case 219:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAll_Compoent` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAll_Compoent`()  \n" +
                "BEGIN      \n" +
                "    DECLARE parentPartsCount INT;  \n" +
                "    DECLARE cid INT(11);  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TempAllParts AS          \n" +
                "		SELECT  id FROM component WHERE category= 3;  \n" +
                "	all_part_loop: LOOP    \n" +
                "		SELECT COUNT(1) INTO parentPartsCount FROM TempAllParts;    \n" +
                "		IF parentPartsCount = 0 THEN                  \n" +
                "			LEAVE all_part_loop;                \n" +
                "		END IF;       \n" +
                "  \n" +
                "	SELECT id INTO cid FROM TempAllParts LIMIT 1;  \n" +
                "  \n" +
                "		CALL Sproc_CreatePartAssyBomRelationship(cid, 1);  \n" +
                "		 DELETE FROM TempAllParts LIMIT 1;    \n" +
                "  \n" +
                "		END LOOP all_part_loop;    \n" +
                "		DROP TEMPORARY TABLE TempAllParts;	  \n" +
                "	END;  \n" +


                "CALL Sproc_UpdateAll_Compoent();  \n" +


                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                 \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias_rev_pn\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_goodbadpartmapping\" else \"\" end as msg FROM component_goodbadpartmapping WHERE deletedAt IS NULL AND (goodComponentID IN(',IDs,') OR badComponentID IN(',IDs,')) LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_requiremapping_parts\" else \"\" end as msg FROM component_requiremapping_parts WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "			) q');                                                            \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempComponent)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                            \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "					EXECUTE stmt1;                                                            \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');  \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "					EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;     \n" +
                "  \n" +
                "			COMMIT;                                                           \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempComponent;                                                            \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE tempComponent;        \n" +
                "        END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` AFTER INSERT ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	DECLARE pLiveInternalVersion INT(11);           \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = NEW.partID;          \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';      \n" +
                "  \n" +
                "	IF NEW.description IS NOT NULL AND pLiveInternalVersion > 0 THEN       \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,createdBy)       \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",      \n" +
                "			\"\", IFNULL(NEW.description,\"\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			SYSDATE(),NEW.createdBy);      \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);    \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	    \n" +
                "	DECLARE pLiveInternalVersion INT(11);           \n" +
                "	DECLARE pRfqAssID INT(11);        \n" +
                "	DECLARE pPartID INT(11);           \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);          \n" +
                "	DECLARE pCompanyName VARCHAR(100);           \n" +
                "	SET pIsUpdateRequired = FALSE;    \n" +
                "  \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;           \n" +
                "	SELECT IFNULL(id,0) INTO  pRfqAssID FROM rfq_assemblies WHERE partID = pPartID;    \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;      \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN           \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,           \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor\",          \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;             \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor PN\",          \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN   \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",          \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",              \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",          \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;		          \n" +
                "  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;             \n" +
                "			IF NEW.rfqAssyBomID IS NOT NULL          \n" +
                "				THEN           \n" +
                "					SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;          \n" +
                "				ELSE           \n" +
                "					SET newRfqAssyBom = '';          \n" +
                "			END IF;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",          \n" +
                "				NULL,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;             \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",          \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history           \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "				oldValue,newValue,changeVersion,          \n" +
                "				createdAt,createdBy)           \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",          \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "				SYSDATE(),NEW.createdBy);          \n" +
                "		END IF;          \n" +
                "		IF pIsUpdateRequired = TRUE THEN    \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN              \n" +
                "	DECLARE pIsUpdateRequired BOOL;    \n" +
                "	DECLARE pLiveInternalVersion INT(11);               \n" +
                "	DECLARE newPartTypeName VARCHAR(50);              \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);              \n" +
                "	DECLARE newUOM VARCHAR(50);              \n" +
                "	DECLARE pCompanyName VARCHAR(100);       \n" +
                "	DECLARE pRfqAssID INT(11);        \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;    \n" +
                "  \n" +
                "	SELECT IFNULL(id,0) INTO pRfqAssID FROM rfq_assemblies WHERE partID = New.partID;    \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;    \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;              \n" +
                "	IF pLiveInternalVersion > 0 THEN               \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Item\",              \n" +
                "				NULL, CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;	              \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;           \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"QPA\",              \n" +
                "				NULL, CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN   \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"REF DES\",              \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"CPN\",              \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.level IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Level\",              \n" +
                "				NULL, CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Install\",              \n" +
                "				NULL, CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Buy\",              \n" +
                "				NULL, CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.isActive IS NOT NULL THEN    \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Active\",              \n" +
                "				NULL, CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.leadQty IS NOT NULL THEN     \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead Qty\",              \n" +
                "				NULL, CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.attritionRate IS NOT NULL THEN   \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Overage %\",              \n" +
                "				NULL, CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Rev\",              \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.partclassID IS NOT NULL THEN    \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			IF NEW.partclassID != 0              \n" +
                "				THEN               \n" +
                "					SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;              \n" +
                "					SELECT `name` INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;              \n" +
                "				ELSE               \n" +
                "					SET newPartTypeName = '';              \n" +
                "					SET newMountingTypeName = '';              \n" +
                "			END IF;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Mounting Type\",              \n" +
                "				NULL,              \n" +
                "				CONCAT(newPartTypeName,' | ', newMountingTypeName),              \n" +
                "				CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Comment\",              \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;           \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead\",              \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN     \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN QTY\",              \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN DES\",              \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			IF NEW.uomID IS NOT NULL              \n" +
                "				THEN               \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;              \n" +
                "				ELSE               \n" +
                "					SET newUOM = '';              \n" +
                "			END IF;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"UOM\",              \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.refRFQLineItemID IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Parent Line\",              \n" +
                "				NULL, CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN     \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Part Desc\",              \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;             \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DNP Qty Buy\",              \n" +
                "				NULL, CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN    \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);    \n" +
                "		END IF;   \n" +
                "  \n" +
                "	END IF;              \n" +
                "  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` AFTER UPDATE ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	DECLARE pLiveInternalVersion INT(11);         \n" +
                "	DECLARE pCompanyName VARCHAR(100);         \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = NEW.partID;        \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';        \n" +
                "  \n" +
                "	IF IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0) THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",        \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.updatedBy);        \n" +
                "  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);    \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN    \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	    \n" +
                "    	DECLARE pLiveInternalVersion INT(11);                 \n" +
                "	DECLARE pRfqAssID INT(11);         \n" +
                "	DECLARE pPartID INT(11);                \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);                \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);                \n" +
                "	DECLARE pCompanyName VARCHAR(100);                 \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);        \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(partID,0) INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;           \n" +
                "	SELECT IFNULL(id,0) INTO  pRfqAssID FROM rfq_assemblies WHERE partID = pPartID;    \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;      \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor\",                \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor PN\",                \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",                \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;	                \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",                \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN            \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN        \n" +
                "			SET pDeleteMessage =\"MFG PN \";           \n" +
                "		ELSE        \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);          \n" +
                "		END IF;        \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",                \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.deletedBy);                \n" +
                "	END IF;	                \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN                 \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL                \n" +
                "			THEN                 \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;                \n" +
                "			ELSE                 \n" +
                "				SET oldRfqAssyBom = '';                \n" +
                "		END IF;                \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL                \n" +
                "			THEN                 \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;                \n" +
                "			ELSE                 \n" +
                "				SET newRfqAssyBom = '';                \n" +
                "		END IF;          \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN                \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",                \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.updatedBy);                \n" +
                "		END IF;        \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN        \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",                \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "	IF pIsUpdateRequired = TRUE THEN    \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "END;  \n" +

                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN              \n" +
                "	DECLARE pIsUpdateRequired BOOL;    \n" +
                "	DECLARE pLiveInternalVersion INT(11);         \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);              \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);              \n" +
                "	DECLARE newPartTypeName VARCHAR(50);              \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);              \n" +
                "	DECLARE oldUOM VARCHAR(50);              \n" +
                "	DECLARE newUOM VARCHAR(50);              \n" +
                "	DECLARE pCompanyName VARCHAR(100);            \n" +
                "	DECLARE pRfqAssID INT(11);           \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;    \n" +
                "  \n" +
                "	SELECT IFNULL(id,0) INTO pRfqAssID FROM rfq_assemblies WHERE partID = New.partID;    \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;     \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';            \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN    \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",              \n" +
                "			CAST(OLD.lineID AS CHAR), CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN          \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",              \n" +
                "			CAST(OLD.qpa AS CHAR), CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN         \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",              \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",              \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",              \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN        \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Install\",              \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Buy\",              \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN         \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",              \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",              \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",              \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",              \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN               \n" +
                "		IF OLD.partclassID != 0              \n" +
                "			THEN               \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;              \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;              \n" +
                "			ELSE               \n" +
                "				SET oldPartTypeName = '';              \n" +
                "				SET oldMountingTypeName = '';              \n" +
                "		END IF;              \n" +
                "		IF NEW.partclassID != 0              \n" +
                "			THEN               \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;              \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;              \n" +
                "			ELSE               \n" +
                "				SET newPartTypeName = '';              \n" +
                "				SET newMountingTypeName = '';              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",              \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),              \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),              \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",              \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead\",              \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;		    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",              \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",              \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN               \n" +
                "		IF OLD.uomID IS NOT NULL              \n" +
                "			THEN               \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;              \n" +
                "			ELSE               \n" +
                "				SET oldUOM = '';              \n" +
                "		END IF;              \n" +
                "		IF NEW.uomID IS NOT NULL              \n" +
                "			THEN               \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;              \n" +
                "			ELSE               \n" +
                "				SET newUOM = '';              \n" +
                "		END IF;              \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",              \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",              \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",              \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		INSERT INTO rfq_assembly_history               \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "			oldValue,newValue,changeVersion,              \n" +
                "			createdAt,createdBy)               \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",              \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "			SYSDATE(),NEW.updatedBy);              \n" +
                "	END IF;       \n" +
                "  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN    \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (220,'2.00','V1','Changes for recursive sub assembly and internal part recursive history manage-2 - Shailesh'," + userid + ");"
            );
            break;
        case 220:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2019  *********************************** */
                "UPDATE rfq_lineitems SET lineID = 1 WHERE CONCAT('',lineID * 1) != lineID;  \n" +
                "ALTER TABLE `rfq_lineitems` MODIFY COLUMN `lineID` DECIMAL(16,8);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(    \n" +
                "	IN pPartID INT,    \n" +
                "	IN pUserID INT      \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE totalCount INT DEFAULT 0;        \n" +
                "	DECLARE currIndex INT DEFAULT 0;        \n" +
                "	DECLARE prevLineID INT;        \n" +
                "	DECLARE currCustPNID INT;        \n" +
                "	DECLARE currMFGPNID INT;    \n" +
                "	DECLARE currLineID INT;    \n" +
                "	DECLARE mountingTypeID INT;    \n" +
                "	DECLARE functionalCategoryID INT;    \n" +
                "	DECLARE rohsStatusID INT;    \n" +
                "	DECLARE categoryID INT;    \n" +
                "	DECLARE partTypeID INT;    \n" +
                "	DECLARE statusID INT;    \n" +
                "	DECLARE mfgPNID INT;       \n" +
                "	DECLARE currCustRev VARCHAR(10);        \n" +
                "	DECLARE currCustPN VARCHAR(500);    \n" +
                "	DECLARE mfgPN VARCHAR(500);    \n" +
                "	DECLARE mfgPID VARCHAR(500);        \n" +
                "	DECLARE maxDisplayOrder DECIMAL;    \n" +
                "  \n" +
                "	SET categoryID = 2;    \n" +
                "	SET partTypeID = 2;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (    \n" +
                "	SELECT     \n" +
                "		rla.id,    \n" +
                "		rla.rfqLineItemsID,    \n" +
                "		rl.custPNID,     \n" +
                "		rl.custPN,    \n" +
                "		rl.customerRev,    \n" +
                "		rla.mfgPNID,     \n" +
                "		c.RoHSStatusID    \n" +
                "	FROM rfq_lineitems_alternatepart rla    \n" +
                "	LEFT JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id     \n" +
                "	LEFT JOIN component c ON c.id = rla.mfgPNID    \n" +
                "	WHERE 	rl.custPN IS NOT NULL AND rla.mfgPNID IS NOT NULL     \n" +
                "		AND rl.partID = pPartID     \n" +
                "		AND rl.isDeleted = 0     \n" +
                "		AND rl.duplicateCPNStep = 1 );    		    \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;        \n" +
                "	SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;    \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;    \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;    \n" +
                "	SELECT gencCategoryID INTO statusID FROM genericcategory WHERE categoryType = 'Part Status' AND gencCategoryName = 'Active';    \n" +
                "  \n" +
                "	IF functionalCategoryID IS NULL THEN     \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;    \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy)    \n" +
                "				VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID);    \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF mountingTypeID IS NULL THEN     \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy)VALUES('CPN', 1, pUserID);    \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	WHILE currIndex < totalCount DO        \n" +
                "		SET currCustPN = NULL;      \n" +
                "		SET currCustRev = NULL;      \n" +
                "  \n" +
                "		SELECT 	a.custPN, 	a.custPNID,     \n" +
                "			a.customerRev, 	a.mfgPNID,     \n" +
                "			a.rfqLineItemsID    \n" +
                "		INTO 	currCustPN,	currCustPNID,    \n" +
                "			currCustRev,	currMFGPNID,    \n" +
                "			currLineID     \n" +
                "		FROM 	temp_component_cust_alias_rev a LIMIT currIndex, 1;        \n" +
                "  \n" +
                "		SET currIndex = currIndex + 1;       \n" +
                "  \n" +
                "		IF (currCustPNID IS NOT NULL) THEN    \n" +
                "			IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN    \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (currCustPNID , currMFGPNID, pUserID);     \n" +
                "				IF (prevLineID IS NULL OR  prevLineID != currLineID) THEN    \n" +
                "					UPDATE component SET liveInternalVersion = (IFNULL(liveInternalVersion,0) + 1) WHERE id = currCustPNID;    \n" +
                "				END IF;    \n" +
                "			END IF;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (currCustPNID IS NULL) THEN    \n" +
                "			IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN    \n" +
                "				SET rohsStatusID = 0;    \n" +
                "			ELSE     \n" +
                "				SET rohsStatusID = 1;	    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);    \n" +
                "			SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = @mfgCodeID;    \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);    \n" +
                "  \n" +
                "			SELECT id INTO mfgPNID FROM component WHERE PIDCode = mfgPID AND isDeleted = 0;    \n" +
                "  \n" +
                "			IF mfgPNID IS NULL THEN     \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,     \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,     \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,    \n" +
                "							createdAt,liveInternalVersion, partType)     \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,    \n" +
                "							1,1,@mfgCodeID,pUserID,    \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,    \n" +
                "							SYSDATE(), 0, partTypeID);    \n" +
                "				SELECT LAST_INSERT_ID() INTO @maxPartId;    \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (@maxPartId , currMFGPNID, pUserID);    \n" +
                "				UPDATE rfq_lineitems SET custPNID = @maxPartId WHERE id = currLineID;    \n" +
                "  \n" +
                "			ELSE     \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (mfgPNID , currMFGPNID, pUserID);    \n" +
                "				IF (prevLineID IS NULL OR  prevLineID  != currLineID) THEN    \n" +
                "					UPDATE component SET liveInternalVersion = (IFNULL(liveInternalVersion,0) + 1) WHERE id = mfgPNID;    \n" +
                "				END IF;    \n" +
                "				UPDATE rfq_lineitems SET custPNID = mfgPNID WHERE id = currLineID;    \n" +
                "			END IF;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		SET prevLineID = currLineID;    \n" +
                "  \n" +
                "	END WHILE;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 15-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (221,'2.00','V1',' Change item field string to number and resolved component entry issue for CPN - Jignesh K '," + userid + ");"
            );
            break;
        case 221:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                        \n" +
                "	IN ppageIndex INT(11),                        \n" +
                "	IN precordPerPage INT(11),                        \n" +
                "	IN pOrderBy VARCHAR(255),	                        \n" +
                "        IN pWhereClause VARCHAR(16383)                            \n" +
                "    )  \n" +
                "BEGIN                        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                        \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                        \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.price, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,          \n" +
                "			css.binID,  \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,                    \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,                    \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,          \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,          \n" +
                "			(SELECT CONCAT('(', cus.customerCode, ')',cus.companyName) FROM customers cus WHERE cus.id=css.customerID AND cus.deletedAt IS NULL LIMIT 1) customer,          \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,          \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,          \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,          \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,          \n" +
                "			(SELECT mcm.mfgCode FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,          \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,          \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray, css.updatedAt, css.nickName                         \n" +
                "               FROM component_sid_stock css                        \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                       \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                        \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                     \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                      \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "	ELSE                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                        \n" +
                "		SET pWhereClause = '1=1' ;                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
                "	ELSE	                        \n" +
                "		SET rowNumWhere = '';                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                        \n" +
                "	EXECUTE query1;                        \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 15-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (222,'2.00','V1',' Sproc_GetReceivingMaterial - FENIL '," + userid + ");"
            );
            break;
        case 222:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                          \n" +
                "	IN pPartID INT(11)                     \n" +
                "	)  \n" +
                "BEGIN                              \n" +
                "	DECLARE pValidCount INT(11);                          \n" +
                "	DECLARE pInValidCount INT(11);                          \n" +
                "	DECLARE pTotalCount INT(11);                      \n" +
                "	DECLARE pProgress INT(11);                          \n" +
                "	SET pProgress = 0;                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
                "	SELECT  p.rfqLineItemsID,                     \n" +
                "	CASE                     \n" +
                "		WHEN                     \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                     \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND                \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND               \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND                     \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                     \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND                     \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND                     \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND                     \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND                     \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND                     \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                     \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND                     \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND                     \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                     \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND                    \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND              \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND          \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND          \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND          \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND            \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1   AND        \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND            \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND      \n" +
                "			IFNULL(p.pickupPadRequiredStep,0) = 1                                 \n" +
                "		THEN 1                    \n" +
                "		ELSE 0                    \n" +
                "	END AS ProgressCount                    \n" +
                "	FROM rfq_lineitems l                    \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                    \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                    \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;                    \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                    \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;   \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                    \n" +
                "		SET pProgress = 0;                    \n" +
                "	ELSE                     \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	SELECT pProgress;                      \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (223,'2.00','V1',' Resolved BOm progress issue - Jignesh K '," + userid + ");"
            );
            break;
        case 223:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2019  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD quoteQty INT NULL;  \n" +
                "SET GLOBAL log_bin_trust_function_creators = 1;  \n" +
                "DROP FUNCTION IF EXISTS `fun_lastPricingStatus` ;  \n" +
                "CREATE FUNCTION `fun_lastPricingStatus`(    \n" +
                "rfqAssyID INT(11),  \n" +
                "puserID INT(11)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where `status` is NOT NULL and rfqAssyID=\", rfqAssyID,\" and userid=\", puserID )  INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getTotalQtyDetails` ;  \n" +
                "CREATE FUNCTION `fun_getTotalQtyDetails`(    \n" +
                "rfqAssyID INT(11)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.unitOfTime,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                                                  \n" +
                "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                                                  \n" +
                "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID)  INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getTotalPrice` ;  \n" +
                "CREATE FUNCTION `fun_getTotalPrice`(    \n" +
                "	rfqAssyID INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT rq.qtyID,rl.requestQty,                                           \n" +
                "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,                                           \n" +
                "						(SUM(rq.unitPrice)) AS TotalUnitPrice,                                          \n" +
                "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice,                              \n" +
                "						SUM(((IF((CEIL((rl.requestQty*IFNULL(ra.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                                               \n" +
                "						(CEIL((rl.requestQty*IFNULL(ra.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                                               \n" +
                "						IFNULL(rq.min,0)))-(rl.requestQty*IFNULL(ra.qpa,1)))*(IFNULL(rq.unitPrice,0))) TotalExcessPrice                                \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                              \n" +
                "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                                \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id                                                  \n" +
                "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\")  INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getCustomLines` ;  \n" +
                "CREATE FUNCTION `fun_getCustomLines`(    \n" +
                "rfqAssyID INT(11)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT (SELECT c.iscustom FROM rfq_consolidated_mfgpn_lineitem_alternate ra JOIN component c ON ra.mfgpnid=c.id WHERE c.iscustom=1 AND ra.consolidateid=rl.id AND rl.isdeleted=0 LIMIT 1)     \n" +
                "                     AS custom,rl.id FROM rfq_consolidated_mfgpn_lineitem rl where rl.isdeleted=0 and rl.rfqAssyID=\",rfqAssyID)  INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItems`(    \n" +
                "rfqAssyID INT(11),  \n" +
                "SQLString VARCHAR(16383)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(16383);  \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                  \n" +
                "					SELECT                                                   \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,                                                    \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                                \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                  \n" +
                "					(SELECT                                               \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)               \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                        \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                               \n" +
                "component c ON rla.mfgpnid=c.id                                               \n" +
                "LEFT JOIN mfgcodemst mg ON                                                \n" +
                "c.mfgCodeID=mg.id               \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0              \n" +
                " LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                  \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0              \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0              \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0              \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                  \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                                   \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                               \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                      \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0             \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                                    \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                                   \n" +
                "					SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID')  INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                                  \n" +
                "	IN ppageIndex INT(11),                                                  \n" +
                "	IN precordPerPage INT(11),                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                  \n" +
                "	IN rfqAssyID INT(11),                                                  \n" +
                "	IN puserID INT (11)                                                  \n" +
                "    )  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                  \n" +
                "	    SET @SQLString = NULL;                                                  \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                      \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "		ELSE                                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                                   \n" +
                "		END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                  \n" +
                "			SET pWhereClause = '1=1' ;                                                  \n" +
                "		END IF;	                                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "		ELSE	                                                  \n" +
                "			SET rowNumWhere = '';                                                  \n" +
                "		END IF;	                                                  \n" +
                "		SELECT                                                  \n" +
                "                     GROUP_CONCAT(DISTINCT                                                  \n" +
                "				CONCAT(                                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                                  \n" +
                "						ra.requestQty,                                                  \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                  \n" +
                "						ra.requestQty,''''                                                  \n" +
                "					)                                                  \n" +
                "					) INTO @SQLString                                                  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                  \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;   \n" +
                "  \n" +
                "				SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString));                                                   \n" +
                "  \n" +
                "  \n" +
                "                         PREPARE stmt FROM @SQLStatement;                                          \n" +
                "			EXECUTE stmt;	  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                  \n" +
                "			EXECUTE query1;                                                  \n" +
                "			DEALLOCATE PREPARE query1;                                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                  \n" +
                "			EXECUTE query2;                                                  \n" +
                "			DEALLOCATE PREPARE query2;                                                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                  \n" +
                "			EXECUTE query3;                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                  \n" +
                "			EXECUTE query4;                                                  \n" +
                "			DEALLOCATE PREPARE query4;                                              \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                      \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                          \n" +
                "			EXECUTE query5;                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                          \n" +
                "			EXECUTE query6;                                                          \n" +
                "			DEALLOCATE PREPARE query6;       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                          \n" +
                "			EXECUTE query7;                                                          \n" +
                "			DEALLOCATE PREPARE query7;         \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                    \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQUnQuotedLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQUnQuotedLineItems`(                                          \n" +
                "	IN ppageIndex INT(11),                                          \n" +
                "	IN precordPerPage INT(11),                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN rfqAssyID INT(11),                                          \n" +
                "	IN puserID INT (11)                                    \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                          \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	    SET @SQLString = NULL;                                            \n" +
                "	    SET @HavingClause = NULL;                                \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "		ELSE                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                           \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                          \n" +
                "			SET pWhereClause = '1=1' ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "		ELSE	                                          \n" +
                "			SET rowNumWhere = '';                                          \n" +
                "		END IF;	                                          \n" +
                "		SELECT                                          \n" +
                "                      GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''', rq.finalPrice, null))) AS ''',                                          \n" +
                "						ra.requestQty,''''                                          \n" +
                "					)                                          \n" +
                "					),                                      \n" +
                "			GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                          \n" +
                "					) SEPARATOR ' OR '                                         \n" +
                "					)                                      \n" +
                "				INTO @SQLString, @HavingClause                                      \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                          \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                          \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                        \n" +
                "  \n" +
                "				SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString));                                        \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                               \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                               \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                                    \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                               \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                          \n" +
                "			EXECUTE stmt;	                                          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                          \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "			EXECUTE query1;                                          \n" +
                "			DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "			EXECUTE query2;                                          \n" +
                "			DEALLOCATE PREPARE query2;   \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                  \n" +
                "			EXECUTE query3;                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                          \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                  \n" +
                "			EXECUTE query4;                                                  \n" +
                "			DEALLOCATE PREPARE query4;                                              \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                     \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                          \n" +
                "			EXECUTE query5;                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                          \n" +
                "			EXECUTE query6;                                                          \n" +
                "			DEALLOCATE PREPARE query6;       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                          \n" +
                "			EXECUTE query7;                                                          \n" +
                "			DEALLOCATE PREPARE query7;         \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                               \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                          \n" +
                "	IN ppageIndex INT(11),                                          \n" +
                "	IN precordPerPage INT(11),                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereColumnName VARCHAR(255),                                    \n" +
                "	IN pWhereFilterValue VARCHAR(255),                                   \n" +
                "	IN pCustomWhere INT(11),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN rfqAssyID INT(11),                                          \n" +
                "	IN puserID INT (11)                                          \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "	    DECLARE pOffset INT(11);                                          \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "	    DECLARE defaultOrder INT(11);                        \n" +
                "	    SET defaultOrder = 0;                        \n" +
                "	    SET @PERString = NULL;                                \n" +
                "	    SET SESSION group_concat_max_len = 150000;                          \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "	    ELSE                                    \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                          \n" +
                "		IF(defaultOrder > 0) THEN                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                          \n" +
                "		ELSE                         \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                        \n" +
                "		END IF;	                         \n" +
                "	    END IF;                        \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                          \n" +
                "			SET pWhereClause = '1=1' ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "		ELSE	                                          \n" +
                "			SET rowNumWhere = '';                                          \n" +
                "		END IF;	                                          \n" +
                "		SELECT                                \n" +
                "			GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                          \n" +
                "						ra.requestQty,''''                                          \n" +
                "					))                              \n" +
                "					INTO @PERString                              \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                          \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                          \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                          \n" +
                "  \n" +
                "  \n" +
                "				SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@PERString));                                        \n" +
                "  \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                          \n" +
                "			EXECUTE stmt;	                             \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                        \n" +
                "			IF pCustomWhere IS NOT NULL THEN                               \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                        \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                          \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                          \n" +
                "				EXECUTE query_Temp;                               \n" +
                "				DEALLOCATE PREPARE query_Temp;                              \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                        \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                        \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                          \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                          \n" +
                "				EXECUTE query_Temp1;                                 \n" +
                "				DEALLOCATE PREPARE query_Temp1;                               \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                        \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                        \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                          \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                          \n" +
                "				EXECUTE query_Temp2;                                 \n" +
                "				DEALLOCATE PREPARE query_Temp2;                          \n" +
                "  \n" +
                "				# Concate                         \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                        \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                        \n" +
                "			ELSE                         \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidatetemp where \", pWhereClause );                                          \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "			END IF;                              \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                   \n" +
                "			EXECUTE query1;                                          \n" +
                "			DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                         \n" +
                "			EXECUTE query2;                                          \n" +
                "			DEALLOCATE PREPARE query2;                                          \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));                                          \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                          \n" +
                "			EXECUTE query3;                                          \n" +
                "			DEALLOCATE PREPARE query3;                                          \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                       \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                          \n" +
                "			EXECUTE query4;                                          \n" +
                "			DEALLOCATE PREPARE query4;                                      \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                      \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                          \n" +
                "			EXECUTE query5;                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                         \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                  \n" +
                "			EXECUTE query6;                                                  \n" +
                "			DEALLOCATE PREPARE query6;  \n" +
                "  \n" +
                "			SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                          \n" +
                "			EXECUTE query7;                                                          \n" +
                "			DEALLOCATE PREPARE query7;                                                          \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                               \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                            \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetExcessMaterialLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetExcessMaterialLineItems`(                                        \n" +
                "	IN ppageIndex INT(11),                                        \n" +
                "	IN precordPerPage INT(11),                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN rfqAssyID INT(11),                                        \n" +
                "	IN puserID INT (11)                                  \n" +
                "    )  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                        \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                    \n" +
                "	    SET @SQLString = NULL;                                   \n" +
                "	    SET @HavingClause = NULL;                                   \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                    \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "		ELSE                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                                         \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                        \n" +
                "			SET pWhereClause = '1=1' ;                                        \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "		ELSE	                                        \n" +
                "			SET rowNumWhere = '';                                        \n" +
                "		END IF;	                                        \n" +
                "		SELECT                                        \n" +
                "                      GROUP_CONCAT(DISTINCT                                        \n" +
                "				CONCAT(                                        \n" +
                "					'Max((IF(ra.requestQty = ''',                                        \n" +
                "						ra.requestQty,                                        \n" +
                "					''',(((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0))) , null))) AS ''',                                        \n" +
                "						ra.requestQty,''''                                        \n" +
                "					)                                        \n" +
                "					),                                  \n" +
                "  \n" +
                "                      GROUP_CONCAT(DISTINCT                                        \n" +
                "				CONCAT(                                        \n" +
                "					'Max((IF(ra.requestQty = ''',                                        \n" +
                "						ra.requestQty,                                        \n" +
                "					''',   \n" +
                "	(((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0))) , null)))> 0'                                           \n" +
                "					) SEPARATOR ' OR '                                       \n" +
                "					)                                  \n" +
                "				INTO @SQLString, @HavingClause                                   \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                        \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                        \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                      \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                        \n" +
                "				SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString));                                        \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                        \n" +
                "			END IF;                           \n" +
                "			PREPARE stmt FROM @SQLStatement;                                        \n" +
                "			EXECUTE stmt;	                                        \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                        \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "			EXECUTE query1;  \n" +
                "  \n" +
                "			DEALLOCATE PREPARE query1;                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "			EXECUTE query2;                                        \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                  \n" +
                "			EXECUTE query3;                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                               \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                  \n" +
                "			EXECUTE query4;                                                  \n" +
                "			DEALLOCATE PREPARE query4;                                              \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                     \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                          \n" +
                "			EXECUTE query5;                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                          \n" +
                "			EXECUTE query6;                                                          \n" +
                "			DEALLOCATE PREPARE query6;       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                          \n" +
                "			EXECUTE query7;                                                          \n" +
                "			DEALLOCATE PREPARE query7;         \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                             \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                        \n" +
                "	IN ppageIndex INT(11),                                        \n" +
                "	IN precordPerPage INT(11),                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN rfqAssyID INT(11),                                        \n" +
                "	IN puserID INT (11)                                  \n" +
                "    )  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                        \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                    \n" +
                "	    SET @SQLString = NULL;                                     \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "		ELSE                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                         \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                        \n" +
                "			SET pWhereClause = '1=1' ;                                        \n" +
                "		END IF;	                                        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "		ELSE	                                        \n" +
                "			SET rowNumWhere = '';                                        \n" +
                "		END IF;	                                        \n" +
                "		SELECT                                \n" +
                "                     GROUP_CONCAT(DISTINCT                                \n" +
                "				CONCAT(                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                \n" +
                "						ra.requestQty,                                \n" +
                "					''', rq.finalPrice, null))) AS ''',                                \n" +
                "						ra.requestQty,''''                                \n" +
                "					)                                \n" +
                "					) INTO @SQLString                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                        \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                        \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                        \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                      \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                        \n" +
                "					SELECT                                         \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                                          \n" +
                "						rp.partTypeName, rm.name,                         \n" +
                "						rl.qpa,                            \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                              \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                              \n" +
                "						co.ltbDate AS LTBDate,                      \n" +
                "						co.eolDate AS EOLDate,              \n" +
                "                        	(SELECT                                           \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',c.RoHSStatusID,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)           \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',c.RoHSStatusID,''###'',rla.mfgPNID,''###'',''0'') END)                                                    \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                           \n" +
                "component c ON rla.mfgpnid=c.id                                           \n" +
                "LEFT JOIN mfgcodemst mg ON                                            \n" +
                "c.mfgCodeID=mg.id           \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0          \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0          \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0          \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0          \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,           \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'',ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                      \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                           \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN                \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0   \n" +
                "						LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                          \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                         \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                        \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                        \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                                 \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                        \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                        \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                               \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                               \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                               \n" +
                "						(SELECT gencCategoryID FROM genericcategory                               \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                              \n" +
                "					GROUP BY rl.lineID');                                          \n" +
                "			END IF;                          \n" +
                "			PREPARE stmt FROM @SQLStatement;                                      \n" +
                "			EXECUTE stmt;	                                        \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                        \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "			EXECUTE query1;                                        \n" +
                "			DEALLOCATE PREPARE query1;                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "			EXECUTE query2;                                        \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                  \n" +
                "			EXECUTE query3;                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                           \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                   \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                        \n" +
                "			EXECUTE query4;                                        \n" +
                "			DEALLOCATE PREPARE query4;                                        \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                     \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                          \n" +
                "			EXECUTE query5;                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                          \n" +
                "			EXECUTE query6;                                                          \n" +
                "			DEALLOCATE PREPARE query6;       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                          \n" +
                "			EXECUTE query7;                                                          \n" +
                "			DEALLOCATE PREPARE query7;                                         \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                          \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(                                          \n" +
                "	IN ppageIndex INT(11),                                          \n" +
                "	IN precordPerPage INT(11),                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN rfqAssyID INT(11),                                          \n" +
                "	IN puserID INT (11),  \n" +
                "	IN pleadTime INT (11)                                    \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                          \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                  \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                          \n" +
                "	    SET @SQLString = NULL;                                       \n" +
                "	    SET @HavingClause = NULL;                                           \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "		ELSE                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                           \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                          \n" +
                "			SET pWhereClause = '1=1' ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "		ELSE	                                          \n" +
                "			SET rowNumWhere = '';                                          \n" +
                "		END IF;	                                          \n" +
                "		SELECT                                          \n" +
                "                      GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                          \n" +
                "						ra.requestQty,''''                                          \n" +
                "					)                                          \n" +
                "					),                                \n" +
                "		GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'((Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                                \n" +
                "					) SEPARATOR ' OR '                                              \n" +
                "					)                \n" +
                "				INTO @SQLString,@HavingClause                                     \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                          \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                          \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                        \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                          \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                          \n" +
                "					SELECT                                           \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                               \n" +
                "					  rl.qpa,      \n" +
                "                      	(SELECT                                         \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)         \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                   \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                         \n" +
                "component c ON rla.mfgpnid=c.id                                         \n" +
                "LEFT JOIN mfgcodemst mg ON                                          \n" +
                "c.mfgCodeID=mg.id         \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0       \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0             \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0        \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0        \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0        \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                   \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                          \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                               \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id  LEFT JOIN               \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0         \n" +
                "						  LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                            \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                         \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                          \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                          \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                          \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                 \n" +
                "					GROUP BY rl.lineID');                                   \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                          \n" +
                "			END IF;                                 \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                          \n" +
                "			EXECUTE stmt;	                                          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                          \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "			EXECUTE query1;                                          \n" +
                "			DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "			EXECUTE query2;                                          \n" +
                "			DEALLOCATE PREPARE query2;   \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                  \n" +
                "			EXECUTE query3;                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                         \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                           \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                          \n" +
                "			EXECUTE query4;                                          \n" +
                "			DEALLOCATE PREPARE query4;                                          \n" +
                "  \n" +
                "  			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                     \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                          \n" +
                "			EXECUTE query5;                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                          \n" +
                "			EXECUTE query6;                                                          \n" +
                "			DEALLOCATE PREPARE query6;       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                          \n" +
                "			EXECUTE query7;                                                          \n" +
                "			DEALLOCATE PREPARE query7;                                             \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 15-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (224,'2.00','V1','Price Filter Changes-Champak '," + userid + ");"
            );


            break;

        case 224:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllUniqueSubAssemblyByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllUniqueSubAssemblyByPartID`(    \n" +
                "	IN pAssemblyID INT                  \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "  \n" +
                "	SELECT DISTINCT rfa.id rfqAssyID,    \n" +
                "		psa.prPerPartID,     \n" +
                "		co.PIDCode AS PIDCode     \n" +
                "	FROM part_sub_assy_relationship psa    \n" +
                "	INNER JOIN component co ON psa.prPerPartId = co.id     \n" +
                "	LEFT OUTER JOIN rfq_assemblies rfa ON psa.prPerPartID = rfa.partID    \n" +
                "	INNER JOIN rfq_assemblies rfb ON psa.partId = rfb.partID    \n" +
                "	WHERE co.deletedAt IS NULL AND rfb.id = pAssemblyID    \n" +
                "	ORDER BY psa.level;    \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_CreatePartAssyBomRelationship` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreatePartAssyBomRelationship`(            \n" +
                "	IN pPartID INT,     \n" +
                "	IN pUserID INT    \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE subAssyType INT(11);            \n" +
                "	SET subAssyType = 3;            \n" +
                "  \n" +
                "	START TRANSACTION;            \n" +
                "  \n" +
                "		DELETE FROM part_sub_assy_relationship WHERE partId=pPartID;    \n" +
                "		INSERT INTO part_sub_assy_relationship(partId, prPerPartId, LEVEL, lineItemId, prPartLineItemID, createdAt, createdBy)    \n" +
                "  \n" +
                "		WITH RECURSIVE cte AS    \n" +
                "		(    \n" +
                "		  SELECT  rl.Id  AS lineItemId, 0  AS parentLineItemId, c.Id AS mfgPNID, 1 AS LEVEL, c.Id partId, c.Id AS ParentPartId    \n" +
                "		  FROM rfq_lineitems rl , rfq_lineitems_alternatepart rla, component c     \n" +
                "		  WHERE  rl.Id = rla.rfqLineItemsID AND rla.mfgPNID = c.Id  AND rl.partId=pPartID  AND  c.category=subAssyType    \n" +
                "		  AND c.deletedAt IS NULL AND rl.deletedAT IS NULL AND rla.deletedAt IS NULL    \n" +
                "  \n" +
                "		  UNION ALL    \n" +
                "		  SELECT rlp.Id AS lineItemId, parent.lineItemId  AS parentLineItemId, cp.Id AS mfgPNID, (parent.LEVEL +1)  AS LEVEL, cp.Id AS partId, parent.partId ParentPartId    \n" +
                "		  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte parent     \n" +
                "		  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlp.partId = parent.partId AND  cp.category=subAssyType    \n" +
                "		  AND cp.deletedAt IS NULL AND rlp.deletedAT IS NULL AND rlap.deletedAt IS NULL    \n" +
                "		)    \n" +
                "  \n" +
                "		SELECT pPartID AS PartId, pPartID prPerPartId, 0 LEVEL,  NULL lineItemId, NULL prParentLineItemID,  NOW(), pUserID    \n" +
                "		UNION ALL    \n" +
                "		SELECT pPartID AS partId, IF(partId = 0, NULL,partId) , LEVEL, IF(lineItemId = 0,NULL,lineItemId) , IF(parentLineItemid = 0, NULL,parentLineItemid),  NOW(), pUserID FROM cte;    \n" +
                "	COMMIT;            \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 15-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (225,'2.00','V1','Recursive sub assy part generation Sp changes - Shailesh '," + userid + ");"
            );
            break;
        case 225:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveComponentAlternetPart` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentAlternetPart`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT(11)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS			  \n" +
                "			SELECT 	c.ID,c.mfgPN AS `mfgPN`  \n" +
                "				,m.mfgCode AS `mfgCode`  \n" +
                "				,c.operatingTemp AS `operatingTemp`  \n" +
                "				,c.minOperatingTemp AS `minOperatingTemp`  \n" +
                "				,c.maxOperatingTemp AS `maxOperatingTemp`  \n" +
                "				,c.tolerance AS `tolerance`  \n" +
                "				,c.voltage AS `voltage`  \n" +
                "				,c.value AS `value`  \n" +
                "				,c.partPackage AS `partPackage`  \n" +
                "				,c.powerRating AS `powerRating`  \n" +
                "				,c.weight AS `weight`  \n" +
                "				,c.feature AS `feature`  \n" +
                "				,c.functionalCategoryText AS `functionalTypeExternal`  \n" +
                "				,functional.partTypeName AS `functionalTypeInternal`  \n" +
                "				,c.mountingTypeText AS `mountingTypeExternal`  \n" +
                "				,mounting.name AS `mountingTypeInternal`  \n" +
                "			FROM component_alternatepn a  \n" +
                "				LEFT OUTER JOIN component c ON a.ComponentID = c.ID  \n" +
                "				LEFT OUTER JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "				LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "				LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "			WHERE a.refComponentID = pComponentID AND a.Type = 1;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveComponentPossibleAlternetPart` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentPossibleAlternetPart`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT(11)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE pTolerance VARCHAR(50);  \n" +
                "	DECLARE pVoltage VARCHAR(50);  \n" +
                "	DECLARE pValue VARCHAR(50);  \n" +
                "	DECLARE pOperatingTemp VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT c.tolerance,  \n" +
                "		c.voltage,  \n" +
                "		c.value,  \n" +
                "		c.operatingTemp  \n" +
                "		INTO pTolerance,pVoltage,pValue,pOperatingTemp  \n" +
                "	FROM component c  \n" +
                "	WHERE c.id = pComponentID;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS			  \n" +
                "		SELECT 	c.ID,c.mfgPN AS `mfgPN`  \n" +
                "			,m.mfgCode AS `mfgCode`  \n" +
                "			,c.operatingTemp AS `operatingTemp`  \n" +
                "			,c.minOperatingTemp AS `minOperatingTemp`  \n" +
                "			,c.maxOperatingTemp AS `maxOperatingTemp`  \n" +
                "			,c.tolerance AS `tolerance`  \n" +
                "			,c.voltage AS `voltage`  \n" +
                "			,c.value AS `value`  \n" +
                "			,c.partPackage AS `partPackage`  \n" +
                "			,c.powerRating AS `powerRating`  \n" +
                "			,c.weight AS `weight`  \n" +
                "			,c.feature AS `feature`  \n" +
                "			,c.functionalCategoryText AS `functionalTypeExternal`  \n" +
                "			,functional.partTypeName AS `functionalTypeInternal`  \n" +
                "			,c.mountingTypeText AS `mountingTypeExternal`  \n" +
                "			,mounting.name AS `mountingTypeInternal`  \n" +
                "		FROM component c  \n" +
                "			LEFT OUTER JOIN mfgcodemst m ON c.mfgcodeID=m.id  \n" +
                "			LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "			LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "		WHERE c.tolerance=pTolerance AND c.voltage=pVoltage AND c.value=pValue AND c.operatingTemp=pOperatingTemp  \n" +
                "			AND c.id != pComponentID ;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (226,'2.00','V1','Create new sp for get possible alternet part list - Jignesh '," + userid + ");"
            );
            break;
        case 226:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBarcodeUID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBarcodeUID`(	          \n" +
                "	IN pPrifix VARCHAR(14)        \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pUID VARCHAR(14);          \n" +
                "	DECLARE pFinalPrefix VARCHAR(14);      \n" +
                "	IF(pPrifix IS NULL)THEN        \n" +
                "		SELECT 	`values` INTO  pPrifix FROM systemconfigrations WHERE `key`='BarcodePreFix';        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SELECT LEFT(pPrifix, 8) INTO pFinalPrefix;      \n" +
                "	SELECT uid INTO pUID FROM (SELECT uid,prefix,isDeleted FROM component_sid_stock ORDER BY uid DESC)t WHERE prefix=pPrifix AND isDeleted=0 LIMIT 1;        \n" +
                "  \n" +
                "	IF(pUID IS NULL)THEN        \n" +
                "		SELECT  CONCAT(pFinalPrefix,LPAD( '1', 14-LENGTH(pFinalPrefix), '0' )) INTO pUID ;        \n" +
                "	ELSE        \n" +
                "		SELECT LEFT(pPrifix, 8) INTO pFinalPrefix;      \n" +
                "		SELECT SUBSTRING(pUID, LENGTH(pFinalPrefix)+1,LENGTH(pUID)) INTO  pUID;        \n" +
                "		SELECT  CONCAT(pFinalPrefix,LPAD( CAST(pUID AS UNSIGNED) +1, 14-LENGTH(pFinalPrefix), '0' )) INTO pUID;        \n" +
                "	END IF;       \n" +
                "  \n" +
                "	SELECT pUID,pPrifix;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (227,'2.00','V1',' Sproc_GetBarcodeUID - FENIL '," + userid + ");"
            );
            break;
        case 227:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/18/2019  *********************************** */
                "ALTER TABLE warehousemst ADD COLUMN nickname VARCHAR(50) NULL AFTER Description;  \n" +
                "ALTER TABLE warehousemst ADD COLUMN parentWHID INT(11) NULL AFTER nickname;  \n" +
                "ALTER TABLE warehousemst ADD CONSTRAINT FK_warehousemst_parentWHID FOREIGN KEY (parentWHID) REFERENCES warehousemst(ID);   \n" +
                "ALTER TABLE warehousemst ADD COLUMN isDepartment TINYINT(1) DEFAULT 0;  \n" +
                "ALTER TABLE binmst  ADD COLUMN nickname VARCHAR(50) NULL AFTER WarehouseID;  \n" +
                "/* **************************** New Script -> 02/18/2019  *********************************** */  \n" +
                "INSERT INTO warehousemst (NAME, Description, nickname, parentWHID, isActive, isPermanentWH, createdBy,createdAt,isDepartment,updatedAt)  \n" +
                "VALUES ('Material Department', 'Material Department', NULL, NULL, 1, 1, 1,CURRENT_TIMESTAMP,1,CURRENT_TIMESTAMP);  \n" +
                "INSERT INTO warehousemst (NAME, Description, nickname, parentWHID, isActive, isPermanentWH, createdBy,createdAt,isDepartment,updatedAt)  \n" +
                "VALUES ('Production Department', 'Production Department', NULL, NULL, 1, 1, 1,CURRENT_TIMESTAMP,1,CURRENT_TIMESTAMP);  \n" +
                "/* **************************** New Script -> 02/18/2019  *********************************** */  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveWarehouse` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "		SELECT `warehousemst`.*,  CAST(NULL AS CHAR(50)) parentWarehouseName,      \n" +
                "			(CASE WHEN (`warehousemst`.`isActive` = 0) THEN 'Inactive'         \n" +
                "				WHEN (`warehousemst`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,    \n" +
                "			(CASE WHEN (`isPermanentWH` = 0) THEN 'No'     \n" +
                "					WHEN (`isPermanentWH` = 1) THEN 'Yes' ELSE '' END) AS `parentConvertedValue`    \n" +
                "		FROM `warehousemst` AS `warehousemst`        \n" +
                "		WHERE `deletedAt` IS NULL;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"Name ASC\") ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	UPDATE Results r, warehousemst w    \n" +
                "	SET r.parentWarehouseName = w.name    \n" +
                "	WHERE r.parentWHID = w.id;    \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "END;  \n" +
                "/* **************************** New Script -> 02/18/2019  *********************************** */  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveBin` ;  \n" +
                "CREATE DEFINER=`root`@`localhost` PROCEDURE `Sproc_RetrieveBin`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "			SELECT   `binm`.`id`, `binm`.`Name` AS `Name`,`binm`.`Description`,`binm`.`WarehouseID`,`binm`.`isActive`,`binm`.`isPermanentBin`,`warem`.`Name` AS wareHoueseName,`binm`.`updatedAt`,     \n" +
                "				(CASE WHEN (binm.isActive= 0) THEN 'Inactive'           \n" +
                "					WHEN (binm.isActive = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,      \n" +
                "				(CASE WHEN (isPermanentBin = 0) THEN 'No'         \n" +
                "					WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS `isPermanentBinConvertedValue`,  \n" +
                "				`binm`.`nickname`	          \n" +
                "			FROM binmst binm      \n" +
                "			LEFT JOIN warehousemst warem ON `binm`.`WarehouseID` = `warem`.`ID`      \n" +
                "			WHERE binm.deletedAt IS NULL;      \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY\",\"Name ASC\") ;        \n" +
                "		ELSE        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "			SET pWhereClause = '1=1' ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "		ELSE	        \n" +
                "			SET rowNumWhere = '';        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* to get total count of rows */        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );   		      \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);       \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02/18/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (228,'2.00','V1',' Alter warehouse and bin master, modify sproc for same and make default entry for department in warehouse - Dharmishtha '," + userid + ");"
            );
            break;
        case 228:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/18/2019  *********************************** */
                "DROP TABLE IF EXISTS `component_sid_stock_history` ;  \n" +
                "CREATE TABLE `component_sid_stock_history` (  \n" +
                "  `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `uid` VARCHAR(14) DEFAULT NULL,  \n" +
                "  `refcompid` INT(11) DEFAULT NULL,  \n" +
                "  `scanlabel` VARCHAR(1000) DEFAULT NULL,  \n" +
                "  `pkgQty` INT(11) DEFAULT NULL,  \n" +
                "  `refinvno` VARCHAR(50) DEFAULT NULL,  \n" +
                "  `refinvdate` DATETIME DEFAULT NULL,  \n" +
                "  `price` DECIMAL(18,6) DEFAULT NULL,  \n" +
                "  `isinStk` TINYINT(1) DEFAULT NULL,  \n" +
                "  `isDeleted` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "  `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "  `printStatus` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "  `costCategoryID` INT(11) DEFAULT NULL,  \n" +
                "  `lotCode` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `dateCode` INT(4) DEFAULT NULL,  \n" +
                "  `nickName` VARCHAR(14) DEFAULT NULL,  \n" +
                "  `prefix` VARCHAR(20) DEFAULT NULL,  \n" +
                "  `availableQty` INT(11) DEFAULT NULL,  \n" +
                "  `uidPrefix` VARCHAR(20) DEFAULT NULL,  \n" +
                "  `customerID` INT(11) DEFAULT NULL,  \n" +
                "  `refCPNID` INT(11) DEFAULT NULL,  \n" +
                "  `binID` INT(11) DEFAULT NULL,  \n" +
                "  `mfgDate` DATETIME DEFAULT NULL,  \n" +
                "  `expiryDate` DATETIME DEFAULT NULL,  \n" +
                "  `pcbPerArray` INT(11) DEFAULT NULL,  \n" +
                "  `isSharedInventory` TINYINT(1) DEFAULT NULL,  \n" +
                "  `MFGorExpiryDate` VARCHAR(1) DEFAULT NULL,  \n" +
                "  `BestBefore` INT(11) DEFAULT NULL,  \n" +
                "  `Unit` INT(11) DEFAULT NULL,  \n" +
                "  `FloorLifeExpirationTime` DATETIME DEFAULT NULL,  \n" +
                "  `ShelfLifeExpirationTime` DATETIME DEFAULT NULL,  \n" +
                "  `floortimeRunning` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `SealDate` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `spq` DECIMAL(18,6) DEFAULT NULL COMMENT 'Standard Pakage Quantity',  \n" +
                "  `cpn` TINYINT(1) DEFAULT '0',  \n" +
                "  `salesOrderDetailID` INT(11) DEFAULT NULL,  \n" +
                "  `RefCPNMFGPNID` INT(11) DEFAULT NULL,  \n" +
                "  `mfgAvailabel` TINYINT(1) DEFAULT '0',  \n" +
                "  `assyID` INT(11) DEFAULT NULL,  \n" +
                "  `receiveMaterialType` VARCHAR(100) DEFAULT NULL,  \n" +
                "  `refCompSIDStockID` INT(11) NOT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `unq_component_sid_stock_sid` (`uid`,`deletedAt`),  \n" +
                "  KEY `FK_component_sid_stock_history_refcompid` (`refcompid`),  \n" +
                "  KEY `FK_component_sid_stock_history_priceCategoryID` (`costCategoryID`),  \n" +
                "  KEY `FK_component_sid_stock_history_customerID` (`customerID`),  \n" +
                "  KEY `FK_component_sid_stock_history_refCPNID` (`refCPNID`),  \n" +
                "  KEY `FK_component_sid_stock_history_SalesOrderDetailID` (`salesOrderDetailID`),  \n" +
                "  KEY `FK_component_sid_stock_history_RefCPNMFGPNID` (`RefCPNMFGPNID`),  \n" +
                "  KEY `FK_component_sid_stock_history_binID` (`binID`),  \n" +
                "  KEY `FK_component_sid_stock_history_AssyID` (`assyID`),  \n" +
                "  KEY `FK_component_sid_stock_history_refCompSIDStockID` (`refCompSIDStockID`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_refcompid` FOREIGN KEY (`refcompid`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_priceCategoryID` FOREIGN KEY (`costCategoryID`) REFERENCES `cost_category` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_customerID` FOREIGN KEY (`customerID`) REFERENCES `customers` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_refCPNID` FOREIGN KEY (`refCPNID`) REFERENCES `customers` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_SalesOrderDetailID` FOREIGN KEY (`salesOrderDetailID`) REFERENCES `salesorderdet` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_RefCPNMFGPNID` FOREIGN KEY (`RefCPNMFGPNID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_binID` FOREIGN KEY (`binID`) REFERENCES `binmst` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_AssyID` FOREIGN KEY (`assyID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_component_sid_stock_history_refCompSIDStockID` FOREIGN KEY (`refCompSIDStockID`) REFERENCES `component_sid_stock` (`id`)  \n" +
                ") ENGINE=INNODB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** New Script -> 02/18/2019  *********************************** */
                "DROP TABLE IF EXISTS `kit_allocation` ;  \n" +
                "CREATE TABLE kit_allocation(  \n" +
                "	id INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "	refSalesOrderDetID INT(11) NOT NULL,  \n" +
                "	assyID INT(11) NOT NULL,  \n" +
                "	uid  VARCHAR(14) NOT NULL,  \n" +
                "	refBOMLineID  INT(11) NOT NULL,  \n" +
                "	allocatedQty DECIMAL(18,6) NULL,  \n" +
                "	outQty  DECIMAL(18,6) NULL,  \n" +
                "	transactionDate DATETIME NULL,  \n" +
                "	returnDate DATETIME NULL,  \n" +
                "	consumeQty DECIMAL(18,6) NULL,  \n" +
                "	feederID INT(11) NULL,  \n" +
                "	kitRelaseDate DATETIME NULL,  \n" +
                "	kitRElaseType VARCHAR(50) NULL,  \n" +
                "	woID INT(11) NULL,  \n" +
                "	STATUS VARCHAR(25) NULL,  \n" +
                "	PRIMARY KEY (`id`),  \n" +
                "	KEY `FK_kit_allocation_refSalesOrderDetID` (`refSalesOrderDetID`),  \n" +
                "	KEY `FK_kit_allocation_assyID` (`assyID`),  \n" +
                "	KEY `FK_kit_allocation_uid` (`uid`),  \n" +
                "	KEY `FK_kit_allocation_refBOMLineID` (`refBOMLineID`),  \n" +
                "	KEY `FK_kit_allocation_woID` (`woID`),  \n" +
                "	CONSTRAINT `FK_kit_allocation_refSalesOrderDetID` FOREIGN KEY (`refSalesOrderDetID`) REFERENCES `salesorderdet` (`id`),  \n" +
                "	CONSTRAINT `FK_kit_allocation_assyID` FOREIGN KEY (`assyID`) REFERENCES `component` (`id`),  \n" +
                "	CONSTRAINT `FK_kit_allocation_uid` FOREIGN KEY (`uid`) REFERENCES `component_sid_stock` (`uid`),  \n" +
                "	CONSTRAINT `FK_kit_allocation_refBOMLineID` FOREIGN KEY (`refBOMLineID`) REFERENCES `rfq_lineitems` (`id`),  \n" +
                "	CONSTRAINT `FK_kit_allocation_woID` FOREIGN KEY (`woID`) REFERENCES `workorder` (`woID`)  \n" +
                ") ENGINE=INNODB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 02/18/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (229,'2.00','V1',' Create table component_sid_stock_history and kit_allocation- Dharmishtha '," + userid + ");"
            );
            break;
        case 229:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-02-2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT(1),  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	/* DECLARE SQLStatement varchar(255);  */   \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		SELECT DISTINCT co.*, mf.mfgCode,  \n" +
                "		gc.gencCategoryName AS partStatusValue,  \n" +
                "		mf.mfgType,  \n" +
                "		vu_co.MFGPN AS AliasMFGPN,  \n" +
                "		vu_co.mfgcode AS AliasMFGCode,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 0) THEN 'No'  \n" +
                "					WHEN (`co`.`isGoodPart` = 1) THEN 'Yes' ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        mt.name mountingTypeName,  \n" +
                "		pc.categoryName,  \n" +
                "        rct.name connecterTypeName  \n" +
                "		FROM component co  \n" +
                "        LEFT JOIN rfq_partcategory pc on pc.id = co.partType  \n" +
                "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0  \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus  \n" +
                "		 LEFT JOIN component_alias ca ON ca.aliasgroupID = co.aliasgroupID AND IFNULL(ca.isDeleted,0)=0 AND ca.deletedAt IS NULL  \n" +
                "		LEFT JOIN vu_component_dist_comp_details vu_co ON ca.aliasgroupID = vu_co.aliasgroupID  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "        left join rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                "        left join rfq_mountingtypemst mt on mt.id = co.mountingTypeID  \n" +
                "        left join rfq_connectertypemst rct ON co.connecterTypeID = rct.id  \n" +
                "	-- LEFT JOIN vu_component_dist_comp_details vu_co ON co.id = vu_co.compID  \n" +
                "		WHERE IFNULL(co.isdeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsMFG THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );  \n" +
                "	ELSE  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packaging in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (functionalCategoryText like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR functionalCategoryName like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR mountingTypeText like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR mountingTypeName like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR operatingTemp like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR minOperatingTemp like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR maxOperatingTemp like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR connectorTypeText like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR connecterTypeName like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR noOfPosition like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR noOfRows like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR pitch like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR pitchMating like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR sizeDimension like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR length like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR width like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR heightText like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR height like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR tolerance like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR voltage like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR value like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR partPackage like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR powerRating like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR weight like ''%', pAttributesSearch, '%'' ');  \n" +
                "        SET pWhereClause = CONCAT(pWhereClause, ' OR feature like ''%', pAttributesSearch, '%'' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results c where \", pWhereClause );   \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(              \n" +
                "IN pGoodPart VARCHAR(100),              \n" +
                "IN pSearch VARCHAR(100),              \n" +
                "IN pId INT(11),              \n" +
                "IN pMfgType VARCHAR(50),              \n" +
                "IN pRoHSStatusID VARCHAR(100),              \n" +
                "IN pMfgCodeId INT(11),          \n" +
                "IN pMountingType VARCHAR(50)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "IF(pMountingType IS NOT NULL) THEN          \n" +
                " SELECT * FROM              \n" +
                " (            \n" +
                "	 SELECT `com`.`id`,               \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,            \n" +
                "		`com`.`mfgPN` orgMfgPN,       \n" +
                "		`com`.`packaginggroupID`,          \n" +
                "		`com`.`isGoodPart`,             \n" +
                "		`com`.`RoHSStatusID`,             \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,             \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,            \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`        \n" +
                "	FROM `component` AS `com`             \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND               \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))            \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType          \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))              \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))              \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a              \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND mfgPN LIKE CONCAT('%', pSearch , '%'))            \n" +
                ");              \n" +
                "  \n" +
                "  ELSE          \n" +
                "   SELECT * FROM              \n" +
                " (            \n" +
                "	 SELECT `com`.`id`,               \n" +
                "		CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,            \n" +
                "		`com`.`mfgPN` orgMfgPN,       \n" +
                "		`com`.`packaginggroupID`,         \n" +
                "		`com`.`isGoodPart`,             \n" +
                "		`com`.`RoHSStatusID`,             \n" +
                "		`com`.`rohsgroupID`,              \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,             \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,            \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`                 \n" +
                "	FROM `component` AS `com`             \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND               \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))               \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))              \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))              \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a              \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR   \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')   \n" +
                "             OR exists (select 1 from component_otherpn opn where opn.refcomponentid = `a` .`id` and opn.name like CONCAT('%', pSearch , '%'))))  \n" +
                ");           \n" +
                "END IF;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (230,'2.00','V1','Change filter on MfgPN and Other Part - Ashish'," + userid + ");"
            );
            break;
        case 230:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "insert  into `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageID`,`hasChild`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`)  \n" +
                "value('Manage Component BOM',0,0,'','app.component.managecomponent.bom','/managecomponent/:mfgType/:coid/:selectedTab','BOM',(select a.pageID from page_detail a where a.pageName='Manage Component'),0,1,utc_timestamp(),utc_timestamp(),NULL,'1',NULL,NULL,0,NULL,1,'Component');  \n" +
                /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (231,'2.00','V1','Created entry for BOM Tab role in component page - Ashish'," + userid + ");"
            );
            break;
        case 231:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 19-02-2019  *********************************** */
                "update roles set isActive=1;  \n" +
                //  /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (232,'2.00','V1',' role isActive default 1 - Mona '," + userid + ");"
            );
            break;
        case 232:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "ALTER TABLE `component`   \n" +
                "CHANGE COLUMN `packageQty` `packageQty` DECIMAL(10,5) NULL DEFAULT NULL ;  \n" +
                "RENAME TABLE component_functionaltypepart TO component_requirefunctionaltype;  \n" +
                "RENAME TABLE component_mountingtypepart TO component_requiremountingtype;  \n" +
                /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (233,'2.00','V1','Change table name and packageQty datatype - Ashish'," + userid + ");"
            );
            break;
        case 233:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "SET GLOBAL log_bin_trust_function_creators = 1;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getselectedPartDetail` ;  \n" +
                "CREATE FUNCTION `fun_getselectedPartDetail`(    \n" +
                "	rfqAssyID INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(16383);  \n" +
                "	SELECT  CONCAT(\"SELECT ra.requestQty,                             \n" +
                "					rq.finalPrice,                             \n" +
                "					rq.unitPrice,                            \n" +
                "					rq.supplier,                            \n" +
                "					rq.min,                            \n" +
                "					rq.mult,                             \n" +
                "					rq.selectedMpn,                             \n" +
                "					rq.selectionMode,                            \n" +
                "					rq.qtyID,                                             \n" +
                "					rq.currentStock,                                            \n" +
                "					rq.leadTime,                                             \n" +
                "					rq.supplierStock,                                            \n" +
                "					rq.grossStock,                                                \n" +
                "					rq.selectedPIDCode,                                              \n" +
                "					rq.pricingSuppliers,        \n" +
                "					rq.packaging,       \n" +
                "					rq.rfqQtySupplierID,                             \n" +
                "					c.noOfPosition ApiNoOfPosition,                                \n" +
                "					ct.qpa,  \n" +
                "					u.abbreviation,   \n" +
                "					rq.quoteQty,                               \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                       \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                            \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                               \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id  \n" +
                "				left join uoms u on u.id=ct.uomID                                                \n" +
                "				WHERE ct.isdeleted=0 and  ct.rfqAssyID=\",rfqAssyID)  INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "    END;  \n" +

                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItems`(      \n" +
                "rfqAssyID INT(11),    \n" +
                "SQLString VARCHAR(16383)    \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN      \n" +
                "	DECLARE result NVARCHAR(16383);    \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                    \n" +
                "					SELECT                                                     \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,rl.uomID,                                                      \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                                  \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                    \n" +
                "					(SELECT                                                 \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)                 \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                          \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                 \n" +
                "component c ON rla.mfgpnid=c.id                                                 \n" +
                "LEFT JOIN mfgcodemst mg ON                                                  \n" +
                "c.mfgCodeID=mg.id                 \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0                \n" +
                " LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                    \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0                \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0                \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0                \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                                                    \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                                     \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                 \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                        \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0               \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                                      \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                                     \n" +
                "					SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                                    \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                    \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                    \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID')  INTO @result;      \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(                                            \n" +
                "	IN ppageIndex INT(11),                                            \n" +
                "	IN precordPerPage INT(11),                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                                            \n" +
                "	IN rfqAssyID INT(11),                                            \n" +
                "	IN puserID INT (11),    \n" +
                "	IN pleadTime INT (11)                                      \n" +
                "    )  \n" +
                "BEGIN                                            \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                            \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                            \n" +
                "	    SET @SQLString = NULL;                                         \n" +
                "	    SET @HavingClause = NULL;                                             \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                            \n" +
                "		ELSE                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                             \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                            \n" +
                "			SET pWhereClause = '1=1' ;                                            \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "		ELSE	                                            \n" +
                "			SET rowNumWhere = '';                                            \n" +
                "		END IF;	                                            \n" +
                "		SELECT                                            \n" +
                "                      GROUP_CONCAT(DISTINCT                                            \n" +
                "				CONCAT(                                            \n" +
                "					'Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                            \n" +
                "						ra.requestQty,''''                                            \n" +
                "					)                                            \n" +
                "					),                                  \n" +
                "		GROUP_CONCAT(DISTINCT                                            \n" +
                "				CONCAT(                                            \n" +
                "					'((Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                                  \n" +
                "					) SEPARATOR ' OR '                                                \n" +
                "					)                  \n" +
                "				INTO @SQLString,@HavingClause                                       \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                            \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                            \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                            \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                          \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                            \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                            \n" +
                "					SELECT                                             \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID, rl.uomID,                                   \n" +
                "					  rl.qpa,        \n" +
                "                      	(SELECT                                           \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)           \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',ro.name,''###'',rla.mfgPNID,''###'',''0'') END)                                                     \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                           \n" +
                "component c ON rla.mfgpnid=c.id                                           \n" +
                "LEFT JOIN mfgcodemst mg ON                                            \n" +
                "c.mfgCodeID=mg.id           \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0         \n" +
                "LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0               \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0          \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0          \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0          \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                     \n" +
                "					(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                            \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                                 \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id  LEFT JOIN                 \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0           \n" +
                "						  LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                              \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                           \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                            \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                            \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                            \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                   \n" +
                "					GROUP BY rl.lineID');                                     \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                            \n" +
                "			END IF;                                   \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                            \n" +
                "			EXECUTE stmt;	                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                            \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                            \n" +
                "			EXECUTE query1;                                            \n" +
                "			DEALLOCATE PREPARE query1;                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                            \n" +
                "			EXECUTE query2;                                            \n" +
                "			DEALLOCATE PREPARE query2;     \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                    \n" +
                "			EXECUTE query3;                                                    \n" +
                "			DEALLOCATE PREPARE query3;                                           \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                             \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                            \n" +
                "			EXECUTE query4;                                            \n" +
                "			DEALLOCATE PREPARE query4;                                            \n" +
                "  \n" +
                "  			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                       \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                            \n" +
                "			EXECUTE query5;                                                            \n" +
                "			DEALLOCATE PREPARE query5;                                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));    \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                            \n" +
                "			EXECUTE query6;                                                            \n" +
                "			DEALLOCATE PREPARE query6;         \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));    \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                            \n" +
                "			EXECUTE query7;                                                            \n" +
                "			DEALLOCATE PREPARE query7;                                               \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                              \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                          \n" +
                "	IN ppageIndex INT(11),                                          \n" +
                "	IN precordPerPage INT(11),                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN rfqAssyID INT(11),                                          \n" +
                "	IN puserID INT (11)                                    \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                          \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	    SET @SQLString = NULL;                                       \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "		ELSE                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                           \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                          \n" +
                "			SET pWhereClause = '1=1' ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "		ELSE	                                          \n" +
                "			SET rowNumWhere = '';                                          \n" +
                "		END IF;	                                          \n" +
                "		SELECT                                  \n" +
                "                     GROUP_CONCAT(DISTINCT                                  \n" +
                "				CONCAT(                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                  \n" +
                "						ra.requestQty,                                  \n" +
                "					''', rq.finalPrice, null))) AS ''',                                  \n" +
                "						ra.requestQty,''''                                  \n" +
                "					)                                  \n" +
                "					) INTO @SQLString                                  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                          \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                          \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                        \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                          \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                          \n" +
                "					SELECT                                           \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,                                               \n" +
                "						rp.partTypeName, rm.name,                           \n" +
                "						rl.qpa,                              \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                                \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                                \n" +
                "						co.ltbDate AS LTBDate,                        \n" +
                "						co.eolDate AS EOLDate,                \n" +
                "                        	(SELECT                                             \n" +
                "(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',c.RoHSStatusID,''###'',rla.mfgPNID,''###'',ccl.isDocumentUpload)             \n" +
                "ELSE GROUP_CONCAT(replace(rla.mfgPN,\",\",\"***\"),''###'',mg.mfgCode,''###'',c.RoHSStatusID,''###'',rla.mfgPNID,''###'',''0'') END)                                                      \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                             \n" +
                "component c ON rla.mfgpnid=c.id                                             \n" +
                "LEFT JOIN mfgcodemst mg ON                                              \n" +
                "c.mfgCodeID=mg.id             \n" +
                "left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rla.consolidateID and rcl.isDeleted = 0            \n" +
                "LEFT join rfq_assemblies ra on ra.id= rcl.rfqAssyID and ra.isDeleted = 0            \n" +
                "left join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0            \n" +
                "left join component_customer_loa ccl on ccl.componentID = c.id and ccl.customerID = rf.customerId and ccl.isDeleted = 0            \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,             \n" +
                "						(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'',ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))                                        \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla                             \n" +
                "						LEFT JOIN component c ON rla.mfgpnid=c.id    LEFT JOIN                  \n" +
                "						genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0     \n" +
                "						LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                            \n" +
                "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                                           \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                          \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                          \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                  \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                                   \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                          \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                          \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                 \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                                 \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                                 \n" +
                "						(SELECT gencCategoryID FROM genericcategory                                 \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                                \n" +
                "					GROUP BY rl.lineID');                                            \n" +
                "			END IF;                            \n" +
                "			PREPARE stmt FROM @SQLStatement;                                        \n" +
                "			EXECUTE stmt;	                                          \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                          \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "			EXECUTE query1;                                          \n" +
                "			DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "			EXECUTE query2;                                          \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                    \n" +
                "			EXECUTE query3;                                                    \n" +
                "			DEALLOCATE PREPARE query3;                                             \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                     \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                          \n" +
                "			EXECUTE query4;                                          \n" +
                "			DEALLOCATE PREPARE query4;                                          \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                       \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                            \n" +
                "			EXECUTE query5;                                                            \n" +
                "			DEALLOCATE PREPARE query5;                                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));    \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                            \n" +
                "			EXECUTE query6;                                                            \n" +
                "			DEALLOCATE PREPARE query6;         \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));    \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                            \n" +
                "			EXECUTE query7;                                                            \n" +
                "			DEALLOCATE PREPARE query7;                                           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (234,'2.00','V1','Changes in Part-Costing tab_champak'," + userid + ");"
            );
            break;
        case 234:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 19-02-2019 *********************************** */
                "alter table genericcategory add column termsDays int(11);  \n" +
                "Drop view if exists `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS select `a`.`salesOrderId`   \n" +
                "AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate`   \n" +
                "AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID`   \n" +
                "AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment`   \n" +
                "AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`PIDCode` AS `Assy ID`,`a`.`mfgPN`   \n" +
                "AS `Assy Name`,`a`.`rev` AS `Assy Revision`,`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName`   \n" +
                "AS `Company Name`,`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode`   \n" +
                "AS `GencCategory Code`,(ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0))   \n" +
                "AS `Balanced Due Qty`,(case when ((ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0)) > 0)   \n" +
                "then 'Pending' else 'Completed' end) AS `Status` ,`a`.`modifyDate`  \n" +
                "from (select `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber`   \n" +
                "AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,`sm`.`poDate` AS `poDate`,`sm`.`customerID`   \n" +
                "AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID`   \n" +
                "AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,`sm`.`shippingComment`   \n" +
                "AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`, `sm`.`updatedAt` As `modifyDate`,`fun_getAssyidByID`(`a`.`partID`)   \n" +
                "AS `PIDCode`,`fun_getAssyNameByID`(`a`.`partID`) AS `mfgPN`,`fun_getAssyrevNameByID`(`a`.`partID`)   \n" +
                "AS `rev`,CONCAT('(',`cu`.`customerCode`,') ',`cu`.`companyName`) AS `companyName`,concat(`cc`.`firstName`,' ',`cc`.`lastName`)   \n" +
                "AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`a`.`qty` AS `qty`,  \n" +
                "(select ifnull(sum(`shippedassembly`.`shippedqty`),0) from `shippedassembly`   \n" +
                "where ((`shippedassembly`.`partID` = `a`.`partID`) and (`shippedassembly`.`isDeleted` = 0)   \n" +
                "and `shippedassembly`.`shippingId` in (select `salesshippingmst`.`shippingID` from `salesshippingmst`  \n" +
                " where (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty`   \n" +
                " from ((((`salesorderdet` `a` join `salesordermst` `sm` on(((`sm`.`id` = `a`.`refSalesOrderID`) and (ifnull(`sm`.`isDeleted`,0) = 0))))   \n" +
                " left join `customers` `cu` on(((`sm`.`customerID` = `cu`.`id`) and (ifnull(`cu`.`isDeleted`,0) = 0))))   \n" +
                " left join `customer_contactperson` `cc` on(((`sm`.`contactPersonID` = `cc`.`personId`) and (ifnull(`cc`.`isDeleted`,0) = 0))))   \n" +
                " left join `genericcategory` `gc` on(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) and (ifnull(`gc`.`isDeleted`,0) = 0))))   \n" +
                " where (ifnull(`a`.`isDeleted`,0) = 0)) `a`;  \n" +

                //  /* **************************** Add Script Version -> 19-02-2019 *********************************** */

                "drop VIEW if exists `vu_salesorder_shipped_summary`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_summary`   \n" +
                "AS select `a`.`id` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate`   \n" +
                "AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID`   \n" +
                "AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment`   \n" +
                "AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`companyName`   \n" +
                "AS `Company Name`,`a`.`fullName` AS `Full Name`,`a`.`genCategoryCode`   \n" +
                "AS `GencCategory Code`,(ifnull(`a`.`POQty`,0) - ifnull(`a`.`ShippedQty`,0))   \n" +
                "AS `Balanced Due Qty`,(case when ((ifnull(`a`.`POQty`,0) - ifnull(`a`.`ShippedQty`,0)) > 0)   \n" +
                "then 'Pending' else 'Completed' end) AS `Status` ,`a`.`modifyDate`  \n" +
                "from (select `vuss`.`Sales Order ID`   \n" +
                "AS `id`,`vuss`.`Sales Order` AS `salesOrderNumber`,`vuss`.`Po Number` AS `poNumber`,`vuss`.`Po Date`   \n" +
                "AS `poDate`,`vuss`.`Customer ID` AS `customerID`,`vuss`.`ContactPerson ID`   \n" +
                "AS `contactPersonID`,`vuss`.`ShippingMethod ID` AS `shippingMethodID`,`vuss`.`Sales Order Status`   \n" +
                "AS `status`,`vuss`.`Revision` AS `revision`,`vuss`.`Shipping Comment` AS `shippingComment`,`vuss`.`Terms ID`   \n" +
                "AS `termsID`,`vuss`.`So Date` AS `soDate`,`vuss`.`Company Name` AS `companyName`,`vuss`.`Full Name`  \n" +
                "AS `fullName`,`vuss`.`GencCategory Code` AS `genCategoryCode`,sum(`vuss`.`PO Qty`)   \n" +
                "AS `POQty`,sum(`vuss`.`Shipped Qty`) AS `ShippedQty`,sum(`vuss`.`Balanced Due Qty`)   \n" +
                "AS `BalancedDueQty`,`vuss`.`Sales Order Status` AS `SalesOrderStatus` ,`vuss`.`modifyDate`  \n" +
                "from `vu_salesorder_shipped_report` `vuss`   \n" +
                "group by `vuss`.`Sales Order ID`) `a`;  \n" +
                //  /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "	SELECT  sd.id as salesdetailid, sd.qty,sd.mrpQty,sd.price,sd.materialTentitiveDocDate,sd.prcNumberofWeek,  \n" +
                "    sd.isHotJob,sd.materialDueDate,sd.shippingQty,sd.remark,sd.partID as assyID,   \n" +
                "    part.id as componentID, part.PIDCode ,part.rev, part.assyCode, part.nickName,  \n" +
                "    (CASE WHEN (`sd`.`isHotJob` = 0) THEN 'No'    \n" +
                "					WHEN (`sd`.`isHotJob` = 1) THEN 'Yes' ELSE '' END) AS `isHotJobValue`,    \n" +
                "	`vuss`.`Sales Order ID` AS id,    \n" +
                "	`vuss`.`Sales Order` AS salesOrderNumber,    \n" +
                "	`vuss`.`Po Number` AS poNumber,    \n" +
                "	`vuss`.`Po Date` AS poDate,    \n" +
                "	`vuss`.`Customer ID` AS customerID,    \n" +
                "	`vuss`.`ContactPerson ID` AS contactPersonID,    \n" +
                "	`vuss`.`ShippingMethod ID` AS shippingMethodID,    \n" +
                "	`vuss`.`Sales Order Status` AS `status`,    \n" +
                "	`vuss`.`Revision` AS revision,    \n" +
                "	`vuss`.`Shipping Comment` AS shippingComment,    \n" +
                "	`vuss`.`Terms ID` AS termsID,    \n" +
                "	`vuss`.`So Date` AS soDate,    \n" +
                "	`vuss`.`Company Name` AS companyName,    \n" +
                "	`vuss`.`Full Name` AS fullName,    \n" +
                "	`vuss`.`GencCategory Code` AS genCategoryCode,    \n" +
                "	`vuss`.`Status` AS completedStatus,    \n" +
                "    `vuss`.`modifyDate` As modifyDate,  \n" +
                "	(CASE WHEN (`vuss`.`Sales Order Status` = 0) THEN 'Draft'     \n" +
                "		WHEN (`vuss`.`Sales Order Status` = 1) THEN 'Published'    \n" +
                "		ELSE '' END) AS `statusConvertedValue`     \n" +
                "	FROM vu_salesorder_shipped_summary vuss   \n" +
                "    left outer join salesorderdet sd on sd.refSalesOrderID = `vuss`.`Sales Order ID`   \n" +
                "    inner join component part on sd.partID = part.id;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (235,'2.00','V1','change vu_salesorder_shipped_report,  - Mona '," + userid + ");"
            );
            break;
        case 235:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/19/2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_retrive_warehouse_to_transfer` ;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(       \n" +
                "	pDeptID INT(11)   \n" +
                ")  \n" +
                "BEGIN         \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS    \n" +
                "	SELECT 	w.id, w.name, 0 binCount, 0 uidCount  \n" +
                "	FROM 	warehousemst w  \n" +
                "	WHERE 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID,IFNULL(w.parentWHID,0))  \n" +
                "	AND	IFNULL(w.isDepartment,0) != 1  \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0  \n" +
                "	AND 	IFNULL(w.isActive,1) = 1;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS    \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID  \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "	AND 	IFNULL(b.isActive,1) = 1   \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount  \n" +
                "	FROM 	component_sid_stock   \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)  \n" +
                "	AND	IFNULL(isDeleted,0) = 0  \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t, tempActiveBinIDs c  \n" +
                "	SET 	t.uidCount = c.uidCount  \n" +
                "	WHERE 	t.id = c.binID;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS   \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount  \n" +
                "	FROM 	tempBinDet   \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t, tempActiveWarehouseIDs c  \n" +
                "	SET 	t.binCount = c.binCount,  \n" +
                "		t.uidCount = c.uidCount  \n" +
                "	WHERE 	t.id = c.warehouseID;  \n" +
                "	SELECT * FROM tempWarehouseDet;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;  \n" +
                "	DROP TEMPORARY TABLE tempBinDet;  \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;  \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02/19/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (236,'2.00','V1',' Modified Sproc_retrive_warehouse_to_transfer to get department wise detail - Dharmishtha '," + userid + ");"
            );
            break;
        case 236:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "UPDATE component SET uom=-1;  \n" +
                "UPDATE rfq_lineitems SET uomID=-1 WHERE uomID!=-1;  \n" +
                "UPDATE rfq_consolidated_mfgpn_lineitem  SET uomID=-1;  \n" +
                "DELETE FROM unit_detail_formula;  \n" +
                "UPDATE uoms SET baseUnitID=-1 WHERE id>0;  \n" +
                "DELETE FROM unit_detail_formula;  \n" +
                "DELETE FROM uoms WHERE id>0;  \n" +
                "DELETE FROM measurement_types WHERE id>0;  \n" +
                "  \n" +
                "INSERT INTO measurement_types(`name`,isActive,displayOrder,isdefault,isDeleted,createdBy)VALUES  \n" +
                " ('Weight',1,1,1,0,'1'),  \n" +
                " ('Length',1,2,1,0,'1'),  \n" +
                " ('Volume',1,3,1,0,'1');  \n" +
                "  \n" +
                " SELECT id INTO @measer FROM measurement_types WHERE `name`='Weight' LIMIT 1;  \n" +
                "INSERT INTO uoms(measurementTypeID,unitName,abbreviation,perUnit,baseUnitID,baseUnitConvertValue,isFormula,isDefault,isSystemDefault,isDeleted,createdBy,`ord`) VALUES  \n" +
                "(@measer,'Kilogram','Kg',1,0,1,0,1,1,0,'1',3);  \n" +
                " SELECT id INTO @weightID FROM uoms WHERE `unitName`='Kilogram' LIMIT 1;  \n" +
                "INSERT INTO uoms(measurementTypeID,unitName,abbreviation,perUnit,baseUnitID,baseUnitConvertValue,isFormula,isDefault,isSystemDefault,isDeleted,createdBy,`ord`) VALUES  \n" +
                "(@measer,'Gram','g',1,@weightID,1000,0,1,1,0,'1',4),  \n" +
                "(@measer,'Milligram','mg',1,@weightID,1000000,0,1,1,0,'1',5),  \n" +
                "(@measer,'Pound','lbs',1,@weightID,2.20462,0,1,1,0,'1',6),  \n" +
                "(@measer,'Ounce','ounce',1,@weightID,35.274,0,1,1,0,'1',7),  \n" +
                "(@measer,'Atomic mass unit','amu',1,@weightID,1.66054e-27,0,1,1,0,'1',8),  \n" +
                "(@measer,'Long Tons','lt',1,@weightID,1016.05,0,1,1,0,'1',9);  \n" +
                "  \n" +
                "SELECT id INTO @measerlength FROM measurement_types WHERE `name`='Length' LIMIT 1;  \n" +
                "INSERT INTO uoms(measurementTypeID,unitName,abbreviation,perUnit,baseUnitID,baseUnitConvertValue,isFormula,isDefault,isSystemDefault,isDeleted,createdBy,`ord`) VALUES  \n" +
                "(@measerlength,'KiloMeter','Km',1,0,1,0,1,1,0,'1',10);  \n" +
                " SELECT id INTO @lengthID FROM uoms WHERE `unitName`='KiloMeter' LIMIT 1;  \n" +
                "INSERT INTO uoms(measurementTypeID,unitName,abbreviation,perUnit,baseUnitID,baseUnitConvertValue,isFormula,isDefault,isSystemDefault,isDeleted,createdBy,`ord`) VALUES  \n" +
                "(@measerlength,'Meter','m',1,@lengthID,1000,0,1,1,0,'1',11),  \n" +
                "(@measerlength,'Centimeter','cm',1,@lengthID,100000,0,1,1,0,'1',12),  \n" +
                "(@measerlength,'Millimeter','mm',1,@lengthID,1000000,0,1,1,0,'1',13),  \n" +
                "(@measerlength,'Micrometer','μm',1,@lengthID,1000000000,0,1,1,0,'1',14),  \n" +
                "(@measerlength,'Nanometer','nm',1,@lengthID,1000000000000,0,1,1,0,'1',15),  \n" +
                "(@measerlength,'Mile','mi',1,@lengthID,0.6213688756,0,1,1,0,'1',16),  \n" +
                "(@measerlength,'Yard','yd',1,@lengthID,1093.6132983,0,1,1,0,'1',17),  \n" +
                "(@measerlength,'Foot','ft',1,@lengthID,3280.839895,0,1,1,0,'1',18),  \n" +
                "(@measerlength,'Light Year','ly',1,@lengthID,1.057008707e-13,0,1,1,0,'1',19);  \n" +
                "  \n" +
                "SELECT id INTO @measerVolume FROM measurement_types WHERE `name`='Volume' LIMIT 1;  \n" +
                "INSERT INTO uoms(measurementTypeID,unitName,abbreviation,perUnit,baseUnitID,baseUnitConvertValue,isFormula,isDefault,isSystemDefault,isDeleted,createdBy,`ord`) VALUES  \n" +
                "(@measerVolume,'Liter','l',1,0,1,0,1,1,0,'1',20);  \n" +
                " SELECT id INTO @volumeID FROM uoms WHERE `unitName`='Liter' LIMIT 1;  \n" +
                "INSERT INTO uoms(measurementTypeID,unitName,abbreviation,perUnit,baseUnitID,baseUnitConvertValue,isFormula,isDefault,isSystemDefault,isDeleted,createdBy,`ord`) VALUES  \n" +
                "(@measerVolume,'Cubic Meter','cbm',1,@volumeID,0.001,0,1,1,0,'1',21),  \n" +
                "(@measerVolume,'Cubic Kilometer','cbk',1,@volumeID,1e-12,0,1,1,0,'1',22),  \n" +
                "(@measerVolume,'Cubic Centimeter','cbc',1,@volumeID,1000,0,1,1,0,'1',23),  \n" +
                "(@measerVolume,'Cubic Milimeter','cbcc',1,@volumeID,1000000,0,1,1,0,'1',24),  \n" +
                "(@measerVolume,'Milliliter','ml',1,@volumeID,1000,0,1,1,0,'1',25),  \n" +
                "(@measerVolume,'US Gallon','gal',1,@volumeID,0.2641721769,0,1,1,0,'1',26),  \n" +
                "(@measerVolume,'US Quart','qt',1,@volumeID,1.0566887074,0,1,1,0,'1',27),  \n" +
                "(@measerVolume,'US Pint','pt',1,@volumeID,2.1133774149,0,1,1,0,'1',28),  \n" +
                "(@measerVolume,'US Cup','c',1,@volumeID,4.2267548297,0,1,1,0,'1',29);  \n" +
                /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (237,'2.00','V1','Sample entry for UOMs-Champak'," + userid + ");"
            );
            break;
        case 237:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 19-02-2019  *********************************** */
                "update master_templates set isMasterTemplate = 0 where systemGenerated != 1 or  systemGenerated is null;  \n" +
                "update page_detail set menuName='Bill Of Material Approval Reason' ,displayMenuName='Bill Of Material Approval Reason' where menuName='Bill Of Material Reason';  \n" +
                "update page_detail set menuName='Response Reasons' ,displayMenuName='Response Reasons' where menuName='Reponse Reasons';  \n" +
                //  /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_RetrieveReasonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReasonList`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT * ,     \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'     \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`    \n" +
                "			FROM `reasonmst`     \n" +
                "			WHERE `deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"reasonCategory ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (238,'2.00','V1','  - Mona '," + userid + ");"
            );
            break;
        case 238:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                        \n" +
                "    IN pWhereClause VARCHAR(16383),                        \n" +
                "    IN puserID VARCHAR(50),                  \n" +
                "    IN pnickName VARCHAR(20),                  \n" +
                "    IN pprefix VARCHAR(20),                  \n" +
                "    IN puid VARCHAR(20),              \n" +
                "    IN pComponentID INT,          \n" +
                "    IN pCustomerID INT,          \n" +
                "    IN pCPN BOOL,          \n" +
                "    IN pMFGAvailabel BOOL,          \n" +
                "    IN pRefCpnMfgID INT,      \n" +
                "    IN pAssyID INT,      \n" +
                "    IN pSalesOrderDetailID INT,		      \n" +
                "    IN pReceiveMaterialType VARCHAR(255) 	      \n" +
                "    )  \n" +
                "BEGIN                        \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                        \n" +
                "	DECLARE v_delimiter VARCHAR(10);                        \n" +
                "	DECLARE v_length INT;                         \n" +
                "	DECLARE v_fieldType INT;                             \n" +
                "	DECLARE v_entityId INT;                        \n" +
                "	DECLARE v_dataElementId INT;                        \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                        \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                        \n" +
                "	DECLARE strLabel VARCHAR(2000);                        \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                        \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);		  \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                        \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                        \n" +
                "	DECLARE plen,slen INT;                        \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                        \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                    \n" +
                "	DECLARE barcode_type_id INT;              \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);          \n" +
                "	DECLARE UpdateValue VARCHAR(16383);              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                         \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                        \n" +
                "	(                        \n" +
                "	     errorText NVARCHAR(2000),                        \n" +
                "	     IsSuccess VARCHAR (2),              \n" +
                "	     MFGPart VARCHAR(100)                             \n" +
                "	);             \n" +
                "	-- get data from barcode templates with seprator                        \n" +
                "	block1: BEGIN     \n" +
                "  \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                         \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                  \n" +
                "		-- tempregexp;    \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */              \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                      \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                        \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                   \n" +
                "		ELSE    /* barcode 1D */              \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                       \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                         \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                   \n" +
                "		END IF;                \n" +
                "	END block1;                        \n" +
                "  \n" +
                "	block2: BEGIN                        \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                        \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                        \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                     \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                         \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		-- declare exit loop if data not found                        \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                        \n" +
                "	        -- if any record match found than  check for delimiter and its value                   \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                        \n" +
                "			-- create temporary table for deliemeter and component dataelement                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                        \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                        \n" +
                "				pentityId INT,                        \n" +
                "				pdataElementId INT,                        \n" +
                "				pdelimiter_value VARCHAR(200)                        \n" +
                "			);                   \n" +
                "  \n" +
                "			-- create temporary table for separator string values                        \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                        \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));              \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                        \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                         \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "  \n" +
                "			-- open cursor                        \n" +
                "			OPEN barcodeMatch_cursor;                        \n" +
                "  \n" +
                "			-- set str label as whereclause                        \n" +
                "			SET strLabel=pWhereClause;                 \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                        \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                        \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                        \n" +
                " 			 END IF;                       \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                         \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                        \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                        \n" +
                "			 END IF;	              \n" +
                "  \n" +
                "			-- insert all values after seprator split                         \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                        \n" +
                "			PREPARE stmt1 FROM @SQL;	                        \n" +
                "			EXECUTE stmt1;                        \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                        \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';                 \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                        \n" +
                "			barcodeMatch_loop:LOOP                        \n" +
                "				-- get all five selected values                        \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                        \n" +
                "				IF exit_loop THEN                   \n" +
                "					CLOSE barcodeMatch_cursor;                        \n" +
                "					LEAVE barcodeMatch_loop;                        \n" +
                "				END IF;                   \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                        \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                        \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                        \n" +
                "				EXECUTE stmtdelimiter;              \n" +
                "  \n" +
                "				-- get delimiter values from string                        \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                \n" +
                "				-- check for field type is static or dynamic                        \n" +
                "				-- if static field than check for mfg code and mfg part number                        \n" +
                "				IF v_fieldType = 0  THEN                    \n" +
                "					-- component_sid_stock                         \n" +
                "					-- get static field name from barcode table delimiter data element id                        \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                          \n" +
                "  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                        \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN              \n" +
                "						SET MFG_Part_No = delimiter_value_data;              \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN              \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE mfgPN=delimiter_value_data AND deletedAt IS NULL;                                        \n" +
                "						ELSE              \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;              \n" +
                "						END IF;              \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                        \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                        \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                        \n" +
                "						END IF;               \n" +
                "					END IF;                        \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                        \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN                \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                        \n" +
                "					END IF;          \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\") THEN        \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                        \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');        \n" +
                "					END IF;        \n" +
                "  \n" +
                "					IF @componentCount > 1 THEN              \n" +
                "						CLOSE barcodeMatch_cursor;                        \n" +
                "						LEAVE barcodeMatch_loop;              \n" +
                "					END IF;                 \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                        \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                         \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                        \n" +
                "  \n" +
                "				ELSE                       \n" +
                "					-- component_sid_stock_dataelement_Values                          \n" +
                "					-- dynamic fields       \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);   \n" +
                "  \n" +
                "					IF(DynamicField=\"Mfg Date Code\") THEN        \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                        \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');        \n" +
                "					END IF;        \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\") THEN        \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                        \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');        \n" +
                "					END IF;  \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                         \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                     \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                         \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                 \n" +
                "				END IF;                        \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                        \n" +
                "  \n" +
                "			-- check if mfg and component both found than                         \n" +
                "			IF (@componentCount > 1) THEN              \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                        \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                        \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                        \n" +
                "                                   IF @Mfgmatched = 0  THEN                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                        \n" +
                "				   END IF;									                        \n" +
                "			 ELSE 		              \n" +
                "				IF @mfgCount = 0 THEN                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                        \n" +
                "		                END IF;	                        \n" +
                "				IF @componentCount = 0 THEN                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                        \n" +
                "				END IF;	                        \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                          \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                        \n" +
                "			        END IF;						                        \n" +
                "			END IF;				                        \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN          \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;          \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;          \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                        \n" +
                "				END IF;          \n" +
                "			END IF;          \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                        \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	          \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					          \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;          \n" +
                "				END IF;          \n" +
                "  \n" +
                "				-- must call statements in sequence          				              \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                        \n" +
                "				PREPARE stmt1 FROM @SQL1;                        \n" +
                "				EXECUTE stmt1;                      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');          \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN          \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');          \n" +
                "				END IF;          \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);          \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN          \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);          \n" +
                "				END IF;          \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN          \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);          \n" +
                "				END IF;          \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN          \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);          \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN          \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);          \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN          \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');       \n" +
                "				END IF;      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	          \n" +
                "  \n" +
                "				SET @sql2 = UpdateValue;	                         \n" +
                "				PREPARE stmt2 FROM @SQL2;                        \n" +
                "				EXECUTE stmt2;	                        \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                        \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN              \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                         \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                        \n" +
                "				END IF;                          \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                        \n" +
                "			ELSE                       \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                        \n" +
                "			END IF;                        \n" +
                "  \n" +
                "		ELSE                    \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                         \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                        \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                          \n" +
                "		END IF;                        \n" +
                "  \n" +
                "	END block2;                                   \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "DELETE FROM br_label_template_delimiter WHERE refbrID IN (SELECT id FROM br_label_template WHERE deletedAt IS NULL AND barcodeType IS NULL);  \n" +
                "DELETE FROM br_label_template WHERE deletedAt IS NULL AND barcodeType IS NULL;  \n" +
                /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (239,'2.00','V1',' Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 239:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeOperationByWoID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeOperationByWoID`(          \n" +
                "    IN pwoID INT(11),        \n" +
                "    IN pemployeeID INT(11),    \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN      \n" +
                "IF pisUserAdmin = 1 THEN  \n" +
                "	SELECT  woOPID,  \n" +
                "	woID,  \n" +
                "	opID,  \n" +
                "	opNumber,   \n" +
                "	opName,  \n" +
                "	opVersion,   \n" +
                "	opStatus,   \n" +
                "	isStopOperation  \n" +
                "	FROM workorder_operation woop  \n" +
                "	WHERE woop.deletedAt IS NULL   \n" +
                "	AND woop.woID = pwoID AND woop.opStatus IN (1, 2);  \n" +
                "ELSE   \n" +
                "	SELECT woOPID,  \n" +
                "	opID,  \n" +
                "	woID,  \n" +
                "	opNumber,  \n" +
                "	opName,  \n" +
                "	opVersion,  \n" +
                "	opStatus,   \n" +
                "	isStopOperation  \n" +
                "	FROM workorder_operation woop   \n" +
                "	WHERE woop.woID = pwoID AND woop.opstatus IN (1,2) AND woop.deletedAt IS NULL  \n" +
                "	AND woopID IN (SELECT woope.woopID FROM workorder_operation_employee woope   \n" +
                "		WHERE woope.deletedAt IS NULL   \n" +
                "		AND woope.employeeID = pemployeeID);  \n" +
                "END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(          \n" +
                "    IN pcodeDigest VARCHAR(1000),      \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN      \n" +
                "DECLARE whereClause1 VARCHAR(255) ;    \n" +
                "DECLARE whereClause2 VARCHAR(255) ;    \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (  \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),  \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)  \n" +
                ");  \n" +
                "INSERT INTO temp_sproc_employeedetails  \n" +
                "SELECT empdep.employeeID, emp.firstname, emp.lastname,   \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName  \n" +
                "FROM employee_department empdep  \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL  \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND gc.deletedAt IS NULL  \n" +
                "LEFT JOIN employees emp ON emp.id = empdep.employeeID AND emp.deletedAt IS NULL  \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1 AND empdep.isdefault = 1;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (  \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),  \n" +
                "		buildQty VARCHAR(255),		woStatus VARCHAR(255),			isClusterApplied VARCHAR(255),  \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,  \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(50),  \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(50),	imageURL VARCHAR(5000),  \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),  \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			  \n" +
                "		poNumber VARCHAR(10000)	  \n" +
                ");  \n" +
                "IF pisUserAdmin = 1 THEN  \n" +
                "	SET whereClause1 = '';    \n" +
                "ELSE  \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe   \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)  \n" +
                ")';  \n" +
                "END IF;      \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";  \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails  \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,  \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,   \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,  \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,   \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,  \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,  \n" +
                "	NULL,			NULL,								NULL,  \n" +
                "	NULL  \n" +
                "FROM workorder wo  \n" +
                "LEFT JOIN component c ON wo.partID = c.id   \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id   \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                              \n" +
                "PREPARE query1 FROM @SQLStatement1;                              \n" +
                "EXECUTE query1;                              \n" +
                "DEALLOCATE PREPARE query1;    \n" +
                "SELECT * FROM temp_sproc_employeedetails;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (  \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)  \n" +
                ");  \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails  \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID   \n" +
                "FROM workorder_salesorder_details wosd   \n" +
                "WHERE wosd.deletedAt IS NULL   \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)  \n" +
                "GROUP BY wosd.woID;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;  \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (  \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),  \n" +
                "		fullname VARCHAR(255),		woID INT(11)  \n" +
                ");  \n" +
                "INSERT INTO temp_sproc_certificatedetails  \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID   \n" +
                "	FROM temp_sproc_workorderdetails tempWO  \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL  \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL  \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL  \n" +
                "	GROUP BY tempWO.woID;  \n" +
                "  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,   \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result  \n" +
                "SET tempWO1.colorcode = result.colorcode,  \n" +
                "tempWO1.classname = result.classname,  \n" +
                "tempWO1.standardName = result.fullname  \n" +
                "WHERE tempWO1.woID = result.woID;  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,  \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1  \n" +
                "SET tempWO1.poQty = result1.poQty,  \n" +
                "tempWO1.poNumber = result1.refPONumber  \n" +
                "WHERE tempWO1.woID = result1.woID;  \n" +
                "SELECT * FROM temp_sproc_workorderdetails;  \n" +
                "IF pisUserAdmin = 1 THEN  \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';    \n" +
                "ELSE  \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';  \n" +
                "END IF;     \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,   \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,   \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation  \n" +
                "FROM workorder_trans_empinout wte  \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL   \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL  \n" +
                "WHERE wte.deletedAt IS NULL   \n" +
                "AND wte.checkoutTime IS NULL   \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                          \n" +
                "PREPARE query2 FROM @SQLStatement2;                              \n" +
                "EXECUTE query2;                              \n" +
                "DEALLOCATE PREPARE query2;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-02-2019  *********************************** */
                "ALTER TABLE `eco_type_values` MODIFY COLUMN `name` VARCHAR(1000);  \n" +
                "ALTER TABLE eco_type_category ADD COLUMN systemGenerated TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                "ALTER TABLE eco_type_values ADD COLUMN systemGenerated TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                "TRUNCATE TABLE eco_request_type_values;  \n" +
                "DELETE FROM eco_type_values;  \n" +
                "ALTER TABLE eco_type_values AUTO_INCREMENT=0;  \n" +
                "DELETE FROM eco_type_category;  \n" +
                "ALTER TABLE eco_type_category AUTO_INCREMENT=0;  \n" +
                "INSERT  INTO `eco_type_category`(`ecoTypeCatID`,`name`,`displayOrder`,`isDeleted`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`category`,`systemGenerated`) VALUES (1,'Related Information Attached','1.00',0,'2017-12-12 00:00:00','2019-02-18 07:32:04',NULL,'1',NULL,NULL,1,1),(2,'Areas Affected','2.00',0,'2017-12-12 00:00:00','2019-02-18 07:32:17',NULL,'1',NULL,NULL,1,1),(3,'Inventory Planning','3.00',0,'2017-12-12 00:00:00','2019-02-18 07:32:24',NULL,'1',NULL,NULL,1,1),(4,'Type of Assembly','4.00',0,'2019-02-18 09:53:24','2019-02-18 09:53:24',NULL,'191',NULL,NULL,2,1),(5,'Required','5.00',0,'2019-02-18 09:53:48','2019-02-18 09:53:48',NULL,'191',NULL,NULL,2,1),(6,'Flextron Circuit Assembly (FCA) will provide','6.00',0,'2019-02-18 09:54:51','2019-02-18 09:54:51',NULL,'191',NULL,NULL,2,1),(7,'Customer will provide','7.00',0,'2019-02-18 09:55:25','2019-02-18 09:55:25',NULL,'191',NULL,NULL,2,1),(8,'Assembly Turn Around Time','8.00',0,'2019-02-18 09:56:13','2019-02-18 09:56:13',NULL,'191',NULL,NULL,2,1),(9,'PCB Lead Time (LT)','9.00',0,'2019-02-18 09:56:36','2019-02-18 09:56:36',NULL,'191',NULL,NULL,2,1),(10,'Parts LT (At the time of Quote)','10.00',0,'2019-02-18 09:57:50','2019-02-18 09:57:50',NULL,'191',NULL,NULL,2,1),(11,'Quote is based on','11.00',0,'2019-02-18 09:58:32','2019-02-18 09:58:32',NULL,'191',NULL,NULL,2,1),(12,'Quoted Price Includes','12.00',0,'2019-02-18 09:59:06','2019-02-18 09:59:06',NULL,'191',NULL,NULL,2,1),(13,'Quoted Parts may include','13.00',0,'2019-02-18 09:59:47','2019-02-18 09:59:47',NULL,'191',NULL,NULL,2,1),(14,'Parts supplied By customer','14.00',0,'2019-02-18 10:00:17','2019-02-18 10:00:17',NULL,'191',NULL,NULL,2,1),(15,'Prices are','15.00',0,'2019-02-18 10:00:34','2019-02-18 10:00:34',NULL,'191',NULL,NULL,2,1),(16,'Pre-Payment required for Turnkey project if combined PO amount higher than $5000','16.00',0,'2019-02-18 10:02:16','2019-02-18 10:02:16',NULL,'191',NULL,NULL,2,1),(17,'Customer is responsible and will be charged for','17.00',0,'2019-02-18 10:03:06','2019-02-18 10:03:06',NULL,'191',NULL,NULL,2,1),(18,'Payment Terms','18.00',0,'2019-02-18 10:03:29','2019-02-18 10:03:29',NULL,'191',NULL,NULL,2,1),(19,'Customer will pay all shipping and packaging charges','19.00',0,'2019-02-18 10:04:33','2019-02-18 10:04:33',NULL,'191',NULL,NULL,2,1),(20,'Others','20.00',0,'2019-02-18 10:04:49','2019-02-18 10:04:49',NULL,'191',NULL,NULL,2,1);  \n" +
                "INSERT  INTO `eco_type_values`(`ecoTypeValID`,`ecoTypeCatID`,`name`,`noteRequired`,`displayOrder`,`isDeleted`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`systemGenerated`) VALUES (1,1,'Marked Drawing',0,'1.00',0,'2017-12-12 00:00:00','2017-12-12 12:19:09',NULL,'1',NULL,NULL,1),(2,1,'Marked BOM',0,'2.00',0,'2017-12-12 00:00:00','2017-12-12 12:19:09',NULL,'1',NULL,NULL,1),(3,1,'Email Comm',0,'3.00',0,'2017-12-12 00:00:00','2019-02-18 07:36:37',NULL,'1',NULL,NULL,1),(4,1,'Picture',0,'4.00',0,'2017-12-12 00:00:00','2017-12-12 12:19:09',NULL,'1',NULL,NULL,1),(5,1,'Sketch',0,'5.00',0,'2017-12-12 00:00:00','2017-12-12 12:19:09',NULL,'1',NULL,NULL,1),(6,1,'Other',1,'7.00',0,'2017-12-12 00:00:00','2019-02-18 07:38:43',NULL,'1',NULL,NULL,1),(7,2,'Quotes',0,'6.00',0,'2017-12-12 00:00:00','2019-02-18 07:39:36',NULL,'1',NULL,NULL,1),(8,2,'Tooling PO',0,'9.00',0,'2017-12-12 00:00:00','2019-02-18 07:40:05',NULL,'1',NULL,NULL,1),(9,2,'Inspection',0,'11.00',0,'2017-12-12 00:00:00','2019-02-18 07:40:24',NULL,'1',NULL,NULL,1),(10,2,'SMT Operation',0,'16.00',0,'2017-12-12 00:00:00','2019-02-18 07:40:53',NULL,'1',NULL,NULL,1),(11,2,'Bill of Material',0,'4.00',0,'2017-12-12 00:00:00','2019-02-18 07:54:13',NULL,'1',NULL,NULL,1),(12,3,'Disposition excess inventory',0,'1.00',0,'2017-12-12 00:00:00','2019-02-18 07:56:35',NULL,'1',NULL,NULL,1),(13,3,'Archive All Inventory',0,'5.00',0,'2017-12-12 00:00:00','2019-02-18 07:56:51',NULL,'1',NULL,NULL,1),(15,1,'Marked Sample',0,'6.00',0,'2019-02-18 07:38:01','2019-02-18 07:38:21',NULL,'191',NULL,NULL,1),(16,2,'Design / Specifications',0,'12.00',0,'2019-02-18 07:42:03','2019-02-18 07:42:30',NULL,'191',NULL,NULL,1),(17,2,'Tooling Records',0,'7.00',0,'2019-02-18 07:43:00','2019-02-18 07:43:00',NULL,'191',NULL,NULL,1),(18,2,'Inspection Documentation',0,'12.00',0,'2019-02-18 07:43:40','2019-02-18 07:43:40',NULL,'191',NULL,NULL,1),(19,2,'PTH Operation',0,'17.00',0,'2019-02-18 07:43:59','2019-02-18 07:43:59',NULL,'191',NULL,NULL,1),(20,2,'Validation Testing',0,'3.00',0,'2019-02-18 07:44:27','2019-02-18 07:44:27',NULL,'191',NULL,NULL,1),(21,2,'Fixture/ Equipment/ Gage',0,'8.00',0,'2019-02-18 07:45:01','2019-02-18 07:45:01',NULL,'191',NULL,NULL,1),(22,2,'Procedures & Forms',0,'13.00',0,'2019-02-18 07:45:33','2019-02-18 07:45:33',NULL,'191',NULL,NULL,1),(23,2,'Testing',0,'19.00',0,'2019-02-18 07:45:47','2019-02-18 07:54:43',NULL,'191',NULL,NULL,1),(24,2,'Equipment Identification',0,'9.00',0,'2019-02-18 07:46:20','2019-02-18 07:54:25',NULL,'191',NULL,NULL,1),(25,2,'Operator Documentation',0,'22.00',0,'2019-02-18 07:46:52','2019-02-18 07:54:34',NULL,'191',NULL,NULL,1),(26,2,'Chip Programming',0,'20.00',0,'2019-02-18 07:47:14','2019-02-18 07:55:22',NULL,'191',NULL,NULL,1),(27,2,'ERP/MRP',0,'5.00',0,'2019-02-18 07:47:30','2019-02-18 07:54:59',NULL,'191',NULL,NULL,1),(28,2,'Employee Safety',0,'10.00',0,'2019-02-18 07:47:58','2019-02-18 07:55:06',NULL,'191',NULL,NULL,1),(29,2,'Employee Training',0,'15.00',0,'2019-02-18 07:48:30','2019-02-18 07:55:14',NULL,'191',NULL,NULL,1),(30,2,'Packaging / Labeling',0,'21.00',0,'2019-02-18 07:49:08','2019-02-18 07:55:33',NULL,'191',NULL,NULL,1),(31,2,'Process Improvements',0,'18.00',0,'2019-02-18 07:50:42','2019-02-18 07:53:28',NULL,'191',NULL,NULL,1),(32,3,'Rework WIP (Immediate)',0,'9.00',0,'2019-02-18 07:57:33','2019-02-18 07:57:33',NULL,'191',NULL,NULL,1),(33,3,'Customer(s) Inventory required before change',0,'2.00',0,'2019-02-18 07:58:49','2019-02-18 07:58:49',NULL,'191',NULL,NULL,1),(34,3,'Running Changes (use until depleted)',0,'6.00',0,'2019-02-18 07:59:33','2019-02-18 07:59:44',NULL,'191',NULL,NULL,1),(35,3,'Rework Finished Goods (Immediate)',0,'10.00',0,'2019-02-18 08:00:28','2019-02-18 08:00:28',NULL,'191',NULL,NULL,1),(36,3,'No Affect',0,'3.00',0,'2019-02-18 09:34:47','2019-02-18 09:34:47',NULL,'191',NULL,NULL,1),(37,3,'Coordinated Change - Customer',0,'7.00',0,'2019-02-18 09:35:34','2019-02-18 09:35:34',NULL,'191',NULL,NULL,1),(38,3,'Rework All Inv.(After ECN Implement)',0,'11.00',0,'2019-02-18 09:38:01','2019-02-18 09:38:01',NULL,'191',NULL,NULL,1),(39,3,'Internal Inventory required before change',0,'4.00',0,'2019-02-18 09:39:08','2019-02-18 09:39:08',NULL,'191',NULL,NULL,1),(40,3,'Coordinated Change - Internal',0,'8.00',0,'2019-02-18 09:40:00','2019-02-18 09:40:00',NULL,'191',NULL,NULL,1),(41,3,'Scrap current level',0,'12.00',0,'2019-02-18 09:40:29','2019-02-18 09:40:29',NULL,'191',NULL,NULL,1),(42,4,'SMT',0,'1.00',0,'2019-02-18 10:05:25','2019-02-18 10:05:25',NULL,'191',NULL,NULL,1),(43,4,'Through-Hole',0,'2.00',0,'2019-02-18 10:06:19','2019-02-18 10:06:19',NULL,'191',NULL,NULL,1),(44,4,'Mixed',0,'3.00',0,'2019-02-18 10:06:35','2019-02-18 10:06:35',NULL,'191',NULL,NULL,1),(45,4,'Cable & Wire Harness',0,'4.00',0,'2019-02-18 10:07:10','2019-02-18 10:07:10',NULL,'191',NULL,NULL,1),(46,4,'IPC A610 Class II',0,'5.00',0,'2019-02-18 10:08:35','2019-02-18 10:08:35',NULL,'191',NULL,NULL,1),(47,4,'IPC A610 Class III',0,'6.00',0,'2019-02-18 10:09:52','2019-02-18 10:09:52',NULL,'191',NULL,NULL,1),(48,5,'Paste File or Gerber for SMT',0,'1.00',0,'2019-02-18 10:14:24','2019-02-18 10:14:24',NULL,'191',NULL,NULL,1),(49,5,'Parts Placement data for SMT',0,'2.00',0,'2019-02-18 10:15:01','2019-02-18 10:15:01',NULL,'191',NULL,NULL,1),(50,5,'Assembly Drawings',0,'3.00',0,'2019-02-18 10:15:46','2019-02-18 10:15:46',NULL,'191',NULL,NULL,1),(51,5,'Samples',0,'4.00',0,'2019-02-18 10:16:02','2019-02-18 10:16:02',NULL,'191',NULL,NULL,1),(52,6,'Assembly',0,'1.00',0,'2019-02-18 10:16:36','2019-02-18 10:16:36',NULL,'191',NULL,NULL,1),(53,6,'PCB',0,'2.00',0,'2019-02-18 10:16:47','2019-02-18 10:16:47',NULL,'191',NULL,NULL,1),(54,6,'Parts as mention in BOM less any Specially Instructed Parts',0,'3.00',0,'2019-02-18 10:19:36','2019-02-18 10:19:36',NULL,'191',NULL,NULL,1),(55,7,'PCB',0,'1.00',0,'2019-02-18 10:24:04','2019-02-18 10:24:04',NULL,'191',NULL,NULL,1),(56,7,'Parts: Kitted and Marked clearly as reflected in corresponding BOM',0,'2.00',0,'2019-02-18 10:25:55','2019-02-18 10:25:55',NULL,'191',NULL,NULL,1),(57,20,'FCA will provide Parts as mentioned in BOM, drawings or data less any DO NOT INSERT parts.',0,'1.00',0,'2019-02-18 10:27:44','2019-02-18 10:27:44',NULL,'191',NULL,NULL,1),(58,8,'24 Hours',0,'1.00',0,'2019-02-18 10:28:21','2019-02-18 10:28:21',NULL,'191',NULL,NULL,1),(59,8,'3 Days',0,'2.00',0,'2019-02-18 10:28:35','2019-02-18 10:28:35',NULL,'191',NULL,NULL,1),(60,8,'5 Days',0,'3.00',0,'2019-02-18 10:28:52','2019-02-18 10:28:52',NULL,'191',NULL,NULL,1),(61,8,'10 Days',0,'4.00',0,'2019-02-18 10:29:14','2019-02-18 10:29:14',NULL,'191',NULL,NULL,1),(62,8,'3 Weeks',0,'5.00',0,'2019-02-18 10:29:39','2019-02-18 10:29:39',NULL,'191',NULL,NULL,1),(63,8,'5 Weeks',0,'6.00',0,'2019-02-18 10:30:23','2019-02-18 10:30:23',NULL,'191',NULL,NULL,1),(64,9,'24 Hours',0,'1.00',0,'2019-02-18 10:30:44','2019-02-18 10:30:44',NULL,'191',NULL,NULL,1),(65,9,'3 Days',0,'2.00',0,'2019-02-18 10:31:17','2019-02-18 10:31:17',NULL,'191',NULL,NULL,1),(66,9,'5 Days',0,'3.00',0,'2019-02-18 10:31:49','2019-02-18 10:31:49',NULL,'191',NULL,NULL,1),(67,9,'10 Days',0,'4.00',0,'2019-02-18 10:32:18','2019-02-18 10:32:18',NULL,'191',NULL,NULL,1),(68,9,'3 Weeks',0,'5.00',0,'2019-02-18 10:32:39','2019-02-18 10:32:39',NULL,'191',NULL,NULL,1),(69,9,'5 Weeks',0,'6.00',0,'2019-02-18 10:33:12','2019-02-18 10:33:12',NULL,'191',NULL,NULL,1),(70,10,'3-5 Days',0,'1.00',0,'2019-02-18 10:33:50','2019-02-18 10:33:50',NULL,'191',NULL,NULL,1),(71,10,'2 Weeks',0,'2.00',0,'2019-02-18 10:34:10','2019-02-18 10:34:10',NULL,'191',NULL,NULL,1),(72,10,'4-6 Weeks',0,'3.00',0,'2019-02-18 10:34:40','2019-02-18 10:34:40',NULL,'191',NULL,NULL,1),(73,10,'6-8 Weeks',0,'4.00',0,'2019-02-18 10:35:06','2019-02-18 10:35:06',NULL,'191',NULL,NULL,1),(74,10,'10-12 Weeks',0,'5.00',0,'2019-02-18 10:35:29','2019-02-18 10:35:29',NULL,'191',NULL,NULL,1),(75,11,'Tin/Lead (Sn/Pb) Solder',0,'1.00',0,'2019-02-18 10:36:09','2019-02-18 10:36:09',NULL,'191',NULL,NULL,1),(76,11,'Lead-Free RoHS Compliance SN100C or SAC305 Solder',0,'2.00',0,'2019-02-18 10:37:14','2019-02-18 10:37:14',NULL,'191',NULL,NULL,1),(77,12,'Masking',0,'1.00',0,'2019-02-18 10:37:41','2019-02-18 10:37:41',NULL,'191',NULL,NULL,1),(78,12,'Conformal Coating',0,'2.00',0,'2019-02-18 10:38:17','2019-02-18 10:38:17',NULL,'191',NULL,NULL,1),(79,12,'Cables/Wires',0,'3.00',0,'2019-02-18 10:39:28','2019-02-18 10:39:28',NULL,'191',NULL,NULL,1),(80,12,'Functional Testing (Customer will supply fixture)',0,'4.00',0,'2019-02-18 10:40:40','2019-02-18 10:40:40',NULL,'191',NULL,NULL,1),(81,13,'Substitute Passive parts (Customer Approval)',0,'1.00',0,'2019-02-18 10:43:21','2019-02-18 10:43:21',NULL,'191',NULL,NULL,1),(82,13,'Substitute Active parts (Customers Approval)',0,'2.00',0,'2019-02-18 10:44:39','2019-02-18 10:44:39',NULL,'191',NULL,NULL,1),(83,14,'Tape & Reel',0,'1.00',0,'2019-02-18 10:45:11','2019-02-18 10:45:11',NULL,'191',NULL,NULL,1),(84,14,'Tube or Trays',0,'2.00',0,'2019-02-18 10:45:48','2019-02-18 10:45:48',NULL,'191',NULL,NULL,1),(85,15,'Valid only if ordered all quoted together',0,'1.00',0,'2019-02-18 10:47:29','2019-02-18 10:47:29',NULL,'191',NULL,NULL,1),(86,15,'Subject to Review',0,'2.00',0,'2019-02-18 10:48:39','2019-02-18 10:48:39',NULL,'191',NULL,NULL,1),(87,16,'30%',0,'1.00',0,'2019-02-18 10:49:00','2019-02-18 10:49:00',NULL,'191',NULL,NULL,1),(88,16,'35%',0,'2.00',0,'2019-02-18 10:49:15','2019-02-18 10:49:15',NULL,'191',NULL,NULL,1),(89,16,'40%',0,'3.00',0,'2019-02-18 10:49:27','2019-02-18 10:49:27',NULL,'191',NULL,NULL,1),(90,17,'Fluctuation in material Prices',0,'1.00',0,'2019-02-18 10:51:35','2019-02-18 10:51:35',NULL,'191',NULL,NULL,1),(91,17,'Minimum Buys or Quantities',0,'2.00',0,'2019-02-18 10:52:29','2019-02-18 10:52:29',NULL,'191',NULL,NULL,1),(92,20,'Parts, PCB and data by 10 AM CST will be considered same day, Gerber data must be IN 24 hours prior to order.',0,'2.00',0,'2019-02-18 10:54:56','2019-02-18 10:54:56',NULL,'191',NULL,NULL,1),(93,18,'Net 30 with Credit Approval',0,'1.00',0,'2019-02-18 11:03:41','2019-02-18 11:03:41',NULL,'191',NULL,NULL,1),(94,18,'Pre-Pay',0,'2.00',0,'2019-02-18 11:03:58','2019-02-18 11:03:58',NULL,'191',NULL,NULL,1),(95,19,'FOB IL 60007',0,'1.00',0,'2019-02-18 11:04:29','2019-02-18 11:04:29',NULL,'191',NULL,NULL,1),(96,19,'Customer Dock',0,'2.00',0,'2019-02-18 11:04:51','2019-02-18 11:04:51',NULL,'191',NULL,NULL,1),(97,20,'Pricing is per piece and per part number unless specified otherwise and effective for 30 (Thirty) days.',0,'4.00',0,'2019-02-18 11:07:14','2019-02-18 11:07:14',NULL,'191',NULL,NULL,1),(98,20,'Prices are subject to review. FCAs liability, in any circumstances, NOT to exceed the cost of services provided.',0,'5.00',0,'2019-02-18 11:09:46','2019-02-18 11:09:46',NULL,'191',NULL,NULL,1),(99,20,'Typographical errors are subject to correction. FCA reserves right to cancel this quote for any valid reason.',0,'6.00',0,'2019-02-18 11:12:39','2019-02-18 11:12:39',NULL,'191',NULL,NULL,1),(100,20,'Customer will be responsible for all Work-In-Progress, Material-On-Hand and/or On-Order, in event of cancellation, schedule extension or design change. Customer initiated delay and change could result in additional cost and may affect delivery dates.By accepting this quote, customer agrees all terms and conditions and also acknowledge that quote terms supersedes PO terms. ',0,'3.00',0,'2019-02-19 06:33:19','2019-02-19 06:33:19',NULL,'1',NULL,NULL,1);  \n" +
                /* **************************** Add Script Version -> 19-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (240,'2.00','V1','Task List SP Changes and ECO TYPE Category Values - Vaibhav '," + userid + ");"
            );
            break;
        case 240:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "UPDATE eco_type_values  \n" +
                "SET `name` = 'Substitute Passive parts (Customer''s Approval)'  \n" +
                "WHERE ecoTypeValID=81;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "UPDATE eco_type_values  \n" +
                "SET `name` = 'Substitute Active parts (Customer''s Approval)'  \n" +
                "WHERE ecoTypeValID=82;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "UPDATE eco_type_values  \n" +
                "SET `name` = 'Prices are subject to review. FCA''s liability, in any circumstances, NOT to exceed the cost of services provided.'  \n" +
                "WHERE ecoTypeValID=98;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "UPDATE eco_type_values  \n" +
                "SET createdBy=1;  \n" +
                "  \n" +
                "UPDATE eco_type_category  \n" +
                "SET createdBy=1;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (241,'2.00','V1','Update Script for ECO records - Vaibhav'," + userid + ");"
            );
            break;
        case 241:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(            \n" +
                "    IN pcodeDigest VARCHAR(1000),        \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN        \n" +
                "DECLARE whereClause1 VARCHAR(255) ;      \n" +
                "DECLARE whereClause2 VARCHAR(255) ;      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;    \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (    \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),    \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)    \n" +
                ");    \n" +
                "INSERT INTO temp_sproc_employeedetails    \n" +
                "SELECT empdep.employeeID, emp.firstname, emp.lastname,     \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName    \n" +
                "FROM employee_department empdep    \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL    \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND gc.deletedAt IS NULL    \n" +
                "LEFT JOIN employees emp ON emp.id = empdep.employeeID AND emp.deletedAt IS NULL    \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1 AND empdep.isdefault = 1;    \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;    \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (    \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),    \n" +
                "		buildQty int(11),		woStatus int(100),			isClusterApplied VARCHAR(255),    \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,    \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),    \n" +
                "		nickName VARCHAR(50),		liveInternalVersion int(11),	imageURL VARCHAR(1000),    \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),    \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			    \n" +
                "		poNumber VARCHAR(1000)	    \n" +
                ");    \n" +
                "IF pisUserAdmin = 1 THEN    \n" +
                "	SET whereClause1 = '';      \n" +
                "ELSE    \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe     \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)    \n" +
                ")';    \n" +
                "END IF;        \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";    \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails    \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,    \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,     \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,    \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,     \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,    \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,    \n" +
                "	NULL,			NULL,								NULL,    \n" +
                "	NULL    \n" +
                "FROM workorder wo    \n" +
                "LEFT JOIN component c ON wo.partID = c.id     \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id     \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                                \n" +
                "PREPARE query1 FROM @SQLStatement1;                                \n" +
                "EXECUTE query1;                                \n" +
                "DEALLOCATE PREPARE query1;      \n" +
                "SELECT * FROM temp_sproc_employeedetails;    \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;    \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (    \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)    \n" +
                ");    \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails    \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID     \n" +
                "FROM workorder_salesorder_details wosd     \n" +
                "WHERE wosd.deletedAt IS NULL     \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)    \n" +
                "GROUP BY wosd.woID;    \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;    \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (    \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),    \n" +
                "		fullname VARCHAR(255),		woID INT(11)    \n" +
                ");    \n" +
                "INSERT INTO temp_sproc_certificatedetails    \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID     \n" +
                "	FROM temp_sproc_workorderdetails tempWO    \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL    \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL    \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL    \n" +
                "	GROUP BY tempWO.woID;    \n" +
                "  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,     \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result    \n" +
                "SET tempWO1.colorcode = result.colorcode,    \n" +
                "tempWO1.classname = result.classname,    \n" +
                "tempWO1.standardName = result.fullname    \n" +
                "WHERE tempWO1.woID = result.woID;    \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,    \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1    \n" +
                "SET tempWO1.poQty = result1.poQty,    \n" +
                "tempWO1.poNumber = result1.refPONumber    \n" +
                "WHERE tempWO1.woID = result1.woID;    \n" +
                "SELECT * FROM temp_sproc_workorderdetails;    \n" +
                "IF pisUserAdmin = 1 THEN    \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';      \n" +
                "ELSE    \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';    \n" +
                "END IF;       \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,     \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,     \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation    \n" +
                "FROM workorder_trans_empinout wte    \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL     \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL    \n" +
                "WHERE wte.deletedAt IS NULL     \n" +
                "AND wte.checkoutTime IS NULL     \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                            \n" +
                "PREPARE query2 FROM @SQLStatement2;                                \n" +
                "EXECUTE query2;                                \n" +
                "DEALLOCATE PREPARE query2;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (242,'2.00','V1','Resolved script issue for get emplpoyee code details- Vaibhav'," + userid + ");"
            );
            break;
        case 242:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (35,'FUNCTESTREQUIRED','#d09638','Functional testing is required for <% MFG %> <% MFG PN %>.','Functional testing is required for <% MFG %> <% MFG PN %>.','<% MFG %>,<% MFG PN %>','1','2019-01-31',NULL,NULL,NULL,NULL,NULL,'Functional Testing Required');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (36,'REQUIREMOUNTINGTYPE','#568923','Mounting Type <% Mounting Types %> is not exists.','Mounting Type <% Mounting Types %> is not exists.','<% Mounting Types %>','1','2019-02-19',NULL,NULL,NULL,NULL,NULL,'Require Mounting Type');  \n" +
                "  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (37,'REQUIREFUNCTIONALTYPE','#562453','Functional Type <% Functional Types %> is not exists.','Functional Type <% Functional Types %> is not exists.','<% Functional Types %>','1','2019-02-19',NULL,NULL,NULL,NULL,NULL,'Require Functional Type');  \n" +
                "  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('Mounting Types','mountingtypes',35,'1',0,0);  \n" +
                "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`, `isActive`, `isAdditionalField`)  \n" +
                "VALUES('Functional Types','functionaltypes',36,'1',0,0);  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `matingPartRquiredStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `driverToolsRequiredStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `functionalTestingRequiredStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems ADD COLUMN `requireMountingTypeStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems ADD COLUMN `requireFunctionalTypeStep` TINYINT(1);  \n" +
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                      \n" +
                "	IN ppageIndex INT(11),                      \n" +
                "	IN precordPerPage INT(11),                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "	IN pWhereClause VARCHAR(16383)                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "DECLARE pOffset INT(11);                      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                       \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                       \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                                     \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'           \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Category'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Functional Testing Required'          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'          \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,                       \n" +
                "              description, systemVariable,logicID, displayName, org_description,updatedAt                   \n" +
                "			FROM `rfq_lineitems_errorcode`                      \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                      \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                      \n" +
                "		ELSE                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "		END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "			SET pWhereClause = '1=1' ;                      \n" +
                "		END IF;	                      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "		ELSE	                      \n" +
                "			SET rowNumWhere = '';                      \n" +
                "		END IF;	                      \n" +
                "  \n" +
                "		/* to get total count of rows */                      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                      \n" +
                "		PREPARE query1 FROM @SQLStatement1;                      \n" +
                "		EXECUTE query1;                      \n" +
                "		DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "		PREPARE query2 FROM @SQLStatement2;                      \n" +
                "		EXECUTE query2;                      \n" +
                "		DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                            \n" +
                "	IN ppartID INT                    \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                    \n" +
                "	SELECT 	a.id,         \n" +
                "		a.lineID,         \n" +
                "		a.qpa,         \n" +
                "		a.refDesig,         \n" +
                "		a.custPN,        \n" +
                "		a.custPNID,                                 \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                                \n" +
                "		a.description,        \n" +
                "		a.level,        \n" +
                "		a.numOfPosition,        \n" +
                "		a.customerRev,         \n" +
                "		a.customerDescription,         \n" +
                "		a.customerPartDesc,                                 \n" +
                "		CONCAT(part.partTypeName) partclassID,         \n" +
                "		a.isInstall,         \n" +
                "		a.isPurchase,         \n" +
                "		a.leadQty,         \n" +
                "		a.attritionRate,        \n" +
                "		a.valueAddedCost,        \n" +
                "		a.refRFQLineItemID,                      \n" +
                "		a.dnpQty,         \n" +
                "		a.dnpDesig,         \n" +
                "		a.qpaDesignatorStep,        \n" +
                "		a.duplicateCPNStep,      \n" +
                "		a.requireMountingTypeStep,      \n" +
                "		a.requireFunctionalTypeStep,      \n" +
                "		a.qpaDesignatorColorPriority,        \n" +
                "		a.mergeLines,        \n" +
                "		a.lineMergeStep,        \n" +
                "		a.isBuyDNPQty                      \n" +
                "	FROM rfq_lineitems a                      \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                      \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0           \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                                \n" +
                "  \n" +
                "	SELECT 	b.id,        \n" +
                "		b.lineID,         \n" +
                "		b.qpa,         \n" +
                "		b.refDesig,                             \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                            \n" +
                "		a.mfgCodeID,         \n" +
                "		a.mfgPN,         \n" +
                "		a.mfgPNID,                                \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                            \n" +
                "		a.distMfgCodeID,         \n" +
                "		a.distPN,         \n" +
                "		a.distMfgPNID,                                 \n" +
                "		b.custPN,         \n" +
                "		b.custPNID,         \n" +
                "		b.uomID,         \n" +
                "		a.description descriptionAlternate,         \n" +
                "		b.description,         \n" +
                "		b.level,         \n" +
                "		b.numOfPosition,         \n" +
                "		b.customerRev,         \n" +
                "		b.customerDescription,         \n" +
                "		b.customerPartDesc,                          \n" +
                "		b.partclassID,         \n" +
                "		b.isInstall,         \n" +
                "		b.isPurchase,         \n" +
                "		b.leadQty,         \n" +
                "		b.attritionRate,         \n" +
                "		b.valueAddedCost,         \n" +
                "		b.refRFQLineItemID,                                 \n" +
                "		b.dnpQty,         \n" +
                "		b.dnpDesig,         \n" +
                "		a.id AS rfqAlternatePartID,         \n" +
                "		b.qpaDesignatorStep,        \n" +
                "		b.qpaDesignatorColorPriority,         \n" +
                "		b.duplicateCPNStep,  \n" +
                "		b.requireMountingTypeStep,  \n" +
                "		b.requireFunctionalTypeStep,      \n" +
                "		b.isBuyDNPQty,                      \n" +
                "		a.mfgVerificationStep,         \n" +
                "		a.mfgDistMappingStep,        \n" +
                "		a.mfgCodeStep,        \n" +
                "		a.customerApproval,        \n" +
                "		a.org_mfgCode,         \n" +
                "		a.org_mfgPN,                              \n" +
                "		a.org_distributor,         \n" +
                "		a.org_distPN,                              \n" +
                "		a.distVerificationStep,         \n" +
                "		a.distCodeStep,         \n" +
                "		a.getMFGPNStep,         \n" +
                "		a.obsoletePartStep,        \n" +
                "		a.mfgGoodPartMappingStep,        \n" +
                "		a.mfgPNStep,         \n" +
                "		a.distPNStep,                            \n" +
                "		a.badMfgPN,         \n" +
                "		a.distGoodPartMappingStep,         \n" +
                "		a.nonRohsStep,         \n" +
                "		a.oneRohsComponentStep,         \n" +
                "		a.epoxyStep,         \n" +
                "		a.invalidConnectorTypeStep,        \n" +
                "		a.duplicateMPNInSameLineStep,      \n" +
                "		a.mismatchMountingTypeStep,      \n" +
                "		a.mismatchFunctionalCategoryStep,         \n" +
                "		a.restrictUseWithPermissionStep,      \n" +
                "		a.restrictUsePermanentlyStep,        \n" +
                "		a.userData1,        \n" +
                "		a.userData2,    \n" +
                "		a.userData3,    \n" +
                "		a.userData4,    \n" +
                "		a.userData5,    \n" +
                "		a.userData6,    \n" +
                "		a.userData7,    \n" +
                "		a.userData8,    \n" +
                "		a.userData9,    \n" +
                "		a.userData10,    \n" +
                "		a.pickupPadRequiredStep,  \n" +
                "		a.matingPartRquiredStep,  \n" +
                "		a.driverToolsRequiredStep,  \n" +
                "		a.functionalTestingRequiredStep,  \n" +
                "		CONCAT(part.partTypeName) parttypeID,        \n" +
                "		CONCAT(mount.name) mountingtypeID,         \n" +
                "		CONCAT(cat.categoryname) partcategoryID,        \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                          \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                        \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                      \n" +
                "		CASE WHEN                       \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                      \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                      \n" +
                "			THEN 1 ELSE 0 END isObsolete,                      \n" +
                "		co.mfgPNDescription,        \n" +
                "		co.pitch,      \n" +
                "		co.partPackage,      \n" +
                "		co.value,      \n" +
                "		co.tolerance,      \n" +
                "		co.voltage,      \n" +
                "		co.packaging,      \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment                  \n" +
                "	FROM rfq_lineitems_alternatepart a                                  \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                                   \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                            \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0         \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0        \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0        \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                         \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                          \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                                \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                            \n" +
                "	IN pPartID INT(11)                       \n" +
                "	)  \n" +
                "BEGIN                                \n" +
                "	DECLARE pValidCount INT(11);                            \n" +
                "	DECLARE pInValidCount INT(11);                            \n" +
                "	DECLARE pTotalCount INT(11);                        \n" +
                "	DECLARE pProgress INT(11);                            \n" +
                "	SET pProgress = 0;                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                  \n" +
                "	SELECT  p.rfqLineItemsID,                       \n" +
                "	CASE                       \n" +
                "		WHEN                       \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                       \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND                  \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND                 \n" +
                "			IFNULL(l.requireFunctionalTypeStep,0) = 1 AND                 \n" +
                "			IFNULL(l.requireMountingTypeStep,0) = 1 AND                 \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND                       \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                       \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND                       \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND                       \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND                       \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND                       \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND                       \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                       \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND                       \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND                       \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                       \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND                      \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND                \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND            \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND            \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND            \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND              \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1   AND          \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND              \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND        \n" +
                "			IFNULL(p.pickupPadRequiredStep,0) = 1   AND   \n" +
                "			IFNULL(p.matingPartRquiredStep,0) = 1   AND   \n" +
                "			-- IFNULL(p.driverToolsRequiredStep,0) = 1   AND   \n" +
                "			IFNULL(p.functionalTestingRequiredStep,0) = 1                                   \n" +
                "		THEN 1                      \n" +
                "		ELSE 0                      \n" +
                "	END AS ProgressCount                      \n" +
                "	FROM rfq_lineitems l                      \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                      \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                      \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;                      \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                      \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;     \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                      \n" +
                "		SET pProgress = 0;                      \n" +
                "	ELSE                       \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	SELECT pProgress;                        \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (243,'2.00','V1',' Added BOM validation for required fields  - Jignesh K '," + userid + ");"
            );
            break;
        case 243:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(    \n" +
                "	IN pwoID INT(11)  ,    \n" +
                "	IN pwoOPID INT(11)                                                                       \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN    \n" +
                "  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`FCORemark`, `wo`.`buildQty`,    \n" +
                "			    `wo`.`woVersion`, `wo`.`isNoClean`, `wo`.`isWatersoluble`,    \n" +
                "			    GROUP_CONCAT((SELECT fullName FROM certificate_standards     \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',    \n" +
                "					(SELECT className FROM standard_class     \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,     \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL     \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,    \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL     \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,    \n" +
                "			    `ca`.`PIDCode` , `ca`.`mfgPNDescription` , `ca`.`liveInternalVersion` , `ca`.`RoHSStatusID` ,    \n" +
                "			    (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,    \n" +
                "			       salesorddet.totalpoQty, salesorddet.poQty ,    \n" +
                "   			       salesorddet.totalmrpQty, salesorddet.mrpQty ,    \n" +
                "				salesorddet.poNumber , salesorddet.salesOrderNumber    \n" +
                "		FROM workorder AS `wo`     \n" +
                "  \n" +
                "		 LEFT OUTER JOIN `workorder_certification` AS `wocerti`     \n" +
                "		     ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL       \n" +
                "  \n" +
                "		  LEFT OUTER JOIN `component` AS `ca`    \n" +
                "		  ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL        \n" +
                "  \n" +
                "			LEFT OUTER JOIN (SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,    \n" +
                "					SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,    \n" +
                "					GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber    \n" +
                "  \n" +
                "					FROM `workorder_salesorder_details` AS `wsd`     \n" +
                "  \n" +
                "						INNER JOIN `salesorderdet` AS `sod`     \n" +
                "						ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "						INNER JOIN `salesordermst` AS `som`     \n" +
                "						ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL     \n" +
                "					WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet    \n" +
                "  \n" +
                "			ON salesorddet.woID = `wo`.`woID`    \n" +
                "  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID    \n" +
                "		GROUP BY `wo`.`woID` ;    \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN    \n" +
                "  \n" +
                "  \n" +
                "		SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`FCORemark`, `wo`.`buildQty`,    \n" +
                "			`wo`.`woVersion`, `wo`.`isNoClean`, `wo`.`isWatersoluble`,    \n" +
                "			 GROUP_CONCAT((SELECT fullName FROM certificate_standards     \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',    \n" +
                "					(SELECT className FROM standard_class     \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,    \n" +
                "			`woop`.opName , `woop`.opNumber , `woop`.opVersion ,    \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , `ca`.`liveInternalVersion` , `ca`.`RoHSStatusID` ,    \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,    \n" +
                "			  salesorddet.totalpoQty, salesorddet.poQty ,    \n" +
                "   			       salesorddet.totalmrpQty, salesorddet.mrpQty ,    \n" +
                "				salesorddet.poNumber , salesorddet.salesOrderNumber    \n" +
                "		FROM workorder AS `wo`     \n" +
                "  \n" +
                "		LEFT OUTER JOIN `workorder_certification` AS `wocerti`     \n" +
                "		 ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL       \n" +
                "  \n" +
                "			LEFT OUTER JOIN `workorder_operation` AS `woop`    \n" +
                "			  ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID     \n" +
                "  \n" +
                "			  LEFT OUTER JOIN `component` AS `ca`    \n" +
                "			  ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL        \n" +
                "  \n" +
                "			      LEFT OUTER JOIN (SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,    \n" +
                "						SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,    \n" +
                "						GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber    \n" +
                "  \n" +
                "						FROM `workorder_salesorder_details` AS `wsd`     \n" +
                "  \n" +
                "							INNER JOIN `salesorderdet` AS `sod`     \n" +
                "							ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "							INNER JOIN `salesordermst` AS `som`     \n" +
                "							ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL     \n" +
                "						WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet    \n" +
                "  \n" +
                "			ON salesorddet.woID = `wo`.`woID`    \n" +
                "  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID    \n" +
                "		GROUP BY `wo`.`woID` ;    \n" +
                "  \n" +
                "	END IF ;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (244,'2.00','V1',' Sproc_GetWOHeaderDisplayDetails updated - KETAN '," + userid + ");"
            );
            break;
        case 244:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(              \n" +
                "    IN pcodeDigest VARCHAR(1000),          \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN          \n" +
                "DECLARE whereClause1 VARCHAR(255) ;        \n" +
                "DECLARE whereClause2 VARCHAR(255) ;        \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;      \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (      \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),      \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)      \n" +
                ");      \n" +
                "INSERT INTO temp_sproc_employeedetails      \n" +
                "SELECT empdep.employeeID, emp.firstname, emp.lastname,       \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName      \n" +
                "FROM employee_department empdep      \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL      \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND gc.deletedAt IS NULL      \n" +
                "LEFT JOIN employees emp ON emp.id = empdep.employeeID AND emp.deletedAt IS NULL      \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1 AND empdep.isdefault = 1;      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;      \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (      \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),      \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),      \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,      \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),      \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(100),	imageURL VARCHAR(1000),      \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),      \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			      \n" +
                "		poNumber VARCHAR(1000)	      \n" +
                ");      \n" +
                "IF pisUserAdmin = 1 THEN      \n" +
                "	SET whereClause1 = '';        \n" +
                "ELSE      \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe       \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)      \n" +
                ")';      \n" +
                "END IF;          \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";      \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails      \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,      \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,       \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,      \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,       \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,      \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,      \n" +
                "	NULL,			NULL,								NULL,      \n" +
                "	NULL      \n" +
                "FROM workorder wo      \n" +
                "LEFT JOIN component c ON wo.partID = c.id       \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id       \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                                  \n" +
                "PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "EXECUTE query1;                                  \n" +
                "DEALLOCATE PREPARE query1;        \n" +
                "SELECT * FROM temp_sproc_employeedetails;      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;      \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (      \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)      \n" +
                ");      \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails      \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID       \n" +
                "FROM workorder_salesorder_details wosd       \n" +
                "WHERE wosd.deletedAt IS NULL       \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)      \n" +
                "GROUP BY wosd.woID;      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;      \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (      \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),      \n" +
                "		fullname VARCHAR(255),		woID INT(11)      \n" +
                ");      \n" +
                "INSERT INTO temp_sproc_certificatedetails      \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID       \n" +
                "	FROM temp_sproc_workorderdetails tempWO      \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL      \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL      \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL      \n" +
                "	GROUP BY tempWO.woID;      \n" +
                "  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,       \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result      \n" +
                "SET tempWO1.colorcode = result.colorcode,      \n" +
                "tempWO1.classname = result.classname,      \n" +
                "tempWO1.standardName = result.fullname      \n" +
                "WHERE tempWO1.woID = result.woID;      \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,      \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1      \n" +
                "SET tempWO1.poQty = result1.poQty,      \n" +
                "tempWO1.poNumber = result1.refPONumber      \n" +
                "WHERE tempWO1.woID = result1.woID;      \n" +
                "SELECT * FROM temp_sproc_workorderdetails;      \n" +
                "IF pisUserAdmin = 1 THEN      \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';        \n" +
                "ELSE      \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';      \n" +
                "END IF;         \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,       \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,       \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation      \n" +
                "FROM workorder_trans_empinout wte      \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL       \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL      \n" +
                "WHERE wte.deletedAt IS NULL       \n" +
                "AND wte.checkoutTime IS NULL       \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                              \n" +
                "PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "EXECUTE query2;                                  \n" +
                "DEALLOCATE PREPARE query2;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (245,'2.00','V1','SP Sproc_GetWorkorderEmployeeDetailsByEmpCode - Vaibhav '," + userid + ");"
            );
            break;


        case 245:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */

                "DROP PROCEDURE IF EXISTS `Sproc_CreatePartAssyBomRelationship` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreatePartAssyBomRelationship`(              \n" +
                "	IN pPartID INT,       \n" +
                "	IN pUserID INT      \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE subAssyType INT(11);  \n" +
                "  \n" +
                "	SET subAssyType = 3;    \n" +
                "  \n" +
                "		DELETE FROM part_sub_assy_relationship WHERE partId=pPartID;      \n" +
                "		INSERT INTO part_sub_assy_relationship(partId, prPerPartId, LEVEL, lineItemId, prPartLineItemID, createdAt, createdBy)      \n" +
                "  \n" +
                "		WITH RECURSIVE cte AS      \n" +
                "		(      \n" +
                "		  SELECT  rl.Id  AS lineItemId, 0  AS parentLineItemId, c.Id AS mfgPNID, 1 AS LEVEL, c.Id partId, c.Id AS ParentPartId      \n" +
                "		  FROM rfq_lineitems rl , rfq_lineitems_alternatepart rla, component c       \n" +
                "		  WHERE  rl.Id = rla.rfqLineItemsID AND rla.mfgPNID = c.Id  AND rl.partId=pPartID  AND  c.category=subAssyType      \n" +
                "		  AND c.deletedAt IS NULL AND rl.deletedAT IS NULL AND rla.deletedAt IS NULL      \n" +
                "  \n" +
                "		  UNION ALL      \n" +
                "		  SELECT rlp.Id AS lineItemId, parent.lineItemId  AS parentLineItemId, cp.Id AS mfgPNID, (parent.LEVEL +1)  AS LEVEL, cp.Id AS partId, parent.partId ParentPartId      \n" +
                "		  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte parent       \n" +
                "		  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlp.partId = parent.partId AND  cp.category=subAssyType      \n" +
                "		  AND cp.deletedAt IS NULL AND rlp.deletedAT IS NULL AND rlap.deletedAt IS NULL      \n" +
                "		)      \n" +
                "  \n" +
                "		SELECT pPartID AS PartId, pPartID prPerPartId, 0 LEVEL,  NULL lineItemId, NULL prParentLineItemID,  NOW(), pUserID      \n" +
                "		UNION ALL      \n" +
                "		SELECT pPartID AS partId, IF(partId = 0, NULL,partId) , LEVEL, IF(lineItemId = 0,NULL,lineItemId) , IF(parentLineItemid = 0, NULL,parentLineItemid),  NOW(), pUserID FROM cte;      \n" +
                "END;  \n" +


                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),                              \n" +
                "	IN pPartID INT                         \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DECLARE pOffset INT(11);                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                              \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                              \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                 \n" +
                "			com.PIDCode,    \n" +
                "             GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon    \n" +
                "            )AS mfgPN,     \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)               \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component               \n" +
                "			FROM rfq_lineitems_alternatepart ra                              \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                              \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                              \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                            \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0             \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0              \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                             \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                              \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                              \n" +
                "    END;  \n" +


                "DROP PROCEDURE IF EXISTS `Sproc_CreatePartAssyBomRelationshipForAllParent` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreatePartAssyBomRelationshipForAllParent`(             \n" +
                "	IN pPartID INT,       \n" +
                "	IN pUserID INT      \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE subAssyType INT(11);  \n" +
                "	DECLARE pParentPartID INT(11);  \n" +
                "	DECLARE parentPartsCount INT(11);  \n" +
                "  \n" +
                "	SET subAssyType = 3;    \n" +
                "  \n" +
                "  \n" +
                "	#Call SP Sproc_CreatePartAssyBomRelationship recursive for all parent assembly  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TempAllParentParts AS          \n" +
                "  \n" +
                "	WITH RECURSIVE cte AS    \n" +
                "	(    \n" +
                "	  SELECT  0 AS rfqlineItemId, c.Id AS partId, c.id AS childPartId    \n" +
                "	  FROM component c     \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL    \n" +
                "  \n" +
                "	  UNION ALL    \n" +
                "	  SELECT rlp.id AS rfqlineItemId, rlp.partId AS partId, child.partId AS childPartId  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child     \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType    \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL    \n" +
                "	)    \n" +
                "	SELECT  DISTINCT partId FROM cte;    \n" +
                "	all_parent_part_loop: LOOP    \n" +
                "		SELECT COUNT(1) INTO parentPartsCount FROM TempAllParentParts;    \n" +
                "		IF parentPartsCount = 0 THEN                  \n" +
                "			LEAVE all_parent_part_loop;                \n" +
                "		END IF;       \n" +
                "  \n" +
                "		SELECT partID INTO pParentPartID FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "		CALL Sproc_CreatePartAssyBomRelationship(pParentPartID,  pUserID);  \n" +
                "  \n" +
                "		DELETE FROM TempAllParentParts LIMIT 1;    \n" +
                "  \n" +
                "	END LOOP all_parent_part_loop;    \n" +
                "	DROP TEMPORARY TABLE TempAllParentParts;  \n" +
                "  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                \n" +
                "	DECLARE pIsUpdateRequired BOOL;      \n" +
                "	DECLARE pLiveInternalVersion INT(11);           \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);                \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);                \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                \n" +
                "	DECLARE oldUOM VARCHAR(50);                \n" +
                "	DECLARE newUOM VARCHAR(50);                \n" +
                "	DECLARE pCompanyName VARCHAR(100);              \n" +
                "	DECLARE pRfqAssID INT(11);             \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;      \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;       \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';              \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN      \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",                \n" +
                "			CAST(OLD.lineID AS CHAR), CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN            \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",                \n" +
                "			CAST(OLD.qpa AS CHAR), CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",                \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",                \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN         \n" +
                "		SET pIsUpdateRequired = TRUE;              \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",                \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Install\",                \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN              \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Buy\",                \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",                \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",                \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",                \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",                \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN                 \n" +
                "		IF OLD.partclassID != 0                \n" +
                "			THEN                 \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;                \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;                \n" +
                "			ELSE                 \n" +
                "				SET oldPartTypeName = '';                \n" +
                "				SET oldMountingTypeName = '';                \n" +
                "		END IF;                \n" +
                "		IF NEW.partclassID != 0                \n" +
                "			THEN                 \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                \n" +
                "			ELSE                 \n" +
                "				SET newPartTypeName = '';                \n" +
                "				SET newMountingTypeName = '';                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",                \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),                \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),                \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",                \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead\",                \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;		      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",                \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",                \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN                 \n" +
                "		IF OLD.uomID IS NOT NULL                \n" +
                "			THEN                 \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;                \n" +
                "			ELSE                 \n" +
                "				SET oldUOM = '';                \n" +
                "		END IF;                \n" +
                "		IF NEW.uomID IS NOT NULL                \n" +
                "			THEN                 \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                \n" +
                "			ELSE                 \n" +
                "				SET newUOM = '';                \n" +
                "		END IF;                \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",                \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",                \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",                \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "			oldValue,newValue,changeVersion,                \n" +
                "			createdAt,createdBy)                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",                \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "			SYSDATE(),NEW.updatedBy);                \n" +
                "	END IF;         \n" +
                "  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN      \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN      \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	      \n" +
                "    	DECLARE pLiveInternalVersion INT(11);                   \n" +
                "	DECLARE pRfqAssID INT(11);           \n" +
                "	DECLARE pPartID INT(11);                  \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);                  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);                  \n" +
                "	DECLARE pCompanyName VARCHAR(100);                   \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);          \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;    \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;             \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;        \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor\",                  \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor PN\",                  \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",                  \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;	                  \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",                  \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN              \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN          \n" +
                "			SET pDeleteMessage =\"MFG PN \";             \n" +
                "		ELSE          \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);            \n" +
                "		END IF;          \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",                  \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.deletedBy);                  \n" +
                "	END IF;	                  \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                    \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN                   \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL                  \n" +
                "			THEN                   \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;                  \n" +
                "			ELSE                   \n" +
                "				SET oldRfqAssyBom = '';                  \n" +
                "		END IF;                  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL                  \n" +
                "			THEN                   \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;                  \n" +
                "			ELSE                   \n" +
                "				SET newRfqAssyBom = '';                  \n" +
                "		END IF;            \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN                  \n" +
                "			SET pIsUpdateRequired = TRUE;      \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",                  \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.updatedBy);                  \n" +
                "		END IF;          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                  \n" +
                "			CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",                  \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "	IF pIsUpdateRequired = TRUE THEN      \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +


                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                \n" +
                "	DECLARE pIsUpdateRequired BOOL;      \n" +
                "	DECLARE pLiveInternalVersion INT(11);                 \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                \n" +
                "	DECLARE newUOM VARCHAR(50);                \n" +
                "	DECLARE pCompanyName VARCHAR(100);         \n" +
                "	DECLARE pRfqAssID INT(11);          \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;      \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;      \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';            \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;                \n" +
                "	IF pLiveInternalVersion > 0 THEN                 \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;      \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Item\",                \n" +
                "				NULL, CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;             \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"QPA\",                \n" +
                "				NULL, CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN     \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"REF DES\",                \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"CPN\",                \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.level IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Level\",                \n" +
                "				NULL, CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;      \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Install\",                \n" +
                "				NULL, CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN                 \n" +
                "			SET pIsUpdateRequired = TRUE;      \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Buy\",                \n" +
                "				NULL, CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.isActive IS NOT NULL THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;      \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Active\",                \n" +
                "				NULL, CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.leadQty IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead Qty\",                \n" +
                "				NULL, CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.attritionRate IS NOT NULL THEN     \n" +
                "			SET pIsUpdateRequired = TRUE;      \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Overage %\",                \n" +
                "				NULL, CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Rev\",                \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.partclassID IS NOT NULL THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;                 \n" +
                "			IF NEW.partclassID != 0                \n" +
                "				THEN                 \n" +
                "					SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                \n" +
                "					SELECT `name` INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                \n" +
                "				ELSE                 \n" +
                "					SET newPartTypeName = '';                \n" +
                "					SET newMountingTypeName = '';                \n" +
                "			END IF;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Mounting Type\",                \n" +
                "				NULL,                \n" +
                "				CONCAT(newPartTypeName,' | ', newMountingTypeName),                \n" +
                "				CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Comment\",                \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;             \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead\",                \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN QTY\",                \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN DES\",                \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			IF NEW.uomID IS NOT NULL                \n" +
                "				THEN                 \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                \n" +
                "				ELSE                 \n" +
                "					SET newUOM = '';                \n" +
                "			END IF;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"UOM\",                \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.refRFQLineItemID IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Parent Line\",                \n" +
                "				NULL, CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Part Desc\",                \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DNP Qty Buy\",                \n" +
                "				NULL, CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN      \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);      \n" +
                "		END IF;     \n" +
                "  \n" +
                "	END IF;                \n" +
                "  \n" +
                "END;  \n" +



                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	      \n" +
                "	DECLARE pLiveInternalVersion INT(11);             \n" +
                "	DECLARE pRfqAssID INT(11);          \n" +
                "	DECLARE pPartID INT(11);             \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);            \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	SET pIsUpdateRequired = FALSE;      \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;                 \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;        \n" +
                "  \n" +
                "	SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';            \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN             \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,             \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor\",            \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Distributor PN\",            \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN     \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",            \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",            \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;		            \n" +
                "  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			IF NEW.rfqAssyBomID IS NOT NULL            \n" +
                "				THEN             \n" +
                "					SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;            \n" +
                "				ELSE             \n" +
                "					SET newRfqAssyBom = '';            \n" +
                "			END IF;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",            \n" +
                "				NULL,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",            \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN    \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history             \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,            \n" +
                "				oldValue,newValue,changeVersion,            \n" +
                "				createdAt,createdBy)             \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",            \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),            \n" +
                "				SYSDATE(),NEW.createdBy);            \n" +
                "		END IF;            \n" +
                "		IF pIsUpdateRequired = TRUE THEN      \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);      \n" +
                "		END IF;      \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "END;  \n" +

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (246,'2.00','V1','Update SP and trigger for recursive BOM update chagnes - Shailesh'," + userid + ");"
            );
            break;
        case 246:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/20/2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_retrive_bin_to_transfer` ;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(  \n" +
                "          pWarehouseID int(11)   \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount  \n" +
                "	FROM component_sid_stock   \n" +
                "	WHERE IFNULL(isDeleted,0) = 0  \n" +
                "	group by binID;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS   \n" +
                "	SELECT 	b.id, b.name, b.isPermanentBin, 0 uidCount   \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)  \n" +
                "	AND 	IFNULL(b.isActive,1) = 1   \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;  \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c  \n" +
                "	set t.uidCount = c.uidCount  \n" +
                "	where t.id = c.binID;  \n" +
                "  \n" +
                "	SELECT * FROM tempBinDet;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;  \n" +
                "	DROP TEMPORARY TABLE tempBinDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/20/2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_retrive_warehouse_to_transfer` ;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(         \n" +
                "	pDeptID INT(11)     \n" +
                ")  \n" +
                "BEGIN           \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS      \n" +
                "	SELECT 	w.id, w.name, w.isPermanentWH, 0 binCount, 0 uidCount    \n" +
                "	FROM 	warehousemst w    \n" +
                "	WHERE 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID,IFNULL(w.parentWHID,0))    \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1    \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0    \n" +
                "	AND 	IFNULL(w.isActive,1) = 1;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS      \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID    \n" +
                "	FROM 	binmst b    \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)    \n" +
                "	AND 	IFNULL(b.isActive,1) = 1     \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS    \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount    \n" +
                "	FROM 	component_sid_stock     \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)    \n" +
                "	AND		IFNULL(isDeleted,0) = 0    \n" +
                "	GROUP BY binID;    \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t, tempActiveBinIDs c    \n" +
                "	SET 	t.uidCount = c.uidCount    \n" +
                "	WHERE 	t.id = c.binID;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS     \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount    \n" +
                "	FROM 	tempBinDet     \n" +
                "	GROUP BY warehouseID;    \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t, tempActiveWarehouseIDs c    \n" +
                "	SET 	t.binCount = c.binCount,    \n" +
                "			t.uidCount = c.uidCount    \n" +
                "	WHERE 	t.id = c.warehouseID;    \n" +
                "	SELECT 	* FROM tempWarehouseDet;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;    \n" +
                "	DROP TEMPORARY TABLE tempBinDet;    \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;    \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02/20/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (247,'2.00','V1',' Modified Sproc_retrive_warehouse_to_transfer and Sproc_retrive_bin_to_transfer sproc - Dharmishtha '," + userid + ");"
            );
            break;
        case 247:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP table if EXISTS `rfq_assy_quote_submitted_TermsConditions` ;  \n" +
                "CREATE TABLE `rfq_assy_quote_submitted_TermsConditions` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `RefSubmittedQuoteID` int(11) NOT NULL,  \n" +
                "  `termsconditionCatID` int(11) DEFAULT NULL,  \n" +
                "  `termsconditionTypeValueID` int(11) DEFAULT NULL,  \n" +
                "  `note` longtext DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_assy_quote_submitted_TermsConditions_RefSubmittedQuoteID` (`RefSubmittedQuoteID`),  \n" +
                "  KEY `FK_rfq_assy_quote_submitted_TermsConditions_termsconditionCatID` (`termsconditionCatID`),  \n" +
                "  KEY `FK_rfq_assy_quote_submitted_TermsConditions_termsconditionTypeID` (`termsconditionTypeValueID`),  \n" +
                "  CONSTRAINT `FK_rfq_assy_quote_submitted_TermsConditions_RefSubmittedQuoteID` FOREIGN KEY (`RefSubmittedQuoteID`) REFERENCES `rfq_assemblies_quotation_submitted` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_assy_quote_submitted_TermsConditions_termsconditionCatID` FOREIGN KEY (`termsconditionCatID`) REFERENCES `eco_type_category` (`ecoTypeCatID`),  \n" +
                "  CONSTRAINT `FK_rfq_assy_quote_submitted_TermsConditions_termsconditionTypeID` FOREIGN KEY (`termsconditionTypeValueID`) REFERENCES `eco_type_values` (`ecoTypeValID`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "DROP TABLE IF EXISTS `rfq_assy_quote_submitted_assyDetail`;  \n" +
                "CREATE TABLE `rfq_assy_quote_submitted_assyDetail` (  \n" +
                "`id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "`refSubmittedQuoteID` int(11) NOT NULL,  \n" +
                "`rfqAssyID` int(11) NOT NULL,  \n" +
                "`qty` int(11) NOT NULL,  \n" +
                "`turnTime` int(11) NOT NULL,  \n" +
                "`turnType` varchar(1) NOT NULL,  \n" +
                "`materialCost` decimal(16,6) DEFAULT NULL,  \n" +
                "`materialLeadTime` decimal(16,6) DEFAULT NULL,  \n" +
                "`laborCost` decimal(16,6) DEFAULT NULL,  \n" +
                "`laborLeadTime` decimal(16,6) DEFAULT NULL,  \n" +
                "`additionalCost` decimal(16,6) DEFAULT NULL,  \n" +
                "`customItemLeadTime` decimal(16,6) DEFAULT NULL,  \n" +
                "`unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "`totalLeadTime` decimal(16,6) DEFAULT NULL,  \n" +
                "`extendedCost` decimal(16,6) DEFAULT NULL,  \n" +
                "`excessMaterialCost` decimal(16,6) DEFAULT NULL,  \n" +
                "`additionalCostDetail` decimal(16,6) DEFAULT NULL,  \n" +
                "`isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "`createdBy` varchar(255) NOT NULL,  \n" +
                "`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "`updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "`updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "`deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "`deletedAt` datetime DEFAULT NULL,  \n" +
                "PRIMARY KEY (`id`),  \n" +
                "KEY `FK_rfq_assy_quote_submitted_assyDetaill_rfqAssyID` (`rfqAssyID`),  \n" +
                "KEY `FK_rfq_assy_quote_submitted_assyDetail_refSubmittedQuoteID` (`refSubmittedQuoteID`),  \n" +
                "CONSTRAINT `FK_rfq_assy_quote_submitted_assyDetail_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`),  \n" +
                "CONSTRAINT `FK_rfq_assy_quote_submitted_assyDetail_refSubmittedQuoteID` FOREIGN KEY (`refSubmittedQuoteID`) REFERENCES `rfq_assemblies_quotation_submitted` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (248,'2.00','V1','quote summary details table changes  - shirish'," + userid + ");"
            );
            break;
        case 248:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  `parentPageRoute`,   \n" +
                "`parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
                " `createdBy`, `updatedBy`, `isDeleted`,`parentTabID`, `isDisplay`,  `displayMenuName`)  \n" +
                "VALUES  \n" +
                "('Quote Summary Details', 0, 0, null, 'app.rfq.bom.quotesummarydetails', '/quotesummanydetails/:id', null, null,  \n" +
                "(select pd.pageID from page_detail pd where pd.pageName = 'BOM'), 0, 2, 1, 'mdi mdi-book-open',1, current_timestamp(),  current_timestamp(),  \n" +
                " 1, 1, 0, null, 0, null);  \n" +
                "  \n" +
                "truncate table rfq_assy_standard_class_detail;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assy_standard_class_detail DROP FOREIGN KEY FK_rfq_assy_standard_class_detail_rfqAssyID;  \n" +
                "ALTER TABLE rfq_assy_standard_class_detail DROP COLUMN rfqAssyID;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assy_standard_class_detail ADD COLUMN refSubmittedQuoteID int(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assy_standard_class_detail add constraint FK_rfq_assy_standard_class_detail_refSubmittedQuoteID foreign key  (`refSubmittedQuoteID`) References rfq_assemblies_quotation_submitted(`id`);  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (249,'2.00','V1','quote summary details fields changes  - shirish'," + userid + ");"
            );
            break;
        case 249:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfDaysByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfDaysByCostingType`(        \n" +
                "	prfqAssyQuoteID int(11),        \n" +
                "    pRFQAssyID int(11),  \n" +
                "    pcostingType varchar(20)  \n" +
                ") RETURNS decimal(18,6)  \n" +
                "DETERMINISTIC  \n" +
                "READS SQL DATA  \n" +
                "BEGIN        \n" +
                "			return (select (qo.days + sum(qac.days)) from rfq_assy_quotations_additionalcost qac  \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null  \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID  \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)  \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfAmountByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfAmountByCostingType`(        \n" +
                "	prfqAssyQuoteID int(11),        \n" +
                "    pRFQAssyID int(11),  \n" +
                "    pcostingType varchar(20)  \n" +
                ") RETURNS decimal(18,6)  \n" +
                "DETERMINISTIC  \n" +
                "READS SQL DATA  \n" +
                "BEGIN        \n" +
                "			return (select (qo.unitPrice+ sum(amount)) from rfq_assy_quotations_additionalcost qac  \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null  \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID  \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)  \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (250,'2.00','V1','quote summary details function changes  - shirish'," + userid + ");"
            );
            break;
        case 250:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),	                                \n" +
                "    IN pWhereClause VARCHAR(16383)                                    \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,    \n" +
                "        (select count(*) from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id) as revisedQuoteCount,    \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.description,part.rev,part.assyCode,part.nickName,ro.rohsIcon,     \n" +
                "        part.liveInternalVersion as liveInternalVersion,    \n" +
                "		#(SELECT changeVersion FROM rfq_assembly_history WHERE rfqAssyID = ra.id ORDER BY id DESC LIMIT 1) AS InternalVersion,      \n" +
                "		(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,      \n" +
                "		ro.name AS `rohsComplientConvertedValue`,      \n" +
                "		-- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'      \n" +
                "		-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,      \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'      \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,      \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'      \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'      \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,      \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.customerCode,') ',cu.companyName) AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,      \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified      \n" +
                "		FROM rfqforms rf      \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0      \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0      \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0     \n" +
                "        INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0      \n" +
                "		INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0      \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0      \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0      \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0      \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                             \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                     \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                \n" +
                "	EXECUTE query3;                                \n" +
                "	DEALLOCATE PREPARE query3;                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSummaryTermsAndCondition`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSummaryTermsAndCondition`(	      \n" +
                "	    IN prfqAssyID INT         \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	SELECT (SELECT `name` FROM rfq_rohsmst  WHERE id = RoHSStatusID) AS additional       \n" +
                "        FROM rfq_assemblies      \n" +
                "        WHERE id=prfqAssyID      \n" +
                "	UNION      \n" +
                "		SELECT CONCAT(cs.fullName,'|',rc.classname) additional FROM standard_class rc       \n" +
                "		LEFT JOIN certificate_standards cs ON rc.certificateStandardID=cs.certificatestandardid      \n" +
                "		AND rc.isdeleted=0 WHERE FIND_IN_SET(rc.classid,(SELECT GROUP_CONCAT(ClassID) FROM component_standard_details   \n" +
                "		WHERE componentID=(select partID FROM rfq_assemblies WHERE id=prfqAssyID ) AND isdeleted=0))      \n" +
                "	UNION      \n" +
                "		SELECT CONCAT('Main Standard','|',cs.fullName) additional FROM component_standard_details ras       \n" +
                "		LEFT JOIN certificate_standards cs ON ras.certificateStandardID=cs.certificatestandardid AND cs.isdeleted=0      \n" +
                "		WHERE ras.componentID=(select partID FROM rfq_assemblies WHERE id=prfqAssyID ) AND ras.ClassID IS NULL AND ras.isdeleted=0;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateQuoteSubmittedSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateQuoteSubmittedSummaryDetails`(	                                \n" +
                "	IN prfqAssyID INT(11),  \n" +
                "    IN pUserID INT(11)  \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	# insert quote summary details   \n" +
                "		INSERT INTO `rfq_assy_quote_submitted_assydetail`  \n" +
                "		(`refSubmittedQuoteID`, `rfqAssyID`, `qty`, `turnTime`, `turnType`, `materialCost`, `materialLeadTime`, `laborCost`, `laborLeadTime`,  \n" +
                "		`additionalCost`, `customItemLeadTime`, `unitPrice`, `totalLeadTime`, `extendedCost`, `excessMaterialCost`, `additionalCostDetail`,  \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`)  \n" +
                "		select sb.id `refSubmittedQuoteID`, prfqAssyID `rfqAssyID`, requestedQty `qty`, turntime `turnTime`, timeType `turnType`,   \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material') materialCost,fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Material') materialLeadTime,  \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor') laborCost, fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor') laborLeadTime,  \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc') additionalCost, fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor') `customItemLeadTime`,  \n" +
                "		(qo.unitPrice+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc')) `unitPrice`,  \n" +
                "		(fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc')) `totalLeadTime`,  \n" +
                "		(qo.requestedQty *(qo.unitPrice+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc'))) extendedCost,  \n" +
                "		qo.excessQtyTotalPrice `excessMaterialCost`, null,pUserID `createdBy`, current_timestamp(),pUserID `updatedBy`,current_timestamp()  \n" +
                "		from rfq_assy_quotations qo  \n" +
                "		join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID  \n" +
                "		where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "  \n" +
                "	# insert standards details from component standard details to rfq assy standard detail  \n" +
                "        INSERT INTO `rfq_assy_standard_class_detail`  \n" +
                "		(`refSubmittedQuoteID`, `standardID`, `standardClassIDs`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`)  \n" +
                "		select (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) refSubmittedQuoteID, certificateStandardID `standardID`,ClassID `standardClassIDs`,   \n" +
                "		pUserID `createdBy`, current_timestamp() `createdAt`, pUserID `updatedBy`, current_timestamp() `updatedAt`  \n" +
                "		from component_standard_details csd   \n" +
                "		where deletedAt is null and componentID = (select partID from rfq_assemblies where id = prfqAssyID);  \n" +
                "  \n" +
                "	# select Last inserted data  \n" +
                "		select * from rfq_assy_standard_class_detail where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "		select * from rfq_assy_quote_submitted_assydetail where rfqAssyID = prfqAssyID and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                \n" +
                "	IN prfqAssyID INT(11)                               \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			select unitPrice, qty, turnTime, qo.turnType, qo.excessMaterialCost, qo.extendedCost,   \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime  \n" +
                "			from rfq_assy_quote_submitted_assydetail qo  \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID  \n" +
                "			where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy   \n" +
                "			select ra.id rfqAssyID, rf.id quoteID, part.PIDCode, part.description, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.companyName,cu.customerCode,  \n" +
                "            ca.street1,ca.street2,ca.street3,ca.state,ca.city,co.countryName,co.countrySortCode,  \n" +
                "            (select BOMIssues from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) BOMIssues,  \n" +
                "            (select bomInternalVersion from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) bomInternalVersion,  \n" +
                "            (select quoteSubmitDate from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) quoteSubmitDate,  \n" +
                "            (select quoteNumber from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) quoteNumber,  \n" +
                "            (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) quoteSubmittedID,  \n" +
                "            ra.assyNote,rf.quoteNote  \n" +
                "            from rfq_assemblies ra  \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "			join customers cu on cu.id = rf.customerID and cu.isDeleted = 0  \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0  \n" +
                "			join customer_addresses ca on ca.customerID = cu.id and ca.isDeleted = 0  \n" +
                "			join countrymst co on co.countryID = ca.countryID and co.isDeleted = 0  \n" +
                "			where ra.id= prfqAssyID  \n" +
                "			order by co.countryID desc limit 1;  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd  \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0  \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0  \n" +
                "			where csd.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0  \n" +
                "            and RefSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (251,'2.00','V1','quote summary details sp changes  - shirish'," + userid + ");"
            );
            break;
        case 251:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "INSERT INTO component_packagingmst(`name`,isActive,isDeleted,createdBy)VALUES  \n" +
                "('Roll',1,0,'1'),  \n" +
                "('N/A',1,0,'1');  \n" +
                " UPDATE component_packagingmst SET id=-1 WHERE `name`='N/A';  \n" +
                "SET GLOBAL log_bin_trust_function_creators = 1;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPNWithPackaging` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPNWithPackaging`(        \n" +
                "  isPackaging TINYINT(1)  \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(16383);   \n" +
                "	IF(isPackaging=1) THEN    \n" +
                "	SELECT  CONCAT('(SELECT GROUP_CONCAT(IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',a.RoHSStatusID,''@@@'', a.name,''@@@'', a.rohsIcon,''@@@'',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(a.gencCategoryName,\"\")) FROM  \n" +
                "                                 ( SELECT rla.PIDCode,c.RoHSStatusID,ro.name,ro.rohsIcon,c.feature,gc.gencCategoryName                                                       \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                   \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                          \n" +
                "                                 genericcategory gc ON c.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0                 \n" +
                "                                 LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0                                                        \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0  \n" +
                "                                UNION  \n" +
                "                                SELECT c.PIDCode,c.RoHSStatusID,ro.name,ro.rohsIcon,c.feature,gc.gencCategoryName  \n" +
                "                                  FROM component c  LEFT JOIN  genericcategory gc ON c.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0                                                \n" +
                "                                  LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0   \n" +
                "                                  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isDeleted=0)) AND c.isdeleted=0) a) AS mfgPN')  INTO @result;   \n" +
                "                                  ELSE  \n" +
                "                                  SELECT  CONCAT('(SELECT GROUP_CONCAT(IFNULL(REPLACE(replace(rla.PIDCode,\",\",\"***\"),'','',\"..\"),\"N/A\"),''@@@'',c.RoHSStatusID,''@@@'', ro.name,''@@@'', ro.rohsIcon,''@@@'',replace(ifnull(c.feature,\"\"),\",\",\"\"),''@@@'',IFNULL(gc.gencCategoryName,\"\"))AS mfgPn                                                       \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                   \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN                          \n" +
                "                                 genericcategory gc on c.partStatus=gc.gencCategoryID and gc.isActive=1 and gc.isDeleted=0                 \n" +
                "                                 LEFT join rfq_rohsmst ro on ro.id= c.RoHSStatusID and ro.isDeleted = 0                                                        \n" +
                "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN')  INTO @result;       \n" +
                "                                END IF;       \n" +
                "      	SET result = @result;        \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineComponent` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineComponent`(   \n" +
                "customerID INT(11)      \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(16383);      \n" +
                "	SELECT  CONCAT('(SELECT (CASE WHEN b.isDocumentUpload = 1 THEN GROUP_CONCAT(REPLACE(b.mfgPN,\",\",\"***\"),''###'',b.mfgCode,''###'',b.name,''###'',b.mfgPNID,''###'',b.isDocumentUpload)                   \n" +
                "ELSE GROUP_CONCAT(REPLACE(b.mfgPN,\",\",\"***\"),''###'',b.mfgCode,''###'',b.name,''###'',b.mfgPNID,''###'',''0'') END)  from  \n" +
                "(SELECT                                                   \n" +
                "ccl.isDocumentUpload ,rla.mfgPN,mg.mfgCode,ro.name,rla.mfgPNID   \n" +
                "FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                   \n" +
                "component c ON rla.mfgpnid=c.id                                                   \n" +
                "LEFT JOIN mfgcodemst mg ON                                                    \n" +
                "c.mfgCodeID=mg.id                   \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rla.consolidateID AND rcl.isDeleted = 0                  \n" +
                "LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =',customerID,' AND ccl.isDeleted = 0                  \n" +
                "WHERE rla.consolidateID=rl.id AND rla.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT                                                   \n" +
                "ccl.isDocumentUpload,c.mfgPN,mg.mfgCode,ro.name,c.id AS  mfgPNID  \n" +
                "FROM component c                                               \n" +
                "LEFT JOIN mfgcodemst mg ON                                                    \n" +
                "c.mfgCodeID=mg.id   \n" +
                "LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',customerID,' AND ccl.isDeleted = 0                  \n" +
                "WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isDeleted=0)) AND c.isdeleted=0)b) AS component')  INTO @result;        \n" +
                "      	SET result = @result;        \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItemsWithPackaging` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItemsWithPackaging`(        \n" +
                "rfqAssyID INT(11),      \n" +
                "SQLString VARCHAR(16383),  \n" +
                "customerID INT(11),  \n" +
                "isPackaging TINYINT(1)      \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(16383);      \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                      \n" +
                "					SELECT                                                       \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,rl.uomID,                                                        \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                                    \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                      \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponent(customerID)),',                                                      \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(isPackaging)),', ',SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl   \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                      \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                      \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID')  INTO @result;        \n" +
                "      	SET result = @result;        \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItems`(        \n" +
                "rfqAssyID INT(11),      \n" +
                "SQLString VARCHAR(16383),  \n" +
                "customerID INT(11),  \n" +
                "isPackaging TINYINT(1)      \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(16383);      \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                      \n" +
                "					SELECT                                                       \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,rl.uomID,                                                        \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                                    \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                      \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponent(customerID)),',                                                      \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(isPackaging)),', ',                                                       \n" +
                "					SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                                      \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                      \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                      \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID')  INTO @result;        \n" +
                "      	SET result = @result;        \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                                    \n" +
                "	IN ppageIndex INT(11),                                                    \n" +
                "	IN precordPerPage INT(11),                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                    \n" +
                "	IN rfqAssyID INT(11),                                                    \n" +
                "	IN puserID INT (11),  \n" +
                "	IN ppackageing TINYINT(1),  \n" +
                "	IN pcustomerID INT(11)                                                    \n" +
                "    )  \n" +
                "BEGIN                                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                    \n" +
                "	    SET @SQLString = NULL;                                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                    \n" +
                "		ELSE                                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                                     \n" +
                "		END IF;	                                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                    \n" +
                "			SET pWhereClause = '1=1' ;                                                    \n" +
                "		END IF;	                                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                    \n" +
                "		ELSE	                                                    \n" +
                "			SET rowNumWhere = '';                                                    \n" +
                "		END IF;	                                                    \n" +
                "		SELECT                                                    \n" +
                "                     GROUP_CONCAT(DISTINCT                                                    \n" +
                "				CONCAT(                                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                                    \n" +
                "						ra.requestQty,                                                    \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                    \n" +
                "						ra.requestQty,''''                                                    \n" +
                "					)                                                    \n" +
                "					) INTO @SQLString                                                    \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                    \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;     \n" +
                "                        IF(ppackageing=1)THEN  \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing));  \n" +
                "				ELSE  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing));                                                     \n" +
                "                         END IF;  \n" +
                "  \n" +
                "                         PREPARE stmt FROM @SQLStatement;                                            \n" +
                "			EXECUTE stmt;	    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                    \n" +
                "			EXECUTE query1;                                                    \n" +
                "			DEALLOCATE PREPARE query1;                                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                    \n" +
                "			EXECUTE query2;                                                    \n" +
                "			DEALLOCATE PREPARE query2;                                                    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                    \n" +
                "			EXECUTE query3;                                                    \n" +
                "			DEALLOCATE PREPARE query3;                                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                    \n" +
                "			EXECUTE query4;                                                    \n" +
                "			DEALLOCATE PREPARE query4;                                                \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                        \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                            \n" +
                "			EXECUTE query5;                                                            \n" +
                "			DEALLOCATE PREPARE query5;                                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));    \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                            \n" +
                "			EXECUTE query6;                                                            \n" +
                "			DEALLOCATE PREPARE query6;         \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));    \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                            \n" +
                "			EXECUTE query7;                                                            \n" +
                "			DEALLOCATE PREPARE query7;           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                      \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQUnQuotedLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQUnQuotedLineItems`(                                            \n" +
                "	IN ppageIndex INT(11),                                            \n" +
                "	IN precordPerPage INT(11),                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                                            \n" +
                "	IN rfqAssyID INT(11),                                            \n" +
                "	IN puserID INT (11),  \n" +
                "	IN ppackageing TINYINT(1),  \n" +
                "	IN pcustomerID INT(11)                                          \n" +
                "    )  \n" +
                "BEGIN                                            \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                            \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "	    SET @SQLString = NULL;                                              \n" +
                "	    SET @HavingClause = NULL;                                  \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                            \n" +
                "		ELSE                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                             \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                            \n" +
                "			SET pWhereClause = '1=1' ;                                            \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "		ELSE	                                            \n" +
                "			SET rowNumWhere = '';                                            \n" +
                "		END IF;	                                            \n" +
                "		SELECT                                            \n" +
                "                      GROUP_CONCAT(DISTINCT                                            \n" +
                "				CONCAT(                                            \n" +
                "					'Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', rq.finalPrice, null))) AS ''',                                            \n" +
                "						ra.requestQty,''''                                            \n" +
                "					)                                            \n" +
                "					),                                        \n" +
                "			GROUP_CONCAT(DISTINCT                                            \n" +
                "				CONCAT(                                            \n" +
                "					'Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                            \n" +
                "					) SEPARATOR ' OR '                                           \n" +
                "					)                                        \n" +
                "				INTO @SQLString, @HavingClause                                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                            \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                            \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                            \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                          \n" +
                "  IF(ppackageing=1)THEN  \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing));  \n" +
                "				ELSE  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing));                                                     \n" +
                "                         END IF;  \n" +
                "  \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                                 \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                                 \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                                      \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                                 \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                            \n" +
                "			EXECUTE stmt;	                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                            \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                            \n" +
                "			EXECUTE query1;                                            \n" +
                "			DEALLOCATE PREPARE query1;                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                            \n" +
                "			EXECUTE query2;                                            \n" +
                "			DEALLOCATE PREPARE query2;     \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                    \n" +
                "			EXECUTE query3;                                                    \n" +
                "			DEALLOCATE PREPARE query3;                                            \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                    \n" +
                "			EXECUTE query4;                                                    \n" +
                "			DEALLOCATE PREPARE query4;                                                \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                       \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                            \n" +
                "			EXECUTE query5;                                                            \n" +
                "			DEALLOCATE PREPARE query5;                                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));    \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                            \n" +
                "			EXECUTE query6;                                                            \n" +
                "			DEALLOCATE PREPARE query6;         \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));    \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                            \n" +
                "			EXECUTE query7;                                                            \n" +
                "			DEALLOCATE PREPARE query7;           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                 \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                            \n" +
                "	IN ppageIndex INT(11),                                            \n" +
                "	IN precordPerPage INT(11),                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereColumnName VARCHAR(255),                                      \n" +
                "	IN pWhereFilterValue VARCHAR(255),                                     \n" +
                "	IN pCustomWhere INT(11),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                            \n" +
                "	IN rfqAssyID INT(11),                                            \n" +
                "	IN puserID INT (11),  \n" +
                "	IN ppackageing TINYINT(1),  \n" +
                "	IN pcustomerID INT(11)      \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN                                            \n" +
                "	    DECLARE pOffset INT(11);                                            \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	    DECLARE defaultOrder INT(11);                          \n" +
                "	    SET defaultOrder = 0;                          \n" +
                "	    SET @PERString = NULL;                                  \n" +
                "	    SET SESSION group_concat_max_len = 150000;                            \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                            \n" +
                "	    ELSE                                      \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                            \n" +
                "		IF(defaultOrder > 0) THEN                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                            \n" +
                "		ELSE                           \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                          \n" +
                "		END IF;	                           \n" +
                "	    END IF;                          \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                            \n" +
                "			SET pWhereClause = '1=1' ;                                            \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "		ELSE	                                            \n" +
                "			SET rowNumWhere = '';                                            \n" +
                "		END IF;	                                            \n" +
                "		SELECT                                  \n" +
                "			GROUP_CONCAT(DISTINCT                                            \n" +
                "				CONCAT(                                            \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                                            \n" +
                "						ra.requestQty,                                            \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                            \n" +
                "						ra.requestQty,''''                                            \n" +
                "					))                                \n" +
                "					INTO @PERString                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                            \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                            \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                            \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                            \n" +
                "  \n" +
                "  IF(ppackageing=1)THEN  \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@PERString,pcustomerID,ppackageing));  \n" +
                "				ELSE  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@PERString,pcustomerID,ppackageing));                                                     \n" +
                "                         END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                            \n" +
                "			EXECUTE stmt;	                               \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                          \n" +
                "			IF pCustomWhere IS NOT NULL THEN                                 \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                          \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                            \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                            \n" +
                "				EXECUTE query_Temp;                                 \n" +
                "				DEALLOCATE PREPARE query_Temp;                                \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                          \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                          \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                            \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                            \n" +
                "				EXECUTE query_Temp1;                                   \n" +
                "				DEALLOCATE PREPARE query_Temp1;                                 \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                          \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                          \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                            \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                            \n" +
                "				EXECUTE query_Temp2;                                   \n" +
                "				DEALLOCATE PREPARE query_Temp2;                            \n" +
                "  \n" +
                "				# Concate                           \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                          \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                          \n" +
                "			ELSE                           \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidatetemp where \", pWhereClause );                                            \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "			END IF;                                \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                     \n" +
                "			EXECUTE query1;                                            \n" +
                "			DEALLOCATE PREPARE query1;                                            \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                           \n" +
                "			EXECUTE query2;                                            \n" +
                "			DEALLOCATE PREPARE query2;                                            \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));                                            \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                            \n" +
                "			EXECUTE query3;                                            \n" +
                "			DEALLOCATE PREPARE query3;                                            \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                         \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                            \n" +
                "			EXECUTE query4;                                            \n" +
                "			DEALLOCATE PREPARE query4;                                        \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                        \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                            \n" +
                "			EXECUTE query5;                                                            \n" +
                "			DEALLOCATE PREPARE query5;                                           \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));    \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                    \n" +
                "			EXECUTE query6;                                                    \n" +
                "			DEALLOCATE PREPARE query6;    \n" +
                "  \n" +
                "			SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));    \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                            \n" +
                "			EXECUTE query7;                                                            \n" +
                "			DEALLOCATE PREPARE query7;                                                            \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                                 \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                                \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                                \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                              \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetExcessMaterialLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetExcessMaterialLineItems`(                                          \n" +
                "	IN ppageIndex INT(11),                                          \n" +
                "	IN precordPerPage INT(11),                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN rfqAssyID INT(11),                                          \n" +
                "	IN puserID INT (11),  \n" +
                "	IN ppackageing TINYINT(1),  \n" +
                "	IN pcustomerID INT(11)                                      \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                          \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	    SET @SQLString = NULL;                                     \n" +
                "	    SET @HavingClause = NULL;                                     \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                      \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "		ELSE                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                                           \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                          \n" +
                "			SET pWhereClause = '1=1' ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "		ELSE	                                          \n" +
                "			SET rowNumWhere = '';                                          \n" +
                "		END IF;	                                          \n" +
                "		SELECT                                          \n" +
                "                      GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''',(((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0))) , null))) AS ''',                                          \n" +
                "						ra.requestQty,''''                                          \n" +
                "					)                                          \n" +
                "					),                                    \n" +
                "  \n" +
                "                      GROUP_CONCAT(DISTINCT                                          \n" +
                "				CONCAT(                                          \n" +
                "					'Max((IF(ra.requestQty = ''',                                          \n" +
                "						ra.requestQty,                                          \n" +
                "					''',     \n" +
                "	(((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)))* (IFNULL(rq.unitPrice,0))) , null)))> 0'                                             \n" +
                "					) SEPARATOR ' OR '                                         \n" +
                "					)                                    \n" +
                "				INTO @SQLString, @HavingClause                                     \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                          \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                          \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                          \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                        \n" +
                "			IF(@SQLString IS NOT NULL) THEN   \n" +
                "			IF(ppackageing=1)THEN  \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing));  \n" +
                "				ELSE  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing));                                                     \n" +
                "                         END IF;  \n" +
                "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                          \n" +
                "			END IF;                             \n" +
                "			PREPARE stmt FROM @SQLStatement;                                          \n" +
                "			EXECUTE stmt;	                                          \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                          \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "			EXECUTE query1;    \n" +
                "  \n" +
                "			DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "			EXECUTE query2;                                          \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                    \n" +
                "			EXECUTE query3;                                                    \n" +
                "			DEALLOCATE PREPARE query3;                                                    \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                 \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                    \n" +
                "			EXECUTE query4;                                                    \n" +
                "			DEALLOCATE PREPARE query4;                                                \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                       \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                            \n" +
                "			EXECUTE query5;                                                            \n" +
                "			DEALLOCATE PREPARE query5;                                                   \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));    \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                            \n" +
                "			EXECUTE query6;                                                            \n" +
                "			DEALLOCATE PREPARE query6;         \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));    \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                            \n" +
                "			EXECUTE query7;                                                            \n" +
                "			DEALLOCATE PREPARE query7;           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                               \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(                                              \n" +
                "	IN ppageIndex INT(11),                                              \n" +
                "	IN precordPerPage INT(11),                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                              \n" +
                "	IN rfqAssyID INT(11),                                              \n" +
                "	IN puserID INT (11),      \n" +
                "	IN pleadTime INT (11),  \n" +
                "	IN ppackageing TINYINT(1),  \n" +
                "	IN pcustomerID INT(11)                  \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                              \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                              \n" +
                "	    SET @SQLString = NULL;                                           \n" +
                "	    SET @HavingClause = NULL;                                               \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "		ELSE                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                               \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                              \n" +
                "			SET pWhereClause = '1=1' ;                                              \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "		ELSE	                                              \n" +
                "			SET rowNumWhere = '';                                              \n" +
                "		END IF;	                                              \n" +
                "		SELECT                                              \n" +
                "                      GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(ra.requestQty = ''',                                              \n" +
                "						ra.requestQty,                                              \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                              \n" +
                "						ra.requestQty,''''                                              \n" +
                "					)                                              \n" +
                "					),                                    \n" +
                "		GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'((Max((IF(ra.requestQty = ''',                                              \n" +
                "						ra.requestQty,                                              \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                                    \n" +
                "					) SEPARATOR ' OR '                                                  \n" +
                "					)                    \n" +
                "				INTO @SQLString,@HavingClause                                         \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                              \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                              \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                            \n" +
                "			IF(@SQLString IS NOT NULL) THEN   \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                              \n" +
                "					SELECT                                               \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID, rl.uomID,                                     \n" +
                "					  rl.qpa,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',  \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing)),', ',                                             \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                              \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                              \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                              \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                     \n" +
                "					GROUP BY rl.lineID');   \n" +
                "  \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                              \n" +
                "			END IF;                                     \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;	                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                              \n" +
                "			EXECUTE query1;                                              \n" +
                "			DEALLOCATE PREPARE query1;                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                              \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "			EXECUTE query2;                                              \n" +
                "			DEALLOCATE PREPARE query2;       \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));        \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                      \n" +
                "			EXECUTE query3;                                                      \n" +
                "			DEALLOCATE PREPARE query3;                                             \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                               \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                              \n" +
                "			EXECUTE query4;                                              \n" +
                "			DEALLOCATE PREPARE query4;                                              \n" +
                "  \n" +
                "  			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                         \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                              \n" +
                "			EXECUTE query5;                                                              \n" +
                "			DEALLOCATE PREPARE query5;                                                     \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));      \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                              \n" +
                "			EXECUTE query6;                                                              \n" +
                "			DEALLOCATE PREPARE query6;           \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));      \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                              \n" +
                "			EXECUTE query7;                                                              \n" +
                "			DEALLOCATE PREPARE query7;                                                 \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                            \n" +
                "	IN ppageIndex INT(11),                                            \n" +
                "	IN precordPerPage INT(11),                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                                            \n" +
                "	IN rfqAssyID INT(11),                                            \n" +
                "	IN puserID INT (11),  \n" +
                "	IN ppackageing TINYINT(1),  \n" +
                "	IN pcustomerID INT(11)                                       \n" +
                "    )  \n" +
                "BEGIN                                            \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                            \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "	    SET @SQLString = NULL;                                         \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                            \n" +
                "		ELSE                                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                             \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                            \n" +
                "			SET pWhereClause = '1=1' ;                                            \n" +
                "		END IF;	                                            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "		ELSE	                                            \n" +
                "			SET rowNumWhere = '';                                            \n" +
                "		END IF;	                                            \n" +
                "		SELECT                                    \n" +
                "                     GROUP_CONCAT(DISTINCT                                    \n" +
                "				CONCAT(                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                    \n" +
                "						ra.requestQty,                                    \n" +
                "					''', rq.finalPrice, null))) AS ''',                                    \n" +
                "						ra.requestQty,''''                                    \n" +
                "					)                                    \n" +
                "					) INTO @SQLString                                    \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                            \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                            \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                            \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                          \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                            \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                            \n" +
                "					SELECT                                             \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,                                                 \n" +
                "						rp.partTypeName, rm.name,                             \n" +
                "						rl.qpa,                                \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                                  \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                                  \n" +
                "						co.ltbDate AS LTBDate,                          \n" +
                "						co.eolDate AS EOLDate,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',     \n" +
                "						',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing)),', ',                                             \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                            \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                            \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                    \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                                     \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                            \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                            \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                   \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                                   \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                                   \n" +
                "						(SELECT gencCategoryID FROM genericcategory                                   \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                                  \n" +
                "					GROUP BY rl.lineID');                                              \n" +
                "			END IF;                              \n" +
                "			PREPARE stmt FROM @SQLStatement;                                          \n" +
                "			EXECUTE stmt;	                                            \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                            \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                            \n" +
                "			EXECUTE query1;                                            \n" +
                "			DEALLOCATE PREPARE query1;                                            \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                            \n" +
                "			EXECUTE query2;                                            \n" +
                "			DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));        \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                      \n" +
                "			EXECUTE query3;                                                      \n" +
                "			DEALLOCATE PREPARE query3;                                               \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                       \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                            \n" +
                "			EXECUTE query4;                                            \n" +
                "			DEALLOCATE PREPARE query4;                                            \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                         \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                              \n" +
                "			EXECUTE query5;                                                              \n" +
                "			DEALLOCATE PREPARE query5;                                                     \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));      \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                              \n" +
                "			EXECUTE query6;                                                              \n" +
                "			DEALLOCATE PREPARE query6;           \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));      \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                              \n" +
                "			EXECUTE query7;                                                              \n" +
                "			DEALLOCATE PREPARE query7;                                             \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                              \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_getAlternatePartList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getAlternatePartList`(     \n" +
                "IN pconsolidateID  INT(11)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "    SELECT a.* FROM  \n" +
                "(SELECT c.PIDCode  \n" +
                ",c.RoHSStatusID  \n" +
                ",c.mfgCodeID  \n" +
                ",ro.name  \n" +
                ",ro.rohsIcon,c.feature,gc.gencCategoryName,gc.gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,  \n" +
                "mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,0 isPackaging,c.id AS mfgPNID                                                       \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                   \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN  \n" +
                "                                mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0 LEFT JOIN                          \n" +
                "                                 genericcategory gc ON c.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0                 \n" +
                "                                 LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0                                                        \n" +
                "                                WHERE rla.consolidateID=pconsolidateID AND rla.isdeleted=0  \n" +
                "                                UNION  \n" +
                "                                SELECT c.PIDCode,c.RoHSStatusID,c.mfgCodeID,ro.name,ro.rohsIcon,c.feature,gc.gencCategoryName,gc.gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,  \n" +
                "                                mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,1 isPackaging,c.id AS mfgPNID  \n" +
                "                                  FROM component c    \n" +
                "                                  LEFT JOIN mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0  \n" +
                "                                  LEFT JOIN  genericcategory gc ON c.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0                                                \n" +
                "                                  LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0   \n" +
                "                                  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=pconsolidateID AND rla.isDeleted=0))   \n" +
                "                                  AND c.id NOT IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate ra  WHERE ra.consolidateID=pconsolidateID AND ra.isDeleted=0) AND c.isdeleted=0)a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (252,'2.00','V1','Packaging Alias List changes for parts-Champak'," + userid + ");"
            );
            break;
        case 252:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMList`(              \n" +
                "	IN prfqAssyID INT        \n" +
                ")  \n" +
                "BEGIN              \n" +
                " DECLARE pPartID INT(11);  \n" +
                " DECLARE pPIDCode VARCHAR(50);  \n" +
                "  \n" +
                " SELECT partId, c.PIDCode INTO pPartID, pPIDCode    \n" +
                " FROM rfq_assemblies ra  \n" +
                " JOIN component c ON ra.partId = c.Id  \n" +
                " WHERE ra.Id = prfqAssyID;  \n" +
                "  \n" +
                "	SELECT  IF(ISNULL(psar.lineItemID),0,psar.lineItemID) AS lineItemID, IF(ISNULL(psar.prPartLineItemID), IF(ISNULL(psar.lineitemID), -1, 0), psar.prPartLineItemID) AS prPartLineItemID, psar.level, IF(ISNULL(rla.mfgPNID), pPartID,rla.mfgPNID) partID , IF(ISNULL(cp.PIDCode), pPIDCode, cp.PIDCode) PIDCode  \n" +
                "	FROM part_sub_assy_relationship psar   \n" +
                "	LEFT JOIN rfq_lineitems rl ON rl.Id = psar.lineItemID  \n" +
                "	LEFT JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID  \n" +
                "	LEFT JOIN component cp ON rla.mfgPnID = cp.id  \n" +
                "	WHERE  psar.partId= pPartID;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (253,'2.00','V1','Modified Sproc_GetAssyBOMList to get data in planned BOM -Shailesh '," + userid + ");"
            );
            break;
        case 253:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                    \n" +
                "	IN pCustomerID INT(11)              \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE mfgCodeID INT(11);              \n" +
                "	DECLARE whereClause VARCHAR(500);        \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";         \n" +
                "	IF pCustomerID IS NOT NULL THEN        \n" +
                "		SELECT id INTO mfgCodeID FROM mfgcodemst WHERE customerID = pCustomerID AND isCustomer = 1 AND deletedAt IS NULL;         \n" +
                "		IF mfgCodeID IS NOT NULL THEN         \n" +
                "			SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", mfgCodeID);        \n" +
                "		ELSE     \n" +
                "			SET whereClause = \"WHERE 1=0\";    \n" +
                "		END IF;	        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,     \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, mfg.mfgCode     \n" +
                "	FROM component c     \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0     \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);              \n" +
                "    PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;             \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (254,'2.00','V1','get PID list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 254:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "ALTER TABLE `component`  \n" +
                "CHANGE COLUMN `description` `specialNote` TEXT NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (255,'2.00','V1','remane field desription to specialNote in component table - Ashish'," + userid + ");"
            );
            break;
        case 255:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "INSERT INTO page_detail(pageName,RO,RW,menuRoute,pageRoute,pageURL,menuName,hasChild,orderBy,tabLevel,iconClass,isActive,createdBy,parentPageID,isDisplay,displayMenuName)  \n" +
                " VALUES   \n" +
                " ('Component Logical Group',0,0,'setting.partmaintenance.componentlogicalgroup','app.componentLogicalGroup','/component/componentlogicalgroup',  \n" +
                " 'Mounting Group',0,'32.52',2,'icon-security-network',1,'1',(SELECT a.pageID FROM page_detail a WHERE a.pagename='Component Logical Group' LIMIT 1),1,'Mounting Group');  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (256,'2.00','V1','Component Logic Group Page Details - Deepsikha'," + userid + ");"
            );
            break;
        case 256:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_logical_group` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_logical_group`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;     \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentLogicalGroup as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_logicalgroup_detail\" else \"\" end as msg     \n" +
                "					FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND id IN (',IDs,') LIMIT 1)    \n" +
                "			) q');                                                            \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempcomponentLogicalGroup)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update component_logicalgroup set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                            \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "				EXECUTE stmt1;                                                                \n" +
                "			SELECT * FROM tempcomponentLogicalGroup;                                                    \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempcomponentLogicalGroup;                                                            \n" +
                "  \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE tempcomponentLogicalGroup;       \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                      \n" +
                "	IN tableName VARCHAR(255),                                                                      \n" +
                "	IN IDs LONGTEXT,                                                                      \n" +
                "	IN deletedBy INT,                                                                      \n" +
                "	IN entityID VARCHAR(255),                                                                      \n" +
                "	IN refrenceIDs LONGTEXT                                                                      \n" +
                "    )  \n" +
                "BEGIN                                                                      \n" +
                "IF tableName=\"employees\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                           \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                      \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                      \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"customers\" THEN                                                                      \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"department\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"genericcategory\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"equipment\" THEN                                                                      \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                        \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"parts\" THEN                                                                     \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"master_templates\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"operations\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"roles\" THEN                                                                     \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"standard_class\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"dataelement\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                 \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"component\" THEN                                                                      \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                     \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                       \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_operation\" THEN                                                                     \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                        \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"entity\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"salesordermst\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                      \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                      \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"assemblymst\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);                 \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"br_label_template\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);                 \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"measurement_types\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"uoms\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"jobtypes\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfqtype\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"reasonmst\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                                      \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                      \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                      \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                              \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                                      \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"shipping_request\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                      \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"component_standard\" THEN                                                                      \n" +
                "    CALL Sproc_checkDelete_component_standard(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"component_standard_class\" THEN                                                                      \n" +
                "      CALL  Sproc_checkDelete_component_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                      \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                                 \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"requirement\" THEN                                                                      \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                                 \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                                 \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfqforms\" THEN                                                                      \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                      \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                      \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                      \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                      \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                      \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                      \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"cost_category\" THEN                                                                      \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                  \n" +
                "END IF;                                   \n" +
                "IF tableName=\"chartypemst\" THEN                                                                      \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                               \n" +
                "END IF;                  \n" +
                "IF tableName=\"countrymst\" THEN                  \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;              \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                  \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;             \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN              \n" +
                "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;         \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN              \n" +
                "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;          \n" +
                "IF tableName=\"warehousemst\" THEN              \n" +
                "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;       \n" +
                "IF tableName=\"binmst\" THEN              \n" +
                "	 CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;   \n" +
                "IF tableName=\"component_logicalgroup\" THEN      \n" +
                "	 CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs);            \n" +
                "END IF;                    \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_logical_group` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_logical_group`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;     \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentLogicalGroup as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_logicalgroup_detail\" else \"\" end as msg     \n" +
                "					FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND id IN (',IDs,') LIMIT 1)    \n" +
                "			) q');                                                            \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempcomponentLogicalGroup)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update component_logicalgroup set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                            \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "				EXECUTE stmt1;                                                                \n" +
                "			SELECT * FROM tempcomponentLogicalGroup;                                                    \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempcomponentLogicalGroup;                                                            \n" +
                "  \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE tempcomponentLogicalGroup;       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (257,'2.00','V1','Component Logic Group Page Details - Deepsikha'," + userid + ");"
            );
            break;
        case 257:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "UPDATE genericcategory  \n" +
                " SET categoryType='Equipment & Workstation Groups'  \n" +
                "WHERE categoryType='Equipment & Workstation Group';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Equipment & Workstation Types'  \n" +
                "WHERE categoryType='Equipment & Workstation Type';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Equipment & Workstation Possessions'  \n" +
                "WHERE categoryType='Equipment & Workstation Possession';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Equipment & Workstation Ownerships'  \n" +
                "WHERE categoryType='Equipment & Workstation Ownership';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Standard Types'  \n" +
                "WHERE categoryType='Standard Type';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Part Types'  \n" +
                "WHERE categoryType='Part Type';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Titles'  \n" +
                "WHERE categoryType='Employee Title';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Operation Types'  \n" +
                "WHERE categoryType='Operation Type';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Locations'  \n" +
                "WHERE categoryType='Location Type';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Responsibilities'  \n" +
                "WHERE categoryType='Work Area';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Shipping Methods'  \n" +
                "WHERE categoryType='Shipping Type';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Payment Terms'  \n" +
                "WHERE categoryType='Terms';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Printers'  \n" +
                "WHERE categoryType='Printer';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Label Templates'  \n" +
                "WHERE categoryType='Print Format';  \n" +
                "  \n" +
                "UPDATE genericcategory  \n" +
                " SET categoryType='Barcode Separators'  \n" +
                "WHERE categoryType='Barcode Separator';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                " SET displayMenuName='Equipment & Workstation Groups',menuName='Equipment & Workstation Groups'  \n" +
                "WHERE displayMenuName='Equipment & Workstation Group';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                " SET displayMenuName='Equipment & Workstation Ownerships',menuName='Equipment & Workstation Ownerships'  \n" +
                "WHERE displayMenuName='Equipment & Workstation Ownership';  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                         \n" +
                "	IN pPassword VARCHAR(500)               \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN                \n" +
                "		#Start - Delete Role              \n" +
                "		TRUNCATE TABLE rolepagedetail;              \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;              \n" +
                "		TRUNCATE TABLE component_standard_role;              \n" +
                "  \n" +
                "		#Start - Delete Features of roles              \n" +
                "		DELETE FROM feature_role_mapping;              \n" +
                "		#End - Delete Features of roles              \n" +
                "  \n" +
                "		#Start - Delete Generic Folder              \n" +
                "		UPDATE genericfiles SET refParentId = NULL         \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));             \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);              \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL         \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);        \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;              \n" +
                "  \n" +
                "		#End - Delete Generic Folder              \n" +
                "  \n" +
                "		#Start - Delete Generic Files              \n" +
                "		TRUNCATE TABLE genericfiles;              \n" +
                "		#End - Delete Generic Files              \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');              \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;              \n" +
                "		#End - Delete Role              \n" +
                "		#Start - Delete Generic Category              \n" +
                "			TRUNCATE TABLE employee_department;              \n" +
                "			#Start - Delete Part              \n" +
                "			TRUNCATE TABLE operation_part;              \n" +
                "			TRUNCATE TABLE workorder_operation_part;     \n" +
                "			#End - Delete Part              \n" +
                "			#Start - Delete Equipment              \n" +
                "				TRUNCATE TABLE operation_equipment;              \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;              \n" +
                "				TRUNCATE TABLE equipment_dataelement;              \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;              \n" +
                "  \n" +
                "				#Start - Delete Equipment Task              \n" +
                "				TRUNCATE TABLE equipment_task_schedule;              \n" +
                "				DELETE FROM equipment_task;              \n" +
                "				#End - Delete Equipment Task              \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master              \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;              \n" +
                "				DELETE FROM workorder_serialmst;              \n" +
                "				# End - Delete Workorder Trans Serial Master              \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail              \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;              \n" +
                "				DELETE FROM workorder_trans_empinout;              \n" +
                "				#End - Delete Workorder Transaction InOut Detail              \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction              \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;              \n" +
                "				TRUNCATE TABLE workorder_trans_production;              \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;              \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;              \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;              \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;              \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;              \n" +
                "				DELETE FROM workorder_trans;              \n" +
                "				# End - Delete Workorder Transaction              \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;              \n" +
                "				DELETE FROM equipment;              \n" +
                "			#End - Delete Equipment              \n" +
                "			# Start - Delete Operation              \n" +
                "			TRUNCATE TABLE operation_equipment;              \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element              \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;              \n" +
                "			DELETE FROM workorder_operation_dataelement;              \n" +
                "			# End - Delete Workorder Operation Data Element              \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;              \n" +
                "			TRUNCATE TABLE workorder_operation_employee;              \n" +
                "			TRUNCATE TABLE operation_master_templates;              \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			              \n" +
                "				# Start - Delete ECO Request 			              \n" +
                "					# Start - Delete ECO Request Approval              \n" +
                "					TRUNCATE TABLE eco_request_department_employee;              \n" +
                "					DELETE FROM eco_request_department_approval;              \n" +
                "					# End - Delete ECO Request Approval              \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;              \n" +
                "				DELETE FROM eco_request;              \n" +
                "				# End - Delete ECO Request              \n" +
                "  \n" +
                "			# Start - Delete Shipping Details              \n" +
                "			TRUNCATE TABLE shippedassembly;              \n" +
                "			DELETE FROM salesshippingmst;              \n" +
                "			DELETE FROM workorder_salesorder_details;              \n" +
                "			DELETE FROM salesorderdet;              \n" +
                "			DELETE FROM salesordermst;              \n" +
                "			# End - Delete Shipping Details              \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review               \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;              \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;              \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;              \n" +
                "			DELETE FROM workorder_reqforreview;              \n" +
                "			# End - Delete Workorder Request Review               \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;              \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;              \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming              \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;              \n" +
                "			DELETE FROM workorder_preprogcomp_designator;              \n" +
                "			DELETE FROM workorder_preprogcomp;              \n" +
                "			# End - Delete Workorder Tran PreProgramming              \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;              \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;              \n" +
                "			# End - Delete Workorder Operation              \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;              \n" +
                "  \n" +
                "			#Start - Delete Chart              \n" +
                "			TRUNCATE TABLE chart_template_operations;        \n" +
                "			TRUNCATE TABLE chart_template_employee_details;             \n" +
                "			TRUNCATE TABLE chart_template_access;         \n" +
                "			DELETE FROM chart_templatemst;              \n" +
                "			#Start - End Chart              \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;              \n" +
                "			# End - Delete Operation              \n" +
                "			TRUNCATE TABLE standard_message;              \n" +
                "			# Start - Delete Component              \n" +
                "			TRUNCATE TABLE component_alias;             \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';          \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;              \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;              \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;        \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;           \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;           \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';          \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;          \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;          \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';          \n" +
                "			TRUNCATE TABLE component_goodbadpartmapping;              \n" +
                "			TRUNCATE TABLE component_processmaterial;              \n" +
                "			TRUNCATE TABLE component_drivetools;              \n" +
                "			TRUNCATE TABLE component_requiremapping_parts;              \n" +
                "			TRUNCATE TABLE component_standard_details;              \n" +
                "  \n" +
                "			# Start - Delete Recieving Material              \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;              \n" +
                "			DELETE FROM component_sid_stock;          \n" +
                "			DELETE FROM cost_category;                  \n" +
                "			# End - Delete Recieving Material              \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;              \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;           \n" +
                "			TRUNCATE TABLE standard_class;             \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;        \n" +
                "			DELETE FROM certificate_standards;            \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;        \n" +
                "			DELETE FROM br_label_template;        \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL        \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Ownerships';        \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL        \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Types';        \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL        \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Types';        \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL        \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Types';        \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL        \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Responsibilities';        \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;              \n" +
                "			# End - Delete Component              \n" +
                "  \n" +
                "		#End - Delete Generic Category              \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;        \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;        \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;        \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;        \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;        \n" +
                "		TRUNCATE TABLE rfq_assembly_history;        \n" +
                "		DELETE FROM rfq_lineitems;        \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;        \n" +
                "		DELETE FROM component WHERE id > 0;         \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;              \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;         \n" +
                "		#Start - Delete Entity              \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;              \n" +
                "		DELETE FROM workorder_operation_dataelement;              \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;              \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;              \n" +
                "		DELETE FROM workorder_trans_subform_data;            \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;           \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';          \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;              \n" +
                "		DELETE FROM subform_transaction;              \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;              \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;        \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;        \n" +
                "		DELETE FROM dataelement;            \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;              \n" +
                "		#End - Delete Entity              \n" +
                "		#Start - Delete UOMS                   \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;        \n" +
                "		DELETE FROM rfq_assy_quotations;            \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;             \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;              \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;              \n" +
                "		#End - Delete UOMS              \n" +
                "		#Start - Delete MFG                  \n" +
                "		TRUNCATE TABLE mfgcodealias;              \n" +
                "		TRUNCATE TABLE who_bought_who;              \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;              \n" +
                "		#End - Delete MFG                  \n" +
                "		#Start - Delete BOM              \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;              \n" +
                "		DELETE FROM component_cust_alias_rev;              \n" +
                "		DELETE FROM rfq_assy_bom;              \n" +
                "		#End - Delete BOM              \n" +
                "		#Start - Delete RFQ              \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;              \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;              \n" +
                "		DELETE FROM rfq_assy_quantity;              \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;      \n" +
                "		DELETE FROM rfq_assemblies;              \n" +
                "		DELETE FROM rfqforms;              \n" +
                "		#End - Delete RFQ              \n" +
                "		DELETE FROM customer_addresses;              \n" +
                "		DELETE FROM customer_contactperson;              \n" +
                "		TRUNCATE TABLE assemblystock;              \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;              \n" +
                "		#Start - Delete Customer              \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;              \n" +
                "		DELETE FROM workorder_assy_designators;             \n" +
                "		DELETE FROM workorder_cluster;                  \n" +
                "		DELETE FROM workorder_operation_firstpiece;              \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;              \n" +
                "		TRUNCATE TABLE shipping_requestdet;              \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;              \n" +
                "		DELETE FROM workorder;              \n" +
                "		TRUNCATE TABLE assembly_revision_comments;           \n" +
                "		DELETE FROM customers;              \n" +
                "		#End - Delete Customer              \n" +
                "		#Start - Delete Employee              \n" +
                "		UPDATE department SET parentDeptID=NULL;         \n" +
                "		DELETE FROM department;              \n" +
                "		TRUNCATE TABLE dynamicreportaccess;              \n" +
                "		UPDATE employees SET `managerID`=NULL;              \n" +
                "		TRUNCATE TABLE notificationdet;              \n" +
                "		DELETE FROM notificationmst;              \n" +
                "		TRUNCATE TABLE group_participant_details;              \n" +
                "		TRUNCATE TABLE group_chat_log;              \n" +
                "		DELETE FROM group_chat;              \n" +
                "		TRUNCATE TABLE chat;              \n" +
                "		TRUNCATE TABLE feature_user_mapping;              \n" +
                "		TRUNCATE TABLE user_agreement;              \n" +
                "		TRUNCATE TABLE userpagedetail;              \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');              \n" +
                "		TRUNCATE TABLE shipping_request_empdet;              \n" +
                "		DELETE FROM shipping_request;              \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');              \n" +
                "		#End - Delete Employee              \n" +
                "  \n" +
                "		DELETE FROM master_templates;              \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards              \n" +
                "		TRUNCATE TABLE component_standard_details;              \n" +
                "		DELETE FROM component_standard_class;              \n" +
                "		DELETE FROM component_standard;              \n" +
                "		#End - Delete Component Standards              \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log              \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;              \n" +
                "		#End - Delete Data Entry Audit Log              \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	              \n" +
                "		TRUNCATE TABLE dynamicreportfields;                \n" +
                "		DELETE FROM dynamicreportmst;              \n" +
                "		#End - Delete Dynamic Report              \n" +
                "  \n" +
                "		#Start - Delete Job Type              \n" +
                "		DELETE FROM jobtype;              \n" +
                "		#End - Delete Job Type              \n" +
                "  \n" +
                "		#Start - Delete Log Master              \n" +
                "		TRUNCATE TABLE logmst;              \n" +
                "		#End - Delete Log Master              \n" +
                "  \n" +
                "		#Start - Delete Order Type              \n" +
                "		-- DELETE FROM ordertype;              \n" +
                "		#End - Delete Order Type              \n" +
                "  \n" +
                "		#Start - Delete Reason              \n" +
                "		DELETE FROM reasonmst;              \n" +
                "		#End - Delete Reason              \n" +
                "  \n" +
                "		#Start - Delete Requirement              \n" +
                "		DELETE FROM requirement;              \n" +
                "		#End - Delete Requirement              \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data              \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;              \n" +
                "		#End - Delete Assy Auto Pricing Data              \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log              \n" +
                "		TRUNCATE TABLE taskconfirmation;              \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log              \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log              \n" +
                "		TRUNCATE TABLE timeline;              \n" +
                "		#End - Delete All Timeline Log              \n" +
                "  \n" +
                "		#Start - Delete All Chart Category              \n" +
                "		DELETE FROM chart_category;              \n" +
                "		#End - Delete All Chart Category              \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias              \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;              \n" +
                "		#End - Delete All Component Generic Alias              \n" +
                "  \n" +
                "		#Start - Delete All Defect Category              \n" +
                "		-- DELETE FROM defectcategory;              \n" +
                "		#End - Delete All Defect Category              \n" +
                "  \n" +
                "		#Start - Delete All ECO Category              \n" +
                "		-- DELETE FROM eco_type_values;              \n" +
                "		-- DELETE FROM eco_type_category;              \n" +
                "		#End - Delete All ECO Category              \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;          \n" +
                "  \n" +
                "		SELECT 'Done';              \n" +
                "	ELSE               \n" +
                "		SELECT 'Invalid Argument';              \n" +
                "	END IF;                \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (258,'2.00','V1','Script added for generic caegory type update - Deepsikha'," + userid + ");"
            );
            break;
        case 258:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),	                                  \n" +
                "    IN pWhereClause VARCHAR(16383)                                      \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                  \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                  \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,      \n" +
                "        (select count(*) from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id) as revisedQuoteCount,      \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,       \n" +
                "        part.liveInternalVersion as liveInternalVersion,      \n" +
                "		#(SELECT changeVersion FROM rfq_assembly_history WHERE rfqAssyID = ra.id ORDER BY id DESC LIMIT 1) AS InternalVersion,        \n" +
                "		(CASE WHEN ra.isSummaryComplete=1 THEN 'Completed' ELSE 'Incomplete' END) `status` ,        \n" +
                "		ro.name AS `rohsComplientConvertedValue`,        \n" +
                "		-- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'        \n" +
                "		-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,        \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'        \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,        \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'        \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'        \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,        \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.customerCode,') ',cu.companyName) AS Customer, CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,        \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified        \n" +
                "		FROM rfqforms rf        \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0        \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0        \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0       \n" +
                "        INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0        \n" +
                "		INNER JOIN customers cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0        \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0        \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0        \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0        \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                               \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                       \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                  \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "	EXECUTE query3;                                  \n" +
                "	DEALLOCATE PREPARE query3;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (259,'2.00','V1','RFQ list sp changes  - shirish'," + userid + ");"
            );
            break;
        case 259:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievecomponentLogicalGroup` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievecomponentLogicalGroup`(  \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)   \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "			SELECT `component_logicalgroup`.*,        \n" +
                "			(CASE WHEN (`component_logicalgroup`.`isActive` = 0) THEN 'Inactive'         \n" +
                "				WHEN (`component_logicalgroup`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,  \n" +
                "			(  \n" +
                "				SELECT GROUP_CONCAT(m.name) AS aliaslist   \n" +
                "				FROM 	component_logicalgroup_detail  l  \n" +
                "				LEFT JOIN rfq_mountingtypemst m ON m.id = l.rfqMountingTypeID  \n" +
                "				WHERE 	logicalgroupID =`component_logicalgroup`.`id`  AND l.isDeleted = 0  \n" +
                "				GROUP BY logicalgroupID   \n" +
                "			) AS aliaslist  \n" +
                "  \n" +
                "		FROM `component_logicalgroup` AS `component_logicalgroup` WHERE `deletedAt` IS NULL;      \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"standardName ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (260,'2.00','V1','Changed sp Sproc_RetrievecomponentLogicalGroup - Deepsikha'," + userid + ");"
            );
            break;
        case 260:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(      \n" +
                "	IN pwoID INT(11)  ,      \n" +
                "	IN pwoOPID INT(11)                                                                         \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN      \n" +
                "  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`FCORemark`, `wo`.`buildQty`,      \n" +
                "			    `wo`.`woVersion`, `wo`.`isNoClean`, `wo`.`isWatersoluble`,      \n" +
                "			    GROUP_CONCAT((SELECT fullName FROM certificate_standards       \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',      \n" +
                "					(SELECT className FROM standard_class       \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,       \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,      \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,      \n" +
                "			    `ca`.`PIDCode` , `ca`.`mfgPNDescription` , `ca`.`liveInternalVersion` , `ca`.`RoHSStatusID` ,      \n" +
                "			    (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,      \n" +
                "			       salesorddet.totalpoQty, salesorddet.poQty ,      \n" +
                "   			       salesorddet.totalmrpQty, salesorddet.mrpQty ,      \n" +
                "				salesorddet.poNumber , salesorddet.salesOrderNumber      \n" +
                "		FROM workorder AS `wo`       \n" +
                "  \n" +
                "		 LEFT OUTER JOIN `workorder_certification` AS `wocerti`       \n" +
                "		     ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL         \n" +
                "  \n" +
                "		  LEFT OUTER JOIN `component` AS `ca`      \n" +
                "		  ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL          \n" +
                "  \n" +
                "			LEFT OUTER JOIN (SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,      \n" +
                "					SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,      \n" +
                "					GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber      \n" +
                "  \n" +
                "					FROM `workorder_salesorder_details` AS `wsd`       \n" +
                "  \n" +
                "						INNER JOIN `salesorderdet` AS `sod`       \n" +
                "						ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "						INNER JOIN `salesordermst` AS `som`       \n" +
                "						ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL       \n" +
                "					WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet      \n" +
                "  \n" +
                "			ON salesorddet.woID = `wo`.`woID`      \n" +
                "  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID      \n" +
                "		GROUP BY `wo`.`woID` ;      \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN      \n" +
                "  \n" +
                "  \n" +
                "		SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`FCORemark`, `wo`.`buildQty`,      \n" +
                "			`wo`.`woVersion`, `wo`.`isNoClean`, `wo`.`isWatersoluble`,      \n" +
                "			 GROUP_CONCAT((SELECT fullName FROM certificate_standards       \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',      \n" +
                "					(SELECT className FROM standard_class       \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,   \n" +
                "						(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,      \n" +
                "			    (SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,     \n" +
                "			`woop`.opName , `woop`.opNumber , `woop`.opVersion ,      \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , `ca`.`liveInternalVersion` , `ca`.`RoHSStatusID` ,      \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,      \n" +
                "			  salesorddet.totalpoQty, salesorddet.poQty ,      \n" +
                "   			       salesorddet.totalmrpQty, salesorddet.mrpQty ,      \n" +
                "				salesorddet.poNumber , salesorddet.salesOrderNumber      \n" +
                "		FROM workorder AS `wo`       \n" +
                "  \n" +
                "		LEFT OUTER JOIN `workorder_certification` AS `wocerti`       \n" +
                "		 ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL         \n" +
                "  \n" +
                "			LEFT OUTER JOIN `workorder_operation` AS `woop`      \n" +
                "			  ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID       \n" +
                "  \n" +
                "			  LEFT OUTER JOIN `component` AS `ca`      \n" +
                "			  ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL          \n" +
                "  \n" +
                "			      LEFT OUTER JOIN (SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,      \n" +
                "						SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,      \n" +
                "						GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber      \n" +
                "  \n" +
                "						FROM `workorder_salesorder_details` AS `wsd`       \n" +
                "  \n" +
                "							INNER JOIN `salesorderdet` AS `sod`       \n" +
                "							ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "							INNER JOIN `salesordermst` AS `som`       \n" +
                "							ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL       \n" +
                "						WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet      \n" +
                "  \n" +
                "			ON salesorddet.woID = `wo`.`woID`      \n" +
                "  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID      \n" +
                "		GROUP BY `wo`.`woID` ;      \n" +
                "  \n" +
                "	END IF ;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (261,'2.00','V1','Changed sp Sproc_GetWOHeaderDisplayDetails - Vaibhav'," + userid + ");"
            );
            break;
        case 261:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "drop procedure if exists `Sproc_CopyComponent`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyComponent`(              \n" +
                "	IN BuyByID INT(1),              \n" +
                "	IN BuyToID INT(1),            \n" +
                "    IN UserID INT(1)            \n" +
                ")  \n" +
                "BEGIN              \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION              \n" +
                "BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING              \n" +
                "  BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "    START TRANSACTION;              \n" +
                "  \n" +
                "				SET @rank = (SELECT id FROM component ORDER BY id DESC LIMIT 1);            \n" +
                "				INSERT INTO `component`            \n" +
                "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `RoHSStatusID`,            \n" +
                "				`isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`,            \n" +
                "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,             \n" +
                "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,            \n" +
                "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,             \n" +
                "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,            \n" +
                "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)            \n" +
                "				SELECT  @rank:=@rank+1 AS `PID`,            \n" +
                "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,             \n" +
                "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`RoHSStatusID`,         \n" +
                "                com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,            \n" +
                "				com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,             \n" +
                "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,             \n" +
                "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,             \n" +
                "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,             \n" +
                "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,            \n" +
                "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,            \n" +
                "				(SELECT LEFT(CONCAT((SELECT mfgCode FROM mfgcodemst WHERE id = BuyByID),'+',c.mfgPN),30) `PIDCode`            \n" +
                "				 FROM component c JOIN mfgcodemst m ON m.id = c.mfgcodeID  WHERE c.mfgcodeID = BuyToID AND c.id = com.id AND IFNULL(c.isDeleted,0) = 0) `PIDCode`            \n" +
                "				FROM component com             \n" +
                "				WHERE com.mfgcodeID = BuyToID AND IFNULL(com.isDeleted,0) = 0;           \n" +
                "  \n" +
                "                /*   As per discussion with Dixitbhai not require to insert alias, packeging alias, and alternate alias for component.(04-10-2028)        \n" +
                "				INSERT INTO `component_alias`            \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)            \n" +
                "				select            \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,             \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`            \n" +
                "				from component_alias ca join component c on c.id = ca.componentID            \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;            \n" +
                "  \n" +
                "                INSERT INTO `component_alternatepn`            \n" +
                "				(`refComponentID`,`componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)            \n" +
                "				select            \n" +
                "				ca.`refComponentID` ,(select id from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,             \n" +
                "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`            \n" +
                "				from component_alternatepn ca join component c on c.id = ca.componentID            \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);            \n" +
                "				INSERT INTO `component_packagingalias`            \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)            \n" +
                "				select            \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,            \n" +
                "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`            \n" +
                "				from component_packagingalias ca join component c on c.id = ca.componentID            \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;            \n" +
                "  \n" +
                "                */        \n" +
                "				INSERT INTO `component_rohsalternatepn`            \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)            \n" +
                "				SELECT            \n" +
                "				ca.`aliasgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`            \n" +
                "				FROM component_rohsalternatepn ca JOIN component c ON c.id = ca.componentID            \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;            \n" +
                "				INSERT INTO `component_goodbadpartmapping`            \n" +
                "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)            \n" +
                "				SELECT        \n" +
                "                (IFNULL((SELECT id FROM component WHERE mfgPN = cG.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,             \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cB.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,            \n" +
                "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`            \n" +
                "				FROM component_goodbadpartmapping ca JOIN component cB ON cB.id = ca.badComponentID            \n" +
                "				JOIN component cG ON cG.id	= ca.goodComponentID            \n" +
                "				WHERE ca.badComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) OR         \n" +
                "                ca.goodComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;            \n" +
                "  \n" +
                "  \n" +
                "				INSERT INTO `component_standard_details`            \n" +
                "				(`standardClassID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)            \n" +
                "				SELECT            \n" +
                "				ca.`standardClassID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,            \n" +
                "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`            \n" +
                "				FROM component_standard_details ca JOIN component c ON c.id = ca.componentID            \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;            \n" +
                "				INSERT INTO `component_drivetools`            \n" +
                "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)            \n" +
                "				SELECT            \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`            \n" +
                "				FROM component_drivetools ca JOIN component c ON c.id = ca.refComponentID            \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;            \n" +
                "				INSERT INTO `component_requiremapping_parts`            \n" +
                "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)            \n" +
                "				SELECT            \n" +
                "				ca.`requiredMatingPartgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,            \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`            \n" +
                "				FROM component_requiremapping_parts ca JOIN component c ON c.id = ca.refComponentID            \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;            \n" +
                "				INSERT INTO `component_dataelement`            \n" +
                "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)            \n" +
                "				SELECT            \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,            \n" +
                "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`            \n" +
                "				FROM component_dataelement ca JOIN component c ON c.id = ca.componentID            \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;            \n" +
                "  COMMIT;              \n" +
                "SELECT * FROM component WHERE mfgcodeID = BuyByID;            \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (262,'2.00','V1','removed component_requirematingpart table from Sproc_CopyComponent SP - Ashish'," + userid + ");"
            );
            break;
        case 262:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "drop procedure if exists `Sproc_TruncateDatabase`;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                           \n" +
                "	IN pPassword VARCHAR(500)                 \n" +
                ")  \n" +
                "BEGIN                       \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN                  \n" +
                "		#Start - Delete Role                \n" +
                "		TRUNCATE TABLE rolepagedetail;                \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                \n" +
                "		TRUNCATE TABLE component_standard_role;                \n" +
                "  \n" +
                "		#Start - Delete Features of roles                \n" +
                "		DELETE FROM feature_role_mapping;                \n" +
                "		#End - Delete Features of roles                \n" +
                "  \n" +
                "		#Start - Delete Generic Folder                \n" +
                "		UPDATE genericfiles SET refParentId = NULL           \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));               \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);                \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL           \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);          \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;                \n" +
                "  \n" +
                "		#End - Delete Generic Folder                \n" +
                "  \n" +
                "		#Start - Delete Generic Files                \n" +
                "		TRUNCATE TABLE genericfiles;                \n" +
                "		#End - Delete Generic Files                \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');                \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;                \n" +
                "		#End - Delete Role                \n" +
                "		#Start - Delete Generic Category                \n" +
                "			TRUNCATE TABLE employee_department;                \n" +
                "			#Start - Delete Part                \n" +
                "			TRUNCATE TABLE operation_part;                \n" +
                "			TRUNCATE TABLE workorder_operation_part;       \n" +
                "			#End - Delete Part                \n" +
                "			#Start - Delete Equipment                \n" +
                "				TRUNCATE TABLE operation_equipment;                \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;                \n" +
                "				TRUNCATE TABLE equipment_dataelement;                \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;                \n" +
                "  \n" +
                "				#Start - Delete Equipment Task                \n" +
                "				TRUNCATE TABLE equipment_task_schedule;                \n" +
                "				DELETE FROM equipment_task;                \n" +
                "				#End - Delete Equipment Task                \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master                \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;                \n" +
                "				DELETE FROM workorder_serialmst;                \n" +
                "				# End - Delete Workorder Trans Serial Master                \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail                \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;                \n" +
                "				DELETE FROM workorder_trans_empinout;                \n" +
                "				#End - Delete Workorder Transaction InOut Detail                \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction                \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;                \n" +
                "				TRUNCATE TABLE workorder_trans_production;                \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;                \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;                \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;                \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;                \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;                \n" +
                "				DELETE FROM workorder_trans;                \n" +
                "				# End - Delete Workorder Transaction                \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;                \n" +
                "				DELETE FROM equipment;                \n" +
                "			#End - Delete Equipment                \n" +
                "			# Start - Delete Operation                \n" +
                "			TRUNCATE TABLE operation_equipment;                \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element                \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;                \n" +
                "			DELETE FROM workorder_operation_dataelement;                \n" +
                "			# End - Delete Workorder Operation Data Element                \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;                \n" +
                "			TRUNCATE TABLE workorder_operation_employee;                \n" +
                "			TRUNCATE TABLE operation_master_templates;                \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			                \n" +
                "				# Start - Delete ECO Request 			                \n" +
                "					# Start - Delete ECO Request Approval                \n" +
                "					TRUNCATE TABLE eco_request_department_employee;                \n" +
                "					DELETE FROM eco_request_department_approval;                \n" +
                "					# End - Delete ECO Request Approval                \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;                \n" +
                "				DELETE FROM eco_request;                \n" +
                "				# End - Delete ECO Request                \n" +
                "  \n" +
                "			# Start - Delete Shipping Details                \n" +
                "			TRUNCATE TABLE shippedassembly;                \n" +
                "			DELETE FROM salesshippingmst;                \n" +
                "			DELETE FROM workorder_salesorder_details;                \n" +
                "			DELETE FROM salesorderdet;                \n" +
                "			DELETE FROM salesordermst;                \n" +
                "			# End - Delete Shipping Details                \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review                 \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;                \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;                \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;                \n" +
                "			DELETE FROM workorder_reqforreview;                \n" +
                "			# End - Delete Workorder Request Review                 \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;                \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;                \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming                \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;                \n" +
                "			DELETE FROM workorder_preprogcomp_designator;                \n" +
                "			DELETE FROM workorder_preprogcomp;                \n" +
                "			# End - Delete Workorder Tran PreProgramming                \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;                \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;                \n" +
                "			# End - Delete Workorder Operation                \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;                \n" +
                "  \n" +
                "			#Start - Delete Chart                \n" +
                "			TRUNCATE TABLE chart_template_operations;          \n" +
                "			TRUNCATE TABLE chart_template_employee_details;               \n" +
                "			TRUNCATE TABLE chart_template_access;           \n" +
                "			DELETE FROM chart_templatemst;                \n" +
                "			#Start - End Chart                \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;                \n" +
                "			# End - Delete Operation                \n" +
                "			TRUNCATE TABLE standard_message;                \n" +
                "			# Start - Delete Component                \n" +
                "			TRUNCATE TABLE component_alias;               \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';            \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;                \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;                \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;          \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;             \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;             \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';            \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;            \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;            \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';            \n" +
                "			TRUNCATE TABLE component_goodbadpartmapping;                \n" +
                "			TRUNCATE TABLE component_processmaterial;                \n" +
                "			TRUNCATE TABLE component_drivetools;                \n" +
                "			TRUNCATE TABLE component_standard_details;                \n" +
                "  \n" +
                "			# Start - Delete Recieving Material                \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;                \n" +
                "			DELETE FROM component_sid_stock;            \n" +
                "			DELETE FROM cost_category;                    \n" +
                "			# End - Delete Recieving Material                \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;                \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;             \n" +
                "			TRUNCATE TABLE standard_class;               \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;          \n" +
                "			DELETE FROM certificate_standards;              \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;          \n" +
                "			DELETE FROM br_label_template;          \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL          \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Ownerships';          \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL          \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Types';          \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL          \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Types';          \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL          \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Types';          \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL          \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Responsibilities';          \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;                \n" +
                "			# End - Delete Component                \n" +
                "  \n" +
                "		#End - Delete Generic Category                \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;          \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;          \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;          \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;          \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;          \n" +
                "		TRUNCATE TABLE rfq_assembly_history;          \n" +
                "		DELETE FROM rfq_lineitems;          \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;          \n" +
                "		DELETE FROM component WHERE id > 0;           \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;                \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;           \n" +
                "		#Start - Delete Entity                \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                \n" +
                "		DELETE FROM workorder_operation_dataelement;                \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;                \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                \n" +
                "		DELETE FROM workorder_trans_subform_data;              \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;             \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';            \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                \n" +
                "		DELETE FROM subform_transaction;                \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;                \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;          \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;          \n" +
                "		DELETE FROM dataelement;              \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;                \n" +
                "		#End - Delete Entity                \n" +
                "		#Start - Delete UOMS                     \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;          \n" +
                "		DELETE FROM rfq_assy_quotations;              \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;               \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;                \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;                \n" +
                "		#End - Delete UOMS                \n" +
                "		#Start - Delete MFG                    \n" +
                "		TRUNCATE TABLE mfgcodealias;                \n" +
                "		TRUNCATE TABLE who_bought_who;                \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;                \n" +
                "		#End - Delete MFG                    \n" +
                "		#Start - Delete BOM                \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;                \n" +
                "		DELETE FROM component_cust_alias_rev;                \n" +
                "		DELETE FROM rfq_assy_bom;                \n" +
                "		#End - Delete BOM                \n" +
                "		#Start - Delete RFQ                \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;                \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;                \n" +
                "		DELETE FROM rfq_assy_quantity;                \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;        \n" +
                "		DELETE FROM rfq_assemblies;                \n" +
                "		DELETE FROM rfqforms;                \n" +
                "		#End - Delete RFQ                \n" +
                "		DELETE FROM customer_addresses;                \n" +
                "		DELETE FROM customer_contactperson;                \n" +
                "		TRUNCATE TABLE assemblystock;                \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;                \n" +
                "		#Start - Delete Customer                \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;                \n" +
                "		DELETE FROM workorder_assy_designators;               \n" +
                "		DELETE FROM workorder_cluster;                    \n" +
                "		DELETE FROM workorder_operation_firstpiece;                \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;                \n" +
                "		TRUNCATE TABLE shipping_requestdet;                \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;                \n" +
                "		DELETE FROM workorder;                \n" +
                "		TRUNCATE TABLE assembly_revision_comments;             \n" +
                "		DELETE FROM customers;                \n" +
                "		#End - Delete Customer                \n" +
                "		#Start - Delete Employee                \n" +
                "		UPDATE department SET parentDeptID=NULL;           \n" +
                "		DELETE FROM department;                \n" +
                "		TRUNCATE TABLE dynamicreportaccess;                \n" +
                "		UPDATE employees SET `managerID`=NULL;                \n" +
                "		TRUNCATE TABLE notificationdet;                \n" +
                "		DELETE FROM notificationmst;                \n" +
                "		TRUNCATE TABLE group_participant_details;                \n" +
                "		TRUNCATE TABLE group_chat_log;                \n" +
                "		DELETE FROM group_chat;                \n" +
                "		TRUNCATE TABLE chat;                \n" +
                "		TRUNCATE TABLE feature_user_mapping;                \n" +
                "		TRUNCATE TABLE user_agreement;                \n" +
                "		TRUNCATE TABLE userpagedetail;                \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');                \n" +
                "		TRUNCATE TABLE shipping_request_empdet;                \n" +
                "		DELETE FROM shipping_request;                \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');                \n" +
                "		#End - Delete Employee                \n" +
                "  \n" +
                "		DELETE FROM master_templates;                \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards                \n" +
                "		TRUNCATE TABLE component_standard_details;                \n" +
                "		DELETE FROM component_standard_class;                \n" +
                "		DELETE FROM component_standard;                \n" +
                "		#End - Delete Component Standards                \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log                \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;                \n" +
                "		#End - Delete Data Entry Audit Log                \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	                \n" +
                "		TRUNCATE TABLE dynamicreportfields;                  \n" +
                "		DELETE FROM dynamicreportmst;                \n" +
                "		#End - Delete Dynamic Report                \n" +
                "  \n" +
                "		#Start - Delete Job Type                \n" +
                "		DELETE FROM jobtype;                \n" +
                "		#End - Delete Job Type                \n" +
                "  \n" +
                "		#Start - Delete Log Master                \n" +
                "		TRUNCATE TABLE logmst;                \n" +
                "		#End - Delete Log Master                \n" +
                "  \n" +
                "		#Start - Delete Order Type                \n" +
                "		-- DELETE FROM ordertype;                \n" +
                "		#End - Delete Order Type                \n" +
                "  \n" +
                "		#Start - Delete Reason                \n" +
                "		DELETE FROM reasonmst;                \n" +
                "		#End - Delete Reason                \n" +
                "  \n" +
                "		#Start - Delete Requirement                \n" +
                "		DELETE FROM requirement;                \n" +
                "		#End - Delete Requirement                \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data                \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;                \n" +
                "		#End - Delete Assy Auto Pricing Data                \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log                \n" +
                "		TRUNCATE TABLE taskconfirmation;                \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log                \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log                \n" +
                "		TRUNCATE TABLE timeline;                \n" +
                "		#End - Delete All Timeline Log                \n" +
                "  \n" +
                "		#Start - Delete All Chart Category                \n" +
                "		DELETE FROM chart_category;                \n" +
                "		#End - Delete All Chart Category                \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias                \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;                \n" +
                "		#End - Delete All Component Generic Alias                \n" +
                "  \n" +
                "		#Start - Delete All Defect Category                \n" +
                "		-- DELETE FROM defectcategory;                \n" +
                "		#End - Delete All Defect Category                \n" +
                "  \n" +
                "		#Start - Delete All ECO Category                \n" +
                "		-- DELETE FROM eco_type_values;                \n" +
                "		-- DELETE FROM eco_type_category;                \n" +
                "		#End - Delete All ECO Category                \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;            \n" +
                "  \n" +
                "		SELECT 'Done';                \n" +
                "	ELSE                 \n" +
                "		SELECT 'Invalid Argument';                \n" +
                "	END IF;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (263,'2.00','V1','removed component_requirematingpart table from Sproc_TruncateDatabase SP - Ashish'," + userid + ");"
            );
            break;
        case 263:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */
                "drop procedure if exists `Sproc_checkDelete_component`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                                                              \n" +
                "	IN tableName VARCHAR(255),                                                              \n" +
                "	IN IDs LONGTEXT,                                                              \n" +
                "	IN deletedBy INT,                                                              \n" +
                "	IN entityID VARCHAR(255),                                                              \n" +
                "	IN refrenceIDs LONGTEXT                                                              \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                   \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                              \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                              \n" +
                "			FROM                                                               \n" +
                "			(                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias_rev_pn\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_goodbadpartmapping\" else \"\" end as msg FROM component_goodbadpartmapping WHERE deletedAt IS NULL AND (goodComponentID IN(',IDs,') OR badComponentID IN(',IDs,')) LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "			) q');                                                              \n" +
                "		PREPARE stmt FROM @SQL;                                                              \n" +
                "		EXECUTE stmt;                                                              \n" +
                "		IF (SELECT TotalCount FROM tempComponent)=0 THEN                                                              \n" +
                "			START TRANSACTION;      \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                              \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                              \n" +
                "					EXECUTE stmt1;                                                              \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');    \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                              \n" +
                "					EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;       \n" +
                "  \n" +
                "			COMMIT;                                                             \n" +
                "		ELSE                                                              \n" +
                "			SELECT * FROM tempComponent;                                                              \n" +
                "		END IF;                                                              \n" +
                "		DROP TABLE tempComponent;          \n" +
                "        END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (264,'2.00','V1','removed component_requirematingpart table from Sproc_checkDelete_component SP - Ashish'," + userid + ");"
            );
            break;
        case 264:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/21/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(           \n" +
                "	pDeptID INT(11),  \n" +
                "    pGlobalSearchWHId INT(11),  \n" +
                "    pSearchWHId INT(11)   \n" +
                "  \n" +
                ")  \n" +
                "BEGIN             \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS        \n" +
                "	SELECT 	w.id, w.name, w.isPermanentWH, w.parentWHID, 0 binCount, 0 uidCount      \n" +
                "	FROM 	warehousemst w      \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)   \n" +
                "    and 	w.id = IFNULL(pSearchWHId, w.id)  \n" +
                "    AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))      \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1      \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0      \n" +
                "	AND 	IFNULL(w.isActive,1) = 1;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS        \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID      \n" +
                "	FROM 	binmst b      \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)      \n" +
                "	AND 	IFNULL(b.isActive,1) = 1       \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS      \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount      \n" +
                "	FROM 	component_sid_stock       \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)      \n" +
                "	AND		IFNULL(isDeleted,0) = 0      \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE tempBinDet t,  \n" +
                "    tempActiveBinIDs c   \n" +
                "SET   \n" +
                "    t.uidCount = c.uidCount  \n" +
                "WHERE  \n" +
                "    t.id = c.binID;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS       \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount      \n" +
                "	FROM 	tempBinDet       \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE tempWarehouseDet t,  \n" +
                "    tempActiveWarehouseIDs c   \n" +
                "SET   \n" +
                "    t.binCount = c.binCount,  \n" +
                "    t.uidCount = c.uidCount  \n" +
                "WHERE  \n" +
                "    t.id = c.warehouseID;  \n" +
                "	SELECT   \n" +
                "    *  \n" +
                "FROM  \n" +
                "    tempWarehouseDet;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;      \n" +
                "	DROP TEMPORARY TABLE tempBinDet;      \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;      \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/21/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(    \n" +
                "		pWarehouseID int(11),  \n" +
                "		pGlobalSearchBinId int(11),  \n" +
                "		pSearchBinId INT(11)   \n" +
                ")  \n" +
                "BEGIN           \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS    \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount    \n" +
                "	FROM component_sid_stock     \n" +
                "	WHERE IFNULL(isDeleted,0) = 0    \n" +
                "	group by binID;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS     \n" +
                "	SELECT 	b.id, b.name, b.isPermanentBin, 0 uidCount     \n" +
                "	FROM 	binmst b    \n" +
                "	WHERE 	b.id = IFNULL(pGlobalSearchBinId, b.id)      \n" +
                "    AND 	b.id = IFNULL(pSearchBinId, b.id)      \n" +
                "    AND 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)    \n" +
                "	AND 	IFNULL(b.isActive,1) = 1     \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;    \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c    \n" +
                "	set t.uidCount = c.uidCount    \n" +
                "	where t.id = c.binID;    \n" +
                "  \n" +
                "	SELECT * FROM tempBinDet;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;    \n" +
                "	DROP TEMPORARY TABLE tempBinDet;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/21/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pBinID int(11),  \n" +
                "    pGlobalSearchUIDId int(11),  \n" +
                "	pSearchUIDId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                          \n" +
                "	SELECT 	css.id,					css.scanlabel,		css.pkgQty,		css.price, 		css.uid,   \n" +
                "            c.PIDCode, 				c.mfgcodeID,        c.mfgPN,  		mfg.mfgCode, 	ro.rohsIcon,   \n" +
                "            ro.name AS rohsName,	css.nickName,		css.binID                           \n" +
                "	FROM component_sid_stock css                          \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                         \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                          \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                 \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)      \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)      \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )      \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query2;                          \n" +
                "	DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (265,'2.00','V1',' Modified sproc for serach functionality Sproc_retrive_warehouse_to_transfer, Sproc_retrive_bin_to_transfer, Sproc_retrive_UID_to_transfer - Dharmishtha '," + userid + ");"
            );
            break;
        case 265:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "ALTER TABLE workorder_operation MODIFY COLUMN opNumber DECIMAL(7,3);   \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (266,'2.00','V1','Change data type for operation number format - Vaibhav '," + userid + ");"
            );
            break;
        case 266:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2019  *********************************** */

                "DROP PROCEDURE IF EXISTS `Sproc_GetAllUniqueSubAssemblyByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllUniqueSubAssemblyByPartID`(      \n" +
                "	IN pAssemblyID INT                    \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "  \n" +
                "	SELECT DISTINCT rfa.id rfqAssyID,      \n" +
                "		psa.prPerPartID,       \n" +
                "		co.PIDCode AS PIDCode       \n" +
                "	FROM part_sub_assy_relationship psa      \n" +
                "	INNER JOIN component co ON psa.prPerPartId = co.id       \n" +
                "	LEFT OUTER JOIN rfq_assemblies rfa ON psa.prPerPartID = rfa.partID      \n" +
                "	INNER JOIN rfq_assemblies rfb ON psa.partId = rfb.partID      \n" +
                "	WHERE co.deletedAt IS NULL AND rfb.id = pAssemblyID AND rfa.id = pAssemblyID      \n" +
                "	ORDER BY psa.level;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (267,'2.00','V1','Modified Sproc_GetAllUniqueSubAssemblyByPartID to add assembly condition- Shaiesh'," + userid + ");"
            );
            break;
        case 267:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_bom_report` ;  \n" +
                "CREATE VIEW `vu_bom_report` AS   \n" +
                "SELECT  \n" +
                "  (SELECT  \n" +
                "     `customers`.`companyName`  \n" +
                "   FROM `customers`  \n" +
                "   WHERE (`customers`.`id` = (SELECT  \n" +
                "                                `rfqforms`.`customerId`  \n" +
                "                              FROM `rfqforms`  \n" +
                "                              WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)))) AS `CustomerName`,  \n" +
                "  `ra`.`rfqrefID`            AS `QuoteNumber`,  \n" +
                "  (SELECT  \n" +
                "     `rfqforms`.`quoteindate`  \n" +
                "   FROM `rfqforms`  \n" +
                "   WHERE (`rfqforms`.`id` = `ra`.`rfqrefID`)) AS `RFQDate`,  \n" +
                "  `comp`.`PIDCode`           AS `Assy ID`,  \n" +
                "  `comp`.`mfgPN`             AS `assemblyNumber`,  \n" +
                "  `comp`.`mfgPNDescription`  AS `assemblyDescription`,  \n" +
                "  `comp`.`rev`               AS `assemblyRev`,  \n" +
                "  `ra`.`bomFCAVersion`       AS `Version`,  \n" +
                "  `rl`.`lineID`              AS `lineID`,  \n" +
                "  `rl`.`qpa`                 AS `qpa`,  \n" +
                "  `rl`.`refDesig`            AS `refDesig`,  \n" +
                "  `rl`.`custPN`              AS `custPN`,  \n" +
                "  `rl`.`customerRev`         AS `customerRev`,  \n" +
                "  `rl`.`customerDescription` AS `customerDescription`,  \n" +
                "  `rl`.`level`               AS `level`,  \n" +
                "  `rl`.`partclassID`         AS `partclassID`,  \n" +
                "  `rl`.`refRFQLineItemID`    AS `ParentLine`,  \n" +
                "  `rl`.`numOfPosition`       AS `Lead`,  \n" +
                "  `rl`.`uomID`               AS `uomID`,  \n" +
                "  `rl`.`dnpDesig`            AS `DNPREFDES`,  \n" +
                "  `rl`.`dnpQty`              AS `DNPQTY`,  \n" +
                "  `rl`.`isBuyDNPQty`         AS `BUYDNPQTY`,  \n" +
                "  `rl`.`isPurchase`          AS `IsBuy`,  \n" +
                "  `rl`.`isInstall`           AS `Populate`,  \n" +
                "  `rl`.`customerPartDesc`    AS `customerPartDesc`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`mfgPNDescription`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `InternalDescr`,  \n" +
                "  `rla`.`mfgCode`            AS `MFG`,  \n" +
                "  `rla`.`mfgPN`              AS `MFGPN`,  \n" +
                "  (SELECT  \n" +
                "     `component`.`RoHSStatusID`  \n" +
                "   FROM `component`  \n" +
                "   WHERE (`component`.`id` = `rla`.`mfgPNID`)) AS `RoHS`,  \n" +
                "  `rla`.`distributor`        AS `Distributor`,  \n" +
                "  `rla`.`distPN`             AS `DistributorPN`,  \n" +
                "  `rla`.`description`        AS `FlextronComment`,  \n" +
                "  (SELECT  \n" +
                "     `rfq_lineitems_approval_comment`.`comment`  \n" +
                "   FROM `rfq_lineitems_approval_comment`  \n" +
                "   WHERE (`rfq_lineitems_approval_comment`.`rfqLineItemsAlternatePartID` = `rla`.`id`)  \n" +
                "   ORDER BY `rfq_lineitems_approval_comment`.`approvalDate` DESC  \n" +
                "   LIMIT 0,1) AS `Approvalcomment`  \n" +
                "FROM (((`rfq_assemblies` `ra`  \n" +
                "     JOIN `rfq_lineitems` `rl`  \n" +
                "       ON ((`ra`.`id` = `rl`.`rfqAssyID`)))  \n" +
                "    JOIN `rfq_lineitems_alternatepart` `rla`  \n" +
                "      ON ((`rla`.`rfqLineItemsID` = `rl`.`id`)))  \n" +
                "   LEFT JOIN `component` `comp`  \n" +
                "     ON (((`comp`.`id` = `ra`.`partID`)  \n" +
                "          AND (`comp`.`category` = 3))))  \n" +
                "WHERE ((`rl`.`isDeleted` = 0)  \n" +
                "       AND (`rla`.`isDeleted` = 0));  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (268,'2.00','V1',' vu_bom_report - Vaibhan '," + userid + ");"
            );
            break;
        case 268:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                          \n" +
                "    IN pWhereClause VARCHAR(16383),                          \n" +
                "    IN puserID VARCHAR(50),                    \n" +
                "    IN pnickName VARCHAR(20),                    \n" +
                "    IN pprefix VARCHAR(20),                    \n" +
                "    IN puid VARCHAR(20),                \n" +
                "    IN pComponentID INT,            \n" +
                "    IN pCustomerID INT,            \n" +
                "    IN pCPN BOOL,            \n" +
                "    IN pMFGAvailabel BOOL,            \n" +
                "    IN pRefCpnMfgID INT,        \n" +
                "    IN pAssyID INT,        \n" +
                "    IN pSalesOrderDetailID INT,		        \n" +
                "    IN pReceiveMaterialType VARCHAR(255) 	        \n" +
                "    )  \n" +
                "BEGIN                          \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                          \n" +
                "	DECLARE v_delimiter VARCHAR(10);                          \n" +
                "	DECLARE v_length INT;                           \n" +
                "	DECLARE v_fieldType INT;                               \n" +
                "	DECLARE v_entityId INT;                          \n" +
                "	DECLARE v_dataElementId INT;                          \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                          \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                          \n" +
                "	DECLARE strLabel VARCHAR(2000);                          \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                          \n" +
                "	DECLARE StaticField VARCHAR(100);    \n" +
                "	DECLARE DynamicField VARCHAR(100);		    \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                          \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                          \n" +
                "	DECLARE plen,slen INT;                          \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                          \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                      \n" +
                "	DECLARE barcode_type_id INT;                \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);            \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                           \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                          \n" +
                "	(                          \n" +
                "	     errorText NVARCHAR(2000),                          \n" +
                "	     IsSuccess VARCHAR (2),                \n" +
                "	     MFGPart VARCHAR(100)                               \n" +
                "	);               \n" +
                "	-- get data from barcode templates with seprator                          \n" +
                "	block1: BEGIN       \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                           \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                    \n" +
                "		-- tempregexp;    	  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                        \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                          \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                     \n" +
                "		ELSE    /* barcode 1D */                \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                         \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                           \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                     \n" +
                "		END IF;    \n" +
                "	END block1;                          \n" +
                "  \n" +
                "	block2: BEGIN      	  \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                          \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                          \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                       \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                           \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                   \n" +
                "		-- declare exit loop if data not found                          \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                          \n" +
                "	        -- if any record match found than  check for delimiter and its value                     \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                          \n" +
                "			-- create temporary table for deliemeter and component dataelement                          \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                          \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                          \n" +
                "				pentityId INT,                          \n" +
                "				pdataElementId INT,                          \n" +
                "				pdelimiter_value VARCHAR(200)                          \n" +
                "			);                     \n" +
                "  \n" +
                "			-- create temporary table for separator string values                          \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                          \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                          \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                           \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                 \n" +
                "  \n" +
                "			-- open cursor                          \n" +
                "			OPEN barcodeMatch_cursor;                          \n" +
                "  \n" +
                "			-- set str label as whereclause                          \n" +
                "			SET strLabel=pWhereClause;                   \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                          \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                          \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                          \n" +
                " 			 END IF;                         \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                           \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                          \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                          \n" +
                "			 END IF;	                \n" +
                "  \n" +
                "			-- insert all values after seprator split                           \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                          \n" +
                "			PREPARE stmt1 FROM @SQL;	                          \n" +
                "			EXECUTE stmt1;                          \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                          \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';     \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                          \n" +
                "			barcodeMatch_loop:LOOP       \n" +
                "				-- get all five selected values                          \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                  \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                          \n" +
                "				IF exit_loop THEN                     \n" +
                "					CLOSE barcodeMatch_cursor;                          \n" +
                "					LEAVE barcodeMatch_loop;                          \n" +
                "				END IF;                     \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                          \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                          \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                          \n" +
                "				EXECUTE stmtdelimiter;                \n" +
                "  \n" +
                "				-- get delimiter values from string                          \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                  \n" +
                "				-- check for field type is static or dynamic                          \n" +
                "				-- if static field than check for mfg code and mfg part number                          \n" +
                "				IF v_fieldType = 0  THEN                      \n" +
                "					-- component_sid_stock                           \n" +
                "					-- get static field name from barcode table delimiter data element id                          \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                            \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                          \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                \n" +
                "						SET MFG_Part_No = delimiter_value_data;                \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN     \n" +
                "							SELECT COUNT(*), id, mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM   \n" +
                "							(  \n" +
                "								SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL  \n" +
                "								UNION  \n" +
                "								SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID   \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL  \n" +
                "							) a;  \n" +
                "						ELSE                \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;                \n" +
                "						END IF;                \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                          \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                          \n" +
                "						END IF;    \n" +
                "					END IF;                          \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                          \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN                  \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                          \n" +
                "					END IF;            \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                          \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');          \n" +
                "					END IF;          \n" +
                "					IF @componentCount > 1 THEN                \n" +
                "						CLOSE barcodeMatch_cursor;                          \n" +
                "						LEAVE barcodeMatch_loop;                \n" +
                "					END IF;                   \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                          \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                           \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                          \n" +
                "  \n" +
                "				ELSE      \n" +
                "					-- component_sid_stock_dataelement_Values                            \n" +
                "					-- dynamic fields         \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);     \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN          \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                          \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');          \n" +
                "					END IF;          \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN          \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                          \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');          \n" +
                "					END IF;    \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                           \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                       \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                           \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                   \n" +
                "				END IF;                          \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                          \n" +
                "			-- check if mfg and component both found than                           \n" +
                "			IF (@componentCount > 1) THEN                \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                          \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                          \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                          \n" +
                "                                   IF @Mfgmatched = 0  THEN                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                          \n" +
                "				   END IF;									                          \n" +
                "			 ELSE 		                \n" +
                "				IF @mfgCount = 0 THEN                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                          \n" +
                "		                END IF;	                          \n" +
                "				IF @componentCount = 0 THEN                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                          \n" +
                "				END IF;	                          \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                            \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                          \n" +
                "			        END IF;						                          \n" +
                "			END IF;				                          \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN            \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;            \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;            \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                          \n" +
                "				END IF;            \n" +
                "			END IF;            \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                          \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	            \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					            \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;            \n" +
                "				END IF;         \n" +
                "  \n" +
                "				-- must call statements in sequence          				                \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                          \n" +
                "				PREPARE stmt1 FROM @SQL1;                          \n" +
                "				EXECUTE stmt1;                        \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');            \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN            \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');            \n" +
                "				END IF;            \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);            \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN            \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);            \n" +
                "				END IF;            \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN            \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);            \n" +
                "				END IF;            \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN            \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);            \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN            \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);            \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN            \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');         \n" +
                "				END IF;        \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	            \n" +
                "				SET @sql2 = UpdateValue;	                           \n" +
                "				PREPARE stmt2 FROM @SQL2;                          \n" +
                "				EXECUTE stmt2;	                          \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                          \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                           \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                          \n" +
                "				END IF;                            \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                          \n" +
                "			ELSE                         \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                          \n" +
                "			END IF;                          \n" +
                "  \n" +
                "		ELSE                      \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                           \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                          \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                            \n" +
                "		END IF;                          \n" +
                "  \n" +
                "	END block2;                                     \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS   \n" +
                "SELECT `a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment` AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`PIDCode` AS `Assy ID`,`a`.`mfgPN` AS `Assy Name`,`a`.`rev` AS `Assy Revision`,`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName` AS `Company Name`,`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode` AS `GencCategory Code`,(IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,(CASE WHEN ((IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) > 0) THEN 'Pending' ELSE 'Completed' END) AS `Status`,`a`.`modifyDate` AS `modifyDate`,`a`.`salesOrderDetailId` AS `SalesOrderDetailId` FROM (SELECT `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,`sm`.`poDate` AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID` AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`,`sm`.`updatedAt` AS `modifyDate`,`fun_getAssyidByID`(`a`.`partID`) AS `PIDCode`,`fun_getAssyNameByID`(`a`.`partID`) AS `mfgPN`,`fun_getAssyrevNameByID`(`a`.`partID`) AS `rev`,CONCAT('(',`cu`.`customerCode`,') ',`cu`.`companyName`) AS `companyName`,CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`a`.`qty` AS `qty`,`a`.`id` AS `salesOrderDetailId`,(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0) FROM `shippedassembly` WHERE ((`shippedassembly`.`partID` = `a`.`partID`) AND (`shippedassembly`.`isDeleted` = 0) AND `shippedassembly`.`shippingId` IN (SELECT `salesshippingmst`.`shippingID` FROM `salesshippingmst` WHERE (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty` FROM ((((`salesorderdet` `a` JOIN `salesordermst` `sm` ON(((`sm`.`id` = `a`.`refSalesOrderID`) AND (IFNULL(`sm`.`isDeleted`,0) = 0)))) LEFT JOIN `customers` `cu` ON(((`sm`.`customerID` = `cu`.`id`) AND (IFNULL(`cu`.`isDeleted`,0) = 0)))) LEFT JOIN `customer_contactperson` `cc` ON(((`sm`.`contactPersonID` = `cc`.`personId`) AND (IFNULL(`cc`.`isDeleted`,0) = 0)))) LEFT JOIN `genericcategory` `gc` ON(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) AND (IFNULL(`gc`.`isDeleted`,0) = 0)))) WHERE (IFNULL(`a`.`isDeleted`,0) = 0)) `a`;  \n" +
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "UPDATE entity SET entityName = 'UID Management' WHERE entityID = -11;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (269,'2.00','V1',' Change of Receiving and Allow to kit - FENIL '," + userid + ");"
            );
            break;
        case 269:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(             \n" +
                "	pDeptID INT(11),    \n" +
                "    pGlobalSearchWHId INT(11),  \n" +
                "	pGlobalSearchBinId int(11),    \n" +
                "	pGlobalSearchUIDId int(11),    \n" +
                "    pSearchWHId INT(11)  \n" +
                ")  \n" +
                "BEGIN               \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN  \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;   \n" +
                "         SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = @vGlobalSearchUIDBinId;   \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pGlobalSearchBinId IS NOT NULL) THEN  \n" +
                "		 SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = pGlobalSearchBinId;   \n" +
                "    END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS          \n" +
                "	SELECT 	w.id, w.name, w.isPermanentWH, w.parentWHID, 0 binCount, 0 uidCount        \n" +
                "	FROM 	warehousemst w        \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)     \n" +
                "    AND 	w.id = IFNULL(pSearchWHId, w.id)    \n" +
                "	AND 	w.id = IFNULL(@vGlobalSearchBinWHId, w.id)    \n" +
                "    AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))        \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1        \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0        \n" +
                "	AND 	IFNULL(w.isActive,1) = 1;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS          \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID        \n" +
                "	FROM 	binmst b        \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)       \n" +
                "    AND		b.id = IFNULL(pGlobalSearchBinId, b.id)    \n" +
                "    AND		b.id = IFNULL(@vGlobalSearchUIDBinId, id)     \n" +
                "	AND 	IFNULL(b.isActive,1) = 1         \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS        \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount        \n" +
                "	FROM 	component_sid_stock         \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)    \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)     \n" +
                "	AND		IFNULL(isDeleted,0) = 0        \n" +
                "	GROUP BY binID;    \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c     \n" +
                "	SET    	t.uidCount = c.uidCount    \n" +
                "	WHERE   t.id = c.binID;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS         \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount        \n" +
                "	FROM 	tempBinDet         \n" +
                "	GROUP BY warehouseID;     \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c     \n" +
                "	SET   	t.binCount = c.binCount,    \n" +
                "			t.uidCount = c.uidCount    \n" +
                "	WHERE  	t.id = c.warehouseID;    \n" +
                "  \n" +
                "    SELECT * FROM tempWarehouseDet;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;        \n" +
                "	DROP TEMPORARY TABLE tempBinDet;        \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;        \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (270,'2.00','V1',' Modify Sproc_retrive_warehouse_to_transfer to get reverse tracking filter data - Dharmishtha '," + userid + ");"
            );
            break;
        case 270:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD pricenotselectreason TEXT;  \n" +
                "SET GLOBAL log_bin_trust_function_creators = 1;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getselectedPartDetail` ;  \n" +
                "CREATE FUNCTION `fun_getselectedPartDetail`(      \n" +
                "	rfqAssyID INT(11)) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN      \n" +
                "	DECLARE result NVARCHAR(16383);    \n" +
                "	SELECT  CONCAT(\"SELECT ra.requestQty,                               \n" +
                "					rq.finalPrice,                               \n" +
                "					rq.unitPrice,                              \n" +
                "					rq.supplier,                              \n" +
                "					rq.min,                              \n" +
                "					rq.mult,                               \n" +
                "					rq.selectedMpn,                               \n" +
                "					rq.selectionMode,                              \n" +
                "					rq.qtyID,                                               \n" +
                "					rq.currentStock,                                              \n" +
                "					rq.leadTime,                                               \n" +
                "					rq.supplierStock,                                              \n" +
                "					rq.grossStock,                                                  \n" +
                "					rq.selectedPIDCode,                                                \n" +
                "					rq.pricingSuppliers,          \n" +
                "					rq.packaging,         \n" +
                "					rq.rfqQtySupplierID,                               \n" +
                "					c.noOfPosition ApiNoOfPosition,                                  \n" +
                "					ct.qpa,    \n" +
                "					u.abbreviation,     \n" +
                "					rq.quoteQty,  \n" +
                "					rq.pricenotselectreason,                                 \n" +
                "					rq.consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                         \n" +
                "				LEFT JOIN component c on rq.selectedMpn = c.mfgPN AND c.deletedAt Is NULL                              \n" +
                "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                 \n" +
                "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id    \n" +
                "				left join uoms u on u.id=ct.uomID                                                  \n" +
                "				WHERE ct.isdeleted=0 and  ct.rfqAssyID=\",rfqAssyID)  INTO @result;      \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (271,'2.00','V1','Change in Selected Part Function-Champak'," + userid + ");"
            );
            break;
        case 271:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssyConsolidateQuantity` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAssyConsolidateQuantity`(            \n" +
                "      IN rfqAssyID INT,            \n" +
                "      IN qtyID INT            \n" +
                "  \n" +
                ")  \n" +
                "BEGIN            \n" +
                "IF(qtyID IS NOT NULL) THEN             \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),            \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),        \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL)            \n" +
                "         WHERE rq.qtyID=qtyID  AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);            \n" +
                "         ELSE            \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),            \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),        \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL)               \n" +
                "         WHERE  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);           \n" +
                "  \n" +
                "END IF;            \n" +
                " IF(SELECT COUNT(1) FROM rfq_consolidate_mfgpn_lineitem_quantity rq WHERE  rq.unitPrice IS NOT NULL AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0))=0 THEN          \n" +
                "          UPDATE rfq_assy_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;          \n" +
                "          UPDATE rfq_lineitem_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;          \n" +
                "          END IF;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (272,'2.00','V1','Alter sp Sproc_UpdateAssyConsolidateQuantity-Champak'," + userid + ");"
            );
            break;
        case 272:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/22/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(             \n" +
                "	pDeptID INT(11),    \n" +
                "    pGlobalSearchWHId INT(11),  \n" +
                "	pGlobalSearchBinId int(11),    \n" +
                "	pGlobalSearchUIDId int(11),    \n" +
                "    pSearchWHId INT(11)  \n" +
                ")  \n" +
                "BEGIN               \n" +
                "  \n" +
                "	set @vGlobalSearchBinWHId = NULL;  \n" +
                "    set @vGlobalSearchUIDBinId = NULL;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN  \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;   \n" +
                "         SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = @vGlobalSearchUIDBinId;   \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pGlobalSearchBinId IS NOT NULL) THEN  \n" +
                "		 SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = pGlobalSearchBinId;   \n" +
                "    END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS          \n" +
                "	SELECT 	w.id, w.name, w.isPermanentWH, w.parentWHID, 0 binCount, 0 uidCount        \n" +
                "	FROM 	warehousemst w        \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)     \n" +
                "    AND 	w.id = IFNULL(pSearchWHId, w.id)    \n" +
                "	AND 	w.id = IFNULL(@vGlobalSearchBinWHId, w.id)    \n" +
                "    AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))        \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1        \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0        \n" +
                "	AND 	IFNULL(w.isActive,1) = 1;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS          \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID        \n" +
                "	FROM 	binmst b        \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)       \n" +
                "    AND		b.id = IFNULL(pGlobalSearchBinId, b.id)   		-- Need to remove if show all counts  \n" +
                "    AND		b.id = IFNULL(@vGlobalSearchUIDBinId, id) 		-- Need to remove if show all counts    \n" +
                "	AND 	IFNULL(b.isActive,1) = 1         \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS        \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount        \n" +
                "	FROM 	component_sid_stock         \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)    \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts  \n" +
                "	AND		IFNULL(isDeleted,0) = 0        \n" +
                "	GROUP BY binID;    \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c     \n" +
                "	SET    	t.uidCount = c.uidCount    \n" +
                "	WHERE   t.id = c.binID;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS         \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount        \n" +
                "	FROM 	tempBinDet         \n" +
                "	GROUP BY warehouseID;     \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c     \n" +
                "	SET   	t.binCount = c.binCount,    \n" +
                "			t.uidCount = c.uidCount    \n" +
                "	WHERE  	t.id = c.warehouseID;    \n" +
                "  \n" +
                "    SELECT * FROM tempWarehouseDet;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;        \n" +
                "	DROP TEMPORARY TABLE tempBinDet;        \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;        \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/22/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(      \n" +
                "		pWarehouseID int(11),    \n" +
                "		pGlobalSearchBinId int(11),    \n" +
                "        pGlobalSearchUIDId int(11),    \n" +
                "		pSearchBinId INT(11)      \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	SET @vGlobalSearchUIDBinId = NULL;  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN  \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;   \n" +
                "    END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS      \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount      \n" +
                "	FROM 	component_sid_stock       \n" +
                "	WHERE 	IFNULL(isDeleted,0) = 0    \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts   \n" +
                "	group by binID;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS       \n" +
                "	SELECT 	b.id, b.name, b.isPermanentBin, 0 uidCount       \n" +
                "	FROM 	binmst b      \n" +
                "	WHERE 	b.id = IFNULL(pGlobalSearchBinId, b.id)        \n" +
                "    AND 	b.id = IFNULL(pSearchBinId, b.id)      \n" +
                "    AND 	b.id = IFNULL(@vGlobalSearchUIDBinId, b.id)    \n" +
                "    AND 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)      \n" +
                "	AND 	IFNULL(b.isActive,1) = 1       \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;      \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c      \n" +
                "	set t.uidCount = c.uidCount      \n" +
                "	where t.id = c.binID;      \n" +
                "  \n" +
                "	SELECT * FROM tempBinDet;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;      \n" +
                "	DROP TEMPORARY TABLE tempBinDet;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/22/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(    \n" +
                "	pBinID int(11),    \n" +
                "    pGlobalSearchUIDId int(11),    \n" +
                "	pSearchUIDId INT(11)    \n" +
                ")   \n" +
                "BEGIN    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                            \n" +
                "	SELECT 	css.id,					css.scanlabel,		css.pkgQty,		css.price, 		css.uid,     \n" +
                "            c.PIDCode, 				c.mfgcodeID,        c.mfgPN,  		mfg.mfgCode, 	ro.rohsIcon,     \n" +
                "            ro.name AS rohsName,	css.nickName,		css.binID                             \n" +
                "	FROM component_sid_stock css                            \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                           \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                            \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                   \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)        \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)        \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )        \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (273,'2.00','V1',' Modified Sproc_retrive_warehouse_to_transfer, Sproc_retrive_bin_to_transfer, Sproc_retrive_UID_to_transfer for filtering records - Dharmishtha '," + userid + ");"
            );
            break;
        case 273:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "ALTER TABLE component ADD color VARCHAR(100);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                    \n" +
                " IN tabquery LONGTEXT                    \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "   SET @sqlQ=tabquery;                    \n" +
                "   PREPARE stmt1 FROM @sqlQ;                     \n" +
                "   EXECUTE stmt1;                      \n" +
                "   DEALLOCATE PREPARE stmt1;                     \n" +
                "  \n" +
                "  SELECT '1';                    \n" +
                "  \n" +
                "    block1:BEGIN                    \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                      \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                    \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                      \n" +
                "	DECLARE  current_mfgcode INT ;                    \n" +
                "	DECLARE current_Ismfg TINYINT;                      \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                      \n" +
                "        DECLARE current_component INT ;                    \n" +
                "        DECLARE current_ComponentID INT;                    \n" +
                "	DECLARE maxvalueid INT;                    \n" +
                "        DECLARE aliasgroup INT;                    \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                      \n" +
                "    DECLARE component_cursor CURSOR FOR                      \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                    \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                      \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                      \n" +
                "     -- open the cursor                      \n" +
                "    OPEN component_cursor;                    \n" +
                "     -- start looping                      \n" +
                "     component_loop: LOOP                        \n" +
                "     -- read the name from next row into the variables                       \n" +
                "     FETCH component_cursor INTO current_ComponentID;                      \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                       \n" +
                "     -- close the cursor and exit the loop if it has.                      \n" +
                "       IF exit_loop THEN	                     \n" +
                "				 LEAVE component_loop;                      \n" +
                "			END IF;                      \n" +
                "        SELECT '1';                    \n" +
                "  \n" +
                "	SET current_mfgpn='';                    \n" +
                "	SET current_mfgcode=1;                    \n" +
                "	SET current_mfgPartNumber='';                    \n" +
                "	SET current_Ismfg=1;                    \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                    \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                    \n" +
                "	 -- insert new component                     \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                    \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                    \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                    \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,        \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color)                    \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                    \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                    \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                    \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,        \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color                    \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                    \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                    \n" +
                "	 -- check component is manufacturer part or distributor part                    \n" +
                "                   IF(current_Ismfg=1) THEN                    \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                    \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                    \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                    \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                    \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                    \n" +
                "                    ELSE          \n" +
                "  \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                    \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                    \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                    \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                    \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;                    \n" +
                "		        END IF;                    \n" +
                "		    END IF;                    \n" +
                "      END IF;                    \n" +
                "  \n" +
                "    END LOOP component_loop;                    \n" +
                "      CLOSE component_cursor;                    \n" +
                "    END  block1;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (274,'2.00','V1',' Add new column in component-champak'," + userid + ");"
            );
            break;
        case 274:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "ALTER TABLE `rfq_consolidated_mfgpn_lineitem`   \n" +
                "modify COLUMN `rfqAssyBomID` int(11) DEFAULT NULL ;    \n" +
                "  \n" +
                "ALTER TABLE `rfq_consolidated_mfgpn_lineitem`   \n" +
                "modify COLUMN `lineID` decimal(16,8) DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (275,'2.00','V1','consolidted logic changes related table field changes  - shirish'," + userid + ");"
            );
            break;
        case 275:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                  \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN pPartID INT                           \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "	DECLARE pOffset INT(11);                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                                \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                   \n" +
                "			com.PIDCode, com.category, rl.partID,      \n" +
                "             GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon      \n" +
                "            )AS mfgPN,       \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                 \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                 \n" +
                "			FROM rfq_lineitems_alternatepart ra                                \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                  \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                                \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                              \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                      \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0               \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0                \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                               \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                  \n" +
                "	IN prfqAssyID INT(1),  \n" +
                "    IN ppartID INT(1),  \n" +
                "	IN puserID INT(1)                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "  BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                  \n" +
                "  \n" +
                "    START TRANSACTION;          \n" +
                "  \n" +
                "    #consoliadte select           \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS           \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;            \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                  \n" +
                "		drop temporary table if exists leveldata;  \n" +
                "		create temporary table if not exists leveldata as  \n" +
                "			WITH RECURSIVE cte AS      \n" +
                "			(   \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,0 as level, com.category,  \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa as qpa1,                  \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                   \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                  \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID as rfqAssyID,rl.uomID,rl.rfqAssyBomID  \n" +
                "				from rfq_lineitems_alternatepart rla  \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                "				join component com on com.id = rla.mfgPNID  \n" +
                "				where rl.partId = ppartID and rla.isDeleted = 0  \n" +
                "				)  \n" +
                "			  UNION ALL      \n" +
                "  \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,cte.level+1 as level, com.category,  \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, ceiling((cte.qpa1 * rl.qpa)) as qpa1,                  \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                   \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                  \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID  \n" +
                "				from rfq_lineitems_alternatepart rla  \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0  \n" +
                "				join component com on com.id = rla.mfgPNID #and com.category != 3   \n" +
                "				join cte cte on cte.category = 3 and rl.partID = cte.mfgPNID  \n" +
                "				where rla.isDeleted =0  \n" +
                "			   )  \n" +
                "			)  \n" +
                "			SELECT cte.* FROM cte   \n" +
                "			where cte.category !=3  \n" +
                "			order by lineItemID,partcode;  \n" +
                "  \n" +
                "		drop temporary table if exists Results;  \n" +
                "		create temporary table if not exists Results as  \n" +
                "		select sum(qpa1)qpa, b.* from (  \n" +
                "		select count(a.rfqLineItemsID) as multiple, group_concat(a.rfqLineItemsID) as consolidatedLineItemIDs,GROUP_CONCAT(part) as part1,GROUP_CONCAT(partcode) as partcode1,  \n" +
                "		a.* from leveldata a  \n" +
                "		group by rfqLineItemsID,level  \n" +
                "		)b  \n" +
                "		group by  numOfPosition,isPurchase,partcode1;  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                  \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "			SET                   \n" +
                "			cl.isDeleted = TRUE,                  \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "			cl.deletedBy = puserID                  \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                  \n" +
                "            SELECT * FROM(                       \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                  \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                   \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                  \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                   \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                  \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                  \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                  \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`)                  \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                  \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                  \n" +
                "		puserID `createdBy`, R.`numOfPosition`,                  \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`refDesig`                   \n" +
                "        FROM Results R                  \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                  \n" +
                "		 WHERE cl.id IS NULL;                  \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                  \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                  \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                  \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                  \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                   \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                  \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                   \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                   \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                   \n" +
                "		SET                   \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                  \n" +
                "        rq.updatedBy = puserID,                  \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                  \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                  \n" +
                "# Update Consilidated LineItems                  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                   \n" +
                "		SET                   \n" +
                "		cl.isInstall = R.isInstall ,                  \n" +
                "		cl.isPurchase = R.isPurchase,                  \n" +
                "		cl.numOfPosition = R.numOfPosition,                  \n" +
                "		cl.attritionRate = R.attritionRate,                  \n" +
                "		cl.leadQty = R.leadQty,                  \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                  \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                  \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                  \n" +
                "        cl.qpa = R.qpa,                  \n" +
                "        cl.uomID = R.uomID,        \n" +
                "        cl.refDesig = R.refDesig,        \n" +
                "        cl.lineID = R.lineID,                  \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,                  \n" +
                "        cl.updatedBy = puserID                  \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                  \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                  \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                  \n" +
                "		SET                   \n" +
                "        cap.isDeleted = TRUE,                  \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cap.deletedBy = puserID                  \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                    \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                       \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                  \n" +
                "  ############################  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                   \n" +
                "		SET                   \n" +
                "        isDeleted = TRUE,                  \n" +
                "        deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		deletedBy = puserID                  \n" +
                "        WHERE id IN(                   \n" +
                "        SELECT capID FROM (                  \n" +
                "		SELECT DISTINCT(cap.id)AS capID                  \n" +
                "		FROM rfq_lineitems_alternatepart ap                   \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                   \n" +
                "		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                  \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))  \n" +
                "        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                  \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                   \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                \n" +
                "		SET                   \n" +
                "        cq.isDeleted = TRUE,                  \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cq.deletedBy = puserID                  \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                    \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                       \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove     \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                \n" +
                "		SET                   \n" +
                "        cq.isDeleted = TRUE,                  \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cq.deletedBy = puserID                  \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                    \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                    \n" +
                "# delete Consolidate lineItems                   \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                  \n" +
                "		SET                   \n" +
                "        cl.isDeleted = TRUE,                  \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cl.deletedBy = puserID                  \n" +
                "		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                  \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                          \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                   \n" +
                "  #################################  \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                  \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                  \n" +
                "		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                  \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                  \n" +
                "		FROM rfq_lineitems_alternatepart ap                   \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID              \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0              \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                  \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))  \n" +
                "        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed     \n" +
                "#################################           \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl              \n" +
                "		SET                   \n" +
                "        cap.isDeleted = TRUE,                  \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                  \n" +
                "		cap.deletedBy = puserID              \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (               \n" +
                "        SELECT  DISTINCT(cap.id)                  \n" +
                "		FROM rfq_lineitems_alternatepart ap                   \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID              \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))  \n" +
                "        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);              \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove     \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,               \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,              \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                    \n" +
                "		SET                   \n" +
                "        cq.finalPrice = NULL,              \n" +
                "        cq.selectedPIDCode = NULL,              \n" +
                "        cq.selectedMpn = NULL,              \n" +
                "        cq.selectionMode = NULL,              \n" +
                "        cq.supplier = NULL,              \n" +
                "        cq.supplierStock = NULL,              \n" +
                "        cq.currentStock = NULL,              \n" +
                "        cq.grossStock = NULL,              \n" +
                "        cq.leadTime = NULL,              \n" +
                "        cq.min = NULL,              \n" +
                "        cq.mult = NULL,              \n" +
                "        cq.unitPrice = NULL,              \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                  \n" +
                "		cq.updatedBy = puserID                  \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                    \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                 \n" +
                "  \n" +
                "  # update rfq assembly pricing status      \n" +
                "    update rfq_assemblies set isReadyForPricing = true, updatedAt = UTC_TIMESTAMP(), updatedBy = puserID where isDeleted = 0 and id = prfqAssyID;     \n" +
                "  \n" +
                "    COMMIT;              \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)            \n" +
                "    UNION          \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id           \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);          \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;           \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllUniqueSubAssemblyByPartID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllUniqueSubAssemblyByPartID`(        \n" +
                "	IN pAssemblyID INT                      \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "  \n" +
                "  \n" +
                "	SELECT DISTINCT rfa.id rfqAssyID,        \n" +
                "		psa.prPerPartID,         \n" +
                "		co.PIDCode AS PIDCode         \n" +
                "	FROM part_sub_assy_relationship psa        \n" +
                "	INNER JOIN component co ON psa.prPerPartId = co.id         \n" +
                "	LEFT OUTER JOIN rfq_assemblies rfa ON psa.prPerPartID = rfa.partID        \n" +
                "	INNER JOIN rfq_assemblies rfb ON psa.partId = rfb.partID        \n" +
                "	WHERE co.deletedAt IS NULL AND rfb.id = pAssemblyID #AND rfa.id = pAssemblyID        \n" +
                "	ORDER BY psa.level;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems`;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItems`(          \n" +
                "rfqAssyID INT(11),        \n" +
                "SQLString VARCHAR(16383),    \n" +
                "customerID INT(11),    \n" +
                "isPackaging TINYINT(1)        \n" +
                "	) RETURNS longtext CHARSET utf8  \n" +
                "     READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN   \n" +
                "  \n" +
                "	DECLARE result NVARCHAR(16383);        \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                        \n" +
                "					SELECT                                                         \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,rl.uomID,                                                          \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,                                      \n" +
                "						(SELECT fun_getLineItemByConsolidateID(rl.consolidatedLineItemIDs)) as description,                                        \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponent(customerID)),',                                                        \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(isPackaging)),', ',                                                         \n" +
                "					SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                                        \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                        \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                        \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.id')  INTO @result;          \n" +
                "      	SET result = @result;          \n" +
                "	RETURN result;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(                                                \n" +
                "	IN ppageIndex INT(11),                                                \n" +
                "	IN precordPerPage INT(11),                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                \n" +
                "	IN rfqAssyID INT(11),                                                \n" +
                "	IN puserID INT (11),        \n" +
                "	IN pleadTime INT (11),    \n" +
                "	IN ppackageing TINYINT(1),    \n" +
                "	IN pcustomerID INT(11)                    \n" +
                "    )  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                \n" +
                "	    SET @SQLString = NULL;                                             \n" +
                "	    SET @HavingClause = NULL;                                                 \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                \n" +
                "		ELSE                                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                                 \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                \n" +
                "			SET pWhereClause = '1=1' ;                                                \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                \n" +
                "		ELSE	                                                \n" +
                "			SET rowNumWhere = '';                                                \n" +
                "		END IF;	                                                \n" +
                "		SELECT                                                \n" +
                "                      GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                                \n" +
                "						ra.requestQty,                                                \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                                \n" +
                "						ra.requestQty,''''                                                \n" +
                "					)                                                \n" +
                "					),                                      \n" +
                "		GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'((Max((IF(ra.requestQty = ''',                                                \n" +
                "						ra.requestQty,                                                \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                                      \n" +
                "					) SEPARATOR ' OR '                                                    \n" +
                "					)                      \n" +
                "				INTO @SQLString,@HavingClause                                           \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                              \n" +
                "			IF(@SQLString IS NOT NULL) THEN     \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                \n" +
                "					SELECT                                                 \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID, rl.uomID,                                       \n" +
                "					  rl.qpa,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',    \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing)),', ',                                               \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                                \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                       \n" +
                "					GROUP BY rl.id');     \n" +
                "  \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                                \n" +
                "			END IF;                                       \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                \n" +
                "			EXECUTE stmt;	                                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                \n" +
                "			EXECUTE query1;                                                \n" +
                "			DEALLOCATE PREPARE query1;                                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "			EXECUTE query2;                                                \n" +
                "			DEALLOCATE PREPARE query2;         \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));          \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                        \n" +
                "			EXECUTE query3;                                                        \n" +
                "			DEALLOCATE PREPARE query3;                                               \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                 \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                \n" +
                "			EXECUTE query4;                                                \n" +
                "			DEALLOCATE PREPARE query4;                                                \n" +
                "  \n" +
                "  			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                           \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                \n" +
                "			EXECUTE query5;                                                                \n" +
                "			DEALLOCATE PREPARE query5;                                                       \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));        \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                \n" +
                "			EXECUTE query6;                                                                \n" +
                "			DEALLOCATE PREPARE query6;             \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));        \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                \n" +
                "			EXECUTE query7;                                                                \n" +
                "			DEALLOCATE PREPARE query7;                                                   \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                              \n" +
                "	IN ppageIndex INT(11),                                              \n" +
                "	IN precordPerPage INT(11),                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                              \n" +
                "	IN rfqAssyID INT(11),                                              \n" +
                "	IN puserID INT (11),    \n" +
                "	IN ppackageing TINYINT(1),    \n" +
                "	IN pcustomerID INT(11)                                         \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                              \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                          \n" +
                "	    SET @SQLString = NULL;                                           \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "		ELSE                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                               \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                              \n" +
                "			SET pWhereClause = '1=1' ;                                              \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "		ELSE	                                              \n" +
                "			SET rowNumWhere = '';                                              \n" +
                "		END IF;	                                              \n" +
                "		SELECT                                      \n" +
                "                     GROUP_CONCAT(DISTINCT                                      \n" +
                "				CONCAT(                                      \n" +
                "					'Max((IF(ra.requestQty = ''',                                      \n" +
                "						ra.requestQty,                                      \n" +
                "					''', rq.finalPrice, null))) AS ''',                                      \n" +
                "						ra.requestQty,''''                                      \n" +
                "					)                                      \n" +
                "					) INTO @SQLString                                      \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                              \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                              \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                            \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                              \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                              \n" +
                "					SELECT                                               \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,                                                   \n" +
                "						rp.partTypeName, rm.name,                               \n" +
                "						rl.qpa,                                  \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                                    \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                                    \n" +
                "						co.ltbDate AS LTBDate,                            \n" +
                "						co.eolDate AS EOLDate,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',       \n" +
                "						',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing)),', ',                                               \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                              \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                              \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                      \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                                       \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                              \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                              \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                     \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                                     \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                                     \n" +
                "						(SELECT gencCategoryID FROM genericcategory                                     \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                                    \n" +
                "					GROUP BY rl.id');                                                \n" +
                "			END IF;                                \n" +
                "			PREPARE stmt FROM @SQLStatement;                                            \n" +
                "			EXECUTE stmt;	                                              \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                              \n" +
                "			EXECUTE query1;                                              \n" +
                "			DEALLOCATE PREPARE query1;                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                              \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "			EXECUTE query2;                                              \n" +
                "			DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));          \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                        \n" +
                "			EXECUTE query3;                                                        \n" +
                "			DEALLOCATE PREPARE query3;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                         \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                              \n" +
                "			EXECUTE query4;                                              \n" +
                "			DEALLOCATE PREPARE query4;                                              \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                           \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                \n" +
                "			EXECUTE query5;                                                                \n" +
                "			DEALLOCATE PREPARE query5;                                                       \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));        \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                \n" +
                "			EXECUTE query6;                                                                \n" +
                "			DEALLOCATE PREPARE query6;             \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));        \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                \n" +
                "			EXECUTE query7;                                                                \n" +
                "			DEALLOCATE PREPARE query7;                                               \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (276,'2.00','V1','consolidted logic changes related sp changes  - shirish'," + userid + ");"
            );
            break;
        case 276:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                      \n" +
                " IN tabquery LONGTEXT                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "   SET @sqlQ=tabquery;                      \n" +
                "   PREPARE stmt1 FROM @sqlQ;                       \n" +
                "   EXECUTE stmt1;                        \n" +
                "   DEALLOCATE PREPARE stmt1;                       \n" +
                "  \n" +
                "  SELECT '1';                      \n" +
                "  \n" +
                "    block1:BEGIN                      \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                        \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                      \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                        \n" +
                "	DECLARE  current_mfgcode INT ;                      \n" +
                "	DECLARE current_Ismfg TINYINT;                        \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                        \n" +
                "        DECLARE current_component INT ;                      \n" +
                "        DECLARE current_ComponentID INT;                      \n" +
                "	DECLARE maxvalueid INT;                      \n" +
                "        DECLARE aliasgroup INT;                      \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                        \n" +
                "    DECLARE component_cursor CURSOR FOR                        \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                      \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                        \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                        \n" +
                "     -- open the cursor                        \n" +
                "    OPEN component_cursor;                      \n" +
                "     -- start looping                        \n" +
                "     component_loop: LOOP                          \n" +
                "     -- read the name from next row into the variables                         \n" +
                "     FETCH component_cursor INTO current_ComponentID;                        \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                         \n" +
                "     -- close the cursor and exit the loop if it has.                        \n" +
                "       IF exit_loop THEN	                       \n" +
                "				 LEAVE component_loop;                        \n" +
                "			END IF;                        \n" +
                "        SELECT '1';                      \n" +
                "  \n" +
                "	SET current_mfgpn='';                      \n" +
                "	SET current_mfgcode=1;                      \n" +
                "	SET current_mfgPartNumber='';                      \n" +
                "	SET current_Ismfg=1;                      \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                      \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                      \n" +
                "	 -- insert new component                       \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                      \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                      \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                      \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,          \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,partType)                      \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                      \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                      \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                      \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,          \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,category                      \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                      \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                      \n" +
                "	 -- check component is manufacturer part or distributor part                      \n" +
                "                   IF(current_Ismfg=1) THEN                      \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                      \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                      \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                      \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                      \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                      \n" +
                "                    ELSE            \n" +
                "  \n" +
                "		        SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                      \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                      \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                      \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                      \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=current_component;                      \n" +
                "		        END IF;                      \n" +
                "		    END IF;                      \n" +
                "      END IF;                      \n" +
                "  \n" +
                "    END LOOP component_loop;                      \n" +
                "      CLOSE component_cursor;                      \n" +
                "    END  block1;                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (277,'2.00','V1','Alter sp Sproc_saveVerifiedComponentFromApi-champak'," + userid + ");"
            );
            break;
        case 277:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                            \n" +
                "    IN pWhereClause VARCHAR(16383),                            \n" +
                "    IN puserID VARCHAR(50),                      \n" +
                "    IN pnickName VARCHAR(20),                      \n" +
                "    IN pprefix VARCHAR(20),                      \n" +
                "    IN puid VARCHAR(20),                  \n" +
                "    IN pComponentID INT,              \n" +
                "    IN pCustomerID INT,              \n" +
                "    IN pCPN BOOL,              \n" +
                "    IN pMFGAvailabel BOOL,              \n" +
                "    IN pRefCpnMfgID INT,          \n" +
                "    IN pAssyID INT,          \n" +
                "    IN pSalesOrderDetailID INT,		          \n" +
                "    IN pReceiveMaterialType VARCHAR(255) 	          \n" +
                "    )  \n" +
                "BEGIN                            \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                            \n" +
                "	DECLARE v_delimiter VARCHAR(10);                            \n" +
                "	DECLARE v_length INT;                             \n" +
                "	DECLARE v_fieldType INT;                                 \n" +
                "	DECLARE v_entityId INT;                            \n" +
                "	DECLARE v_dataElementId INT;                            \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                            \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                            \n" +
                "	DECLARE strLabel VARCHAR(2000);                            \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                            \n" +
                "	DECLARE StaticField VARCHAR(100);      \n" +
                "	DECLARE DynamicField VARCHAR(100);		      \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                            \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                            \n" +
                "	DECLARE plen,slen INT;                            \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                            \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                        \n" +
                "	DECLARE barcode_type_id INT;                  \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);              \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                             \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                            \n" +
                "	(                            \n" +
                "	     errorText NVARCHAR(2000),                            \n" +
                "	     IsSuccess VARCHAR (2),                  \n" +
                "	     MFGPart VARCHAR(100)                                 \n" +
                "	);                 \n" +
                "	-- get data from barcode templates with seprator                            \n" +
                "	block1: BEGIN         \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                             \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                      \n" +
                "		-- tempregexp;    	    \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                  \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                          \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                            \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                       \n" +
                "		ELSE    /* barcode 1D */                  \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                           \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                             \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                       \n" +
                "		END IF;      \n" +
                "	END block1;                            \n" +
                "  \n" +
                "	block2: BEGIN      	    \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                            \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                            \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                         \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                             \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                     \n" +
                "		-- declare exit loop if data not found                            \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                            \n" +
                "	        -- if any record match found than  check for delimiter and its value                       \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                            \n" +
                "			-- create temporary table for deliemeter and component dataelement                            \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                            \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                            \n" +
                "				pentityId INT,                            \n" +
                "				pdataElementId INT,                            \n" +
                "				pdelimiter_value VARCHAR(200)                            \n" +
                "			);                       \n" +
                "  \n" +
                "			-- create temporary table for separator string values                            \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                            \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                  \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                            \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                             \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                   \n" +
                "  \n" +
                "			-- open cursor                            \n" +
                "			OPEN barcodeMatch_cursor;                            \n" +
                "  \n" +
                "			-- set str label as whereclause                            \n" +
                "			SET strLabel=pWhereClause;                     \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                            \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                            \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                            \n" +
                " 			 END IF;                           \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                             \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                            \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                            \n" +
                "			 END IF;	                  \n" +
                "  \n" +
                "			-- insert all values after seprator split                             \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                            \n" +
                "			PREPARE stmt1 FROM @SQL;	                            \n" +
                "			EXECUTE stmt1;                            \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                            \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';       \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                            \n" +
                "			barcodeMatch_loop:LOOP         \n" +
                "				-- get all five selected values                            \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                    \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                            \n" +
                "				IF exit_loop THEN                       \n" +
                "					CLOSE barcodeMatch_cursor;                            \n" +
                "					LEAVE barcodeMatch_loop;                            \n" +
                "				END IF;                       \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                            \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                            \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                            \n" +
                "				EXECUTE stmtdelimiter;                  \n" +
                "  \n" +
                "				-- get delimiter values from string                            \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                    \n" +
                "				-- check for field type is static or dynamic                            \n" +
                "				-- if static field than check for mfg code and mfg part number                            \n" +
                "				IF v_fieldType = 0  THEN                        \n" +
                "					-- component_sid_stock                             \n" +
                "					-- get static field name from barcode table delimiter data element id                            \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                              \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                            \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                  \n" +
                "						SET MFG_Part_No = delimiter_value_data;                  \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN       \n" +
                "							SELECT COUNT(*), id, mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM     \n" +
                "							(    \n" +
                "								SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL    \n" +
                "								UNION    \n" +
                "								SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID     \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL    \n" +
                "							) a;    \n" +
                "						ELSE                  \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;                  \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                            \n" +
                "						END IF;      \n" +
                "					END IF;                            \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                            \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN                    \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                            \n" +
                "					END IF;              \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		      \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                            \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "					END IF;            \n" +
                "					IF @componentCount > 1 THEN                  \n" +
                "						CLOSE barcodeMatch_cursor;                            \n" +
                "						LEAVE barcodeMatch_loop;                  \n" +
                "					END IF;                     \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                            \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                             \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                            \n" +
                "  \n" +
                "				ELSE        \n" +
                "					-- component_sid_stock_dataelement_Values                              \n" +
                "					-- dynamic fields           \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);       \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN            \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                            \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "					END IF;            \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN            \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                            \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');            \n" +
                "					END IF;      \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                             \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                         \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                             \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                     \n" +
                "				END IF;                            \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                            \n" +
                "			-- check if mfg and component both found than                             \n" +
                "			IF (@componentCount > 1) THEN                  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                            \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                            \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                            \n" +
                "                                   IF @Mfgmatched = 0  THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                            \n" +
                "				   END IF;									                            \n" +
                "			 ELSE 		                  \n" +
                "				IF @mfgCount = 0 THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                            \n" +
                "		                END IF;	                            \n" +
                "				IF @componentCount = 0 THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                            \n" +
                "				END IF;	                            \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                              \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                            \n" +
                "			        END IF;						                            \n" +
                "			END IF;				                            \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN              \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;              \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;              \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                            \n" +
                "				END IF;              \n" +
                "			END IF;              \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                            \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	              \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					              \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;              \n" +
                "				END IF;           \n" +
                "  \n" +
                "				-- must call statements in sequence          				                  \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                            \n" +
                "				PREPARE stmt1 FROM @SQL1;                            \n" +
                "				EXECUTE stmt1;                          \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');              \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN              \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');              \n" +
                "				END IF;              \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);              \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN              \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);              \n" +
                "				END IF;              \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN              \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);              \n" +
                "				END IF;              \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN              \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);              \n" +
                "				END IF;          \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN              \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);              \n" +
                "				END IF;          \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN              \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');           \n" +
                "				END IF;          \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	              \n" +
                "				SET @sql2 = UpdateValue;	                             \n" +
                "				PREPARE stmt2 FROM @SQL2;                            \n" +
                "				EXECUTE stmt2;	                            \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                            \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                  \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                             \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                            \n" +
                "				END IF;                              \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                            \n" +
                "			ELSE                           \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                            \n" +
                "			END IF;                            \n" +
                "  \n" +
                "		ELSE                        \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                             \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                            \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                              \n" +
                "		END IF;                            \n" +
                "  \n" +
                "	END block2;                                       \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-02-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAssyNickNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyNickNameByID`(      \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8  \n" +
                "BEGIN      \n" +
                "	DECLARE result NVARCHAR(255);      \n" +
                "  \n" +
                "	SELECT nickName INTO @result FROM component WHERE id = ppartID    \n" +
                "	AND IFNULL(category,0) = 3;        \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "    END;  \n" +
                /* **************************** New Script -> 23-02-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS   \n" +
                "SELECT `a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment` AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`partID` AS `PartID`,`a`.`PIDCode` AS `Assy ID`,`a`.`mfgPN` AS `Assy Name`,`a`.`rev` AS `Assy Revision`,`a`.`nickName` AS `NickName`,`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName` AS `Company Name`,`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode` AS `GencCategory Code`,(IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,(CASE WHEN ((IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) > 0) THEN 'Pending' ELSE 'Completed' END) AS `Status`,`a`.`modifyDate` AS `modifyDate`,`a`.`salesOrderDetailId` AS `SalesOrderDetailId` FROM (SELECT `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,`sm`.`poDate` AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID` AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`,`sm`.`updatedAt` AS `modifyDate`,`fun_getAssyidByID`(`a`.`partID`) AS `PIDCode`,`fun_getAssyNameByID`(`a`.`partID`) AS `mfgPN`,`fun_getAssyrevNameByID`(`a`.`partID`) AS `rev`,`fun_getAssyNickNameByID`(`a`.`partID`) AS `nickName`,CONCAT('(',`cu`.`customerCode`,') ',`cu`.`companyName`) AS `companyName`,CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`a`.`qty` AS `qty`,`a`.`id` AS `salesOrderDetailId`,`a`.`partID` AS `partID`,(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0) FROM `shippedassembly` WHERE ((`shippedassembly`.`partID` = `a`.`partID`) AND (`shippedassembly`.`isDeleted` = 0) AND `shippedassembly`.`shippingId` IN (SELECT `salesshippingmst`.`shippingID` FROM `salesshippingmst` WHERE (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty` FROM ((((`salesorderdet` `a` JOIN `salesordermst` `sm` ON(((`sm`.`id` = `a`.`refSalesOrderID`) AND (IFNULL(`sm`.`isDeleted`,0) = 0)))) LEFT JOIN `customers` `cu` ON(((`sm`.`customerID` = `cu`.`id`) AND (IFNULL(`cu`.`isDeleted`,0) = 0)))) LEFT JOIN `customer_contactperson` `cc` ON(((`sm`.`contactPersonID` = `cc`.`personId`) AND (IFNULL(`cc`.`isDeleted`,0) = 0)))) LEFT JOIN `genericcategory` `gc` ON(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) AND (IFNULL(`gc`.`isDeleted`,0) = 0)))) WHERE (IFNULL(`a`.`isDeleted`,0) = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 23-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (278,'2.00','V1','Sproc_MatchBarCodeAndSaveDelimiters, vu_salesorder_shipped_report  - Fenil '," + userid + ");"
            );
            break;
        case 278:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(	          \n" +
                "	IN ppartID INT(11)    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "		(    \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID    \n" +
                "			FROM     \n" +
                "			(    \n" +
                "					SELECT rl.qpa, ra.mountingtypeID, mt.name AS `mountingType`, rl.id, rl.partID    \n" +
                "							FROM rfq_lineitems rl    \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0    \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id and ram.isDeleted = 0 AND ram.mountingtypeID = ra.mountingtypeID AND ram.id != ra.id    \n" +
                "					LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0    \n" +
                "					WHERE rl.partID = ppartID and rl.isDeleted = 0 AND rl.id NOT IN     \n" +
                "						(    \n" +
                "							SELECT rl.id#, ra.id, ra.mountingtypeID,ram.mountingtypeID,ram.id  \n" +
                "                            FROM rfq_lineitems_alternatepart ra    \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0    \n" +
                "							left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0   \n" +
                "							LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0    \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND ram.mountingtypeID != ra.mountingtypeID    \n" +
                "							GROUP BY rl.id    \n" +
                "						)    \n" +
                "					GROUP BY rl.id    \n" +
                "			) a    \n" +
                "			GROUP BY mountingtypeID    \n" +
                "		) UNION     \n" +
                "		(    \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID    \n" +
                "			FROM    \n" +
                "			(    \n" +
                "				SELECT rl.qpa, ra.mountingtypeID, 'Mismatched' AS `mountingType`, rl.id, rl.partID    \n" +
                "				FROM rfq_lineitems_alternatepart ra    \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0    \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0    \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0    \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND ram.mountingtypeID != ra.mountingtypeID    \n" +
                "				GROUP BY rl.id    \n" +
                "			)a    \n" +
                "		);    \n" +
                "  \n" +
                "  \n" +
                "		SELECT sum(rl.qpa) as `QPA`, ra.RoHSStatusID, ro.name AS `RoHSStatus`, count(rl.id) as `ItemCount`, rl.partID    \n" +
                "		FROM rfq_lineitems rl    \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0    \n" +
                "		LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0    \n" +
                "		WHERE rl.partID = ppartID and rl.isDeleted = 0   \n" +
                "		GROUP BY ra.RoHSStatusID;    \n" +
                "  \n" +
                "        select sc.className, cs.fullName as standardName,csd.* from component_standard_details csd  \n" +
                "		left join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isDeleted = 0  \n" +
                "		left join standard_class sc on sc.classID = csd.ClassID and sc.isDeleted = 0  \n" +
                "		where csd.isDeleted = 0 and csd.componentID = ppartID;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (279,'2.00','V1','assembly at glance sp changes  - shirish'," + userid + ");"
            );
            break;
        case 279:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DELETE t1 FROM rfq_lineitems_errorcode t1  \n" +
                "        INNER JOIN  \n" +
                "    rfq_lineitems_errorcode t2   \n" +
                "WHERE  \n" +
                "    t1.id < t2.id AND t1.logicID = t2.logicID;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (280,'2.00','V1',' BOM Error code duplicate entry remove - Jignesh '," + userid + ");"
            );
            break;
        case 280:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2019  *********************************** */
                "ALTER TABLE component MODIFY sizeDimension VARCHAR (150);  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (281,'2.00','V1','Modify size dimension column-Champak '," + userid + ");"
            );
            break;
        case 281:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2019  *********************************** */
                "drop procedure if exists `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "IN pGoodPart VARCHAR(100),  \n" +
                "IN pSearch VARCHAR(100),  \n" +
                "IN pId INT(11),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pRoHSStatusID VARCHAR(100),  \n" +
                "IN pMfgCodeId INT(11),  \n" +
                "IN pMountingType VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF(pMountingType IS NOT NULL) THEN  \n" +
                " SELECT * FROM  \n" +
                " (  \n" +
                "	 SELECT `com`.`id`,  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		`com`.`isGoodPart`,  \n" +
                "		`com`.`RoHSStatusID`,  \n" +
                "		`com`.`rohsgroupID`,  \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "        `com`.`tolerance`,  \n" +
                "        `com`.`minOperatingTemp`,  \n" +
                "        `com`.`maxOperatingTemp`,  \n" +
                "        `com`.`value`,  \n" +
                "        `com`.`partPackage`,  \n" +
                "        `com`.`powerRating`,  \n" +
                "        `com`.`functionalCategoryID`  \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND  \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType  \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))  \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "             OR exists (select 1 from component_otherpn opn where opn.refcomponentid = `a` .`id` and opn.name like CONCAT('%', pSearch , '%'))))  \n" +
                ");  \n" +
                "  \n" +
                "  ELSE  \n" +
                "   SELECT * FROM  \n" +
                " (  \n" +
                "	 SELECT `com`.`id`,  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		`com`.`isGoodPart`,  \n" +
                "		`com`.`RoHSStatusID`,  \n" +
                "		`com`.`rohsgroupID`,  \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "        `com`.`tolerance`,  \n" +
                "        `com`.`minOperatingTemp`,  \n" +
                "        `com`.`maxOperatingTemp`,  \n" +
                "        `com`.`value`,  \n" +
                "        `com`.`partPackage`,  \n" +
                "        `com`.`powerRating`,  \n" +
                "        `com`.`functionalCategoryID`  \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND  \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))  \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "             OR exists (select 1 from component_otherpn opn where opn.refcomponentid = `a` .`id` and opn.name like CONCAT('%', pSearch , '%'))))  \n" +
                ");  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (282,'2.00','V1','Sproc_GetComponentMFGAliasSearch - Ashish'," + userid + ");"
            );
            break;
        case 282:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 25-02-2019  *********************************** */
                "Drop PROCEDURE if Exists `Sproc_workorder_manual_entry`;  \n" +
                "CREATE PROCEDURE `Sproc_workorder_manual_entry`(    \n" +
                "IN pwoID int(11),  \n" +
                "IN popID int(11),  \n" +
                "IN PwoOPID int(11),  \n" +
                "IN pemployeeID int(11),  \n" +
                "IN pequipmentID int(11),  \n" +
                "IN pcheckinTime datetime,  \n" +
                "IN pcheckinSetupTime int(11),  \n" +
                "IN pcheckoutTime datetime,  \n" +
                "IN pcheckoutSetupTime int(11),  \n" +
                "IN ptotalTime int,   \n" +
                "IN productionTime int,  \n" +
                "IN pcreatedBy int,  \n" +
                "IN premark text,  \n" +
                "IN pwoentrytype varchar(1),  \n" +
                "IN pworkstationID int(11),  \n" +
                "IN ptotalQty int(11),  \n" +
                "IN ppassQty int(11),  \n" +
                "IN pobservedQty int(11),  \n" +
                "IN preworkQty int(11),  \n" +
                "IN pscrapQty int(11),   \n" +
                "IN pissueQty int(11),  \n" +
                "IN preprocessQty int(11),  \n" +
                "IN pqtyControl bool,  \n" +
                "IN ptransID int(11),  \n" +
                "IN ptransProdctionID int(11)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "    DECLARE tempreturnPending INT(11);      \n" +
                "	DECLARE tempOPProdQty INT(11);      \n" +
                "    DECLARE tempIssueQty INT(11);      \n" +
                "    DECLARE tempBuildQty INT(11);      \n" +
                "    DECLARE tempTillProcessScrapQty INT(11);     \n" +
                "    DECLARE tWoTransID INT(11);  \n" +
                "    DECLARE tempWoTransID INT(11);  \n" +
                "  \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;      \n" +
                "	START TRANSACTION;   \n" +
                "     DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;   \n" +
                "	 CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText NVARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "    IF(pqtyControl = true)THEN  \n" +
                "    -- call sp for check stock validation --  \n" +
                "     SET SQL_SAFE_UPDATES=0;  \n" +
                "	 CALL Sproc_GetopReadyStock(pwoID,popID);   \n" +
                "     SET SQL_SAFE_UPDATES=1;  \n" +
                "  \n" +
                "	 select returnPending,OPProdQty,IssueQty,BuildQty,TillProcessScrapQty   \n" +
                "     into tempreturnPending,tempOPProdQty,tempIssueQty,tempBuildQty,tempTillProcessScrapQty  FROM temp_Sproc_GetopReadyStock;  \n" +
                "  \n" +
                "     if(ptotalQty > tempreturnPending || (tempOPProdQty + ptotalQty) > tempBuildQty - tempTillProcessScrapQty)THEN  \n" +
                "         -- create temporary table for error  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (\"true\");  \n" +
                "     ELSE  \n" +
                "      -- UPDATE PRODUCTION DETAIL --  \n" +
                "	  /*If(ptransID is not null)Then  \n" +
                "        update workorder_trans set woID=pwoID,opID=popID,woOPID=PwoOPID,issueQty=pissueQty,checkinEmployeeID=pemployeeID,  \n" +
                "		checkinSetupTime=pcheckinSetupTime,workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,  \n" +
                "        checkoutTime=pcheckoutTime,checkoutEmployeeID=pemployeeID,totalTime=ptotalTime,productionTime=productionTime,  \n" +
                "        checkoutSetupTime=pcheckoutSetupTime,remark=premark,woentrytype=pwoentrytype where woTransID=ptransID;  \n" +
                "      else */  \n" +
                "	  insert into workorder_trans(woID,opID,woOPID,issueQty,checkinEmployeeID,checkinSetupTime,workstationID,equipmentID,  \n" +
                "      checkinTime,checkoutTime,checkoutEmployeeID,totalTime,productionTime,checkoutSetupTime,remark,woentrytype,isDeleted,createdBy)  \n" +
                "      values(pwoID,popID,PwoOPID,pissueQty,pemployeeID,pcheckinSetupTime,pworkstationID,pequipmentID,  \n" +
                "      pcheckinTime,pcheckoutTime,pemployeeID,ptotalTime,productionTime,pcheckoutSetupTime,premark,pwoentrytype,0,1);  \n" +
                "  \n" +
                "      SET tempWoTransID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "       DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;   \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID  \n" +
                "	(  \n" +
                "	     wotransID int(11)  \n" +
                "	);  \n" +
                "      INSERT INTO temp_workordertransID (wotransID) VALUES(tempWoTransID);  \n" +
                "  \n" +
                "  \n" +
                "    /*  if(ptransID is not null && ptransProdctionID is not null)then  \n" +
                "      update workorder_trans_production set employeeID=pemployeeID,totalQty=ptotalQty,passQty=ppassQty,reprocessQty=preprocessQty,  \n" +
                "      observedQty=pobservedQty,reworkQty=preworkQty,scrapQty=pscrapQty where woTransID=ptransID and woTransprodID=ptransProdctionID;  \n" +
                "  \n" +
                "      else  \n" +
                "      */  \n" +
                "        insert into workorder_trans_production(woTransID,employeeID,totalQty,passQty,reprocessQty,observedQty,reworkQty,scrapQty,createdBy)  \n" +
                "        values(tempWoTransID,pemployeeID,ptotalQty,ppassQty,preprocessQty,pobservedQty,preworkQty,pscrapQty,1);  \n" +
                "  \n" +
                "     /*END IF;  \n" +
                "    END If; */  \n" +
                "  \n" +
                "   END IF;  \n" +
                "  \n" +
                "  ELSE  \n" +
                "  \n" +
                "  /* If(ptransID is not null)Then  \n" +
                "        update workorder_trans set woID=pwoID,opID=popID,woOPID=PwoOPID,issueQty=pissueQty,checkinEmployeeID=pemployeeID,  \n" +
                "		checkinSetupTime=pcheckinSetupTime,workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,  \n" +
                "        checkoutTime=pcheckoutTime,checkoutEmployeeID=pemployeeID,totalTime=ptotalTime,productionTime=productionTime,  \n" +
                "        checkoutSetupTime=pcheckoutSetupTime,remark=premark,woentrytype=pwoentrytype where woTransID=ptransID;  \n" +
                "  \n" +
                "      ElSE */  \n" +
                "  \n" +
                "	  insert into workorder_trans(woID,opID,woOPID,issueQty,checkinEmployeeID,checkinSetupTime,workstationID,equipmentID,  \n" +
                "      checkinTime,checkoutTime,checkoutEmployeeID,totalTime,productionTime,checkoutSetupTime,remark,woentrytype,isDeleted,createdBy)  \n" +
                "      values(pwoID,popID,PwoOPID,pissueQty,pemployeeID,pcheckinSetupTime,pworkstationID,pequipmentID,  \n" +
                "      pcheckinTime,pcheckoutTime,pemployeeID,ptotalTime,productionTime,pcheckoutSetupTime,premark,pwoentrytype,0,1);  \n" +
                "  \n" +
                "      SET tWoTransID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;   \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID  \n" +
                "	(  \n" +
                "	     wotransID int(11)  \n" +
                "	);  \n" +
                "      INSERT INTO temp_workordertransID (wotransID) VALUES (tWoTransID);  \n" +
                "  \n" +
                "     /* if(ptransID is not null)then  \n" +
                "       update workorder_trans_empinout set woID=pwoID,opID=popID,woOPID=PwoOPID,employeeID=pemployeeID,  \n" +
                "       workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,checkinSetupTime=pcheckinSetupTime,  \n" +
                "       checkoutTime=pcheckoutTime,totalTime=ptotalTime,productionTime=productionTime,checkoutSetupTime=pcheckoutSetupTime  \n" +
                "       where woTransID=ptransID;  \n" +
                "  \n" +
                "       else */  \n" +
                "      insert into workorder_trans_empinout(woTransID,woID,opID,woOPID,employeeID,workstationID,equipmentID,  \n" +
                "      checkinTime,checkinSetupTime,checkoutTime,totalTime,productionTime,checkoutSetupTime,createdBy)  \n" +
                "      values(tWoTransID,pwoID,popID,PwoOPID,pemployeeID,pworkstationID,pequipmentID,  \n" +
                "      pcheckinTime,pcheckinSetupTime,pcheckoutTime,ptotalTime,productionTime,pcheckoutSetupTime,1);  \n" +
                "  \n" +
                "    /* END IF;  \n" +
                "	END IF; */  \n" +
                "  \n" +
                " END IF;  \n" +
                "	 SELECT errorText FROM temp_operation_error;  \n" +
                "     select wotransID from temp_workordertransID;  \n" +
                "   COMMIT;  \n" +
                "	END;  \n" +
                //  /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "insert into operation_master_templates (masterTemplateId, operationId ,createdAt ,createdBy ,isActive ,isDeleted)  \n" +
                "select * from   \n" +
                "(select a.id as masterTemplateId, b.opID as operationId ,utc_timestamp() createdAt ,1 createdBy ,1 isActive ,0 isDeleted  \n" +
                "from  master_templates a cross join operations b where a.masterTemplate='Process Master Template' and b.isDeleted = 0 and b.opStatus =1) x   \n" +
                "where not exists (  \n" +
                "select 1 from operation_master_templates o where o.masterTemplateId = x.masterTemplateId and o.operationId = x.operationId);  \n" +
                //  /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "Drop PROCEDURE if Exists `Sproc_RetriveCertificateStandards`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveCertificateStandards`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pRoleId int(11)  \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "			  SELECT cs.*, s.roleID, s.standardID, s.id,      \n" +
                "				gcst.`gencCategoryID` AS `gencCategoryIDOfStandardType`, gcst.`gencCategoryName` AS `gencCategoryNameOfStandardType`,   \n" +
                "				(CASE WHEN (`cs`.`isCertified` = 0) THEN 'Compliant'       \n" +
                "					WHEN (`cs`.`isCertified` = 1) THEN 'Certified' ELSE '' END) AS `isCertifiedConvertedValue` ,      \n" +
                "				(CASE WHEN (`cs`.`isRequired` = 0) THEN 'Optional'       \n" +
                "					WHEN (`cs`.`isRequired` = 1) THEN 'Required' ELSE '' END) AS `isRequiredConvertedValue` ,      \n" +
                "				(CASE WHEN (`cs`.`isActive` = 0) THEN 'Disable'       \n" +
                "					WHEN (`cs`.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `isActiveConvertedValue`      \n" +
                "			  FROM `certificate_standards` AS cs       \n" +
                "				LEFT OUTER JOIN `genericcategory` AS gcst       \n" +
                "				ON cs.`standardTypeID` = gcst.`gencCategoryID`       \n" +
                "					AND gcst.`deletedAt` IS NULL   \n" +
                "				left outer join (select * from standard_role where roleid = pRoleId) s on s.standardid = cs.certificateStandardID  \n" +
                "                 AND s.`deletedAt` is NUll AND s.`isDeleted`=0  \n" +
                "			  WHERE cs.`deletedAt` IS NULL AND cs.`isDeleted`=0      \n" +
                "		;      \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"shortName ASC\") ;      \n" +
                "		ELSE      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;     \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (283,'2.00','V1','change in manual entry script - Mona '," + userid + ");"
            );
            break;
        case 283:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2019  *********************************** */
                "ALTER TABLE workorder_trans DROP COLUMN checkinsetuptime;  \n" +
                "ALTER TABLE workorder_trans_empinout DROP COLUMN checkinsetuptime;  \n" +
                "ALTER TABLE workorder_trans ADD COLUMN isSetup TINYINT(1) DEFAULT FALSE;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_employeeproductionteamwise` ;  \n" +
                "CREATE VIEW `vu_employeeproductionteamwise` AS   \n" +
                "SELECT  \n" +
                "  `b`.`firstName`      AS `First Name`,  \n" +
                "  `b`.`lastName`       AS `Last Name`,  \n" +
                "  CONCAT(`b`.`firstName`,' ',`b`.`lastName`) AS `Full Name`,  \n" +
                "  `b`.`burdenRate`     AS `Burden Rate`,  \n" +
                "  `b`.`initialName`    AS `Initial Name`,  \n" +
                "  `a`.`woID`           AS `wo ID Identity`,  \n" +
                "  `wo`.`woNumber`      AS `WO Number`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`PIDCode`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE ((`wo`.`partID` = `am`.`id`)  \n" +
                "          AND (`am`.`category` = 3))) AS `Assy ID`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`mfgPN`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE ((`wo`.`partID` = `am`.`id`)  \n" +
                "          AND (`am`.`category` = 3))) AS `Assy Number`,  \n" +
                "  (SELECT  \n" +
                "     `arm`.`rev`  \n" +
                "   FROM `component` `arm`  \n" +
                "   WHERE ((`wo`.`partID` = `arm`.`id`)  \n" +
                "          AND (`arm`.`category` = 3))) AS `Revision`,  \n" +
                "  `a`.`opID`           AS `OP ID Identity`,  \n" +
                "  (SELECT  \n" +
                "     `wp`.`opName`  \n" +
                "   FROM `workorder_operation` `wp`  \n" +
                "   WHERE ((`wp`.`isTeamOperation` = 1)  \n" +
                "          AND (`wp`.`woOPID` = `a`.`woOPID`))) AS `OP Name`,  \n" +
                "  `a`.`woOPID`         AS `woOP ID Identity`,  \n" +
                "  `a`.`woTransID`      AS `woTrans ID Identity`,  \n" +
                "  `a`.`workstationID`  AS `WorkStation ID Identity`,  \n" +
                "  `a`.`equipmentID`    AS `Equipment ID  Identity`,  \n" +
                "  (SELECT  \n" +
                "     CONCAT(`eqp`.`assetName`,' (',`eqp`.`eqpMake`,' | ',`eqp`.`eqpModel`,' | ',`eqp`.`eqpYear`,')')  \n" +
                "   FROM `equipment` `eqp`  \n" +
                "   WHERE (`a`.`equipmentID` = `eqp`.`eqpID`)) AS `Equipment Name`,  \n" +
                "  `a`.`checkoutTime`   AS `Checkout Time`,  \n" +
                "  SEC_TO_TIME(`a`.`checkoutSetupTime`) AS `Checkout SetupTime`,  \n" +
                "  `a`.`totalTime`      AS `Total Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`totalTime`) AS `Total Time`,  \n" +
                "  `a`.`productionTime` AS `Production Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`productionTime`) AS `Production Time`,  \n" +
                "  `c`.`totalQty`       AS `Original Total Qty`,  \n" +
                "  ROUND(((`c`.`totalQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Total Qty`,  \n" +
                "  IFNULL(ROUND((`a`.`productionTime` / ROUND(((`c`.`totalQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2)),2),0) AS `Average Time In Sec`,  \n" +
                "  SEC_TO_TIME(IFNULL(ROUND((`a`.`productionTime` / ROUND(((`c`.`totalQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2)),2),0)) AS `Average Time`,  \n" +
                "  `c`.`PassQty`        AS `Original Passed Qty`,  \n" +
                "  ROUND(((`c`.`PassQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Passed Qty`,  \n" +
                "  `c`.`reprocessQty`   AS `Original Reprocessed Qty`,  \n" +
                "  ROUND(((`c`.`reprocessQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Reprocessed Qty`,  \n" +
                "  `c`.`observedQty`    AS `Original Defect Observed Qty`,  \n" +
                "  ROUND(((`c`.`observedQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Defect Observed Qty`,  \n" +
                "  `c`.`reworkQty`      AS `Original Rework  Required Qty`,  \n" +
                "  ROUND(((`c`.`reworkQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Rework  Required Qty`,  \n" +
                "  `c`.`scrapQty`       AS `Original Scraped Qty`,  \n" +
                "  ROUND(((`c`.`scrapQty` * `a`.`productionTime`) / (SELECT SUM(`workorder_trans_empinout`.`productionTime`) FROM `workorder_trans_empinout` WHERE (`workorder_trans_empinout`.`woTransID` = `a`.`woTransID`))),2) AS `Scraped Qty`  \n" +
                "FROM ((((`workorder_trans_empinout` `a`  \n" +
                "      JOIN `workorder` `wo`  \n" +
                "        ON ((`a`.`woID` = `wo`.`woID`)))  \n" +
                "     JOIN `workorder_operation` `woo`  \n" +
                "       ON (((`woo`.`woOPID` = `a`.`woOPID`)  \n" +
                "            AND (`woo`.`isTeamOperation` = 1))))  \n" +
                "    JOIN (SELECT  \n" +
                "            `workorder_trans_production`.`woTransID` AS `woTransId`,  \n" +
                "            SUM(`workorder_trans_production`.`totalQty`) AS `totalQty`,  \n" +
                "            SUM(`workorder_trans_production`.`passQty`) AS `PassQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "            SUM(`workorder_trans_production`.`observedQty`) AS `observedQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reworkQty`) AS `reworkQty`,  \n" +
                "            SUM(`workorder_trans_production`.`scrapQty`) AS `scrapQty`  \n" +
                "          FROM `workorder_trans_production`  \n" +
                "          GROUP BY `workorder_trans_production`.`woTransID`) `c`  \n" +
                "      ON ((`a`.`woTransID` = `c`.`woTransId`)))  \n" +
                "   JOIN `employees` `b`  \n" +
                "     ON ((`a`.`employeeID` = `b`.`id`)));  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_employeeproduction` ;  \n" +
                "CREATE VIEW `vu_employeeproduction` AS   \n" +
                "SELECT  \n" +
                "  `b`.`firstName`      AS `First Name`,  \n" +
                "  `b`.`lastName`       AS `Last Name`,  \n" +
                "  CONCAT(`b`.`firstName`,' ',`b`.`lastName`) AS `Full Name`,  \n" +
                "  `b`.`burdenRate`     AS `Burden Rate`,  \n" +
                "  `b`.`initialName`    AS `Initial Name`,  \n" +
                "  `a`.`woID`           AS `wo ID Identity`,  \n" +
                "  `wo`.`woNumber`      AS `WO Number`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`PIDCode`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE ((`wo`.`partID` = `am`.`id`)  \n" +
                "          AND (`am`.`category` = 3))) AS `Assy ID`,  \n" +
                "  (SELECT  \n" +
                "     `am`.`mfgPN`  \n" +
                "   FROM `component` `am`  \n" +
                "   WHERE ((`wo`.`partID` = `am`.`id`)  \n" +
                "          AND (`am`.`category` = 3))) AS `Assy Number`,  \n" +
                "  (SELECT  \n" +
                "     `arm`.`rev`  \n" +
                "   FROM `component` `arm`  \n" +
                "   WHERE ((`wo`.`partID` = `arm`.`id`)  \n" +
                "          AND (`arm`.`category` = 3))) AS `Revision`,  \n" +
                "  `a`.`opID`           AS `OP ID Identity`,  \n" +
                "  (SELECT  \n" +
                "     `wp`.`opName`  \n" +
                "   FROM `workorder_operation` `wp`  \n" +
                "   WHERE (`wp`.`woOPID` = `a`.`woOPID`)) AS `OP Name`,  \n" +
                "  `a`.`woOPID`         AS `woOP ID Identity`,  \n" +
                "  `a`.`woTransID`      AS `woTrans ID Identity`,  \n" +
                "  `a`.`workstationID`  AS `WorkStation ID Identity`,  \n" +
                "  `a`.`equipmentID`    AS `Equipment ID  Identity`,  \n" +
                "  (SELECT  \n" +
                "     CONCAT(`eqp`.`assetName`,' (',`eqp`.`eqpMake`,' | ',`eqp`.`eqpModel`,' | ',`eqp`.`eqpYear`,')')  \n" +
                "   FROM `equipment` `eqp`  \n" +
                "   WHERE (`a`.`equipmentID` = `eqp`.`eqpID`)) AS `Equipment Name`,  \n" +
                "  `a`.`checkoutTime`   AS `Checkout Time`,  \n" +
                "  SEC_TO_TIME(`a`.`checkoutSetupTime`) AS `Checkout SetupTime`,  \n" +
                "  `a`.`totalTime`      AS `Total Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`totalTime`) AS `Total Time`,  \n" +
                "  `a`.`productionTime` AS `Production Time In Sec`,  \n" +
                "  SEC_TO_TIME(`a`.`productionTime`) AS `Production Time`,  \n" +
                "  `c`.`totalQty`       AS `Total Qty`,  \n" +
                "  IFNULL(ROUND((`a`.`productionTime` / `c`.`totalQty`),2),0) AS `Average Time In Sec`,  \n" +
                "  SEC_TO_TIME(IFNULL(ROUND((`a`.`productionTime` / `c`.`totalQty`),2),0)) AS `Average Time`,  \n" +
                "  `c`.`PassQty`        AS `Passed Qty`,  \n" +
                "  `c`.`reprocessQty`   AS `Reprocessed Qty`,  \n" +
                "  `c`.`observedQty`    AS `Defect Observed Qty`,  \n" +
                "  `c`.`reworkQty`      AS `Rework  Required Qty`,  \n" +
                "  `c`.`scrapQty`       AS `Scraped Qty`  \n" +
                "FROM (((`workorder_trans_empinout` `a`  \n" +
                "     JOIN `workorder` `wo`  \n" +
                "       ON ((`a`.`woID` = `wo`.`woID`)))  \n" +
                "    JOIN (SELECT  \n" +
                "            `workorder_trans_production`.`woTransID` AS `woTransId`,  \n" +
                "            SUM(`workorder_trans_production`.`totalQty`) AS `totalQty`,  \n" +
                "            SUM(`workorder_trans_production`.`passQty`) AS `PassQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reprocessQty`) AS `reprocessQty`,  \n" +
                "            SUM(`workorder_trans_production`.`observedQty`) AS `observedQty`,  \n" +
                "            SUM(`workorder_trans_production`.`reworkQty`) AS `reworkQty`,  \n" +
                "            SUM(`workorder_trans_production`.`scrapQty`) AS `scrapQty`  \n" +
                "          FROM `workorder_trans_production`  \n" +
                "          GROUP BY `workorder_trans_production`.`woTransID`) `c`  \n" +
                "      ON ((`a`.`woTransID` = `c`.`woTransId`)))  \n" +
                "   JOIN `employees` `b`  \n" +
                "     ON ((`a`.`employeeID` = `b`.`id`)))  \n" +
                "WHERE `a`.`woTransID` IN(SELECT  \n" +
                "                           `a`.`woTransID`  \n" +
                "                         FROM `workorder_trans` `a`  \n" +
                "                         WHERE EXISTS(SELECT  \n" +
                "                                        'Y'  \n" +
                "                                      FROM `workorder_operation` `b`  \n" +
                "                                      WHERE ((`b`.`woID` = `a`.`woID`)  \n" +
                "                                             AND (`b`.`woOPID` = `a`.`woOPID`)  \n" +
                "                                             AND (`b`.`opID` = `a`.`opID`)  \n" +
                "                                             AND (IFNULL(`b`.`isTeamOperation`,0) = 0)  \n" +
                "                                             AND (`b`.`qtyControl` = 1))));  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP VIEW IF EXISTS `vu_employee_production_all` ;  \n" +
                "CREATE VIEW `vu_employee_production_all` AS   \n" +
                "SELECT `vu_employeeproduction`.`First Name` AS `First Name`,`vu_employeeproduction`.`Last Name` AS `Last Name`,`vu_employeeproduction`.`Full Name` AS `Full Name`,`vu_employeeproduction`.`Burden Rate` AS `Burden Rate`,`vu_employeeproduction`.`Initial Name` AS `Initial Name`,`vu_employeeproduction`.`wo ID Identity` AS `wo ID Identity`,`vu_employeeproduction`.`WO Number` AS `WO Number`,`vu_employeeproduction`.`Assy ID` AS `Assy ID`,`vu_employeeproduction`.`Assy Number` AS `Assy Number`,`vu_employeeproduction`.`OP ID Identity` AS `OP ID Identity`,`vu_employeeproduction`.`Revision` AS `Revision`,`vu_employeeproduction`.`OP Name` AS `OP Name`,`vu_employeeproduction`.`woOP ID Identity` AS `woOP ID Identity`,`vu_employeeproduction`.`woTrans ID Identity` AS `woTrans ID Identity`,`vu_employeeproduction`.`WorkStation ID Identity` AS `WorkStation ID Identity`,`vu_employeeproduction`.`Equipment ID  Identity` AS `Equipment ID  Identity`,`vu_employeeproduction`.`Equipment Name` AS `Equipment Name`,`vu_employeeproduction`.`Checkout Time` AS `Checkout Time`,`vu_employeeproduction`.`Checkout SetupTime` AS `Checkout SetupTime`,`vu_employeeproduction`.`Total Time In Sec` AS `Total Time In Sec`,`vu_employeeproduction`.`Total Time` AS `Total Time`,`vu_employeeproduction`.`Production Time` AS `Production Time`,`vu_employeeproduction`.`Production Time In Sec` AS `Production Time In Sec`,`vu_employeeproduction`.`Average Time In Sec` AS `Average Time In Sec`,`vu_employeeproduction`.`Average Time` AS `Average Time`,`vu_employeeproduction`.`Total Qty` AS `Total Qty`,`vu_employeeproduction`.`Passed Qty` AS `Passed Qty`,`vu_employeeproduction`.`Reprocessed Qty` AS `Reprocessed Qty`,`vu_employeeproduction`.`Defect Observed Qty` AS `Defect Observed Qty`,`vu_employeeproduction`.`Rework  Required Qty` AS `Rework  Required Qty`,`vu_employeeproduction`.`Scraped Qty` AS `Scraped Qty` FROM `vu_employeeproduction` UNION SELECT `vu_employeeproductionteamwise`.`First Name` AS `First Name`,`vu_employeeproductionteamwise`.`Last Name` AS `Last Name`,`vu_employeeproductionteamwise`.`Full Name` AS `Full Name`,`vu_employeeproductionteamwise`.`Burden Rate` AS `Burden Rate`,`vu_employeeproductionteamwise`.`Initial Name` AS `Initial Name`,`vu_employeeproductionteamwise`.`wo ID Identity` AS `wo ID Identity`,`vu_employeeproductionteamwise`.`WO Number` AS `WO Number`,`vu_employeeproductionteamwise`.`Assy ID` AS `Assy ID`,`vu_employeeproductionteamwise`.`Assy Number` AS `Assy Number`,`vu_employeeproductionteamwise`.`OP ID Identity` AS `OP ID Identity`,`vu_employeeproductionteamwise`.`Revision` AS `Revision`,`vu_employeeproductionteamwise`.`OP Name` AS `OP Name`,`vu_employeeproductionteamwise`.`woOP ID Identity` AS `woOP ID Identity`,`vu_employeeproductionteamwise`.`woTrans ID Identity` AS `woTrans ID Identity`,`vu_employeeproductionteamwise`.`WorkStation ID Identity` AS `WorkStation ID Identity`,`vu_employeeproductionteamwise`.`Equipment ID  Identity` AS `Equipment ID  Identity`,`vu_employeeproductionteamwise`.`Equipment Name` AS `Equipment Name`,`vu_employeeproductionteamwise`.`Checkout Time` AS `Checkout Time`,`vu_employeeproductionteamwise`.`Checkout SetupTime` AS `Checkout SetupTime`,`vu_employeeproductionteamwise`.`Total Time In Sec` AS `Total Time In Sec`,`vu_employeeproductionteamwise`.`Total Time` AS `Total Time`,`vu_employeeproductionteamwise`.`Production Time` AS `Production Time`,`vu_employeeproductionteamwise`.`Production Time In Sec` AS `Production Time In Sec`,`vu_employeeproductionteamwise`.`Average Time In Sec` AS `Average Time In Sec`,`vu_employeeproductionteamwise`.`Average Time` AS `Average Time`,`vu_employeeproductionteamwise`.`Total Qty` AS `Total Qty`,`vu_employeeproductionteamwise`.`Passed Qty` AS `Passed Qty`,`vu_employeeproductionteamwise`.`Reprocessed Qty` AS `Reprocessed Qty`,`vu_employeeproductionteamwise`.`Defect Observed Qty` AS `Defect Observed Qty`,`vu_employeeproductionteamwise`.`Rework  Required Qty` AS `Rework  Required Qty`,`vu_employeeproductionteamwise`.`Scraped Qty` AS `Scraped Qty` FROM `vu_employeeproductionteamwise`;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCompnentSuppliesMaterialsAndTools` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompnentSuppliesMaterialsAndTools`(    \n" +
                "			IN ppartID INT(11)    \n" +
                "		)  \n" +
                "BEGIN     \n" +
                "	DECLARE pWhereClause VARCHAR(2000);    \n" +
                "	SET pWhereClause = '';    \n" +
                "	IF ppartID IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(\" AND c.id=\" , ppartID);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"SELECT c.id,    \n" +
                "	c.PIDCode,    \n" +
                "	c.mfgPN,    \n" +
                "	c.rev,    \n" +
                "	c.imageURL,    \n" +
                "	c.dataSheetLink,    \n" +
                "	c.mountingTypeID,    \n" +
                "	rr.name rohsStatus,    \n" +
                "	rr.rohsIcon rohsIcon FROM component c    \n" +
                "	LEFT JOIN rfq_rohsmst rr ON rr.id = c.roHSStatusID AND c.deletedAt IS NULL AND IFNULL(rr.isDeleted,0) =0    \n" +
                "		WHERE mountingTypeID IN (SELECT id FROM rfq_mountingtypemst rm    \n" +
                "			WHERE id IN   \n" +
                "				(SELECT cld.rfqmountingTypeID FROM component_logicalgroup_detail cld  \n" +
                "					WHERE cld.logicalgroupID IN ('1','2','3')   \n" +
                "					AND cld.deletedAt IS NULL AND IFNULL(cld.isDeleted,0) =0)  \n" +
                "			AND rm.deletedAt IS NULL   \n" +
                "		AND IFNULL(rm.isDeleted,0) =0)   \n" +
                "	AND c.deletedAt IS NULL   \n" +
                "	AND IFNULL(c.isDeleted,0) =0 \", pWhereClause);      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkInEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkInEmployeeForOperation`(      \n" +
                "	IN pWoID INT,      \n" +
                "	IN pOpID INT,      \n" +
                "	IN pWoOPID INT,      \n" +
                "	IN pEquipmentID INT,      \n" +
                "	IN pWorkstationID INT,       \n" +
                "	IN pisSetup TINYINT,      \n" +
                "	IN pIsSingleEmployee TINYINT,      \n" +
                "	IN pEmployeeID INT,      \n" +
                "	IN pWoTransID INT,      \n" +
                "	IN pIssueQty INT,        \n" +
                "	IN pCreatedBy VARCHAR(255)      \n" +
                "    )  \n" +
                "BEGIN	      \n" +
                "	DECLARE lvwoNumber VARCHAR(255);      \n" +
                "	DECLARE lvopName VARCHAR(255);      \n" +
                "	DECLARE lvempName VARCHAR(255);      \n" +
                "	DECLARE lvinsertedWoTransInOutID INT(11);      \n" +
                "	DECLARE lvemployeeID INT(11);      \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;      \n" +
                "	CREATE TEMPORARY TABLE error_CheckIn (      \n" +
                "		errorText NVARCHAR(2000)      \n" +
                "	);      \n" +
                "  \n" +
                "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckInTime;      \n" +
                "  \n" +
                "	IF(pIsSingleEmployee = 1) THEN      \n" +
                "		INSERT INTO workorder_trans_empinout      \n" +
                "		(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isPaused`, `isDeleted`)      \n" +
                "		VALUES       \n" +
                "		(pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0);      \n" +
                "  \n" +
                "		SET lvinsertedWoTransInOutID = LAST_INSERT_ID();      \n" +
                "  \n" +
                "		/* [S] - Add Time line log for check-in to team work order operation */      \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),      \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,      \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)       \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber      \n" +
                "		FROM workorder_trans_empinout  wteio      \n" +
                "		WHERE wteio.woTransinoutID = lvinsertedWoTransInOutID;      \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		      \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee start activity in team operation\");      \n" +
                "		SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity in team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');      \n" +
                "		CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',lvinsertedWoTransInOutID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', lvemployeeID),pCreatedBy,1);  			      \n" +
                "		/* [E] - Add Time line log for check-in to team work order operation */	      \n" +
                "	ELSE      \n" +
                "		IF (IFNULL(pIssueQty,0)= 0) THEN      \n" +
                "			INSERT INTO workorder_trans      \n" +
                "			(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isDeleted`, `woentrytype`, `isSetup`)      \n" +
                "			VALUES       \n" +
                "			(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0, 'T', pisSetup);      \n" +
                "  \n" +
                "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;      \n" +
                "  \n" +
                "			INSERT INTO workorder_trans_empinout      \n" +
                "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isPaused`, `isDeleted`)      \n" +
                "			VALUES       \n" +
                "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0);      \n" +
                "  \n" +
                "  \n" +
                "			/* [S] - Add Time line log for check-in work order operation */      \n" +
                "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),      \n" +
                "				(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,      \n" +
                "				(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)       \n" +
                "				INTO lvwoNumber,lvopName,lvempName,lvopNumber      \n" +
                "			FROM workorder_trans  wt      \n" +
                "			WHERE wt.woTransID = @pWoTransID      \n" +
                "			;		      \n" +
                "  \n" +
                "			SET @pEventTitle = CONCAT(\"Employee start activity for work order operation\");      \n" +
                "			SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');      \n" +
                "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			      \n" +
                "			/* [E] - Add Time line log for check-in work order operation */					      \n" +
                "  \n" +
                "  \n" +
                "		ELSE      \n" +
                "			CALL Sproc_GetopReadyStock(pWOID,pOpID);      \n" +
                "			SELECT issuePending INTO @pIssuePending FROM temp_Sproc_GetopReadyStock;      \n" +
                "  \n" +
                "			IF((IFNULL(pIssueQty,0)) > IFNULL(@pIssuePending,0)) THEN      \n" +
                "				INSERT INTO error_CheckIn (errorText) VALUES ('Invalid Issue Qty !!');      \n" +
                "			ELSE      \n" +
                "				INSERT INTO workorder_trans      \n" +
                "				(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,   \n" +
                "				`createdBy`, `isDeleted`, `woentrytype`, `isSetup`)      \n" +
                "				VALUES       \n" +
                "				(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0, 'T',pisSetup);      \n" +
                "  \n" +
                "				SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;      \n" +
                "  \n" +
                "				INSERT INTO workorder_trans_empinout      \n" +
                "				(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`,   \n" +
                "				`checkinTime`,`createdBy`, `isPaused`, `isDeleted`)      \n" +
                "				VALUES       \n" +
                "				(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0);      \n" +
                "  \n" +
                "				/* [S] - Add Time line log for check-in work order operation */      \n" +
                "				SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),      \n" +
                "					(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,      \n" +
                "					(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)       \n" +
                "					INTO lvwoNumber,lvopName,lvempName,lvopNumber      \n" +
                "				FROM workorder_trans  wt      \n" +
                "				WHERE wt.woTransID = @pWoTransID;		      \n" +
                "  \n" +
                "				SET @pEventTitle = CONCAT(\"Employee start activity for work order operation\");      \n" +
                "				SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');      \n" +
                "				CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			      \n" +
                "				/* [E] - Add Time line log for check-in work order operation */	      \n" +
                "  \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "	SELECT errorText FROM error_CheckIn;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkoutEmployeeFromOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkoutEmployeeFromOperation`(          \n" +
                "	IN pWOTransID INT,          \n" +
                "	IN pWOTransinoutID INT,          \n" +
                "	IN pCheckoutEmployeeID INT,          \n" +
                "	IN pCheckoutSetupTime INT,          \n" +
                "	IN pRemark LONGTEXT,      \n" +
                "	IN pTotalQty INT,      \n" +
                "        IN pPassQty INT,      \n" +
                "        IN pObservedQty INT,      \n" +
                "        IN pReworkQty INT,      \n" +
                "        IN pScrapQty INT,      \n" +
                "        IN pIsFirstArticle TINYINT      \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE lvwoNumber VARCHAR(255);          \n" +
                "	DECLARE lvopName VARCHAR(255);          \n" +
                "	DECLARE lvempName VARCHAR(255);          \n" +
                "	DECLARE lvwoOPID INT(11);          \n" +
                "	DECLARE lvuserID INT(11);          \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);          \n" +
                "  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION        \n" +
                "	BEGIN          \n" +
                "		ROLLBACK;      \n" +
                "		RESIGNAL;      \n" +
                "	END;      \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "	BEGIN                    \n" +
                "		ROLLBACK;                    \n" +
                "		RESIGNAL;                    \n" +
                "	END;	      \n" +
                "	START TRANSACTION;      \n" +
                "  \n" +
                "  \n" +
                "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;          \n" +
                "  \n" +
                "  \n" +
                "	/*Update pending pasue record */          \n" +
                "	UPDATE workorder_trans_emp_pausedet a          \n" +
                "	SET resumetime = @pCheckoutTime,          \n" +
                "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),          \n" +
                "	    updatedBy = pCheckoutEmployeeID          \n" +
                "	WHERE a.woTransinoutID = pWOTransinoutID          \n" +
                "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;          \n" +
                "  \n" +
                "	/*Calculate employee production */          \n" +
                "	UPDATE workorder_trans_empinout  a          \n" +
                "	SET isPaused = 0,          \n" +
                "		checkoutTime = @pCheckoutTime,          \n" +
                "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),          \n" +
                "		checkoutSetupTime = pCheckoutSetupTime,          \n" +
                "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -           \n" +
                "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime           \n" +
                "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )          \n" +
                "		  ),          \n" +
                "		updatedBy = pCheckoutEmployeeID,          \n" +
                "		remark = pRemark          \n" +
                "	WHERE woTransId = pWOTransID  AND woTransinoutID = pWOTransinoutID AND checkoutTime IS NULL ;          \n" +
                "  \n" +
                "  \n" +
                "	/*calculate operation Transaction production */          \n" +
                "	SELECT COUNT(1) INTO  @cnt  FROM workorder_trans_empinout WHERE  woTransId = pWOTransID  AND checkoutTime IS NULL;          \n" +
                "	IF (@cnt = 0 ) THEN           \n" +
                "  \n" +
                "	UPDATE workorder_trans a          \n" +
                "	SET checkouttime = @pCheckoutTime,          \n" +
                "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout           \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,          \n" +
                "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout           \n" +
                "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),          \n" +
                "		updatedBy = pCheckoutEmployeeID,          \n" +
                "		checkoutEmployeeID = pCheckoutEmployeeID          \n" +
                "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;	          \n" +
                "  \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* add production quantity details */      \n" +
                "	INSERT INTO workorder_trans_production (`woTransID`,`employeeID`,`totalQty`,`passQty`,      \n" +
                "			`observedQty`,`reworkQty`,`scrapQty`,`isFirstArticle`,`createdBy`,`remark`)      \n" +
                "	VALUES (pWOTransID,pCheckoutEmployeeID,pTotalQty,pPassQty,pObservedQty,pReworkQty,pScrapQty      \n" +
                "			,pIsFirstArticle,pCheckoutEmployeeID,pRemark) ;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* [S] - Add Time line log for check-out from team work order operation */          \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),          \n" +
                "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,          \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)           \n" +
                "		INTO lvwoNumber,lvopName,lvempName,lvopNumber          \n" +
                "	FROM workorder_trans_empinout  wteio          \n" +
                "	WHERE wteio.woTransinoutID = pWOTransinoutID ;          \n" +
                "  \n" +
                "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	          \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Employee stoppped activity from team operation\");          \n" +
                "	SET @pEventDescription = CONCAT('\"',lvempName,'\" stopped activity from team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');          \n" +
                "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);            \n" +
                "	/* [E] - Add Time line log for check-out from team work order operation */	          \n" +
                "  \n" +
                "	 COMMIT;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(      \n" +
                "	IN pwoID INT(11)  ,      \n" +
                "	IN pwoOPID INT(11)                                                                         \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";        \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN      \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,   \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,   \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`,      \n" +
                "			GROUP_CONCAT((SELECT fullName FROM certificate_standards       \n" +
                "				WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',      \n" +
                "			(SELECT className FROM standard_class       \n" +
                "				WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass ,       \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,      \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,      \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,   \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,      \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon`, salesorddet.totalpoQty, salesorddet.poQty ,      \n" +
                "   			 salesorddet.totalmrpQty, salesorddet.mrpQty, salesorddet.poNumber , salesorddet.salesOrderNumber      \n" +
                "		FROM workorder AS `wo`       \n" +
                "		LEFT OUTER JOIN `workorder_certification` AS `wocerti`       \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL         \n" +
                "		LEFT OUTER JOIN `component` AS `ca`      \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL          \n" +
                "		LEFT OUTER JOIN   \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,      \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,      \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber      \n" +
                "			FROM `workorder_salesorder_details` AS `wsd`       \n" +
                "			INNER JOIN `salesorderdet` AS `sod`       \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL       \n" +
                "			INNER JOIN `salesordermst` AS `som`       \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL       \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet      \n" +
                "			ON salesorddet.woID = `wo`.`woID`      \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID      \n" +
                "		GROUP BY `wo`.`woID` ;      \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN      \n" +
                "		SELECT   \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,   \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,   \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`,      \n" +
                "			 GROUP_CONCAT((SELECT fullName FROM certificate_standards       \n" +
                "						WHERE deletedAt IS NULL AND certificateStandardID = wocerti.certificateStandardID) ,' ',      \n" +
                "					(SELECT className FROM standard_class       \n" +
                "						WHERE deletedAt IS NULL AND classID = wocerti.classIDs)) AS woAllStandardsWithClass,   \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,      \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL       \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,     \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion,      \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`, CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   \n" +
                "			`ca`.`RoHSStatusID`, (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,      \n" +
                "			 salesorddet.totalpoQty, salesorddet.poQty, salesorddet.totalmrpQty,   \n" +
                "			 salesorddet.mrpQty, salesorddet.poNumber, salesorddet.salesOrderNumber      \n" +
                "		FROM workorder AS `wo`    \n" +
                "		LEFT OUTER JOIN `workorder_certification` AS `wocerti`       \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  AND `wocerti` .`deletedAt` IS NULL         \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`      \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID    \n" +
                "		LEFT OUTER JOIN `component` AS `ca`      \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL          \n" +
                "		LEFT OUTER JOIN   \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,      \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,      \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber      \n" +
                "  			FROM `workorder_salesorder_details` AS `wsd`       \n" +
                "			INNER JOIN `salesorderdet` AS `sod`       \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL       \n" +
                "			INNER JOIN `salesordermst` AS `som`       \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL       \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet      \n" +
                "		ON salesorddet.woID = `wo`.`woID`      \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID      \n" +
                "		GROUP BY `wo`.`woID` ;      \n" +
                "	END IF ;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                             \n" +
                "	IN pPassword VARCHAR(500)                   \n" +
                ")  \n" +
                "BEGIN                         \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN                    \n" +
                "		#Start - Delete Role                  \n" +
                "		TRUNCATE TABLE rolepagedetail;                  \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                  \n" +
                "		TRUNCATE TABLE standard_role;                  \n" +
                "  \n" +
                "		#Start - Delete Features of roles                  \n" +
                "		DELETE FROM feature_role_mapping;                  \n" +
                "		#End - Delete Features of roles                  \n" +
                "  \n" +
                "		#Start - Delete Generic Folder                  \n" +
                "		UPDATE genericfiles SET refParentId = NULL             \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));                 \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);                  \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL             \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);            \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;                  \n" +
                "  \n" +
                "		#End - Delete Generic Folder                  \n" +
                "  \n" +
                "		#Start - Delete Generic Files                  \n" +
                "		TRUNCATE TABLE genericfiles;                  \n" +
                "		#End - Delete Generic Files                  \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');                  \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;                  \n" +
                "		#End - Delete Role                  \n" +
                "		#Start - Delete Generic Category                  \n" +
                "			TRUNCATE TABLE employee_department;                  \n" +
                "			#Start - Delete Part                  \n" +
                "			TRUNCATE TABLE operation_part;                  \n" +
                "			TRUNCATE TABLE workorder_operation_part;         \n" +
                "			#End - Delete Part                  \n" +
                "			#Start - Delete Equipment                  \n" +
                "				TRUNCATE TABLE operation_equipment;                  \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;                  \n" +
                "				TRUNCATE TABLE equipment_dataelement;                  \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;                  \n" +
                "  \n" +
                "				#Start - Delete Equipment Task                  \n" +
                "				TRUNCATE TABLE equipment_task_schedule;                  \n" +
                "				DELETE FROM equipment_task;                  \n" +
                "				#End - Delete Equipment Task                  \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master                  \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;                  \n" +
                "				DELETE FROM workorder_serialmst;                  \n" +
                "				# End - Delete Workorder Trans Serial Master                  \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail                  \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;                  \n" +
                "				DELETE FROM workorder_trans_empinout;                  \n" +
                "				#End - Delete Workorder Transaction InOut Detail                  \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction                  \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;                  \n" +
                "				TRUNCATE TABLE workorder_trans_production;                  \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;                  \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;                  \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;                  \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;                  \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;                  \n" +
                "				DELETE FROM workorder_trans;                  \n" +
                "				# End - Delete Workorder Transaction                  \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;                  \n" +
                "				DELETE FROM equipment;                  \n" +
                "			#End - Delete Equipment                  \n" +
                "			# Start - Delete Operation                  \n" +
                "			TRUNCATE TABLE operation_equipment;                  \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element                  \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;                  \n" +
                "			DELETE FROM workorder_operation_dataelement;                  \n" +
                "			# End - Delete Workorder Operation Data Element                  \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;                  \n" +
                "			TRUNCATE TABLE workorder_operation_employee;                  \n" +
                "			TRUNCATE TABLE operation_master_templates;                  \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			                  \n" +
                "				# Start - Delete ECO Request 			                  \n" +
                "					# Start - Delete ECO Request Approval                  \n" +
                "					TRUNCATE TABLE eco_request_department_employee;                  \n" +
                "					DELETE FROM eco_request_department_approval;                  \n" +
                "					# End - Delete ECO Request Approval                  \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;                  \n" +
                "				DELETE FROM eco_request;                  \n" +
                "				# End - Delete ECO Request                  \n" +
                "  \n" +
                "			# Start - Delete Shipping Details                  \n" +
                "			TRUNCATE TABLE shippedassembly;                  \n" +
                "			DELETE FROM salesshippingmst;                  \n" +
                "			DELETE FROM workorder_salesorder_details;                  \n" +
                "			DELETE FROM salesorderdet;                  \n" +
                "			DELETE FROM salesordermst;                  \n" +
                "			# End - Delete Shipping Details                  \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review                   \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;                  \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;                  \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;                  \n" +
                "			DELETE FROM workorder_reqforreview;                  \n" +
                "			# End - Delete Workorder Request Review                   \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;                  \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;                  \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming                  \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;                  \n" +
                "			DELETE FROM workorder_preprogcomp_designator;                  \n" +
                "			DELETE FROM workorder_preprogcomp;                  \n" +
                "			# End - Delete Workorder Tran PreProgramming                  \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;                  \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;                  \n" +
                "			# End - Delete Workorder Operation                  \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;                  \n" +
                "  \n" +
                "			#Start - Delete Chart                  \n" +
                "			TRUNCATE TABLE chart_template_operations;            \n" +
                "			TRUNCATE TABLE chart_template_employee_details;                 \n" +
                "			TRUNCATE TABLE chart_template_access;             \n" +
                "			DELETE FROM chart_templatemst;                  \n" +
                "			#Start - End Chart                  \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;                  \n" +
                "			# End - Delete Operation                  \n" +
                "			TRUNCATE TABLE standard_message;                  \n" +
                "			# Start - Delete Component                  \n" +
                "			TRUNCATE TABLE component_alias;                 \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';              \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;                  \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;                  \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;            \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;               \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;               \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';              \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;              \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;              \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';              \n" +
                "			TRUNCATE TABLE component_goodbadpartmapping;                  \n" +
                "			TRUNCATE TABLE component_processmaterial;                  \n" +
                "			TRUNCATE TABLE component_drivetools;                  \n" +
                "			TRUNCATE TABLE component_standard_details;                  \n" +
                "  \n" +
                "			# Start - Delete Recieving Material                  \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;                  \n" +
                "			DELETE FROM component_sid_stock;              \n" +
                "			DELETE FROM cost_category;                      \n" +
                "			# End - Delete Recieving Material                  \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;                  \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;               \n" +
                "			TRUNCATE TABLE standard_class;                 \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;            \n" +
                "			DELETE FROM certificate_standards;                \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;            \n" +
                "			DELETE FROM br_label_template;            \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL            \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Ownerships';            \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL            \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Types';            \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL            \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Types';            \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL            \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Types';            \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL            \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Responsibilities';            \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;                  \n" +
                "			# End - Delete Component                  \n" +
                "  \n" +
                "		#End - Delete Generic Category                  \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;            \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;            \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;            \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;            \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;            \n" +
                "		TRUNCATE TABLE rfq_assembly_history;            \n" +
                "		DELETE FROM rfq_lineitems;            \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;            \n" +
                "		DELETE FROM component WHERE id > 0;             \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;                  \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;             \n" +
                "		#Start - Delete Entity                  \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                  \n" +
                "		DELETE FROM workorder_operation_dataelement;                  \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;                  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                  \n" +
                "		DELETE FROM workorder_trans_subform_data;                \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;               \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';              \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                  \n" +
                "		DELETE FROM subform_transaction;                  \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;                  \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;            \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;            \n" +
                "		DELETE FROM dataelement;                \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;                  \n" +
                "		#End - Delete Entity                  \n" +
                "		#Start - Delete UOMS                       \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;            \n" +
                "		DELETE FROM rfq_assy_quotations;                \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;                 \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;                  \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;                  \n" +
                "		#End - Delete UOMS                  \n" +
                "		#Start - Delete MFG                      \n" +
                "		TRUNCATE TABLE mfgcodealias;                  \n" +
                "		TRUNCATE TABLE who_bought_who;                  \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;                  \n" +
                "		#End - Delete MFG                      \n" +
                "		#Start - Delete BOM                  \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;                  \n" +
                "		DELETE FROM component_cust_alias_rev;                  \n" +
                "		DELETE FROM rfq_assy_bom;                  \n" +
                "		#End - Delete BOM                  \n" +
                "		#Start - Delete RFQ                  \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;                  \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;                  \n" +
                "		DELETE FROM rfq_assy_quantity;                  \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;          \n" +
                "		DELETE FROM rfq_assemblies;                  \n" +
                "		DELETE FROM rfqforms;                  \n" +
                "		#End - Delete RFQ                  \n" +
                "		DELETE FROM customer_addresses;                  \n" +
                "		DELETE FROM customer_contactperson;                  \n" +
                "		TRUNCATE TABLE assemblystock;                  \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;                  \n" +
                "		#Start - Delete Customer                  \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;                  \n" +
                "		DELETE FROM workorder_assy_designators;                 \n" +
                "		DELETE FROM workorder_cluster;                      \n" +
                "		DELETE FROM workorder_operation_firstpiece;                  \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;                  \n" +
                "		TRUNCATE TABLE shipping_requestdet;                  \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;                  \n" +
                "		DELETE FROM workorder;                  \n" +
                "		TRUNCATE TABLE assembly_revision_comments;               \n" +
                "		DELETE FROM customers;                  \n" +
                "		#End - Delete Customer                  \n" +
                "		#Start - Delete Employee                  \n" +
                "		UPDATE department SET parentDeptID=NULL;             \n" +
                "		DELETE FROM department;                  \n" +
                "		TRUNCATE TABLE dynamicreportaccess;                  \n" +
                "		UPDATE employees SET `managerID`=NULL;                  \n" +
                "		TRUNCATE TABLE notificationdet;                  \n" +
                "		DELETE FROM notificationmst;                  \n" +
                "		TRUNCATE TABLE group_participant_details;                  \n" +
                "		TRUNCATE TABLE group_chat_log;                  \n" +
                "		DELETE FROM group_chat;                  \n" +
                "		TRUNCATE TABLE chat;                  \n" +
                "		TRUNCATE TABLE feature_user_mapping;                  \n" +
                "		TRUNCATE TABLE user_agreement;                  \n" +
                "		TRUNCATE TABLE userpagedetail;                  \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');                  \n" +
                "		TRUNCATE TABLE shipping_request_empdet;                  \n" +
                "		DELETE FROM shipping_request;                  \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');                  \n" +
                "		#End - Delete Employee                  \n" +
                "  \n" +
                "		DELETE FROM master_templates WHERE systemGenerated=0;                  \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards                  \n" +
                "		TRUNCATE TABLE component_standard_details;       \n" +
                "		#End - Delete Component Standards                  \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log                  \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;                  \n" +
                "		#End - Delete Data Entry Audit Log                  \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	                  \n" +
                "		TRUNCATE TABLE dynamicreportfields;                    \n" +
                "		DELETE FROM dynamicreportmst;                  \n" +
                "		#End - Delete Dynamic Report                  \n" +
                "  \n" +
                "		#Start - Delete Job Type                  \n" +
                "		DELETE FROM jobtype;                  \n" +
                "		#End - Delete Job Type                  \n" +
                "  \n" +
                "		#Start - Delete Log Master                  \n" +
                "		TRUNCATE TABLE logmst;                  \n" +
                "		#End - Delete Log Master                  \n" +
                "  \n" +
                "		#Start - Delete Order Type                  \n" +
                "		-- DELETE FROM ordertype;                  \n" +
                "		#End - Delete Order Type                  \n" +
                "  \n" +
                "		#Start - Delete Reason                  \n" +
                "		DELETE FROM reasonmst;                  \n" +
                "		#End - Delete Reason                  \n" +
                "  \n" +
                "		#Start - Delete Requirement                  \n" +
                "		DELETE FROM requirement;                  \n" +
                "		#End - Delete Requirement                  \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data                  \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;                  \n" +
                "		#End - Delete Assy Auto Pricing Data                  \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log                  \n" +
                "		TRUNCATE TABLE taskconfirmation;                  \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log                  \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log                  \n" +
                "		TRUNCATE TABLE timeline;                  \n" +
                "		#End - Delete All Timeline Log                  \n" +
                "  \n" +
                "		#Start - Delete All Chart Category                  \n" +
                "		DELETE FROM chart_category;                  \n" +
                "		#End - Delete All Chart Category                  \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias                  \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;                  \n" +
                "		#End - Delete All Component Generic Alias                  \n" +
                "  \n" +
                "		#Start - Delete All Defect Category                  \n" +
                "		-- DELETE FROM defectcategory;                  \n" +
                "		#End - Delete All Defect Category                  \n" +
                "  \n" +
                "		#Start - Delete All ECO Category                  \n" +
                "		DELETE FROM eco_type_values WHERE systemGenerated = 0;                  \n" +
                "		DELETE FROM eco_type_category WHERE systemGenerated = 0;                     \n" +
                "		#End - Delete All ECO Category                  \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;              \n" +
                "  \n" +
                "		SELECT 'Done';                  \n" +
                "	ELSE                   \n" +
                "		SELECT 'Invalid Argument';                  \n" +
                "	END IF;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeOperationByWoID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeOperationByWoID`(            \n" +
                "    IN pwoID INT(11),          \n" +
                "    IN pemployeeID INT(11),      \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN        \n" +
                "IF pisUserAdmin = 1 THEN    \n" +
                "	SELECT  woOPID,    \n" +
                "	woID,    \n" +
                "	opID,    \n" +
                "	opNumber,     \n" +
                "	opName,    \n" +
                "	opVersion,     \n" +
                "	opStatus,     \n" +
                "	isStopOperation,  \n" +
                "	isTeamOperation    \n" +
                "	FROM workorder_operation woop    \n" +
                "	WHERE woop.deletedAt IS NULL     \n" +
                "	AND woop.woID = pwoID AND woop.opStatus IN (1, 2);    \n" +
                "ELSE     \n" +
                "	SELECT woOPID,    \n" +
                "	opID,    \n" +
                "	woID,    \n" +
                "	opNumber,    \n" +
                "	opName,    \n" +
                "	opVersion,    \n" +
                "	opStatus,     \n" +
                "	isStopOperation,     \n" +
                "	isTeamOperation    \n" +
                "	FROM workorder_operation woop     \n" +
                "	WHERE woop.woID = pwoID AND woop.opstatus IN (1,2) AND woop.deletedAt IS NULL    \n" +
                "	AND woopID IN (SELECT woope.woopID FROM workorder_operation_employee woope     \n" +
                "		WHERE woope.deletedAt IS NULL     \n" +
                "		AND woope.employeeID = pemployeeID);    \n" +
                "END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                \n" +
                "    IN pcodeDigest VARCHAR(1000),            \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN            \n" +
                "DECLARE whereClause1 VARCHAR(255) ;          \n" +
                "DECLARE whereClause2 VARCHAR(255) ;          \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;        \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (        \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),        \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)        \n" +
                ");        \n" +
                "INSERT INTO temp_sproc_employeedetails        \n" +
                "SELECT empdep.employeeID, emp.firstname, emp.lastname,         \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName        \n" +
                "FROM employee_department empdep        \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL        \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND gc.deletedAt IS NULL        \n" +
                "LEFT JOIN employees emp ON emp.id = empdep.employeeID AND emp.deletedAt IS NULL        \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1 AND empdep.isdefault = 1;        \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;        \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (        \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),        \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),        \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,        \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),        \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(100),	imageURL VARCHAR(1000),        \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),        \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			        \n" +
                "		poNumber VARCHAR(1000)	        \n" +
                ");        \n" +
                "IF pisUserAdmin = 1 THEN        \n" +
                "	SET whereClause1 = '';          \n" +
                "ELSE        \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe         \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)        \n" +
                ")';        \n" +
                "END IF;            \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";        \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails        \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,        \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,         \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,        \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,         \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,        \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,        \n" +
                "	NULL,			NULL,								NULL,        \n" +
                "	NULL        \n" +
                "FROM workorder wo        \n" +
                "LEFT JOIN component c ON wo.partID = c.id         \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id         \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                                    \n" +
                "PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "EXECUTE query1;                                    \n" +
                "DEALLOCATE PREPARE query1;          \n" +
                "SELECT * FROM temp_sproc_employeedetails;        \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;        \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (        \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)        \n" +
                ");        \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails        \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID         \n" +
                "FROM workorder_salesorder_details wosd         \n" +
                "WHERE wosd.deletedAt IS NULL         \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)        \n" +
                "GROUP BY wosd.woID;        \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;        \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (        \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),        \n" +
                "		fullname VARCHAR(255),		woID INT(11)        \n" +
                ");        \n" +
                "INSERT INTO temp_sproc_certificatedetails        \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID         \n" +
                "	FROM temp_sproc_workorderdetails tempWO        \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL        \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL        \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL        \n" +
                "	GROUP BY tempWO.woID;        \n" +
                "  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,         \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result        \n" +
                "SET tempWO1.colorcode = result.colorcode,        \n" +
                "tempWO1.classname = result.classname,        \n" +
                "tempWO1.standardName = result.fullname        \n" +
                "WHERE tempWO1.woID = result.woID;        \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,        \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1        \n" +
                "SET tempWO1.poQty = result1.poQty,        \n" +
                "tempWO1.poNumber = result1.refPONumber        \n" +
                "WHERE tempWO1.woID = result1.woID;        \n" +
                "SELECT * FROM temp_sproc_workorderdetails;        \n" +
                "IF pisUserAdmin = 1 THEN        \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';          \n" +
                "ELSE        \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';        \n" +
                "END IF;           \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,         \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,         \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation        \n" +
                "FROM workorder_trans_empinout wte        \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL         \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL        \n" +
                "WHERE wte.deletedAt IS NULL         \n" +
                "AND wte.checkoutTime IS NULL         \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                \n" +
                "PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "EXECUTE query2;                                    \n" +
                "DEALLOCATE PREPARE query2;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_workorder_manual_entry` ;  \n" +
                "CREATE PROCEDURE `Sproc_workorder_manual_entry`(      \n" +
                "IN pwoID INT(11),    \n" +
                "IN popID INT(11),    \n" +
                "IN PwoOPID INT(11),    \n" +
                "IN pemployeeID INT(11),    \n" +
                "IN pequipmentID INT(11),    \n" +
                "IN pcheckinTime DATETIME,    \n" +
                "IN pisSetup TINYINT(1),    \n" +
                "IN pcheckoutTime DATETIME,    \n" +
                "IN pcheckoutSetupTime INT(11),    \n" +
                "IN ptotalTime INT,     \n" +
                "IN productionTime INT,    \n" +
                "IN pcreatedBy INT,    \n" +
                "IN premark TEXT,    \n" +
                "IN pwoentrytype VARCHAR(1),    \n" +
                "IN pworkstationID INT(11),    \n" +
                "IN ptotalQty INT(11),    \n" +
                "IN ppassQty INT(11),    \n" +
                "IN pobservedQty INT(11),    \n" +
                "IN preworkQty INT(11),    \n" +
                "IN pscrapQty INT(11),     \n" +
                "IN pissueQty INT(11),    \n" +
                "IN preprocessQty INT(11),    \n" +
                "IN pqtyControl BOOL,    \n" +
                "IN ptransID INT(11),    \n" +
                "IN ptransProdctionID INT(11)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "    DECLARE tempreturnPending INT(11);        \n" +
                "	DECLARE tempOPProdQty INT(11);        \n" +
                "    DECLARE tempIssueQty INT(11);        \n" +
                "    DECLARE tempBuildQty INT(11);        \n" +
                "    DECLARE tempTillProcessScrapQty INT(11);       \n" +
                "    DECLARE tWoTransID INT(11);    \n" +
                "    DECLARE tempWoTransID INT(11);    \n" +
                "  \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "  BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;        \n" +
                "	START TRANSACTION;     \n" +
                "     DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;     \n" +
                "	 CREATE TEMPORARY TABLE temp_operation_error    \n" +
                "	(    \n" +
                "	     errorText NVARCHAR(2000)    \n" +
                "	);    \n" +
                "  \n" +
                "    IF(pqtyControl = TRUE)THEN    \n" +
                "    -- call sp for check stock validation --    \n" +
                "     SET SQL_SAFE_UPDATES=0;    \n" +
                "	 CALL Sproc_GetopReadyStock(pwoID,popID);     \n" +
                "     SET SQL_SAFE_UPDATES=1;    \n" +
                "  \n" +
                "	 SELECT returnPending,OPProdQty,IssueQty,BuildQty,TillProcessScrapQty     \n" +
                "     INTO tempreturnPending,tempOPProdQty,tempIssueQty,tempBuildQty,tempTillProcessScrapQty  FROM temp_Sproc_GetopReadyStock;    \n" +
                "  \n" +
                "     IF(ptotalQty > tempreturnPending || (tempOPProdQty + ptotalQty) > tempBuildQty - tempTillProcessScrapQty)THEN    \n" +
                "         -- create temporary table for error    \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (\"true\");    \n" +
                "     ELSE    \n" +
                "      -- UPDATE PRODUCTION DETAIL --    \n" +
                "	  /*If(ptransID is not null)Then    \n" +
                "        update workorder_trans set woID=pwoID,opID=popID,woOPID=PwoOPID,issueQty=pissueQty,checkinEmployeeID=pemployeeID,    \n" +
                "		isSetup=pisSetup,workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,    \n" +
                "        checkoutTime=pcheckoutTime,checkoutEmployeeID=pemployeeID,totalTime=ptotalTime,productionTime=productionTime,    \n" +
                "        checkoutSetupTime=pcheckoutSetupTime,remark=premark,woentrytype=pwoentrytype where woTransID=ptransID;    \n" +
                "      else */    \n" +
                "	  INSERT INTO workorder_trans(woID,opID,woOPID,issueQty,checkinEmployeeID,isSetup,workstationID,equipmentID,    \n" +
                "      checkinTime,checkoutTime,checkoutEmployeeID,totalTime,productionTime,checkoutSetupTime,remark,woentrytype,isDeleted,createdBy)    \n" +
                "      VALUES(pwoID,popID,PwoOPID,pissueQty,pemployeeID,pisSetup,pworkstationID,pequipmentID,    \n" +
                "      pcheckinTime,pcheckoutTime,pemployeeID,ptotalTime,productionTime,pcheckoutSetupTime,premark,pwoentrytype,0,1);    \n" +
                "  \n" +
                "      SET tempWoTransID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "       DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;     \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID    \n" +
                "	(    \n" +
                "	     wotransID INT(11)    \n" +
                "	);    \n" +
                "      INSERT INTO temp_workordertransID (wotransID) VALUES(tempWoTransID);    \n" +
                "  \n" +
                "  \n" +
                "    /*  if(ptransID is not null && ptransProdctionID is not null)then    \n" +
                "      update workorder_trans_production set employeeID=pemployeeID,totalQty=ptotalQty,passQty=ppassQty,reprocessQty=preprocessQty,    \n" +
                "      observedQty=pobservedQty,reworkQty=preworkQty,scrapQty=pscrapQty where woTransID=ptransID and woTransprodID=ptransProdctionID;    \n" +
                "  \n" +
                "      else    \n" +
                "      */    \n" +
                "        INSERT INTO workorder_trans_production(woTransID,employeeID,totalQty,passQty,reprocessQty,observedQty,reworkQty,scrapQty,createdBy)    \n" +
                "        VALUES(tempWoTransID,pemployeeID,ptotalQty,ppassQty,preprocessQty,pobservedQty,preworkQty,pscrapQty,1);    \n" +
                "  \n" +
                "     /*END IF;    \n" +
                "    END If; */    \n" +
                "  \n" +
                "   END IF;    \n" +
                "  \n" +
                "  ELSE    \n" +
                "  \n" +
                "  /* If(ptransID is not null)Then    \n" +
                "        update workorder_trans set woID=pwoID,opID=popID,woOPID=PwoOPID,issueQty=pissueQty,checkinEmployeeID=pemployeeID,    \n" +
                "		isSetup=pisSetup,workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,    \n" +
                "        checkoutTime=pcheckoutTime,checkoutEmployeeID=pemployeeID,totalTime=ptotalTime,productionTime=productionTime,    \n" +
                "        checkoutSetupTime=pcheckoutSetupTime,remark=premark,woentrytype=pwoentrytype where woTransID=ptransID;    \n" +
                "  \n" +
                "      ElSE */    \n" +
                "  \n" +
                "	  INSERT INTO workorder_trans(woID,opID,woOPID,issueQty,checkinEmployeeID,isSetup,workstationID,equipmentID,    \n" +
                "      checkinTime,checkoutTime,checkoutEmployeeID,totalTime,productionTime,checkoutSetupTime,remark,woentrytype,isDeleted,createdBy)    \n" +
                "      VALUES(pwoID,popID,PwoOPID,pissueQty,pemployeeID,pisSetup,pworkstationID,pequipmentID,    \n" +
                "      pcheckinTime,pcheckoutTime,pemployeeID,ptotalTime,productionTime,pcheckoutSetupTime,premark,pwoentrytype,0,1);    \n" +
                "  \n" +
                "      SET tWoTransID = LAST_INSERT_ID();    \n" +
                "  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;     \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID    \n" +
                "	(    \n" +
                "	     wotransID INT(11)    \n" +
                "	);    \n" +
                "      INSERT INTO temp_workordertransID (wotransID) VALUES (tWoTransID);    \n" +
                "  \n" +
                "     /* if(ptransID is not null)then    \n" +
                "       update workorder_trans_empinout set woID=pwoID,opID=popID,woOPID=PwoOPID,employeeID=pemployeeID,    \n" +
                "       workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,isSetup=pisSetup,    \n" +
                "       checkoutTime=pcheckoutTime,totalTime=ptotalTime,productionTime=productionTime,checkoutSetupTime=pcheckoutSetupTime    \n" +
                "       where woTransID=ptransID;    \n" +
                "  \n" +
                "       else */    \n" +
                "      INSERT INTO workorder_trans_empinout(woTransID,woID,opID,woOPID,employeeID,workstationID,equipmentID,    \n" +
                "      checkinTime,isSetup,checkoutTime,totalTime,productionTime,checkoutSetupTime,createdBy)    \n" +
                "      VALUES(tWoTransID,pwoID,popID,PwoOPID,pemployeeID,pworkstationID,pequipmentID,    \n" +
                "      pcheckinTime,pisSetup,pcheckoutTime,ptotalTime,productionTime,pcheckoutSetupTime,1);    \n" +
                "  \n" +
                "    /* END IF;    \n" +
                "	END IF; */    \n" +
                "  \n" +
                " END IF;    \n" +
                "	 SELECT errorText FROM temp_operation_error;    \n" +
                "     SELECT wotransID FROM temp_workordertransID;    \n" +
                "   COMMIT;    \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (284,'2.00','V1','Removed Check-in Setup Time from SP,View and Trigger'," + userid + ");"
            );
            break;
        case 284:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2019  *********************************** */
                "update page_detail set page_detail.displayMenuName = 'Quote Summary Details' where page_detail.pageName = 'Quote Summary Details';  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (285,'2.00','V1','page detail data changes  - shirish'," + userid + ");"
            );
            break;
        case 285:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfAmountByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfAmountByCostingType`(        \n" +
                "	prfqAssyQuoteID int(11),        \n" +
                "    pRFQAssyID int(11),  \n" +
                "    pcostingType varchar(20)  \n" +
                ") RETURNS decimal(18,6)  \n" +
                "DETERMINISTIC  \n" +
                "READS SQL DATA  \n" +
                "BEGIN        \n" +
                "			return (select (  \n" +
                "           # (case when pcostingType = 'labor' then qo.laborCost   \n" +
                "          #  when pcostingType = 'material' then qo.materialCost   \n" +
                "           # when pcostingType = 'ad-hoc' then qo.materialCost   \n" +
                "           # end)   \n" +
                "            qo.unitPrice + sum(amount)) from rfq_assy_quotations_additionalcost qac  \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null  \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID  \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = 179 order by id desc limit 1)  \n" +
                "			and rfqAssyQuoteID = 85 and costingType = 'labor');  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                  \n" +
                "	IN prfqAssyID INT(11)                                 \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "		# select list for quote summary details of last submitted quote    \n" +
                "			select unitPrice, qty, turnTime, qo.turnType, qo.excessMaterialCost, qo.extendedCost,     \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime    \n" +
                "			from rfq_assy_quote_submitted_assydetail qo    \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID    \n" +
                "			where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy     \n" +
                "			select ra.id rfqAssyID, rf.id quoteID, part.PIDCode, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.companyName,cu.customerCode,    \n" +
                "            ca.street1,ca.street2,ca.street3,ca.state,ca.city,co.countryName,co.countrySortCode,    \n" +
                "            (select BOMIssues from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id order by id desc limit 1) BOMIssues,    \n" +
                "            (select bomInternalVersion from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id order by id desc limit 1) bomInternalVersion,    \n" +
                "            (select quoteSubmitDate from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id order by id desc limit 1) quoteSubmitDate,    \n" +
                "            (select quoteNumber from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id order by id desc limit 1) quoteNumber,    \n" +
                "            (select id from rfq_assemblies_quotation_submitted where rfqAssyID = ra.id order by id desc limit 1) quoteSubmittedID,    \n" +
                "            ra.assyNote,rf.quoteNote    \n" +
                "            from rfq_assemblies ra    \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "			join customers cu on cu.id = rf.customerID and cu.isDeleted = 0    \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0    \n" +
                "			left join customer_addresses ca on ca.customerID = cu.id and ca.isDeleted = 0    \n" +
                "			left join countrymst co on co.countryID = ca.countryID and co.isDeleted = 0    \n" +
                "			where ra.id= prfqAssyID    \n" +
                "			order by co.countryID desc limit 1;    \n" +
                "  \n" +
                "        # select list of submitted quote summary    \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID;    \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote    \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd    \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0    \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0    \n" +
                "			where csd.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary    \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0    \n" +
                "            and RefSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                  \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                \n" +
                "	IN pPartID INT                           \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "	DECLARE pOffset INT(11);                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                                \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                   \n" +
                "			com.PIDCode, com.category, rl.partID,ra.mfgPNID,      \n" +
                "             GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon      \n" +
                "            )AS mfgPN,       \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                 \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                 \n" +
                "			FROM rfq_lineitems_alternatepart ra                                \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                  \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                                \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                              \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                      \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0               \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0                \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                               \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (286,'2.00','V1','Quote summary detail.planned BOM sp changes  - shirish'," + userid + ");"
            );
            break;
        case 286:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 26-02-2019  *********************************** */
                //"Alter table standard_class Add column displayOrder decimal(6,2);  \n" +
                "Alter table standard_class modify column className varchar(100) null;  \n" +
                //  /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (287,'2.00','V1',' alter table standard class - Mona '," + userid + ");"
            );
            break;
        case 287:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 26-02-2019  *********************************** */
                "UPDATE `page_detail` SET `menuName` = 'Functional Type', `displayMenuName` = 'Functional Type', `menuRoute` = 'setting.partmaintenance.parttype',`orderBy` = '32.86' WHERE pageName='RFQ Part Type';  \n" +
                "UPDATE `page_detail` SET `menuRoute` = 'setting.partmaintenance.mountingtype', `orderBy` = '32.87' WHERE pageName='Mounting Type';  \n" +
                "UPDATE `page_detail` SET `menuRoute` = 'setting.partmaintenance.costcategory', `orderBy` = '32.88' WHERE pageName='Cost Category';  \n" +
                "UPDATE `page_detail` SET `menuRoute` = 'setting.partmaintenance.rohs', `orderBy` = '32.89' WHERE pageName='RoHS';  \n" +
                //  /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (288,'2.00','V1','Menu change - Ashish'," + userid + ");"
            );
            break;
        case 288:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "ALTER TABLE kit_allocation RENAME COLUMN STATUS TO STATUS;  \n" +
                "ALTER TABLE kit_allocation RENAME COLUMN kitRElaseType TO kitRelaseType;  \n" +
                "ALTER TABLE kit_allocation ADD COLUMN createdBy VARCHAR(255) NOT NULL;  \n" +
                "ALTER TABLE kit_allocation ADD COLUMN createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;  \n" +
                "ALTER TABLE kit_allocation ADD COLUMN updatedBy VARCHAR(255) NULL;  \n" +
                "ALTER TABLE kit_allocation ADD COLUMN updatedAt DATETIME NULL;  \n" +
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                              \n" +
                "    IN pWhereClause VARCHAR(16383),                              \n" +
                "    IN puserID VARCHAR(50),                        \n" +
                "    IN pnickName VARCHAR(20),                        \n" +
                "    IN pprefix VARCHAR(20),                        \n" +
                "    IN puid VARCHAR(20),                    \n" +
                "    IN pComponentID INT,                \n" +
                "    IN pCustomerID INT,                \n" +
                "    IN pCPN BOOL,                \n" +
                "    IN pMFGAvailabel BOOL,                \n" +
                "    IN pRefCpnMfgID INT,            \n" +
                "    IN pAssyID INT,            \n" +
                "    IN pSalesOrderDetailID INT,		            \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT 	            \n" +
                "    )  \n" +
                "BEGIN                              \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                              \n" +
                "	DECLARE v_delimiter VARCHAR(10);                              \n" +
                "	DECLARE v_length INT;                               \n" +
                "	DECLARE v_fieldType INT;                                   \n" +
                "	DECLARE v_entityId INT;                              \n" +
                "	DECLARE v_dataElementId INT;                              \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                              \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                              \n" +
                "	DECLARE strLabel VARCHAR(2000);                              \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                              \n" +
                "	DECLARE StaticField VARCHAR(100);        \n" +
                "	DECLARE DynamicField VARCHAR(100);		        \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                              \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                              \n" +
                "	DECLARE plen,slen INT;                              \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                              \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                          \n" +
                "	DECLARE barcode_type_id INT;                    \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                               \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                              \n" +
                "	(                              \n" +
                "	     errorText NVARCHAR(2000),                              \n" +
                "	     IsSuccess VARCHAR (2),                    \n" +
                "	     MFGPart VARCHAR(100)                                   \n" +
                "	);                   \n" +
                "	-- get data from barcode templates with seprator                              \n" +
                "	block1: BEGIN           \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                               \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                        \n" +
                "		-- tempregexp;    	      \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                    \n" +
                "			SELECT b.`id`, g.gencCategoryName INTO pbr_template_ID,pbr_Separator FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                            \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                              \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                         \n" +
                "		ELSE    /* barcode 1D */                    \n" +
                "			SELECT `id`, '' INTO pbr_template_ID,pbr_Separator FROM br_label_template                             \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                               \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                         \n" +
                "		END IF;        \n" +
                "	END block1;                              \n" +
                "  \n" +
                "	block2: BEGIN      	      \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                              \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                              \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                           \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                               \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                       \n" +
                "		-- declare exit loop if data not found                              \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                              \n" +
                "	        -- if any record match found than  check for delimiter and its value                         \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                              \n" +
                "			-- create temporary table for deliemeter and component dataelement                              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                              \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                              \n" +
                "				pentityId INT,                              \n" +
                "				pdataElementId INT,                              \n" +
                "				pdelimiter_value VARCHAR(200)                              \n" +
                "			);                         \n" +
                "  \n" +
                "			-- create temporary table for separator string values                              \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                              \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                    \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                              \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                               \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                     \n" +
                "  \n" +
                "			-- open cursor                              \n" +
                "			OPEN barcodeMatch_cursor;                              \n" +
                "  \n" +
                "			-- set str label as whereclause                              \n" +
                "			SET strLabel=pWhereClause;                       \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                              \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                              \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                              \n" +
                " 			 END IF;                             \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                               \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                              \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                              \n" +
                "			 END IF;	                    \n" +
                "  \n" +
                "			-- insert all values after seprator split                               \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                              \n" +
                "			PREPARE stmt1 FROM @SQL;	                              \n" +
                "			EXECUTE stmt1;                              \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                              \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';         \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                              \n" +
                "			barcodeMatch_loop:LOOP           \n" +
                "				-- get all five selected values                              \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                      \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                              \n" +
                "				IF exit_loop THEN                         \n" +
                "					CLOSE barcodeMatch_cursor;                              \n" +
                "					LEAVE barcodeMatch_loop;                              \n" +
                "				END IF;                         \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                              \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                              \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                              \n" +
                "				EXECUTE stmtdelimiter;                    \n" +
                "  \n" +
                "				-- get delimiter values from string                              \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                      \n" +
                "				-- check for field type is static or dynamic                              \n" +
                "				-- if static field than check for mfg code and mfg part number                              \n" +
                "				IF v_fieldType = 0  THEN                          \n" +
                "					-- component_sid_stock                               \n" +
                "					-- get static field name from barcode table delimiter data element id                              \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                              \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                    \n" +
                "						SET MFG_Part_No = delimiter_value_data;                    \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN         \n" +
                "							SELECT COUNT(*), id, mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM       \n" +
                "							(      \n" +
                "								SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL      \n" +
                "								UNION      \n" +
                "								SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID       \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL      \n" +
                "							) a;      \n" +
                "						ELSE                    \n" +
                "							SELECT COUNT(*),id,mfgPN INTO @componentCount,@componentId,@mfgPartNO FROM component WHERE id=pComponentID AND deletedAt IS NULL;                    \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN  \n" +
                "							SELECT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId;				  \n" +
                "							IF (@rfqLineItemsID IS NULL) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;                              \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                              \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                              \n" +
                "						END IF;        \n" +
                "					END IF;                              \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                              \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN                      \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                              \n" +
                "					END IF;                \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		        \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                              \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "					END IF;              \n" +
                "					IF @componentCount > 1 THEN                    \n" +
                "						CLOSE barcodeMatch_cursor;                              \n" +
                "						LEAVE barcodeMatch_loop;                    \n" +
                "					END IF;                       \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                              \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                               \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                              \n" +
                "  \n" +
                "				ELSE          \n" +
                "					-- component_sid_stock_dataelement_Values                                \n" +
                "					-- dynamic fields             \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);         \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN              \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                              \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "					END IF;              \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN              \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                              \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');              \n" +
                "					END IF;        \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                               \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                           \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                               \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                       \n" +
                "				END IF;                              \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                              \n" +
                "			-- check if mfg and component both found than   \n" +
                "			IF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                              \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);  \n" +
                "			ELSEIF (@componentCount > 1) THEN                    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                              \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                              \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                              \n" +
                "                                   IF @Mfgmatched = 0  THEN                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                              \n" +
                "				   END IF;									                              \n" +
                "			 ELSE 		                    \n" +
                "				IF @mfgCount = 0 THEN                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                              \n" +
                "		                END IF;	                              \n" +
                "				IF @componentCount = 0 THEN                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                              \n" +
                "				END IF;	                              \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                                \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                              \n" +
                "			        END IF;						                              \n" +
                "			END IF;				                              \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN                \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;                \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                              \n" +
                "				END IF;                \n" +
                "			END IF;                \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                              \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	                \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                \n" +
                "				END IF;             \n" +
                "  \n" +
                "				-- must call statements in sequence          				                    \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                              \n" +
                "				PREPARE stmt1 FROM @SQL1;                              \n" +
                "				EXECUTE stmt1;                            \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN                \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                \n" +
                "				END IF;                \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN                \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                \n" +
                "				END IF;                \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN                \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                \n" +
                "				END IF;                \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN                \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                \n" +
                "				END IF;            \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN                \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                \n" +
                "				END IF;            \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN                \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');             \n" +
                "				END IF;            \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                \n" +
                "				SET @sql2 = UpdateValue;	                               \n" +
                "				PREPARE stmt2 FROM @SQL2;                              \n" +
                "				EXECUTE stmt2;	                              \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                              \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                    \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                               \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                              \n" +
                "				END IF;                                \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                              \n" +
                "			ELSE                             \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                              \n" +
                "			END IF;                              \n" +
                "  \n" +
                "		ELSE                          \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                               \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                              \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                \n" +
                "		END IF;                              \n" +
                "  \n" +
                "	END block2;                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (289,'2.00','V1',' Changes od kit allocation - FENIL '," + userid + ");"
            );
            break;
        case 289:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "ALTER TABLE component ADD refSupplierMfgpnComponentID  INT ;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                        \n" +
                " IN tabquery LONGTEXT                        \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "   SET @sqlQ=tabquery;                        \n" +
                "   PREPARE stmt1 FROM @sqlQ;                         \n" +
                "   EXECUTE stmt1;                          \n" +
                "   DEALLOCATE PREPARE stmt1;                         \n" +
                "  \n" +
                "  SELECT '1';                        \n" +
                "  \n" +
                "    block1:BEGIN                        \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                          \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                        \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                          \n" +
                "	DECLARE  current_mfgcode INT ;                        \n" +
                "	DECLARE current_Ismfg TINYINT;                          \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                          \n" +
                "        DECLARE current_component INT ;                        \n" +
                "        DECLARE current_ComponentID INT;                        \n" +
                "	DECLARE maxvalueid INT;                        \n" +
                "        DECLARE aliasgroup INT;  \n" +
                "        DECLARE refsuppliercomponentID INT;                        \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                          \n" +
                "    DECLARE component_cursor CURSOR FOR                          \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                        \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                          \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                          \n" +
                "     -- open the cursor                          \n" +
                "    OPEN component_cursor;                        \n" +
                "     -- start looping                          \n" +
                "     component_loop: LOOP                            \n" +
                "     -- read the name from next row into the variables                           \n" +
                "     FETCH component_cursor INTO current_ComponentID;                          \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                           \n" +
                "     -- close the cursor and exit the loop if it has.                          \n" +
                "       IF exit_loop THEN	                         \n" +
                "				 LEAVE component_loop;                          \n" +
                "			END IF;                          \n" +
                "        SELECT '1';                        \n" +
                "  \n" +
                "	SET current_mfgpn='';                        \n" +
                "	SET current_mfgcode=1;                        \n" +
                "	SET current_mfgPartNumber='';                        \n" +
                "	SET current_Ismfg=1;                        \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                        \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                        \n" +
                "	 -- insert new component                         \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                        \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                        \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                        \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,            \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,partType)                        \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,imageURL,                        \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                        \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                        \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,            \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,category                        \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                        \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                        \n" +
                "	 -- check component is manufacturer part or distributor part                        \n" +
                "                   IF(current_Ismfg=1) THEN                        \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                        \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                        \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                        \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                        \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                        \n" +
                "                    ELSE              \n" +
                "  \n" +
                "		        SELECT aliasgroupID,id INTO aliasgroup,refsuppliercomponentID FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                        \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                        \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                        \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                        \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto',refSupplierMfgpnComponentID=refsuppliercomponentID WHERE id=current_component;                        \n" +
                "		        END IF;                        \n" +
                "		    END IF;                        \n" +
                "      END IF;                        \n" +
                "  \n" +
                "    END LOOP component_loop;                        \n" +
                "      CLOSE component_cursor;                        \n" +
                "    END  block1;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (290,'2.00','V1','Alter table component -Champak'," + userid + ");"
            );
            break;
        case 290:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "ALTER TABLE standard_role  \n" +
                "DROP FOREIGN KEY standard_role_ibfk_2 ;  \n" +
                "  \n" +
                "ALTER TABLE standard_role  \n" +
                " DROP INDEX standardClassID ;  \n" +
                "  \n" +
                "ALTER TABLE standard_role  \n" +
                "DROP COLUMN standardClassID;  \n" +
                "  \n" +
                "ALTER TABLE component_standard_details  \n" +
                "DROP FOREIGN KEY component_standard_details_ibfk_1 ;  \n" +
                "  \n" +
                "ALTER TABLE component_standard_details  \n" +
                " DROP INDEX standardClassID ;  \n" +
                "  \n" +
                "ALTER TABLE component_standard_details  \n" +
                "DROP COLUMN standardClassID ;  \n" +
                "  \n" +
                "DROP TABLE component_standard_class ;  \n" +
                "DROP TABLE component_standard ;  \n" +
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_standard_class` ;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveComponentStandardClass` ;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_standard` ;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveComponentStandard` ;  \n" +
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                        \n" +
                "	IN tableName VARCHAR(255),                                                                        \n" +
                "	IN IDs LONGTEXT,                                                                        \n" +
                "	IN deletedBy INT,                                                                        \n" +
                "	IN entityID VARCHAR(255),                                                                        \n" +
                "	IN refrenceIDs LONGTEXT                                                                        \n" +
                "    )  \n" +
                "BEGIN                                                                        \n" +
                "IF tableName=\"employees\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                             \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                        \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                        \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"customers\" THEN                                                                        \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"department\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"genericcategory\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"equipment\" THEN                                                                        \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                          \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"parts\" THEN                                                                       \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"master_templates\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"operations\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"roles\" THEN                                                                       \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"standard_class\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"dataelement\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                   \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"component\" THEN                                                                        \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                       \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                         \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_operation\" THEN                                                                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                          \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"entity\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"salesordermst\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                        \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                        \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"assemblymst\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);                   \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"br_label_template\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);                   \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"measurement_types\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"uoms\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"jobtypes\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"rfqtype\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"reasonmst\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                                        \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                        \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                        \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                                        \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"shipping_request\" THEN                                                                        \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                        \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                                                                                                                                                                    \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                        \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                                   \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"requirement\" THEN                                                                        \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                                   \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                                   \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"rfqforms\" THEN                                                                        \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                        \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                        \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                        \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                        \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                        \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                        \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                        \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                    \n" +
                "IF tableName=\"cost_category\" THEN                                                                        \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                    \n" +
                "END IF;                                     \n" +
                "IF tableName=\"chartypemst\" THEN                                                                        \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                 \n" +
                "END IF;                    \n" +
                "IF tableName=\"countrymst\" THEN                    \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;                \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                    \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                  \n" +
                "END IF;               \n" +
                "IF tableName=\"component_cust_alias_rev\" THEN                \n" +
                "	 CALL Sproc_checkDelete_component_cust_alias_rev(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;           \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN                \n" +
                "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;            \n" +
                "IF tableName=\"warehousemst\" THEN                \n" +
                "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;         \n" +
                "IF tableName=\"binmst\" THEN                \n" +
                "	 CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;     \n" +
                "IF tableName=\"component_logicalgroup\" THEN        \n" +
                "	 CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs);              \n" +
                "END IF;                      \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyComponent`(                \n" +
                "	IN BuyByID INT(1),                \n" +
                "	IN BuyToID INT(1),              \n" +
                "    IN UserID INT(1)              \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "    START TRANSACTION;                \n" +
                "  \n" +
                "				SET @rank = (SELECT id FROM component ORDER BY id DESC LIMIT 1);    \n" +
                "  \n" +
                "				INSERT INTO `component`              \n" +
                "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `RoHSStatusID`,              \n" +
                "				`isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`,              \n" +
                "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,               \n" +
                "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,              \n" +
                "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,               \n" +
                "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,              \n" +
                "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)              \n" +
                "				-- SELECT  @rank:=@rank+1 AS `PID`,              \n" +
                "				 SELECT  @rank+1 AS `PID`,              \n" +
                "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,               \n" +
                "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`RoHSStatusID`,           \n" +
                "                com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,              \n" +
                "				com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,               \n" +
                "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,               \n" +
                "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,               \n" +
                "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,               \n" +
                "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,              \n" +
                "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,              \n" +
                "				(SELECT LEFT(CONCAT((SELECT mfgCode FROM mfgcodemst WHERE id = BuyByID),'+',c.mfgPN),30) `PIDCode`              \n" +
                "				 FROM component c JOIN mfgcodemst m ON m.id = c.mfgcodeID  WHERE c.mfgcodeID = BuyToID AND c.id = com.id AND IFNULL(c.isDeleted,0) = 0) `PIDCode`              \n" +
                "				FROM component com               \n" +
                "				WHERE com.mfgcodeID = BuyToID AND IFNULL(com.isDeleted,0) = 0;             \n" +
                "  \n" +
                "                /*   As per discussion with Dixitbhai not require to insert alias, packeging alias, and alternate alias for component.(04-10-2028)          \n" +
                "				INSERT INTO `component_alias`              \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)              \n" +
                "				select              \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,               \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`              \n" +
                "				from component_alias ca join component c on c.id = ca.componentID              \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;              \n" +
                "  \n" +
                "                INSERT INTO `component_alternatepn`              \n" +
                "				(`refComponentID`,`componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)              \n" +
                "				select              \n" +
                "				ca.`refComponentID` ,(select id from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,               \n" +
                "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`              \n" +
                "				from component_alternatepn ca join component c on c.id = ca.componentID              \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);              \n" +
                "				INSERT INTO `component_packagingalias`              \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)              \n" +
                "				select              \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,              \n" +
                "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`              \n" +
                "				from component_packagingalias ca join component c on c.id = ca.componentID              \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;              \n" +
                "  \n" +
                "                */          \n" +
                "				INSERT INTO `component_rohsalternatepn`              \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)              \n" +
                "				SELECT              \n" +
                "				ca.`aliasgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`              \n" +
                "				FROM component_rohsalternatepn ca JOIN component c ON c.id = ca.componentID              \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;              \n" +
                "				INSERT INTO `component_goodbadpartmapping`              \n" +
                "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)              \n" +
                "				SELECT          \n" +
                "                (IFNULL((SELECT id FROM component WHERE mfgPN = cG.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,               \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cB.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,              \n" +
                "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`              \n" +
                "				FROM component_goodbadpartmapping ca JOIN component cB ON cB.id = ca.badComponentID              \n" +
                "				JOIN component cG ON cG.id	= ca.goodComponentID              \n" +
                "				WHERE ca.badComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) OR           \n" +
                "                ca.goodComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;              \n" +
                "  \n" +
                "  \n" +
                "				INSERT INTO `component_standard_details`              \n" +
                "				(`componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)              \n" +
                "				SELECT              \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,              \n" +
                "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`              \n" +
                "				FROM component_standard_details ca JOIN component c ON c.id = ca.componentID              \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;              \n" +
                "				INSERT INTO `component_drivetools`              \n" +
                "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)              \n" +
                "				SELECT              \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`              \n" +
                "				FROM component_drivetools ca JOIN component c ON c.id = ca.refComponentID              \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;              \n" +
                "				INSERT INTO `component_requiremapping_parts`              \n" +
                "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)              \n" +
                "				SELECT              \n" +
                "				ca.`requiredMatingPartgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,              \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`              \n" +
                "				FROM component_requiremapping_parts ca JOIN component c ON c.id = ca.refComponentID              \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;              \n" +
                "				INSERT INTO `component_dataelement`              \n" +
                "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)              \n" +
                "				SELECT              \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,              \n" +
                "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`              \n" +
                "				FROM component_dataelement ca JOIN component c ON c.id = ca.componentID              \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;              \n" +
                "  COMMIT;                \n" +
                "SELECT * FROM component WHERE mfgcodeID = BuyByID;              \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-02-2019  *********************************** */
                " DELETE FROM rolepagedetail   \n" +
                "	WHERE PageID IN (  \n" +
                "		SELECT pageID FROM page_detail WHERE deletedAt IS NULL  \n" +
                "		AND menuName IN ('Part Standards','Part Standards Categories')  \n" +
                "		);  \n" +
                "  \n" +
                "	DELETE FROM userpagedetail   \n" +
                "	WHERE pageID IN (  \n" +
                "		SELECT pageID FROM page_detail WHERE deletedAt IS NULL  \n" +
                "		AND menuName IN ('Part Standards','Part Standards Categories')  \n" +
                "		);  \n" +
                "  \n" +
                "	DELETE FROM page_detail   \n" +
                "	WHERE menuName IN ('Part Standards','Part Standards Categories') ;  \n" +
                /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (291,'2.00','V1',' Component standard and class changes - KETAN '," + userid + ");"
            );
            break;
        case 291:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/26/2019  *********************************** */
                "ALTER TABLE component_sid_stock_history ADD COLUMN warehouseID INT(11) NULL AFTER binID;  \n" +
                "ALTER TABLE component_sid_stock_history ADD COLUMN deptWHID INT(11) NULL AFTER warehouseID;  \n" +
                /* **************************** New Script -> 02/26/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(        \n" +
                "		pWarehouseID int(11),      \n" +
                "		pGlobalSearchBinId int(11),      \n" +
                "        pGlobalSearchUIDId int(11),      \n" +
                "		pSearchBinId INT(11)        \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	SET @vGlobalSearchUIDBinId = NULL;   \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN    \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;     \n" +
                "    END IF;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS        \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount        \n" +
                "	FROM 	component_sid_stock         \n" +
                "	WHERE 	IFNULL(isDeleted,0) = 0      \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts     \n" +
                "	group by binID;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS         \n" +
                "	SELECT 	b.id, 	b.name, 	b.isPermanentBin, 	b.warehouseID, 	0 uidCount         \n" +
                "	FROM 	binmst b        \n" +
                "	WHERE 	b.id = IFNULL(pGlobalSearchBinId, b.id)          \n" +
                "    AND 	b.id = IFNULL(pSearchBinId, b.id)        \n" +
                "    AND 	b.id = IFNULL(@vGlobalSearchUIDBinId, b.id)      \n" +
                "    AND 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)        \n" +
                "	AND 	IFNULL(b.isActive,1) = 1         \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;        \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c        \n" +
                "	set t.uidCount = c.uidCount        \n" +
                "	where t.id = c.binID;        \n" +
                "  \n" +
                "	SELECT * FROM tempBinDet;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;        \n" +
                "	DROP TEMPORARY TABLE tempBinDet;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/26/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(         \n" +
                "	IN pTransferType VARCHAR(100),     					      \n" +
                "	IN pFromWHID INT(11),                                                              \n" +
                "	IN pToWHID INT(11),                                                              \n" +
                "	IN pFromBinID INT(11),                                                              \n" +
                "	IN pToBinID INT(11),  \n" +
                "    IN pUIDID INT(11)  \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	SET @vWhareClause = \" 1 = 1 \";  \n" +
                "    SET @vFromBinCount = 0;  \n" +
                "    SET @vToBinCount = 0;  \n" +
                "    SET @vFromUIDCount = 0;  \n" +
                "    SET @vToUIDCount = 0;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);  \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);  \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS        \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID   \n" +
                "									FROM 	component_sid_stock         \n" +
                "									WHERE \", @vWhareClause );     \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b    \n" +
                "	SET 	t.warehouseID = b.warehouseID    \n" +
                "	WHERE 	t.binid = b.id;  \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w  \n" +
                "	SET 	t.deptWHID = w.parentWHID  \n" +
                "	WHERE 	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	IF(pTransferType = \"Warehouse to Warehouse\") THEN  \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));  \n" +
                "        IF(pFromWHID IS NOT NULL) THEN  \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;  \n" +
                "		ELSEIF (pFromBinID IS NOT NULL) THEN  \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;  \n" +
                "		END IF;   \n" +
                "        SELECT COUNT(1) uidCount into @vFromUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;  \n" +
                "		SELECT COUNT(1) binCount INTO @vFromBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;  \n" +
                "  \n" +
                "		SELECT COUNT(1) uidCount INTO @vToUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = pToWHID;  \n" +
                "		SELECT COUNT(1) binCount INTO @vToBinCount FROM binmst b WHERE b.warehouseID = pToWHID;  \n" +
                "  \n" +
                "    ELSEIF(pTransferType = \"Bin to Bin\") THEN  \n" +
                "		UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;  \n" +
                "	ELSEIF(pTransferType = \"UID to Bin\") THEN  \n" +
                "		UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;  \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN  \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;  \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN  \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;  \n" +
                "	ELSE  \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history  \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,  \n" +
                "		refinvdate,					price,						isinStk,			isDeleted,			createdBy,  \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,  \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			  \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,  \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,  \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				  \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,  \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	  \n" +
                "        receiveMaterialType,		refCompSIDStockID)  \n" +
                "	SELECT   \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,  \n" +
                "		refinvdate,					price,						isinStk,			0,					1,  \n" +
                "		current_timestamp,			1,							current_timestamp,	NULL,				NULL,  \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			  \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,  \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,  \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				  \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,  \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	  \n" +
                "        receiveMaterialType,		id  \n" +
                "	FROM tempStockDetail;  \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 	pFromWHID fromWHID, 		pToWHID toWHID,   \n" +
                "			pFromBinID fromBinID, 			pToBinID toBinID, 			pUIDID uidID,  \n" +
                "			@vFromBinCount fromBinCount,	@vToBinCount toBinCount,	@vFromUIDCount fromUIDCount,  \n" +
                "            @vToUIDCount toUIDCount;   \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02/26/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (292,'2.00','V1',' Modify transfer stock procedure, Added wharehouseID and deptID in component_sid_stock_history - Dharmishtha '," + userid + ");"
            );
            break;
        case 292:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/26/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(         \n" +
                "	IN pTransferType VARCHAR(100),     					      \n" +
                "	IN pFromWHID INT(11),                                                              \n" +
                "	IN pToWHID INT(11),                                                              \n" +
                "	IN pFromBinID INT(11),                                                              \n" +
                "	IN pToBinID INT(11),  \n" +
                "    IN pUIDID INT(11)  \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	SET @vWhareClause = \" 1 = 1 \";  \n" +
                "    SET @vFromBinCount = 0;  \n" +
                "    SET @vToBinCount = 0;  \n" +
                "    SET @vFromUIDCount = 0;  \n" +
                "    SET @vToUIDCount = 0;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN  \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);  \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);  \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS        \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID   \n" +
                "									FROM 	component_sid_stock         \n" +
                "									WHERE \", @vWhareClause );     \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b    \n" +
                "	SET 	t.warehouseID = b.warehouseID    \n" +
                "	WHERE 	t.binid = b.id;  \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w  \n" +
                "	SET 	t.deptWHID = w.parentWHID  \n" +
                "	WHERE 	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	IF(pTransferType = \"Warehouse to Warehouse\") THEN  \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));  \n" +
                "        IF(pFromWHID IS NOT NULL) THEN  \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;  \n" +
                "		ELSEIF (pFromBinID IS NOT NULL) THEN  \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;  \n" +
                "		END IF;   \n" +
                "        SELECT COUNT(1) uidCount into @vFromUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;  \n" +
                "		SELECT COUNT(1) binCount INTO @vFromBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;  \n" +
                "  \n" +
                "		SELECT COUNT(1) uidCount INTO @vToUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = pToWHID;  \n" +
                "		SELECT COUNT(1) binCount INTO @vToBinCount FROM binmst b WHERE b.warehouseID = pToWHID;  \n" +
                "  \n" +
                "    ELSEIF(pTransferType = \"Bin to Bin\") THEN  \n" +
                "		UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;  \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromUIDCount FROM component_sid_stock c WHERE c.binid = pFromBinID;  \n" +
                "        SELECT COUNT(1) uidCount INTO @vToUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;  \n" +
                "	ELSEIF(pTransferType = \"UID to Bin\") THEN  \n" +
                "		select binid into @vFromBinID  from component_sid_stock where id = pUIDID;  \n" +
                "        UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;  \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID;  \n" +
                "        SELECT COUNT(1) uidCount INTO @vToUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;  \n" +
                "  \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN  \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;  \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN  \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;  \n" +
                "	ELSE  \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history  \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,  \n" +
                "		refinvdate,					price,						isinStk,			isDeleted,			createdBy,  \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,  \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			  \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,  \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,  \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				  \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,  \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	  \n" +
                "        receiveMaterialType,		refCompSIDStockID)  \n" +
                "	SELECT   \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,  \n" +
                "		refinvdate,					price,						isinStk,			0,					1,  \n" +
                "		current_timestamp,			1,							current_timestamp,	NULL,				NULL,  \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			  \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,  \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,  \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				  \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,  \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	  \n" +
                "        receiveMaterialType,		id  \n" +
                "	FROM tempStockDetail;  \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 	pFromWHID fromWHID, 		pToWHID toWHID,   \n" +
                "			pFromBinID fromBinID, 			pToBinID toBinID, 			pUIDID uidID,  \n" +
                "			@vFromBinCount fromBinCount,	@vToBinCount toBinCount,	@vFromUIDCount fromUIDCount,  \n" +
                "            @vToUIDCount toUIDCount;   \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02/26/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (293,'2.00','V1',' Modify transfer stock procedure - Dharmishtha '," + userid + ");"
            );
            break;
        case 293:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 26-02-2019  *********************************** */
                "Drop PROCEDURE if Exists `Sproc_Workorder_Manual_Entry`;  \n" +
                "CREATE PROCEDURE `Sproc_Workorder_Manual_Entry`(        \n" +
                "IN pwoID INT(11),      \n" +
                "IN popID INT(11),      \n" +
                "IN pwoOPID INT(11),      \n" +
                "IN pemployeeID INT(11),      \n" +
                "IN pequipmentID INT(11),      \n" +
                "IN pcheckinTime DATETIME,      \n" +
                "IN pisSetup TINYINT(1),      \n" +
                "IN pcheckoutTime DATETIME,      \n" +
                "IN pcheckoutSetupTime INT(11),      \n" +
                "IN ptotalTime INT,       \n" +
                "IN pproductionTime INT,      \n" +
                "IN pcreatedBy INT,      \n" +
                "IN premark TEXT,      \n" +
                "IN pwoentrytype VARCHAR(1),      \n" +
                "IN pworkstationID INT(11),      \n" +
                "IN ptotalQty INT(11),      \n" +
                "IN ppassQty INT(11),      \n" +
                "IN pobservedQty INT(11),      \n" +
                "IN preworkQty INT(11),      \n" +
                "IN pscrapQty INT(11),       \n" +
                "IN pissueQty INT(11),      \n" +
                "IN preprocessQty INT(11),      \n" +
                "IN pqtyControl BOOL,      \n" +
                "IN ptransID INT(11),      \n" +
                "IN ptransProdctionID INT(11)      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "    DECLARE tempreturnPending INT(11);          \n" +
                "	DECLARE tempOPProdQty INT(11);          \n" +
                "    DECLARE tempIssueQty INT(11);          \n" +
                "    DECLARE tempBuildQty INT(11);          \n" +
                "    DECLARE tempTillProcessScrapQty INT(11);         \n" +
                "    DECLARE tWoTransID INT(11);      \n" +
                "    DECLARE tempWoTransID INT(11);      \n" +
                "  \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "  BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;          \n" +
                "	START TRANSACTION;  \n" +
                "     DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;       \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID      \n" +
                "	(      \n" +
                "	     wotransID INT(11)      \n" +
                "	);      \n" +
                "     DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;       \n" +
                "	 CREATE TEMPORARY TABLE temp_operation_error      \n" +
                "	(      \n" +
                "	     errorText NVARCHAR(2000)      \n" +
                "	);      \n" +
                "  \n" +
                "    IF(pqtyControl = TRUE)THEN      \n" +
                "    -- call sp for check stock validation --      \n" +
                "     SET SQL_SAFE_UPDATES=0;      \n" +
                "	 CALL Sproc_GetopReadyStock(pwoID,popID);       \n" +
                "     SET SQL_SAFE_UPDATES=1;      \n" +
                "  \n" +
                "	 SELECT returnPending,OPProdQty,IssueQty,BuildQty,TillProcessScrapQty       \n" +
                "     INTO tempreturnPending,tempOPProdQty,tempIssueQty,tempBuildQty,tempTillProcessScrapQty  FROM temp_Sproc_GetopReadyStock;      \n" +
                "  \n" +
                "     IF(ptotalQty > tempreturnPending || (tempOPProdQty + ptotalQty) > tempBuildQty - tempTillProcessScrapQty)THEN      \n" +
                "         -- create temporary table for error      \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (\"true\");      \n" +
                "     ELSE      \n" +
                "      -- UPDATE PRODUCTION DETAIL --      \n" +
                "	  /*If(ptransID is not null)Then      \n" +
                "        update workorder_trans set woID=pwoID,opID=popID,woOPID=pwoOPID,issueQty=pissueQty,checkinEmployeeID=pemployeeID,      \n" +
                "		isSetup=pisSetup,workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,      \n" +
                "        checkoutTime=pcheckoutTime,checkoutEmployeeID=pemployeeID,totalTime=ptotalTime,productionTime=pproductionTime,      \n" +
                "        checkoutSetupTime=pcheckoutSetupTime,remark=premark,woentrytype=pwoentrytype where woTransID=ptransID;      \n" +
                "      else */      \n" +
                "	  INSERT INTO workorder_trans(woID,opID,woOPID,issueQty,checkinEmployeeID,isSetup,workstationID,equipmentID,      \n" +
                "      checkinTime,checkoutTime,checkoutEmployeeID,totalTime,productionTime,checkoutSetupTime,remark,woentrytype,isDeleted,createdBy)      \n" +
                "      VALUES(pwoID,popID,pwoOPID,pissueQty,pemployeeID,pisSetup,pworkstationID,pequipmentID,      \n" +
                "      pcheckinTime,pcheckoutTime,pemployeeID,ptotalTime,pproductionTime,pcheckoutSetupTime,premark,pwoentrytype,0,1);      \n" +
                "  \n" +
                "      SET tempWoTransID = LAST_INSERT_ID();      \n" +
                "  \n" +
                "       DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;       \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID      \n" +
                "	(      \n" +
                "	     wotransID INT(11)      \n" +
                "	);      \n" +
                "      INSERT INTO temp_workordertransID (wotransID) VALUES(tempWoTransID);      \n" +
                "  \n" +
                "  \n" +
                "    /*  if(ptransID is not null && ptransProdctionID is not null)then      \n" +
                "      update workorder_trans_production set employeeID=pemployeeID,totalQty=ptotalQty,passQty=ppassQty,reprocessQty=preprocessQty,      \n" +
                "      observedQty=pobservedQty,reworkQty=preworkQty,scrapQty=pscrapQty where woTransID=ptransID and woTransprodID=ptransProdctionID;      \n" +
                "  \n" +
                "      else      \n" +
                "      */      \n" +
                "        INSERT INTO workorder_trans_production(woTransID,employeeID,totalQty,passQty,reprocessQty,observedQty,reworkQty,scrapQty,createdBy)      \n" +
                "        VALUES(tempWoTransID,pemployeeID,ptotalQty,ppassQty,preprocessQty,pobservedQty,preworkQty,pscrapQty,1);      \n" +
                "  \n" +
                "     /*END IF;      \n" +
                "    END If; */      \n" +
                "  \n" +
                "   END IF;      \n" +
                "  \n" +
                "  ELSE      \n" +
                "  \n" +
                "  /* If(ptransID is not null)Then      \n" +
                "        update workorder_trans set woID=pwoID,opID=popID,woOPID=pwoOPID,issueQty=pissueQty,checkinEmployeeID=pemployeeID,      \n" +
                "		isSetup=pisSetup,workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,      \n" +
                "        checkoutTime=pcheckoutTime,checkoutEmployeeID=pemployeeID,totalTime=ptotalTime,productionTime=pproductionTime,      \n" +
                "        checkoutSetupTime=pcheckoutSetupTime,remark=premark,woentrytype=pwoentrytype where woTransID=ptransID;      \n" +
                "  \n" +
                "      ElSE */      \n" +
                "  \n" +
                "	  INSERT INTO workorder_trans(woID,opID,woOPID,issueQty,checkinEmployeeID,isSetup,workstationID,equipmentID,      \n" +
                "      checkinTime,checkoutTime,checkoutEmployeeID,totalTime,productionTime,checkoutSetupTime,remark,woentrytype,isDeleted,createdBy)      \n" +
                "      VALUES(pwoID,popID,pwoOPID,pissueQty,pemployeeID,pisSetup,pworkstationID,pequipmentID,      \n" +
                "      pcheckinTime,pcheckoutTime,pemployeeID,ptotalTime,pproductionTime,pcheckoutSetupTime,premark,pwoentrytype,0,1);      \n" +
                "  \n" +
                "      SET tWoTransID = LAST_INSERT_ID();      \n" +
                "  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS  temp_workordertransID;       \n" +
                "	  CREATE TEMPORARY TABLE temp_workordertransID      \n" +
                "	(      \n" +
                "	     wotransID INT(11)      \n" +
                "	);      \n" +
                "      INSERT INTO temp_workordertransID (wotransID) VALUES (tWoTransID);      \n" +
                "  \n" +
                "     /* if(ptransID is not null)then      \n" +
                "       update workorder_trans_empinout set woID=pwoID,opID=popID,woOPID=pwoOPID,employeeID=pemployeeID,      \n" +
                "       workstationID=pworkstationID,equipmentID=pequipmentID,checkinTime=pcheckinTime,      \n" +
                "       checkoutTime=pcheckoutTime,totalTime=ptotalTime,productionTime=pproductionTime,checkoutSetupTime=pcheckoutSetupTime      \n" +
                "       where woTransID=ptransID;      \n" +
                "  \n" +
                "       else */      \n" +
                "      INSERT INTO workorder_trans_empinout(woTransID,woID,opID,woOPID,employeeID,workstationID,equipmentID,      \n" +
                "      checkinTime,checkoutTime,totalTime,productionTime,checkoutSetupTime,createdBy)      \n" +
                "      VALUES(tWoTransID,pwoID,popID,pwoOPID,pemployeeID,pworkstationID,pequipmentID,      \n" +
                "      pcheckinTime,pcheckoutTime,ptotalTime,pproductionTime,pcheckoutSetupTime,1);      \n" +
                "  \n" +
                "    /* END IF;      \n" +
                "	END IF; */      \n" +
                "  \n" +
                " END IF;      \n" +
                "	 SELECT errorText FROM temp_operation_error;      \n" +
                "     SELECT wotransID FROM temp_workordertransID;      \n" +
                "   COMMIT;      \n" +
                "	END;  \n" +

                "Alter table standard_class drop column priority;  \n" +
                //  /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (294,'2.00','V1',' change in manual entry sp -Mona'," + userid + ");"
            );
            break;
        case 294:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2019  *********************************** */
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchValueStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchPackageStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchToleranceStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchTempratureStep` TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchPowerStep` TINYINT(1);  \n" +
                /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllUniqueSubAssemblyByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllUniqueSubAssemblyByPartID`(          \n" +
                "	IN pAssemblyID INT                        \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "  \n" +
                "	SELECT DISTINCT rfa.id rfqAssyID,          \n" +
                "		psa.prPerPartID,           \n" +
                "		co.PIDCode AS PIDCode           \n" +
                "	FROM part_sub_assy_relationship psa          \n" +
                "	INNER JOIN component co ON psa.prPerPartId = co.id           \n" +
                "	LEFT OUTER JOIN rfq_assemblies rfa ON psa.prPerPartID = rfa.partID          \n" +
                "	INNER JOIN rfq_assemblies rfb ON psa.partId = rfb.partID          \n" +
                "	WHERE co.deletedAt IS NULL AND rfb.id = pAssemblyID AND (rfa.id = pAssemblyID OR rfa.id IS NULL) #AND rfa.id = pAssemblyID          \n" +
                "	ORDER BY psa.level;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (295,'2.00','V1',' Task 5422: BOM Validation For Component Attribute - Jignesh K '," + userid + ");"
            );
            break;
        case 295:
            allDbChangesArray.push(
                /* **************************** New Script ->  27-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_logical_group` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_logical_group`(                                                              \n" +
                "	IN tableName VARCHAR(255),                                                              \n" +
                "	IN IDs LONGTEXT,                                                              \n" +
                "	IN deletedBy INT,                                                              \n" +
                "	IN entityID VARCHAR(255),                                                              \n" +
                "	IN refrenceIDs LONGTEXT                                                              \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;       \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentLogicalGroup as                                                              \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                              \n" +
                "			FROM                                                               \n" +
                "			(                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_logicalgroup_detail\" else \"\" end as msg       \n" +
                "					FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID IN (',IDs,') LIMIT 1)      \n" +
                "			) q');                                                              \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                              \n" +
                "		EXECUTE stmt;                                                              \n" +
                "		IF (SELECT TotalCount FROM tempcomponentLogicalGroup)=0 THEN                                                              \n" +
                "			START TRANSACTION;      \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update component_logicalgroup set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                              \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                              \n" +
                "				EXECUTE stmt1;                                                                  \n" +
                "			SELECT * FROM tempcomponentLogicalGroup;                                                      \n" +
                "		ELSE                                                              \n" +
                "			SELECT * FROM tempcomponentLogicalGroup;                                                              \n" +
                "  \n" +
                "		END IF;                                                              \n" +
                "		DROP TABLE tempcomponentLogicalGroup;         \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveECOCategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveECOCategory`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "		SET @SQL = NULL;    \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT *,    \n" +
                "        (CASE WHEN (`category` = 1) THEN 'Work Order' WHEN (`category` = 2) THEN 'RFQ Terms & Condition' ELSE '' END) AS `reqCategory`      \n" +
                "		FROM eco_type_category    \n" +
                "		WHERE deletedAt IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetriveECOTypeValues` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveECOTypeValues`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		 SELECT `etv`.`ecoTypeValID`, `etv`.`ecoTypeCatID`, `etv`.`name`,`etv`.`noteRequired`, `etv`.`displayOrder`,  \n" +
                "			`etv`.`isDeleted`, `etv`.`createdBy`, `etv`.`updatedBy`,`etv`.`deletedBy`,   \n" +
                "			`etv`.`createdAt`, `etv`.`updatedAt`,`etv`.`deletedAt`,`etc`.`name`  AS `ecoTypeCatName`,`etc`.`category`,  \n" +
                "			(CASE WHEN (`etv`.`noteRequired` = 0) THEN 'NO'  \n" +
                "				WHEN (`etv`.`noteRequired` = 1) THEN 'Yes' ELSE '' END) AS `noteRequiredConvertedValue`,  \n" +
                "			(CASE WHEN (`etc`.`category` = 1) THEN 'Work Order'  \n" +
                "				WHEN (`etc`.`category` = 2) THEN 'RFQ Terms & Condition' ELSE '' END) AS `categoryConvertedValue`  \n" +
                "		FROM `eco_type_values` AS `etv`   \n" +
                "			LEFT OUTER JOIN `eco_type_category` AS `etc` ON `etv`.`ecoTypeCatID` = `etc`.`ecoTypeCatID`   \n" +
                "			AND `etc`.`deletedAt` IS NULL   \n" +
                "		WHERE `etv`.`deletedAt` IS NULL   \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                "ALTER TABLE eco_type_category CHANGE `name` `name` VARCHAR(1000);  \n" +
                "ALTER TABLE eco_type_values CHANGE `name` `name` VARCHAR(1000);  \n" +
                /* **************************** Add Script Version -> 27-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (296,'2.00','V1','Change sp and alter tabel eco_type_category and eco_type_values - Deepshikha'," + userid + ");"
            );
            break;
        case 296:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-02-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfAmountByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfAmountByCostingType`(        \n" +
                "	prfqAssyQuoteID int(11),        \n" +
                "    pRFQAssyID int(11),  \n" +
                "    pcostingType varchar(20)  \n" +
                ") RETURNS decimal(18,6)  \n" +
                "DETERMINISTIC  \n" +
                "READS SQL DATA  \n" +
                "BEGIN        \n" +
                "			return (select (  \n" +
                "           # (case when pcostingType = 'labor' then qo.laborCost   \n" +
                "          #  when pcostingType = 'material' then qo.materialCost   \n" +
                "           # when pcostingType = 'ad-hoc' then qo.materialCost   \n" +
                "           # end)   \n" +
                "            qo.unitPrice + sum(amount)) from rfq_assy_quotations_additionalcost qac  \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null  \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID  \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)  \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (297,'2.00','V1','fun_getSumOfAmountByCostingType changes  - shirish'," + userid + ");"
            );
            break;
        case 297:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/27/2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(           \n" +
                "	IN pTransferType VARCHAR(100),     					        \n" +
                "	IN pFromWHID INT(11),                                                                \n" +
                "	IN pToWHID INT(11),                                                                \n" +
                "	IN pFromBinID INT(11),                                                                \n" +
                "	IN pToBinID INT(11),    \n" +
                "    IN pUIDID INT(11)    \n" +
                ")  \n" +
                "BEGIN           \n" +
                "	SET @vWhareClause = \" 1 = 1 \";    \n" +
                "    SET @vFromBinID = 0;  \n" +
                "    SET @vFromWHID = 0;  \n" +
                "	SET @vToWHID = 0;   \n" +
                "	SET @vFromWHBinCount = 0; 	  \n" +
                "    SET @vToWHBinCount = 0;	  \n" +
                "	SET @vFromWHUIDCount = 0; 	  \n" +
                "	SET @vToWHUIDCount  = 0;  \n" +
                "	SET @vFromBinUIDCount = 0;  \n" +
                "	SET @vToBinUIDCount = 0;  \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN    \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);    \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN        \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);    \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN    \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS          \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID     \n" +
                "									FROM 	component_sid_stock           \n" +
                "									WHERE \", @vWhareClause );       \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b      \n" +
                "	SET 	t.warehouseID = b.warehouseID      \n" +
                "	WHERE 	t.binid = b.id;    \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w    \n" +
                "	SET 	t.deptWHID = w.parentWHID    \n" +
                "	WHERE 	t.warehouseID = w.id;    \n" +
                "  \n" +
                "	IF(pTransferType = \"Warehouse to Warehouse\") THEN    \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));    \n" +
                "        SET @vToWHID = pToWHID;  \n" +
                "        IF(pFromWHID IS NOT NULL) THEN    \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;    \n" +
                "		ELSEIF (pFromBinID IS NOT NULL) THEN    \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;    \n" +
                "		END IF;     \n" +
                "    ELSEIF(pTransferType = \"Bin to Bin\") THEN    \n" +
                "		SET @vFromBinID = pFromBinID;  \n" +
                "		UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;    \n" +
                "	ELSEIF(pTransferType = \"UID to Bin\") THEN    \n" +
                "		SELECT binid INTO @vFromBinID FROM component_sid_stock WHERE id = pUIDID;    \n" +
                "        UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;    \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN    \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;    \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN    \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;    \n" +
                "	ELSE    \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;    \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history    \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,    \n" +
                "		refinvdate,					price,						isinStk,			isDeleted,			createdBy,    \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,    \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			    \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,    \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,    \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				    \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,    \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	    \n" +
                "        receiveMaterialType,		refCompSIDStockID)    \n" +
                "	SELECT     \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,    \n" +
                "		refinvdate,					price,						isinStk,			0,					1,    \n" +
                "		current_timestamp,			1,							current_timestamp,	NULL,				NULL,    \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			    \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,    \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,    \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				    \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,    \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	    \n" +
                "        receiveMaterialType,		id    \n" +
                "	FROM tempStockDetail;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTransferType = \"Bin to Bin\" OR pTransferType = \"UID to Bin\") THEN    \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = @vFromBinID));    \n" +
                "        SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pToBinID));  \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID;    \n" +
                "        SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;    \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN  \n" +
                "		SELECT COUNT(1) uidCount into @vFromWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;    \n" +
                "		SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;    \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN  \n" +
                "		SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID =  @vToWHID;    \n" +
                "		SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b WHERE b.warehouseID =  @vToWHID;    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 		pFromWHID fromWHID, 				pToWHID toWHID,     \n" +
                "			pFromBinID fromBinID, 				pToBinID toBinID, 					pUIDID uidID,    \n" +
                "			@vFromWHBinCount fromWHBinCount,	@vToWHBinCount toWHBinCount,		  \n" +
                "            @vFromWHUIDCount fromWHUIDCount,	@vToWHUIDCount toWHUIDCount,		  \n" +
                "            @vFromBinUIDCount fromBinUIDCount,	@vToBinUIDCount toBinUIDCount;     \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02/27/2019  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (298,'2.00','V1',' Modified procedure to return counts and refactor code - Dharmishtha '," + userid + ");"
            );
            break;
        case 298:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-02-2019  *********************************** */
                "update component set isCustom =false where isCustom is null;  \n" +
                "update component set isCPN =false where isCPN is null;  \n" +
                "update component set rfqOnly =false where rfqOnly is null;  \n" +
                "update component set isGoodPart =true where isGoodPart is null;  \n" +
                "update component set isLeadFree =true where isLeadFree is null;  \n" +
                "update component set matingPartRquired =false where matingPartRquired is null;  \n" +
                "update component set driverToolRequired =false where driverToolRequired is null;  \n" +
                "update component set restrictUSEwithpermission =false where restrictUSEwithpermission is null;  \n" +
                "update component set bomLock =false where bomLock is null;  \n" +
                "update component set restrictUsePermanently =false where restrictUsePermanently is null;  \n" +
                "update component set pickupPadRequired =false where pickupPadRequired is null;  \n" +
                "update component set functionalTestingRequired =false where functionalTestingRequired is null;  \n" +
                "update component set programingRequired =false where programingRequired is null;  \n" +
                "update component set functionalTypePartRequired =false where functionalTypePartRequired is null;  \n" +
                "update component set mountingTypePartRequired =false where mountingTypePartRequired is null;  \n" +
                "ALTER TABLE `component`   \n" +
                "CHANGE COLUMN `isGoodPart` `isGoodPart` TINYINT(1) NOT NULL DEFAULT '1' ,  \n" +
                "CHANGE COLUMN `isLeadFree` `isLeadFree` TINYINT(4) NOT NULL DEFAULT '1' ,  \n" +
                "CHANGE COLUMN `isCustom` `isCustom` TINYINT(4) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `bomLock` `bomLock` TINYINT(4) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `restrictUSEwithpermission` `restrictUSEwithpermission` TINYINT(4) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `restrictUsePermanently` `restrictUsePermanently` TINYINT(4) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `rfqOnly` `rfqOnly` TINYINT(4) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `isCPN` `isCPN` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `matingPartRquired` `matingPartRquired` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `driverToolRequired` `driverToolRequired` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `pickupPadRequired` `pickupPadRequired` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `programingRequired` `programingRequired` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `functionalTestingRequired` `functionalTestingRequired` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `functionalTypePartRequired` `functionalTypePartRequired` TINYINT(1) NOT NULL DEFAULT '0' ,  \n" +
                "CHANGE COLUMN `mountingTypePartRequired` `mountingTypePartRequired` TINYINT(1) NOT NULL DEFAULT '0' ;  \n" +
                /* **************************** Add Script Version -> 27-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (299,'2.00','V1','boolean fields updated and make required in compoennt table - Ashish'," + userid + ");"
            );
            break;
        case 299:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-02-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfDaysByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfDaysByCostingType`(          \n" +
                "	prfqAssyQuoteID int(11),          \n" +
                "    pRFQAssyID int(11),    \n" +
                "    pcostingType varchar(20)    \n" +
                ") RETURNS decimal(18,6)  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN          \n" +
                "			return (select (  \n" +
                "            (case when pcostingType = 'labor' then qo.laborDays     \n" +
                "            when pcostingType = 'material' then qo.days     \n" +
                "            when pcostingType = 'ad-hoc' then 0     \n" +
                "            end)  \n" +
                "            + sum(qac.days)) from rfq_assy_quotations_additionalcost qac    \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null    \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID    \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)    \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType);    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-02-2019 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfAmountByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfAmountByCostingType`(          \n" +
                "	prfqAssyQuoteID int(11),          \n" +
                "    pRFQAssyID int(11),    \n" +
                "    pcostingType varchar(20)    \n" +
                ") RETURNS decimal(18,6)  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN          \n" +
                "			return (select (    \n" +
                "            (case when pcostingType = 'labor' then qo.laborCost     \n" +
                "            when pcostingType = 'material' then qo.materialCost     \n" +
                "            when pcostingType = 'ad-hoc' then 0     \n" +
                "            end)     \n" +
                "            + sum(amount)) from rfq_assy_quotations_additionalcost qac    \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null    \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID    \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)    \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType);    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (300,'2.00','V1','fun_getSumOfAmountByCostingType changes  - shirish'," + userid + ");"
            );
            break;
        case 300:
            allDbChangesArray.push(
                /* **************************** New Script -> 02/28/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(             \n" +
                "	IN pTransferType VARCHAR(100),     					          \n" +
                "	IN pFromWHID INT(11),                                                                  \n" +
                "	IN pToWHID INT(11),                                                                  \n" +
                "	IN pFromBinID INT(11),                                                                  \n" +
                "	IN pToBinID INT(11),      \n" +
                "    IN pUIDID INT(11)      \n" +
                ")  \n" +
                "BEGIN             \n" +
                "	SET @vWhareClause = \" 1 = 1 \";      \n" +
                "    SET @vFromBinID = 0;    \n" +
                "    SET @vFromWHID = 0;    \n" +
                "	SET @vToWHID = 0;     \n" +
                "	SET @vFromWHBinCount = 0; 	    \n" +
                "    SET @vToWHBinCount = 0;	    \n" +
                "	SET @vFromWHUIDCount = 0; 	    \n" +
                "	SET @vToWHUIDCount  = 0;    \n" +
                "	SET @vFromBinUIDCount = 0;     \n" +
                "	SET @vToBinUIDCount = 0;    \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);      \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN          \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);      \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS            \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID       \n" +
                "									FROM 	component_sid_stock             \n" +
                "									WHERE \", @vWhareClause );         \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b        \n" +
                "	SET 	t.warehouseID = b.warehouseID        \n" +
                "	WHERE 	t.binid = b.id;      \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w      \n" +
                "	SET 	t.deptWHID = w.parentWHID      \n" +
                "	WHERE 	t.warehouseID = w.id;      \n" +
                "  \n" +
                "	IF(pTransferType = \"Warehouse to Warehouse\") THEN      \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));      \n" +
                "        SET @vToWHID = pToWHID;    \n" +
                "        IF(pFromWHID IS NOT NULL) THEN      \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;      \n" +
                "		ELSEIF (pFromBinID IS NOT NULL) THEN      \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;      \n" +
                "		END IF;       \n" +
                "    ELSEIF(pTransferType = \"Bin to Bin\") THEN      \n" +
                "		SET @vFromBinID = pFromBinID;    \n" +
                "		UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;      \n" +
                "	ELSEIF(pTransferType = \"UID to Bin\") THEN      \n" +
                "		SELECT binid INTO @vFromBinID FROM component_sid_stock WHERE id = pUIDID;      \n" +
                "        UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;      \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSE      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history      \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					price,						isinStk,			isDeleted,			createdBy,      \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,      \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		refCompSIDStockID)      \n" +
                "	SELECT       \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					price,						isinStk,			0,					1,      \n" +
                "		current_timestamp,			1,							current_timestamp,	NULL,				NULL,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			refCPNID,      \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		id      \n" +
                "	FROM tempStockDetail;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTransferType = \"Bin to Bin\" OR pTransferType = \"UID to Bin\") THEN      \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = @vFromBinID));      \n" +
                "        SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pToBinID));    \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID;      \n" +
                "        SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount into @vFromWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID =  @vToWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b WHERE b.warehouseID =  @vToWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 		pFromWHID fromWHID, 				pToWHID toWHID,       \n" +
                "			pFromBinID fromBinID, 				pToBinID toBinID, 					pUIDID uidID,      \n" +
                "			@vFromWHBinCount fromWHBinCount,	@vToWHBinCount toWHBinCount,		    \n" +
                "            @vFromWHUIDCount fromWHUIDCount,	@vToWHUIDCount toWHUIDCount,		    \n" +
                "            @vFromBinUIDCount fromBinUIDCount,	@vToBinUIDCount toBinUIDCount;       \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/28/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(               \n" +
                "	pDeptID INT(11),      \n" +
                "    pGlobalSearchWHId INT(11),    \n" +
                "	pGlobalSearchBinId int(11),      \n" +
                "	pGlobalSearchUIDId int(11),      \n" +
                "    pSearchWHId INT(11),  \n" +
                "    pSearchString varchar(100)  \n" +
                ")  \n" +
                "BEGIN                 \n" +
                "  \n" +
                "	set @vGlobalSearchBinWHId = NULL;    \n" +
                "    set @vGlobalSearchUIDBinId = NULL;    \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN    \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;     \n" +
                "         SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = @vGlobalSearchUIDBinId;     \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF(pGlobalSearchBinId IS NOT NULL) THEN    \n" +
                "		 SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = pGlobalSearchBinId;     \n" +
                "    END IF;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS     \n" +
                "	SELECT 	w.id, w.name, w.isPermanentWH, w.parentWHID, 0 binCount, 0 uidCount       \n" +
                "	FROM 	warehousemst w       \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)      \n" +
                "	AND 	w.id = IFNULL(pSearchWHId, w.id)   \n" +
                "	AND 	w.id = IFNULL(@vGlobalSearchBinWHId, w.id)     \n" +
                "	AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))        \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1         \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0          \n" +
                "	AND 	IFNULL(w.isActive,1) = 1  \n" +
                "    AND 	w.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS            \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID          \n" +
                "	FROM 	binmst b          \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)         \n" +
                "    AND		b.id = IFNULL(pGlobalSearchBinId, b.id)   		-- Need to remove if show all counts    \n" +
                "    AND		b.id = IFNULL(@vGlobalSearchUIDBinId, id) 		-- Need to remove if show all counts      \n" +
                "	AND 	IFNULL(b.isActive,1) = 1           \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS          \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount          \n" +
                "	FROM 	component_sid_stock           \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)      \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts    \n" +
                "	AND		IFNULL(isDeleted,0) = 0          \n" +
                "	GROUP BY binID;      \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c       \n" +
                "	SET    	t.uidCount = c.uidCount      \n" +
                "	WHERE   t.id = c.binID;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS           \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount          \n" +
                "	FROM 	tempBinDet           \n" +
                "	GROUP BY warehouseID;       \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c       \n" +
                "	SET   	t.binCount = c.binCount,      \n" +
                "			t.uidCount = c.uidCount      \n" +
                "	WHERE  	t.id = c.warehouseID;      \n" +
                "  \n" +
                "    SELECT * FROM tempWarehouseDet;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;          \n" +
                "	DROP TEMPORARY TABLE tempBinDet;          \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;          \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;          \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** New Script -> 02/28/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(          \n" +
                "		pWarehouseID int(11),        \n" +
                "		pGlobalSearchBinId int(11),        \n" +
                "        pGlobalSearchUIDId int(11),        \n" +
                "		pSearchBinId INT(11),  \n" +
                "		pSearchString varchar(100)     \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	SET @vGlobalSearchUIDBinId = NULL;     \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN      \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;       \n" +
                "    END IF;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS          \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount          \n" +
                "	FROM 	component_sid_stock           \n" +
                "	WHERE 	IFNULL(isDeleted,0) = 0        \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts       \n" +
                "	group by binID;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS           \n" +
                "	SELECT 	b.id, 	b.name, 	b.isPermanentBin, 	b.warehouseID, 	0 uidCount           \n" +
                "	FROM 	binmst b          \n" +
                "	WHERE 	b.id = IFNULL(pGlobalSearchBinId, b.id)            \n" +
                "    AND 	b.id = IFNULL(pSearchBinId, b.id)          \n" +
                "    AND 	b.id = IFNULL(@vGlobalSearchUIDBinId, b.id)        \n" +
                "    AND 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)          \n" +
                "	AND 	IFNULL(b.isActive,1) = 1           \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0  \n" +
                "	AND 	b.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');  \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c          \n" +
                "	set t.uidCount = c.uidCount          \n" +
                "	where t.id = c.binID;          \n" +
                "  \n" +
                "	SELECT * FROM tempBinDet;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;          \n" +
                "	DROP TEMPORARY TABLE tempBinDet;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02/28/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(      \n" +
                "	pBinID int(11),      \n" +
                "    pGlobalSearchUIDId int(11),   \n" +
                "	pSearchUIDId INT(11),  \n" +
                "	pSearchString varchar(100)   \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "	SELECT 	css.id,					css.scanlabel,		css.pkgQty,		css.price, 		css.uid,       \n" +
                "            c.PIDCode, 				c.mfgcodeID,        c.mfgPN,  		mfg.mfgCode, 	ro.rohsIcon,       \n" +
                "            ro.name AS rohsName,	css.nickName,		css.binID                               \n" +
                "	FROM component_sid_stock css                              \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                             \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                              \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                     \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)          \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)          \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )          \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0  \n" +
                "	AND 	css.uid like CONCAT('%', IFNULL(pSearchString,'') ,'%');        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02/28/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (301,'2.00','V1',' Modified sproc for serach functionality Sproc_retrive_warehouse_to_transfer, Sproc_retrive_bin_to_transfer, Sproc_retrive_UID_to_transfer  - Dharmishtha '," + userid + ");"
            );
            break;
        case 301:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllUniqueSubAssemblyByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllUniqueSubAssemblyByPartID`(            \n" +
                "	IN pAssemblyID INT                          \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "  \n" +
                "	SELECT DISTINCT rfb.id rfqAssyID,            \n" +
                "		psa.prPerPartID,             \n" +
                "		co.PIDCode AS PIDCode             \n" +
                "	FROM part_sub_assy_relationship psa            \n" +
                "	INNER JOIN component co ON psa.prPerPartId = co.id             \n" +
                "	LEFT OUTER JOIN rfq_assemblies rfa ON psa.prPerPartID = rfa.partID            \n" +
                "	INNER JOIN rfq_assemblies rfb ON psa.partId = rfb.partID            \n" +
                "	WHERE co.deletedAt IS NULL AND rfb.id = pAssemblyID #AND (rfa.id = pAssemblyID OR rfa.id IS NULL) #AND rfa.id = pAssemblyID            \n" +
                "	ORDER BY psa.level;            \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                              \n" +
                "	IN ppartID INT                      \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                      \n" +
                "	SELECT 	a.id,           \n" +
                "		a.lineID,           \n" +
                "		a.qpa,           \n" +
                "		a.refDesig,           \n" +
                "		a.custPN,          \n" +
                "		a.custPNID,                                   \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                                  \n" +
                "		a.description,          \n" +
                "		a.level,          \n" +
                "		a.numOfPosition,          \n" +
                "		a.customerRev,           \n" +
                "		a.customerDescription,           \n" +
                "		a.customerPartDesc,                                   \n" +
                "		CONCAT(part.partTypeName) partclassID,           \n" +
                "		a.isInstall,           \n" +
                "		a.isPurchase,           \n" +
                "		a.leadQty,           \n" +
                "		a.attritionRate,          \n" +
                "		a.valueAddedCost,          \n" +
                "		a.refRFQLineItemID,                        \n" +
                "		a.dnpQty,           \n" +
                "		a.dnpDesig,           \n" +
                "		a.qpaDesignatorStep,          \n" +
                "		a.duplicateCPNStep,        \n" +
                "		a.requireMountingTypeStep,        \n" +
                "		a.requireFunctionalTypeStep,        \n" +
                "		a.qpaDesignatorColorPriority,          \n" +
                "		a.mergeLines,          \n" +
                "		a.lineMergeStep,          \n" +
                "		a.isBuyDNPQty                        \n" +
                "	FROM rfq_lineitems a                        \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                        \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0             \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                                  \n" +
                "  \n" +
                "	SELECT 	b.id,          \n" +
                "		b.lineID,           \n" +
                "		b.qpa,           \n" +
                "		b.refDesig,                               \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                              \n" +
                "		a.mfgCodeID,           \n" +
                "		a.mfgPN,           \n" +
                "		a.mfgPNID,                                  \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                              \n" +
                "		a.distMfgCodeID,           \n" +
                "		a.distPN,           \n" +
                "		a.distMfgPNID,                                   \n" +
                "		b.custPN,           \n" +
                "		b.custPNID,           \n" +
                "		b.uomID,           \n" +
                "		a.description descriptionAlternate,           \n" +
                "		b.description,           \n" +
                "		b.level,           \n" +
                "		b.numOfPosition,           \n" +
                "		b.customerRev,           \n" +
                "		b.customerDescription,           \n" +
                "		b.customerPartDesc,                            \n" +
                "		b.partclassID,           \n" +
                "		b.isInstall,           \n" +
                "		b.isPurchase,           \n" +
                "		b.leadQty,           \n" +
                "		b.attritionRate,           \n" +
                "		b.valueAddedCost,           \n" +
                "		b.refRFQLineItemID,                                   \n" +
                "		b.dnpQty,           \n" +
                "		b.dnpDesig,           \n" +
                "		a.id AS rfqAlternatePartID,           \n" +
                "		b.qpaDesignatorStep,          \n" +
                "		b.qpaDesignatorColorPriority,           \n" +
                "		b.duplicateCPNStep,    \n" +
                "		b.requireMountingTypeStep,    \n" +
                "		b.requireFunctionalTypeStep,        \n" +
                "		b.isBuyDNPQty,                        \n" +
                "		a.mfgVerificationStep,           \n" +
                "		a.mfgDistMappingStep,          \n" +
                "		a.mfgCodeStep,          \n" +
                "		a.customerApproval,          \n" +
                "		a.org_mfgCode,           \n" +
                "		a.org_mfgPN,                                \n" +
                "		a.org_distributor,           \n" +
                "		a.org_distPN,                                \n" +
                "		a.distVerificationStep,           \n" +
                "		a.distCodeStep,           \n" +
                "		a.getMFGPNStep,           \n" +
                "		a.obsoletePartStep,          \n" +
                "		a.mfgGoodPartMappingStep,          \n" +
                "		a.mfgPNStep,           \n" +
                "		a.distPNStep,                              \n" +
                "		a.badMfgPN,           \n" +
                "		a.distGoodPartMappingStep,           \n" +
                "		a.nonRohsStep,           \n" +
                "		a.oneRohsComponentStep,           \n" +
                "		a.epoxyStep,           \n" +
                "		a.invalidConnectorTypeStep,          \n" +
                "		a.duplicateMPNInSameLineStep,        \n" +
                "		a.mismatchMountingTypeStep,        \n" +
                "		a.mismatchFunctionalCategoryStep,           \n" +
                "		a.restrictUseWithPermissionStep,        \n" +
                "		a.restrictUsePermanentlyStep,          \n" +
                "		a.userData1,          \n" +
                "		a.userData2,      \n" +
                "		a.userData3,      \n" +
                "		a.userData4,      \n" +
                "		a.userData5,      \n" +
                "		a.userData6,      \n" +
                "		a.userData7,      \n" +
                "		a.userData8,      \n" +
                "		a.userData9,      \n" +
                "		a.userData10,      \n" +
                "		a.pickupPadRequiredStep,    \n" +
                "		a.matingPartRquiredStep,    \n" +
                "		a.driverToolsRequiredStep,    \n" +
                "		a.functionalTestingRequiredStep,   \n" +
                "		a.mismatchValueStep,  \n" +
                "		a.mismatchPackageStep,  \n" +
                "		a.mismatchPowerStep,  \n" +
                "		a.mismatchToleranceStep,  \n" +
                "		a.mismatchTempratureStep,  \n" +
                "		CONCAT(part.partTypeName) parttypeID,          \n" +
                "		CONCAT(mount.name) mountingtypeID,           \n" +
                "		CONCAT(cat.categoryname) partcategoryID,          \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                            \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                          \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                        \n" +
                "		CASE WHEN                         \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                        \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                        \n" +
                "			THEN 1 ELSE 0 END isObsolete,                        \n" +
                "		co.mfgPNDescription,          \n" +
                "		co.pitch,        \n" +
                "		co.partPackage,        \n" +
                "		co.value,        \n" +
                "		co.tolerance,        \n" +
                "		co.voltage,        \n" +
                "		co.packaging,   \n" +
                "		co.powerRating,  \n" +
                "		co.minOperatingTemp,  \n" +
                "		co.maxOperatingTemp,       \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment                    \n" +
                "	FROM rfq_lineitems_alternatepart a                                    \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                                     \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                              \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0           \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0          \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0          \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                           \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                            \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (302,'2.00','V1',' Resolved Sub assembly issue  - Jignesh K '," + userid + ");"
            );
            break;
        case 302:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-02-2019  *********************************** */
                "ALTER TABLE mfgcodemst ADD COLUMN `primaryContactName` VARCHAR(255);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `email` VARCHAR(255);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `website` VARCHAR(255);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `contact` VARCHAR(255);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `comments` TEXT;  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `phExtension` VARCHAR(8);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `contactCountryCode` VARCHAR(5);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `faxNumber` VARCHAR(255);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `faxCountryCode` VARCHAR(5);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `isActive` TINYINT(1);  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN `isCustOrDisty` TINYINT(1);  \n" +
                /* **************************** Add Script Version -> 28-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (303,'2.00','V1',' Mfg code table field Added - Jignesh K '," + userid + ");"
            );
            break;
        case 303:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-02-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(        \n" +
                "	IN pwoID INT(11)  ,        \n" +
                "	IN pwoOPID INT(11)                                                                           \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";          \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN        \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,     \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,     \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`,          \n" +
                "			`wocerti`.woAllStandardsWithClass ,    \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL         \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,        \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL         \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,        \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,     \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  `ca`.specialNote ,     \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon`, salesorddet.totalpoQty, salesorddet.poQty ,        \n" +
                "   			 salesorddet.totalmrpQty, salesorddet.mrpQty, salesorddet.poNumber , salesorddet.salesOrderNumber        \n" +
                "		FROM workorder AS `wo`         \n" +
                "		LEFT OUTER JOIN   \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' ,(SELECT className FROM standard_class  \n" +
                "							WHERE classID = a.classIDs) ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass   \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`    \n" +
                "		LEFT OUTER JOIN `component` AS `ca`        \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL            \n" +
                "		LEFT OUTER JOIN     \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,        \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,        \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber        \n" +
                "			FROM `workorder_salesorder_details` AS `wsd`         \n" +
                "			INNER JOIN `salesorderdet` AS `sod`         \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL         \n" +
                "			INNER JOIN `salesordermst` AS `som`         \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL         \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet        \n" +
                "			ON salesorddet.woID = `wo`.`woID`        \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID        \n" +
                "		GROUP BY `wo`.`woID` ;        \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN        \n" +
                "		SELECT     \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,     \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,     \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`,        \n" +
                "			 `wocerti`.woAllStandardsWithClass ,    \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL         \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,        \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL         \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,       \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion,        \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`, CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,    \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,     \n" +
                "			`ca`.`RoHSStatusID`, (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,        \n" +
                "			 salesorddet.totalpoQty, salesorddet.poQty, salesorddet.totalmrpQty,     \n" +
                "			 salesorddet.mrpQty, salesorddet.poNumber, salesorddet.salesOrderNumber        \n" +
                "		FROM workorder AS `wo`      \n" +
                "		LEFT OUTER JOIN   \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' ,(SELECT className FROM standard_class  \n" +
                "							WHERE classID = a.classIDs) ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass   \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	  \n" +
                "			) AS `wocerti`		  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`   \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`        \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID      \n" +
                "		LEFT OUTER JOIN `component` AS `ca`        \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL            \n" +
                "		LEFT OUTER JOIN     \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,        \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,        \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber        \n" +
                "  			FROM `workorder_salesorder_details` AS `wsd`         \n" +
                "			INNER JOIN `salesorderdet` AS `sod`         \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL         \n" +
                "			INNER JOIN `salesordermst` AS `som`         \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL         \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet        \n" +
                "		ON salesorddet.woID = `wo`.`woID`        \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID        \n" +
                "		GROUP BY `wo`.`woID` ;        \n" +
                "	END IF ;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (304,'2.00','V1','  sp Sproc_GetWOHeaderDisplayDetails  - KETAN '," + userid + ");"
            );
            break;
        case 304:
            allDbChangesArray.push(
                /* **************************** New Script -> 1-03-2019  *********************************** */
                "INSERT INTO mfgcodemst (mfgcode,mfgName,createdBy) VALUES ('All','All Mfg/Supplier','1');  \n" +
                "UPDATE mfgcodemst SET id=-7 WHERE mfgcode='All' LIMIT 1;  \n" +
                "  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN packaging INT NULL;  \n" +
                "UPDATE component_sid_stock SET packaging = -1 WHERE packaging IS NULL;  \n" +
                "  \n" +
                "ALTER TABLE component_sid_stock ADD COLUMN refSupplierPartId  INT NULL;  \n" +
                "ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_refSupplierPartId FOREIGN KEY (refSupplierPartId) REFERENCES component(id);  \n" +
                /* **************************** New Script -> 1-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveBarcodeLabelTemplate` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBarcodeLabelTemplate`(    \n" +
                "	   IN ppageIndex INT(11),    \n" +
                "		IN precordPerPage INT(11),    \n" +
                "		IN pOrderBy VARCHAR(255),    \n" +
                "		IN pWhereClause VARCHAR(16383)    \n" +
                "		)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "			DECLARE pOffset INT(11);    \n" +
                "			DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "				SELECT     \n" +
                "					blt.*, mc.mfgCode, mc.mfgName, CONCAT('(',mc.mfgCode,')', ' ', mc.mfgName) AS mfg,   \n" +
                "					(SELECT COUNT(*) FROM br_label_template_delimiter WHERE refbrID = blt.id AND deletedAt IS NULL) AS numberOfDelimiter    \n" +
                "				FROM br_label_template blt    \n" +
                "				LEFT JOIN mfgcodemst mc ON blt.mfgcodeid = mc.id    \n" +
                "				WHERE blt.deletedAt IS NULL;    \n" +
                "  \n" +
                "  \n" +
                "			IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgName ASC\") ;    \n" +
                "			ELSE    \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "			END IF;	    \n" +
                "  \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "				SET pWhereClause = '1=1' ;    \n" +
                "			END IF;	    \n" +
                "  \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "			ELSE	    \n" +
                "				SET rowNumWhere = '';    \n" +
                "			END IF;	    \n" +
                "  \n" +
                "			/* to get total count of rows */    \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "			PREPARE query1 FROM @SQLStatement1;    \n" +
                "			EXECUTE query1;    \n" +
                "			DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "			PREPARE query2 FROM @SQLStatement2;    \n" +
                "			EXECUTE query2;    \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "		END;  \n" +
                /* **************************** New Script -> 1-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                          \n" +
                "	IN ppageIndex INT(11),                          \n" +
                "	IN precordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),	                          \n" +
                "        IN pWhereClause VARCHAR(16383)                              \n" +
                "    )  \n" +
                "BEGIN                          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                          \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.price, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,            \n" +
                "			css.binID, CONCAT('(',mfg.mfgCode,')', ' ', mfg.mfgName) AS mfg,  \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,                      \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,                      \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,            \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,            \n" +
                "			(SELECT CONCAT('(', cus.customerCode, ')',cus.companyName) FROM customers cus WHERE cus.id=css.customerID AND cus.deletedAt IS NULL LIMIT 1) customer,            \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,            \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,            \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,            \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,            \n" +
                "			(SELECT CONCAT('(',mcm.mfgCode,')', ' ', mcm.mfgName) AS CPNMFG FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,            \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,            \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray, css.updatedAt, css.nickName                           \n" +
                "               FROM component_sid_stock css                          \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                         \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                          \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                       \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                        \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                          \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE	                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;	                          \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                          \n" +
                "	EXECUTE query1;                          \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query2;                          \n" +
                "	DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 1-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                \n" +
                "    IN pWhereClause VARCHAR(16383),                                \n" +
                "    IN puserID VARCHAR(50),                          \n" +
                "    IN pnickName VARCHAR(20),                          \n" +
                "    IN pprefix VARCHAR(20),                          \n" +
                "    IN puid VARCHAR(20),                      \n" +
                "    IN pComponentID INT,                  \n" +
                "    IN pCustomerID INT,                  \n" +
                "    IN pCPN BOOL,                  \n" +
                "    IN pMFGAvailabel BOOL,                  \n" +
                "    IN pRefCpnMfgID INT,              \n" +
                "    IN pAssyID INT,              \n" +
                "    IN pSalesOrderDetailID INT,		              \n" +
                "    IN pReceiveMaterialType VARCHAR(255),    \n" +
                "    IN pkitAssemblyID INT 	              \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                \n" +
                "	DECLARE v_length INT;                                 \n" +
                "	DECLARE v_fieldType INT;                                     \n" +
                "	DECLARE v_entityId INT;                                \n" +
                "	DECLARE v_dataElementId INT;                                \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                \n" +
                "	DECLARE strLabel VARCHAR(2000);                                \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                \n" +
                "	DECLARE StaticField VARCHAR(100);          \n" +
                "	DECLARE DynamicField VARCHAR(100);		          \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                \n" +
                "	DECLARE plen,slen INT;                                \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                            \n" +
                "	DECLARE barcode_type_id INT;                      \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);   \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                 \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                \n" +
                "	(                                \n" +
                "	     errorText NVARCHAR(2000),                                \n" +
                "	     IsSuccess VARCHAR (2),                      \n" +
                "	     MFGPart VARCHAR(100)                                     \n" +
                "	);                     \n" +
                "	-- get data from barcode templates with seprator                                \n" +
                "	block1: BEGIN             \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                 \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);     \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN  \n" +
                "			SELECT COUNT(*) INTO @NumberOfPart FROM         \n" +
                "			(        \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL        \n" +
                "				UNION        \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID         \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL        \n" +
                "			) a;			  \n" +
                "			IF (@NumberOfPart > 0) THEN		  \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "				SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                 \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);   \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		-- tempregexp;    	        \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                      \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                              \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                                \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                           \n" +
                "		ELSE /* barcode 1D */   \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                               \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                                 \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                           \n" +
                "		END IF;          \n" +
                "	END block1;                                \n" +
                "  \n" +
                "	block2: BEGIN      	        \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                                \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                                \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                             \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                                 \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                         \n" +
                "		-- declare exit loop if data not found                                \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                \n" +
                "	        -- if any record match found than  check for delimiter and its value                           \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                                \n" +
                "			-- create temporary table for deliemeter and component dataelement                                \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                \n" +
                "				pentityId INT,                                \n" +
                "				pdataElementId INT,                                \n" +
                "				pdelimiter_value VARCHAR(200)                                \n" +
                "			);                           \n" +
                "  \n" +
                "			-- create temporary table for separator string values                                \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                      \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                                \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                                 \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                       \n" +
                "  \n" +
                "			-- open cursor                                \n" +
                "			OPEN barcodeMatch_cursor;                                \n" +
                "  \n" +
                "			-- set str label as whereclause                                \n" +
                "			SET strLabel=pWhereClause;                         \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                                \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                                \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                \n" +
                " 			 END IF;                               \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                                 \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                                \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                \n" +
                "			 END IF;	                      \n" +
                "  \n" +
                "			-- insert all values after seprator split                                 \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                \n" +
                "			PREPARE stmt1 FROM @SQL;	                                \n" +
                "			EXECUTE stmt1;                                \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                                \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';           \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                                \n" +
                "			barcodeMatch_loop:LOOP             \n" +
                "				-- get all five selected values                                \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                        \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                                \n" +
                "				IF exit_loop THEN                           \n" +
                "					CLOSE barcodeMatch_cursor;                                \n" +
                "					LEAVE barcodeMatch_loop;                                \n" +
                "				END IF;                           \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                                \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                \n" +
                "				EXECUTE stmtdelimiter;                      \n" +
                "  \n" +
                "				-- get delimiter values from string                                \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                        \n" +
                "				-- check for field type is static or dynamic                                \n" +
                "				-- if static field than check for mfg code and mfg part number                                \n" +
                "				IF v_fieldType = 0  THEN                            \n" +
                "					-- component_sid_stock                                 \n" +
                "					-- get static field name from barcode table delimiter data element id                                \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                  \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                      \n" +
                "						SET MFG_Part_No = delimiter_value_data;                      \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN           \n" +
                "							SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM         \n" +
                "							(        \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL        \n" +
                "								UNION        \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID         \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL        \n" +
                "							) a;        \n" +
                "						ELSE                      \n" +
                "							SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                      \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN  \n" +
                "							SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "							CLOSE barcodeMatch_cursor;                                \n" +
                "							LEAVE barcodeMatch_loop;    \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;  \n" +
                "						IF (@MFGType = 'DIST') THEN  \n" +
                "							SET v_SupplierID = @componentId;  \n" +
                "							SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN    \n" +
                "							SELECT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId;				    \n" +
                "							IF (@rfqLineItemsID IS NULL) THEN    \n" +
                "								CLOSE barcodeMatch_cursor;                                \n" +
                "								LEAVE barcodeMatch_loop;    \n" +
                "							END IF;    \n" +
                "						END IF;    \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                                \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                \n" +
                "						END IF;          \n" +
                "					END IF;                                \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN                        \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		          \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "					END IF;                \n" +
                "					IF @componentCount > 1 THEN                      \n" +
                "						CLOSE barcodeMatch_cursor;                                \n" +
                "						LEAVE barcodeMatch_loop;                      \n" +
                "					END IF;                         \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                 \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                                \n" +
                "  \n" +
                "				ELSE            \n" +
                "					-- component_sid_stock_dataelement_Values                                  \n" +
                "					-- dynamic fields               \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);           \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "					END IF;                \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                \n" +
                "					END IF;          \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                                 \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                             \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                 \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                         \n" +
                "				END IF;                                \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                                \n" +
                "			-- check if mfg and component both found than     \n" +
                "			IF (BarcodeMFGMatch = 'Mismatch') THEN                                \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFGCode is mismatch with barcode template MFGCode',8,MFG_Part_No);    \n" +
                "			ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);    \n" +
                "			ELSEIF (@componentCount > 1) THEN                      \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                \n" +
                "                                   IF @Mfgmatched = 0  THEN                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                \n" +
                "				   END IF;									                                \n" +
                "			 ELSE 		                      \n" +
                "				IF @mfgCount = 0 THEN                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                \n" +
                "		                END IF;	                                \n" +
                "				IF @componentCount = 0 THEN                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                \n" +
                "				END IF;	                                \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                                  \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                \n" +
                "			        END IF;						                                \n" +
                "			END IF;				                                \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN                  \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                  \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE customerID = pCustomerID;                  \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                \n" +
                "				END IF;                  \n" +
                "			END IF;                  \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	                  \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                  \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                  \n" +
                "				END IF;               \n" +
                "  \n" +
                "				-- must call statements in sequence          				                      \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                \n" +
                "				PREPARE stmt1 FROM @SQL1;                                \n" +
                "				EXECUTE stmt1;                              \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                  \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                  \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                  \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                  \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                  \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                  \n" +
                "				END IF;              \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                  \n" +
                "				END IF;              \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');               \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (v_SupplierID IS NOT NULL) THEN                  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                  \n" +
                "				END IF;     \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                  \n" +
                "				SET @sql2 = UpdateValue;	                                 \n" +
                "				PREPARE stmt2 FROM @SQL2;                                \n" +
                "				EXECUTE stmt2;	                                \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                      \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                 \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                \n" +
                "				END IF;                                  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                \n" +
                "			ELSE                               \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                \n" +
                "			END IF;                                \n" +
                "  \n" +
                "		ELSE                            \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                 \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                  \n" +
                "		END IF;                                \n" +
                "  \n" +
                "	END block2;                                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 1-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (305,'2.00','V1','Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 305:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "ALTER TABLE equipment DROP FOREIGN KEY FK_CustomerID_GencCategoryID;  \n" +
                "Update equipment e SET e.customerid = (select id From mfgcodemst where customerid =  e.customerid);   \n" +
                "ALTER TABLE equipment ADD CONSTRAINT FK_equipment_mfgcodemst_customerID FOREIGN KEY (customerId) REFERENCES MfgCodemst(id);  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (306,'2.00','V1',' Customer and MFGCode table merge changes for Equipment - Dharmishtha '," + userid + ");"
            );
            break;
        case 306:
            allDbChangesArray.push(
                /* **************************** New Script -> 01/03/2019   *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQManualSelectPrice` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQManualSelectPrice`(                                              \n" +
                "	IN ppageIndex INT(11),                                              \n" +
                "	IN precordPerPage INT(11),                                              \n" +
                "	IN pOrderBy VARCHAR(255),                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                              \n" +
                "	IN rfqAssyID INT(11),                                              \n" +
                "	IN puserID INT (11),    \n" +
                "	IN ppackageing TINYINT(1),    \n" +
                "	IN pcustomerID INT(11)                                            \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                              \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                          \n" +
                "	    SET @SQLString = NULL;                                                \n" +
                "	    SET @HavingClause = NULL;                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                    \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "		ELSE                                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                                               \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                              \n" +
                "			SET pWhereClause = '1=1' ;                                              \n" +
                "		END IF;	                                              \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "		ELSE	                                              \n" +
                "			SET rowNumWhere = '';                                              \n" +
                "		END IF;	                                              \n" +
                "		SELECT                                              \n" +
                "                      GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(ra.requestQty = ''',                                              \n" +
                "						ra.requestQty,                                              \n" +
                "					''', rq.finalPrice, null))) AS ''',                                              \n" +
                "						ra.requestQty,''''                           \n" +
                "					)                                              \n" +
                "					)                                         \n" +
                "				INTO @SQLString                                          \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                              \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                              \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;  \n" +
                "		SELECT                                              \n" +
                "                      GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(rq.selectionMode = ''',                                              \n" +
                "						IFNULL(rq.selectionMode,'Both'),                                              \n" +
                "					''', rq.selectionMode, ''Both''))) AS ''',                                              \n" +
                "						IFNULL(rq.selectionMode,'Both'),''''                           \n" +
                "					)                                              \n" +
                "					),                                          \n" +
                "			GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(rq.selectionMode = ''',                                              \n" +
                "						IFNULL(rq.selectionMode,'Both'),                                              \n" +
                "					''', rq.selectionMode, ''Both''))) =\"Manual\"'                                              \n" +
                "					) SEPARATOR ' OR '                                             \n" +
                "					)                                          \n" +
                "  \n" +
                "				INTO @SQLString1,@HavingClause                                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;  \n" +
                "		SET @SQLString=CONCAT(@SQLString,',',@SQLString1 );                                            \n" +
                "  IF(ppackageing=1)THEN    \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing));    \n" +
                "				ELSE    \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing));                                                       \n" +
                "                         END IF;                     \n" +
                "  \n" +
                "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                                   \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;	                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                              \n" +
                "			EXECUTE query1;                                              \n" +
                "			DEALLOCATE PREPARE query1;                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                              \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "			EXECUTE query2;                                              \n" +
                "			DEALLOCATE PREPARE query2;       \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));        \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                      \n" +
                "			EXECUTE query3;                                                      \n" +
                "			DEALLOCATE PREPARE query3;                                              \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                    \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                      \n" +
                "			EXECUTE query4;                                                      \n" +
                "			DEALLOCATE PREPARE query4;                                                  \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                         \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                              \n" +
                "			EXECUTE query5;                                                              \n" +
                "			DEALLOCATE PREPARE query5;                                                     \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));      \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                              \n" +
                "			EXECUTE query6;                                                              \n" +
                "			DEALLOCATE PREPARE query6;           \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));      \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                              \n" +
                "			EXECUTE query7;                                                              \n" +
                "			DEALLOCATE PREPARE query7;             \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                   \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_getAlternatePartList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getAlternatePartList`(       \n" +
                "IN pconsolidateID  INT(11)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "    SELECT a.* FROM    \n" +
                "(SELECT c.PIDCode    \n" +
                ",c.RoHSStatusID    \n" +
                ",c.mfgCodeID    \n" +
                ",ro.name    \n" +
                ",ro.rohsIcon,c.feature,gc.gencCategoryName,gc.gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,    \n" +
                "mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,0 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,rm.name AS mountName,rp.partTypeName                                                         \n" +
                "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                     \n" +
                "                                component c ON rla.mfgpnid=c.id  LEFT JOIN    \n" +
                "                                mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0 LEFT JOIN                            \n" +
                "                                 genericcategory gc ON c.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0                   \n" +
                "                                 LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0   \n" +
                "                                LEFT JOIN rfq_mountingtypemst rm ON rm.id= c.mountingtypeID AND rm.isDeleted = 0  \n" +
                "                                LEFT JOIN rfq_parttypemst rp ON rp.id= c.functionalCategoryID AND rp.isDeleted = 0                                                           \n" +
                "                                WHERE rla.consolidateID=pconsolidateID AND rla.isdeleted=0    \n" +
                "                                UNION    \n" +
                "                                SELECT c.PIDCode,c.RoHSStatusID,c.mfgCodeID,ro.name,ro.rohsIcon,c.feature,gc.gencCategoryName,gc.gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,    \n" +
                "                                mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,1 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,rm.name AS mountName,rp.partTypeName    \n" +
                "                                  FROM component c      \n" +
                "                                  LEFT JOIN mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0    \n" +
                "                                  LEFT JOIN  genericcategory gc ON c.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0                                                  \n" +
                "                                  LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "                                  LEFT JOIN rfq_mountingtypemst rm ON rm.id= c.mountingtypeID AND rm.isDeleted = 0  \n" +
                "                                  LEFT JOIN rfq_parttypemst rp ON rp.id= c.functionalCategoryID AND rp.isDeleted = 0        \n" +
                "                                  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=pconsolidateID AND rla.isDeleted=0))     \n" +
                "                                  AND c.id NOT IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate ra  WHERE ra.consolidateID=pconsolidateID AND ra.isDeleted=0) AND c.isdeleted=0)a;    \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetCountForFilter` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCountForFilter`(  \n" +
                "	IN rfqAssyID INT(11),  \n" +
                "	IN pcustomerID INT(11)                                            \n" +
                "    )  \n" +
                "BEGIN                                              \n" +
                "  \n" +
                "  \n" +
                "		SELECT                                              \n" +
                "                      GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(ra.requestQty = ''',                                              \n" +
                "						ra.requestQty,                                              \n" +
                "					''', rq.finalPrice, null))) AS ''',                                              \n" +
                "						ra.requestQty,''''                                              \n" +
                "					)                                              \n" +
                "					),                                          \n" +
                "			GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(ra.requestQty = ''',                                              \n" +
                "						ra.requestQty,                                              \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                              \n" +
                "					) SEPARATOR ' OR '                                             \n" +
                "					)                                          \n" +
                "				INTO @SQLString, @HavingClause                                          \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                              \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                              \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                            \n" +
                "  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,0));   \n" +
                "			          SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                                   \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp\" );                                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                              \n" +
                "			EXECUTE query1;                                              \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;    \n" +
                "			SET @SQLStatement = CONCAT(' CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                               \n" +
                "					SELECT                                                 \n" +
                "						 rl.id FROM rfq_consolidated_mfgpn_lineitem rl                                                \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                        \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                                         \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                                \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                                \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                       \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                                       \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                                       \n" +
                "						(SELECT gencCategoryID FROM genericcategory                                       \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                                      \n" +
                "					GROUP BY rl.id');    \n" +
                "  \n" +
                "		        PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;	                                                \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp\");   \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "			EXECUTE query2;                                              \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;   \n" +
                "  \n" +
                "			IF(SELECT COUNT(*) FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND rq.selectionMode IS NOT NULL)=0 THEN  \n" +
                "			SELECT 0 AS 'COUNT(*)';  \n" +
                "			ELSE  \n" +
                "			SELECT                                              \n" +
                "                      GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(rq.selectionMode = ''',                                              \n" +
                "						rq.selectionMode,                                              \n" +
                "					''', rq.selectionMode, null))) AS ''',                                              \n" +
                "						rq.selectionMode,''''                                              \n" +
                "					)                                              \n" +
                "					),                                          \n" +
                "			GROUP_CONCAT(DISTINCT                                              \n" +
                "				CONCAT(                                              \n" +
                "					'Max((IF(rq.selectionMode = ''',                                              \n" +
                "						rq.selectionMode,                                              \n" +
                "					''', rq.selectionMode, null))) =\"Manual\"'                                              \n" +
                "					) SEPARATOR ' OR '                                             \n" +
                "					)                                          \n" +
                "				INTO @SQLString1, @HavingClause1                                          \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                              \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND rq.selectionMode IS NOT NULL;                                            \n" +
                "  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString1,pcustomerID,0));   \n" +
                "			          SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause1);                                                   \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp\" );                                              \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                              \n" +
                "			EXECUTE query3;                                              \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;    \n" +
                "			END IF;                                              \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRohsValid` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRohsValid`(    \n" +
                "IN prohstext VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	SELECT r.id,r.name,r.rohsIcon FROM     \n" +
                "	rfq_rohsmst r    \n" +
                "	LEFT OUTER JOIN component_fields_genericalias_mst a ON a.refID = r.id     \n" +
                "	WHERE    \n" +
                "	a.isDeleted = 0 AND    \n" +
                "	a.alias = prohstext AND    \n" +
                "	a.refTableName = 'rfq_rohsmst';    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01/03/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (307,'2.00','V1','Pricing Tab Changes-Champak '," + userid + ");"
            );
            break;
        case 307:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(      \n" +
                "	pBinID int(11),      \n" +
                "    pGlobalSearchUIDId int(11),   \n" +
                "	pSearchUIDId INT(11),  \n" +
                "	pSearchString varchar(100)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "	SELECT 	css.id,					css.scanlabel,		css.pkgQty,		css.price, 		css.uid,       \n" +
                "            c.PIDCode, 				c.mfgcodeID,        c.mfgPN,  		mfg.mfgCode, 	ro.rohsIcon,       \n" +
                "            ro.name AS rohsName,	css.nickName,		css.binID,		css.uom,		cast('' as char(100)) uomName                               \n" +
                "	FROM component_sid_stock css                              \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                             \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                              \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                     \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)          \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)          \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )          \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0  \n" +
                "	AND 	css.uid like CONCAT('%', IFNULL(pSearchString,'') ,'%');   \n" +
                "  \n" +
                "    update 	Results r, uoms u  \n" +
                "    SET   	r.uomName = u.abbreviation  \n" +
                "    WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;       \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "select w.id into @parentWHID from warehousemst w where w.Name = 'Material Department';  \n" +
                "update warehousemst uw set uw.parentWHID = @parentWHID where uw.isDepartment = 0 and uw.parentWHID is null;  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (308,'2.00','V1',' modify procedure to display UOM and script to update department of warehouse- Dharmishtha '," + userid + ");"
            );
            break;
        case 308:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "update MfgCodemst set isActive = 1;  \n" +
                "update mfgcodemst set isCustOrDisty = 1 where (mfgType = 'MFG' and customerid is not null) or mfgType = 'DIST';  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (309,'2.00','V1',' Make all mfg active to get data in autocomplete list and update flag to indicate mfg is customer too - Dharmishtha '," + userid + ");"
            );
            break;
        case 309:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "ALTER TABLE workorder DROP FOREIGN KEY FK_workorder_customer;  \n" +
                "Update workorder w SET w.customerID = (select id From mfgcodemst where customerid =  w.customerID);   \n" +
                "ALTER TABLE workorder ADD CONSTRAINT FK_workorder_mfgcodemst_customerID FOREIGN KEY (customerID) REFERENCES MfgCodemst(id);  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (310,'2.00','V1',' Remove FK of customer table and add FK from mfgcodemst for workorder - Dharmishtha '," + userid + ");"
            );
            break;
        case 310:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019  *********************************** */
                "Update 	mfgcodemst m, Customers c  \n" +
                "Set		m.primaryContactName = c.primaryContactName,  \n" +
                "		m.email = c.email,  \n" +
                "        m.website = c.website,  \n" +
                "        m.contact = c.contact,  \n" +
                "        m.comments = c.comments,  \n" +
                "        m.phExtension = c.phExtension,  \n" +
                "        m.contactCountryCode = c.contactCountryCode,  \n" +
                "        m.faxNumber = c.faxNumber,  \n" +
                "        m.faxCountryCode = c.faxCountryCode  \n" +
                "Where	m.customerID = c.id;  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (311,'2.00','V1',' Update customer detail in mfgcodemst - Dharmishtha '," + userid + ");"
            );
            break;
        case 311:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "Drop view vu_barcode_label;  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (312,'2.00','V1',' Drop view vu_barcode_label - Dharmishtha '," + userid + ");"
            );
            break;
        case 312:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                      \n" +
                "	IN pCustomerID INT(11)                \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE mfgCodeID INT(11);                \n" +
                "	DECLARE whereClause VARCHAR(500);          \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";           \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN          \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);          \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,       \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, mfg.mfgCode       \n" +
                "	FROM component c       \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0       \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                \n" +
                "    PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;               \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (313,'2.00','V1',' modify sp to get selected customers assembly list - Dharmishtha '," + userid + ");"
            );
            break;
        case 313:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/01/2019   *********************************** */
                "ALTER TABLE `component_customer_loa`   \n" +
                "DROP FOREIGN KEY `FK_component_customer_loa_customerID`;  \n" +
                "ALTER TABLE `component_customer_loa`   \n" +
                "DROP INDEX `FK_component_customer_loa_customerID` ;  \n" +
                "update component_customer_loa a set a.customerID = (select b.id from mfgcodemst b where b.customerID = a.customerID);  \n" +
                "ALTER TABLE `component_customer_loa` ADD CONSTRAINT `FK_component_customer_loa_customerID`  \n" +
                "  FOREIGN KEY (`customerID`)  \n" +
                "  REFERENCES `mfgcodemst` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                "drop procedure if exists `Sproc_GetComponentCustomerLOA`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustomerLOA`(        \n" +
                "	IN ppageIndex INT(11),                      \n" +
                "	IN precordPerPage INT(11),                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "    IN pWhereClause VARCHAR(16383),                      \n" +
                "    IN pComponentID INT,                  \n" +
                "    IN pCustomerID INT                  \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE pOffset INT(11);                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "  \n" +
                "	IF(pComponentID IS NOT NULL) THEN                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "			select cst.id as CustomerID, cst.mfgName companyName, loa.id, loa.componentID  \n" +
                "			from component_customer_loa loa                      \n" +
                "			join mfgcodemst cst on cst.id = loa.customerID AND IFNULL(cst.isDeleted,0) = 0  \n" +
                "            where loa.componentID = pComponentID AND IFNULL(loa.isDeleted,0) = 0  \n" +
                "             and exists (select 1 from genericfiles gf where gf.gencFileOwnerType = 'component_customer_loa' and gf.refTransID = loa.id and gf.isDeleted = 0);  \n" +
                "	END IF;                      \n" +
                "	IF(pCustomerID IS NOT NULL) THEN                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "		select com.id as ComponentID, com.mfgPN, com.PIDCode, loa.id, loa.customerID       \n" +
                "		from component_customer_loa loa                      \n" +
                "		join component com on com.id = loa.componentID AND IFNULL(com.isDeleted,0) = 0    \n" +
                "        where loa.customerID = pCustomerID AND IFNULL(loa.isDeleted,0) = 0  \n" +
                "          and exists (select 1 from genericfiles gf where gf.gencFileOwnerType = 'component_customer_loa' and gf.refTransID = loa.id and gf.isDeleted = 0);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "	ELSE                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;                      \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "		SET pWhereClause = '1=1' ;                      \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "	ELSE	                      \n" +
                "		SET rowNumWhere = '';                      \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/01/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (314,'2.00','V1','remove customer table refrence and added mfgcodemst table refrence to component_customer_loa - Ashish'," + userid + ");"
            );
            break;
        case 314:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 01-03-2019  *********************************** */
                "Alter table mfgcodemst modify column isActive tinyint(1) default 1;  \n" +
                "  \n" +
                "alter table salesordermst drop foreign key salesordermst_ibfk_1;  \n" +
                "Update salesordermst s   \n" +
                "set s.customerid = (select id From mfgcodemst where customerid =  s.customerid);  \n" +
                "alter table salesordermst Add constraint Fk_saleordermst_mfgcodemst_customerID foreign key (customerID) references mfgcodemst(id);  \n" +
                "  \n" +
                "alter table customer_contactperson drop foreign key FK_customercontactperson_customerId;  \n" +
                "Update customer_contactperson c   \n" +
                "set c.customerid = (select id From mfgcodemst where customerid =  c.customerid);  \n" +
                "alter table customer_contactperson Add constraint Fk_customer_contactperson_mfgcodemst_customerID foreign key (customerID)   \n" +
                "references mfgcodemst(id);  \n" +
                "  \n" +
                "alter table customer_addresses drop foreign key FK_customer_addresses_customerId;  \n" +
                "Update customer_addresses c   \n" +
                "set c.customerid = (select id From mfgcodemst where customerid =  c.customerid);  \n" +
                "alter table customer_addresses Add constraint Fk_customer_addresses_mfgcodemst_customerID foreign key (customerID)   \n" +
                "references mfgcodemst(id);  \n" +
                //  /* **************************** Add Script Version -> 01-03-2019 *********************************** */
                "drop view if exists `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS select `a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber`   \n" +
                "AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID`   \n" +
                "AS `ContactPerson ID`,`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision`   \n" +
                "AS `Revision`,`a`.`shippingComment` AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`partID`   \n" +
                "AS `PartID`,`a`.`PIDCode` AS `Assy ID`,`a`.`mfgPN` AS `Assy Name`,`a`.`rev` AS `Assy Revision`,`a`.`nickName` AS `NickName`,`a`.`qty`  \n" +
                "AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName` AS `Company Name`,`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode`   \n" +
                "AS `GencCategory Code`,(ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,  \n" +
                "(case when ((ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0)) > 0) then 'Pending' else 'Completed' end)   \n" +
                "AS `Status`,`a`.`modifyDate` AS `modifyDate`,`a`.`salesOrderDetailId` AS `SalesOrderDetailId` from   \n" +
                "(select `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,`sm`.`poDate`   \n" +
                "AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID`   \n" +
                "AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID`   \n" +
                "AS `termsID`,`sm`.`soDate` AS `soDate`,`sm`.`updatedAt` AS `modifyDate`,`fun_getAssyidByID`(`a`.`partID`)   \n" +
                "AS `PIDCode`,`fun_getAssyNameByID`(`a`.`partID`) AS `mfgPN`,`fun_getAssyrevNameByID`(`a`.`partID`)   \n" +
                "AS `rev`,`fun_getAssyNickNameByID`(`a`.`partID`) AS `nickName`,concat('(',`cu`.`mfgCode`,') ',`cu`.`mfgName`)   \n" +
                "AS `companyName`,concat(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`a`.`qty`   \n" +
                "AS `qty`,`a`.`id` AS `salesOrderDetailId`,`a`.`partID` AS `partID`,(select ifnull(sum(`shippedassembly`.`shippedqty`),0)   \n" +
                "from `shippedassembly` where ((`shippedassembly`.`partID` = `a`.`partID`) and (`shippedassembly`.`isDeleted` = 0)   \n" +
                "and `shippedassembly`.`shippingId` in (select `salesshippingmst`.`shippingID` from `salesshippingmst`   \n" +
                "where (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty`   \n" +
                "from ((((`salesorderdet` `a` join `salesordermst` `sm` on(((`sm`.`id` = `a`.`refSalesOrderID`) and (ifnull(`sm`.`isDeleted`,0) = 0))))   \n" +
                "left join `mfgcodemst` `cu` on(((`sm`.`customerID` = `cu`.`id`) and (ifnull(`cu`.`isDeleted`,0) = 0))))   \n" +
                "left join `customer_contactperson` `cc` on(((`sm`.`contactPersonID` = `cc`.`personId`) and (ifnull(`cc`.`isDeleted`,0) = 0))))   \n" +
                "left join `genericcategory` `gc` on(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) and (ifnull(`gc`.`isDeleted`,0) = 0))))   \n" +
                "where (ifnull(`a`.`isDeleted`,0) = 0)) `a`;  \n" +
                //  /* **************************** Add Script Version -> 01-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (315,'2.00','V1','vu_salesorder_shipped_report- Mona '," + userid + ");"
            );
            break;
        case 315:
            allDbChangesArray.push(
                /* **************************** New Script ->  01-03-2019  *********************************** */
                "UPDATE  mfgcodemst SET mfgCode='MO' WHERE mfgCode='MOUSER';  \n" +
                "UPDATE mfgcodemst SET mfgName='DIGIKEY' WHERE mfgName='DIGI-KEY';  \n" +
                "UPDATE component SET supplier='DK' WHERE supplier='DIGI-KEY';  \n" +
                "UPDATE component SET supplier='NW' WHERE supplier='NEWARK';  \n" +
                "UPDATE component SET supplier='MO' WHERE supplier='MOUSER';  \n" +
                /* **************************** Add Script Version ->  01-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (316,'2.00','V1','Update component-Champak '," + userid + ");"
            );
            break;
        case 316:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "ALTER TABLE mfgCodeMst MODIFY isCustomer TINYINT(1) NULL;  \n" +
                "ALTER TABLE RFQForms MODIFY customerid INT(11) NULL;  \n" +
                "UPDATE RFQForms SET customerID = NULL;  \n" +
                "ALTER TABLE RFQForms DROP FOREIGN KEY FK_rfqforms_customerId;   \n" +
                "ALTER TABLE RFQForms DROP INDEX FK_rfqforms_customerId;  \n" +
                "ALTER TABLE RFQForms ADD CONSTRAINT FK_rfqforms_customerId FOREIGN KEY (`customerId`) REFERENCES mfgCodeMst(`id`);  \n" +
                "ALTER TABLE RFQForms DROP FOREIGN KEY FK_rfqforms_customercontactpersonID;   \n" +
                "ALTER TABLE RFQForms DROP INDEX FK_rfqforms_customercontactpersonID;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllManufacturers` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllManufacturers`(	        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),	        \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMfgType VARCHAR(50)    \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "	SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,    \n" +
                "		(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias         \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist        \n" +
                "	FROM mfgcodemst mc	    \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0    \n" +
                "	AND  deletedAt IS NULL    \n" +
                "	AND mfgType = pMfgType;      \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode ASC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN     \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );       \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                        \n" +
                "	IN pCustomerID INT(11)                  \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DECLARE mfgCodeID INT(11);                  \n" +
                "	DECLARE whereClause VARCHAR(500);            \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";             \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN            \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);            \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,         \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, mfg.mfgCode         \n" +
                "	FROM component c         \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0         \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                  \n" +
                "    PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                 \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),	                                    \n" +
                "    IN pWhereClause VARCHAR(16383)                                        \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                    \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                    \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,  \n" +
                "		-- CONCAT(emp.firstName,' ',emp.lastName) AS submittedBy,        \n" +
                "        (SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS revisedQuoteCount,        \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,         \n" +
                "        CONCAT('Internal-',part.liveInternalVersion) AS liveInternalVersion,        \n" +
                "		(CASE WHEN ra.status = 1 THEN 'InProcess'   \n" +
                "			  WHEN ra.status = 2 THEN 'FollowUp'  \n" +
                "              WHEN ra.status = 3 THEN 'Revised'  \n" +
                "			  WHEN ra.status = 4 THEN 'Win'  \n" +
                "			  WHEN ra.status = 5 THEN 'Lost'  \n" +
                "			  WHEN ra.status = 6 THEN 'Cancel' END) `status` ,          \n" +
                "		ro.name AS `rohsComplientConvertedValue`,          \n" +
                "		-- (CASE WHEN (`ra`.`RoHSStatus` = 0) THEN 'No'          \n" +
                "		-- WHEN (`ra`.`RoHSStatus` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`,          \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'          \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,          \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'          \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'          \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,          \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer,  \n" +
                "		CONCAT(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,          \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,ra.isBOMVerified          \n" +
                "		FROM rfqforms rf          \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0          \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0          \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0         \n" +
                "        INNER JOIN employees em ON em.id = rf.employeeID AND IFNULL(em.isdeleted,0) = 0          \n" +
                "		INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0          \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0      \n" +
                "       -- LEFT JOIN users emp ON emp.id = ra.quoteSubmittedBy  \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0          \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0          \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                                 \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;                         \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                    \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                    \n" +
                "	EXECUTE query3;                                    \n" +
                "	DEALLOCATE PREPARE query3;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-03-2019   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (317,'2.00','V1',' Task 5475: Customer and MFG Merge in BOM Level- Jignesh K '," + userid + ");"
            );
            break;
        case 317:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-04-2019  *********************************** */
                "ALTER TABLE component_sid_stock DROP FOREIGN KEY FK_component_sid_stock_customerID;  \n" +
                "	UPDATE component_sid_stock css SET css.customerID = (SELECT id FROM mfgcodemst WHERE customerid =  css.customerID);  \n" +
                "	ALTER TABLE component_sid_stock ADD CONSTRAINT FK_component_sid_stock_customerID FOREIGN KEY (customerID) REFERENCES mfgcodemst(id);  \n" +
                "  \n" +
                "	ALTER TABLE component_sid_stock_history DROP FOREIGN KEY FK_component_sid_stock_history_customerID;  \n" +
                "	UPDATE component_sid_stock_history cssh SET cssh.customerID = (SELECT id FROM mfgcodemst WHERE customerid =  cssh.customerID);  \n" +
                "	ALTER TABLE component_sid_stock_history ADD CONSTRAINT FK_component_sid_stock_history_customerID FOREIGN KEY (customerID) REFERENCES mfgcodemst(id);  \n" +
                "  \n" +
                "	ALTER TABLE component_sid_stock DROP FOREIGN KEY FK_component_sid_stock_refCPNID;  \n" +
                "	ALTER TABLE component_sid_stock DROP COLUMN refCPNID;  \n" +
                "	ALTER TABLE component_sid_stock DROP COLUMN price;  \n" +
                "  \n" +
                "	ALTER TABLE component_sid_stock_history DROP FOREIGN KEY FK_component_sid_stock_history_refCPNID;  \n" +
                "	ALTER TABLE component_sid_stock_history DROP COLUMN refCPNID;  \n" +
                "	ALTER TABLE component_sid_stock_history DROP COLUMN price;  \n" +
                /* **************************** New Script -> 03-04-2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                  \n" +
                "    IN pWhereClause VARCHAR(16383),                                  \n" +
                "    IN puserID VARCHAR(50),                            \n" +
                "    IN pnickName VARCHAR(20),                            \n" +
                "    IN pprefix VARCHAR(20),                            \n" +
                "    IN puid VARCHAR(20),                        \n" +
                "    IN pComponentID INT,                    \n" +
                "    IN pCustomerID INT,                    \n" +
                "    IN pCPN BOOL,                    \n" +
                "    IN pMFGAvailabel BOOL,                    \n" +
                "    IN pRefCpnMfgID INT,                \n" +
                "    IN pAssyID INT,                \n" +
                "    IN pSalesOrderDetailID INT,		                \n" +
                "    IN pReceiveMaterialType VARCHAR(255),      \n" +
                "    IN pkitAssemblyID INT 	               \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                  \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                  \n" +
                "	DECLARE v_length INT;                                   \n" +
                "	DECLARE v_fieldType INT;                                       \n" +
                "	DECLARE v_entityId INT;                                  \n" +
                "	DECLARE v_dataElementId INT;                                  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                  \n" +
                "	DECLARE strLabel VARCHAR(2000);                                  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                  \n" +
                "	DECLARE StaticField VARCHAR(100);            \n" +
                "	DECLARE DynamicField VARCHAR(100);		            \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                  \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                  \n" +
                "	DECLARE plen,slen INT;                                  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                  \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                              \n" +
                "	DECLARE barcode_type_id INT;                        \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                    \n" +
                "	DECLARE UpdateValue VARCHAR(16383);     \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';    \n" +
                "	DECLARE v_SupplierID INT;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                   \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                  \n" +
                "	(                                  \n" +
                "	     errorText NVARCHAR(2000),                                  \n" +
                "	     IsSuccess VARCHAR (2),                        \n" +
                "	     MFGPart VARCHAR(100)                                       \n" +
                "	);                       \n" +
                "	-- get data from barcode templates with seprator                                  \n" +
                "	block1: BEGIN               \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                   \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);       \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN    \n" +
                "			SELECT COUNT(*) INTO @NumberOfPart FROM           \n" +
                "			(          \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL          \n" +
                "				UNION          \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID           \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL          \n" +
                "			) a;			    \n" +
                "			IF (@NumberOfPart > 0) THEN		    \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);    \n" +
                "				SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                   \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);     \n" +
                "			END IF;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		-- tempregexp;    	          \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                        \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                                  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                             \n" +
                "		ELSE /* barcode 1D */     \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                 \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                                   \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                             \n" +
                "		END IF;            \n" +
                "	END block1;                                  \n" +
                "  \n" +
                "	block2: BEGIN      	          \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                                  \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                                  \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                               \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                                   \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                           \n" +
                "		-- declare exit loop if data not found                                  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                  \n" +
                "	        -- if any record match found than  check for delimiter and its value                             \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                                  \n" +
                "			-- create temporary table for deliemeter and component dataelement                                  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                  \n" +
                "				pentityId INT,                                  \n" +
                "				pdataElementId INT,                                  \n" +
                "				pdelimiter_value VARCHAR(200)                                  \n" +
                "			);                             \n" +
                "  \n" +
                "			-- create temporary table for separator string values                                  \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                  \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                        \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                                  \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                                   \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                         \n" +
                "  \n" +
                "			-- open cursor                                  \n" +
                "			OPEN barcodeMatch_cursor;                                  \n" +
                "  \n" +
                "			-- set str label as whereclause                                  \n" +
                "			SET strLabel=pWhereClause;                           \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                                  \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                                  \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                  \n" +
                " 			 END IF;                                 \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                                   \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                                  \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                  \n" +
                "			 END IF;	                        \n" +
                "  \n" +
                "			-- insert all values after seprator split                                   \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                  \n" +
                "			PREPARE stmt1 FROM @SQL;	                                  \n" +
                "			EXECUTE stmt1;                                  \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                                  \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';             \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                                  \n" +
                "			barcodeMatch_loop:LOOP               \n" +
                "				-- get all five selected values                                  \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                          \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                                  \n" +
                "				IF exit_loop THEN                             \n" +
                "					CLOSE barcodeMatch_cursor;                                  \n" +
                "					LEAVE barcodeMatch_loop;                                  \n" +
                "				END IF;                             \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                                  \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                  \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                  \n" +
                "				EXECUTE stmtdelimiter;                        \n" +
                "  \n" +
                "				-- get delimiter values from string                                  \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                          \n" +
                "				-- check for field type is static or dynamic                                  \n" +
                "				-- if static field than check for mfg code and mfg part number                                  \n" +
                "				IF v_fieldType = 0  THEN                              \n" +
                "					-- component_sid_stock                                   \n" +
                "					-- get static field name from barcode table delimiter data element id                                  \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                    \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                  \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                        \n" +
                "						SET MFG_Part_No = delimiter_value_data;                        \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN             \n" +
                "							SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM           \n" +
                "							(          \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL          \n" +
                "								UNION          \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID           \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL          \n" +
                "							) a;          \n" +
                "						ELSE                        \n" +
                "							SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                        \n" +
                "						END IF;                        \n" +
                "  \n" +
                "						IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN    \n" +
                "							SET BarcodeMFGMatch = 'Mismatch';    \n" +
                "							CLOSE barcodeMatch_cursor;                                  \n" +
                "							LEAVE barcodeMatch_loop;      \n" +
                "						END IF;    \n" +
                "  \n" +
                "						SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;    \n" +
                "						IF (@MFGType = 'DIST') THEN    \n" +
                "							SET v_SupplierID = @componentId;    \n" +
                "							SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;    \n" +
                "						END IF;    \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN      \n" +
                "							SELECT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId;				      \n" +
                "							IF (@rfqLineItemsID IS NULL) THEN      \n" +
                "								CLOSE barcodeMatch_cursor;                                  \n" +
                "								LEAVE barcodeMatch_loop;      \n" +
                "							END IF;      \n" +
                "						END IF;      \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                  \n" +
                "						END IF;            \n" +
                "					END IF;                                  \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                  \n" +
                "					IF(StaticField=\"scanmfgcode\") THEN                          \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                  \n" +
                "					END IF;                    \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		            \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                  \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                  \n" +
                "					END IF;                  \n" +
                "					IF @componentCount > 1 THEN                        \n" +
                "						CLOSE barcodeMatch_cursor;                                  \n" +
                "						LEAVE barcodeMatch_loop;                        \n" +
                "					END IF;                           \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                  \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                   \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                                  \n" +
                "  \n" +
                "				ELSE              \n" +
                "					-- component_sid_stock_dataelement_Values                                    \n" +
                "					-- dynamic fields                 \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);             \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                  \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                  \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                  \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                  \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                  \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                  \n" +
                "					END IF;            \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                                   \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                               \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                   \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                           \n" +
                "				END IF;                                  \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                                  \n" +
                "			-- check if mfg and component both found than       \n" +
                "			IF (BarcodeMFGMatch = 'Mismatch') THEN                                  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFGCode is mismatch with barcode template MFGCode',8,MFG_Part_No);      \n" +
                "			ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);      \n" +
                "			ELSEIF (@componentCount > 1) THEN                        \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                  \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                  \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                  \n" +
                "                                   IF @Mfgmatched = 0  THEN                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                  \n" +
                "				   END IF;									                                  \n" +
                "			 ELSE 		                        \n" +
                "				IF @mfgCount = 0 THEN                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                  \n" +
                "		                END IF;	                                  \n" +
                "				IF @componentCount = 0 THEN                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                  \n" +
                "				END IF;	                                  \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                                    \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                  \n" +
                "			        END IF;						                                  \n" +
                "			END IF;				                                  \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN                    \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                    \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                    \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                  \n" +
                "				END IF;                    \n" +
                "			END IF;                    \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                  \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	                    \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                    \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                    \n" +
                "				END IF;                 \n" +
                "  \n" +
                "				-- must call statements in sequence          				                        \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                  \n" +
                "				PREPARE stmt1 FROM @SQL1;                                  \n" +
                "				EXECUTE stmt1;                                \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                    \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                    \n" +
                "				END IF;                    \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                    \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                    \n" +
                "				END IF;                    \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                    \n" +
                "				END IF;                    \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                    \n" +
                "				END IF;                \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                    \n" +
                "				END IF;                \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                 \n" +
                "				END IF;    \n" +
                "  \n" +
                "				IF (v_SupplierID IS NOT NULL) THEN                    \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                    \n" +
                "				END IF;       \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                    \n" +
                "				SET @sql2 = UpdateValue;	                                   \n" +
                "				PREPARE stmt2 FROM @SQL2;                                  \n" +
                "				EXECUTE stmt2;	                                  \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                  \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                        \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                   \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                  \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                  \n" +
                "			ELSE                                 \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                  \n" +
                "			END IF;                                  \n" +
                "  \n" +
                "		ELSE                              \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                   \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                  \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                    \n" +
                "		END IF;                                  \n" +
                "  \n" +
                "	END block2;                                             \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-04-2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                            \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),	                            \n" +
                "        IN pWhereClause VARCHAR(16383)                                \n" +
                "    )  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                             \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                            \n" +
                "               SELECT 	css.id, css.scanlabel, css.pkgQty, css.uid, css.printStatus, cc.categoryName, css.lotCode, css.dateCode, c.mfgcodeID, c.mfgPN, c.PIDCode, c.packaginggroupID, 0 AS dedicatedQty, 0 AS reservedQty, mfg.id AS mfgID, mfg.mfgCode, ro.rohsIcon, ro.name AS rohsName, IFNULL(c.packageQty,1) packageQty,              \n" +
                "			css.binID, CONCAT('(',mfg.mfgCode,')', ' ', mfg.mfgName) AS mfg,    \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,                        \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,                        \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,              \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,              \n" +
                "			(SELECT CONCAT('(', mfg.mfgCode, ')',mfg.mfgName) FROM mfgcodemst mfg WHERE mfg.id=css.customerID AND mfg.deletedAt IS NULL LIMIT 1) customer,              \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.id AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,              \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,              \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,              \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,              \n" +
                "			(SELECT CONCAT('(',mcm.mfgCode,')', ' ', mcm.mfgName) AS CPNMFG FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,              \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,              \n" +
                "			c.mfgPNDescription, css.receiveMaterialType, css.spq, css.pcbPerArray, css.updatedAt, css.nickName                             \n" +
                "               FROM component_sid_stock css                            \n" +
                "               LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                           \n" +
                "	       LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                            \n" +
                "               LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                         \n" +
                "               LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                          \n" +
                "               WHERE IFNULL(css.isdeleted,0) = 0;                            \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pkgQty DESC\") ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                            \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-04-2019  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                        \n" +
                "	IN pCustomerID INT(11)                  \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DECLARE mfgCodeID INT(11);                   \n" +
                "	DECLARE whereClause VARCHAR(500);            \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";             \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN            \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);            \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,         \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, mfg.mfgCode         \n" +
                "	FROM component c         \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0         \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                  \n" +
                "    PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                 \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03-04-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (318,'2.00','V1',' component sid stock changes for customer table change - FENIL '," + userid + ");"
            );
            break;
        case 318:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerLatestDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerLatestDetails`(            \n" +
                "    IN pWOOPID INT(11),  \n" +
                "    IN pEmployeeID INT(11),         \n" +
                "    IN pWOID INT(11)  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "	SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;  \n" +
                "	/****************************************** 1.Get WO Transaction Details *******************************************/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_wo_trans;      \n" +
                "	CREATE TEMPORARY TABLE temp_wo_trans AS   \n" +
                "	SELECT   \n" +
                "		`woTransID`,   \n" +
                "		`woID`,   \n" +
                "		`opID`,   \n" +
                "		`woOPID`,   \n" +
                "		`issueQty`,   \n" +
                "		`checkinEmployeeID`,   \n" +
                "		`checkinTime`,   \n" +
                "		`checkoutTime`,   \n" +
                "		`woentrytype`,   \n" +
                "		`isSetup`   \n" +
                "		FROM `workorder_trans` AS `woTransDetails`  \n" +
                "			WHERE (`woTransDetails`.`deletedAt` IS NULL   \n" +
                "				AND (`woTransDetails`.`woOPID` = pWOOPID  \n" +
                "				AND `woTransDetails`.`woentrytype` = 'T'   \n" +
                "				AND `woTransDetails`.`checkoutTime` IS NULL)  \n" +
                "			)   \n" +
                "		AND   \n" +
                "		(   \n" +
                "			SELECT `woTransID` FROM `workorder_trans_empinout` AS `Workorder_Trans_Empinout`   \n" +
                "			WHERE (`Workorder_Trans_Empinout`.`woTransID` = `woTransDetails`.`woTransID`   \n" +
                "				AND (`Workorder_Trans_Empinout`.`deletedAt` IS NULL   \n" +
                "					AND (`Workorder_Trans_Empinout`.`woTransID` = `woTransDetails`.`woTransID`   \n" +
                "						AND `Workorder_Trans_Empinout`.`employeeID` = pEmployeeID  \n" +
                "						AND `Workorder_Trans_Empinout`.`checkoutTime` IS NULL)  \n" +
                "						)  \n" +
                "				) LIMIT 1   \n" +
                "			) IS NOT NULL LIMIT 1;  \n" +
                "  \n" +
                "	SELECT * FROM temp_wo_trans;  \n" +
                "	SELECT woTransID INTO @pwoTransID FROM temp_wo_trans;  \n" +
                "	/****************************************** 1.Get WO Transaction Details *******************************************/  \n" +
                "  \n" +
                "	/****************************************** 2.Get WO Transaction With Employee CheckIn-CheckOut and Pause/Resume Details *******************************************/  \n" +
                "	SELECT woOPEmp.woID,  \n" +
                "		woOPEmp.opID,  \n" +
                "		woOPEmp.employeeID,  \n" +
                "		woOPEmp.woOPID,  \n" +
                "		emp.firstName,  \n" +
                "		emp.lastName,  \n" +
                "		woOPEmpInOut.woTransID,  \n" +
                "		woOPEmpInOut.woTransinoutID,  \n" +
                "		woOPEmpInOut.checkinTime,  \n" +
                "		woOPEmpInOut.checkoutTime,  \n" +
                "		woOPEmpInOut.isPaused,  \n" +
                "		woOPEmpPauseDet.woTransemppausedID,  \n" +
                "		woOPEmpPauseDet.pausedTime FROM workorder_operation_employee woOPEmp  \n" +
                "	LEFT JOIN workorder_trans_empinout woOPEmpInOut   \n" +
                "	ON woOPEmp.employeeID = woOPEmpInOut.employeeID   \n" +
                "	AND (woOPEmp.deletedAt IS NULL   \n" +
                "		AND woOPEmpInOut.woTransID = @pwoTransID  \n" +
                "		AND woOPEmpInOut.woOPID = woOPEmp.woOPID  \n" +
                "		AND `woOPEmpInOut`.`checkoutTime` IS NULL)  \n" +
                "  \n" +
                "	LEFT JOIN workorder_trans_emp_pausedet woOPEmpPauseDet   \n" +
                "	ON  woOPEmpPauseDet.woTransinoutID = woOPEmpInOut.woTransinoutID   \n" +
                "	AND (woOPEmpPauseDet.deletedAt IS NULL  \n" +
                "		AND woOPEmpPauseDet.resumeTime IS NULL)  \n" +
                "  \n" +
                "	LEFT JOIN employees emp   \n" +
                "	ON emp.id = woOPEmp.employeeID   \n" +
                "	AND (emp.isActive = TRUE   \n" +
                "		AND emp.deletedAt IS NULL)  \n" +
                "  \n" +
                "	WHERE woOPEmp.woOPID = pWOOPID AND woOPEmp.woID = @pwoID AND woOPEmp.deletedAt IS NULL;  \n" +
                "	/****************************************** 2.Get WO Transaction With Employee CheckIn-CheckOut and Pause/Resume Details *******************************************/  \n" +
                "  \n" +
                "	/********************************* 3.current data ****************************************************/	  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 3.current data ****************************************************/	  \n" +
                "  \n" +
                "	/********************************** 4.current data ***************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, @pwoTransID);  \n" +
                "	/********************************** 4.current data ***************************************************/  \n" +
                "  \n" +
                "  \n" +
                "	/****************************************** 5.Get Active Operation Details *******************************************/  \n" +
                "	SELECT woop.opName,   \n" +
                "		woop.opNumber,   \n" +
                "		woop.isTeamOperation,   \n" +
                "		woop.isStopOperation,   \n" +
                "		wo.woVersion,  \n" +
                "		wo.woNumber,  \n" +
                "		wo.isStopWorkorder,   \n" +
                "		woOPEmpInOut.woTransID,  \n" +
                "		woOPEmpInOut.woTransinoutID,  \n" +
                "		woOPEmpInOut.woID,  \n" +
                "		woOPEmpInOut.opID,  \n" +
                "		woOPEmpInOut.woOPID,  \n" +
                "		woOPEmpInOut.employeeID,  \n" +
                "		woOPEmpInOut.checkinTime,  \n" +
                "		woOPEmpInOut.checkoutTime,  \n" +
                "		woOPEmpInOut.isPaused,  \n" +
                "		woOPEmpPauseDet.woTransemppausedID,  \n" +
                "		woOPEmpPauseDet.pausedTime  \n" +
                "		FROM workorder_trans_empinout woOPEmpInOut   \n" +
                "	LEFT JOIN workorder_operation woop  \n" +
                "	ON woop.woopid = woOPEmpInOut.woopid  \n" +
                "	AND woop.deletedAt IS NULL  \n" +
                "  \n" +
                "	LEFT JOIN workorder wo  \n" +
                "	ON wo.woid = woOPEmpInOut.woid  \n" +
                "	AND wo.deletedAt IS NULL  \n" +
                "  \n" +
                "	LEFT JOIN workorder_trans_emp_pausedet woOPEmpPauseDet   \n" +
                "	ON  woOPEmpPauseDet.woTransinoutID = woOPEmpInOut.woTransinoutID   \n" +
                "	AND (woOPEmpPauseDet.deletedAt IS NULL  \n" +
                "		AND woOPEmpPauseDet.resumeTime IS NULL)  \n" +
                "  \n" +
                "	WHERE woOPEmpInOut.employeeID=pEmployeeID   \n" +
                "	AND woOPEmpInOut.checkOutTime IS NULL  \n" +
                "	AND woOPEmpInOut.deletedAt IS NULL;  \n" +
                "	/****************************************** 5.Get Active Operation Details  *******************************************/  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerPageDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerPageDetails`(            \n" +
                "    IN pWOOPID INT(11),  \n" +
                "    IN pEmployeeID INT(11)  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "	SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/  \n" +
                "	SELECT   \n" +
                "	`woop`.`woOPID`,   \n" +
                "	`woop`.`woID`,   \n" +
                "	`woop`.`opID`,   \n" +
                "	`woop`.`opName`,   \n" +
                "	`woop`.`opNumber`,   \n" +
                "	`woop`.`opStatus`,   \n" +
                "	`woop`.`opDoes`,   \n" +
                "	`woop`.`opDonts`,   \n" +
                "	`woop`.`opDescription`,   \n" +
                "	`woop`.`opWorkingCondition`,   \n" +
                "	`woop`.`opManagementInstruction`,   \n" +
                "	`woop`.`opDeferredInstruction`,   \n" +
                "	`woop`.`colorCode`,   \n" +
                "	`woop`.`qtyControl`,   \n" +
                "	`woop`.`isIssueQty`,   \n" +
                "	`woop`.`opVersion`,   \n" +
                "	`woop`.`isRework`,   \n" +
                "	`woop`.`isNoClean`,   \n" +
                "	`woop`.`isWatersoluble`,   \n" +
                "	`woop`.`isTeamOperation`,   \n" +
                "	`woop`.`isStopOperation`,   \n" +
                "	`woop`.`firstPcsModel`,   \n" +
                "	`woop`.`firstPcsConclusion`,   \n" +
                "	`woop`.`firstPcsStatus`,   \n" +
                "	`woop`.`isPreProgrammingComponent`,    \n" +
                "	`opType`.`gencCategoryName` AS `operationType`,   \n" +
                "	`woCluster`.`isParellelOperation` AS `isParellelOperation`,  \n" +
                "	`wo`.`woID` AS `woID`,   \n" +
                "	`wo`.`woNumber` AS `woNumber`,   \n" +
                "	`wo`.`buildQty` AS `buildQty`,   \n" +
                "	`wo`.`RoHSStatusID` AS `RoHSStatusID`,   \n" +
                "	`wo`.`isNoClean` AS `isNoClean`,   \n" +
                "	`wo`.`isWatersoluble` AS `isWatersoluble`,   \n" +
                "	`wo`.`woVersion` AS `woVersion`,   \n" +
                "	`wo`.`woStatus` AS `woStatus`,   \n" +
                "	`wo`.`isOperationTrackBySerialNo` AS `isOperationTrackBySerialNo`,   \n" +
                "	`wo`.`isStopWorkorder` AS `isStopWorkorder`,   \n" +
                "	`componentAssembly`.`mfgPN` AS `mfgPN`,   \n" +
                "	`componentAssembly`.`PIDCode` AS `PIDCode`,   \n" +
                "	`componentAssembly`.`rev` AS `rev`,   \n" +
                "	`componentAssembly`.`nickName` AS `nickName`  \n" +
                "	FROM `workorder_operation` AS `woop`   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_operation_cluster` AS `woOPCluster`   \n" +
                "	ON `woop`.`woOPID` = `woOPCluster`.`woOPID`   \n" +
                "	AND `woOPCluster`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_cluster` AS `woCluster`   \n" +
                "	ON `woOPCluster`.`clusterID` = `woCluster`.`clusterID`   \n" +
                "	AND `woCluster`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder` AS `wo`  \n" +
                "	ON `woop`.`woID` = `wo`.`woID`   \n" +
                "	AND `wo`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `component` AS `componentAssembly`   \n" +
                "	ON `wo`.`partID` = `componentAssembly`.`id`   \n" +
                "	AND `componentAssembly`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `opType`   \n" +
                "	ON `woop`.`operationTypeID` = `opType`.`gencCategoryID`   \n" +
                "	AND `opType`.`deletedAt` IS NULL   \n" +
                "	WHERE (`woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pWOOPID);  \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/  \n" +
                "  \n" +
                "	/************************************** 2.Get Employee Details *****************************************/  \n" +
                "	SELECT   \n" +
                "	`Employee`.`id`,   \n" +
                "	`Employee`.`firstName`,   \n" +
                "	`Employee`.`lastName`,   \n" +
                "	`Employee`.`profileImg`,   \n" +
                "	`dept`.`deptName` AS `deptName`,  \n" +
                "	`empTitle`.`gencCategoryName` AS `titleName`  \n" +
                "	FROM `employees` AS `Employee`   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `employee_department` AS `empDept`   \n" +
                "	ON `Employee`.`id` = `empDept`.`employeeID`   \n" +
                "	AND (`empDept`.`deletedAt` IS NULL AND `empDept`.`isDefault` = TRUE)   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `department` AS `dept`   \n" +
                "	ON `empDept`.`departmentID` = `dept`.`deptID`   \n" +
                "	AND `dept`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `empTitle`   \n" +
                "	ON `empDept`.`titleID` = `empTitle`.`gencCategoryID`   \n" +
                "	AND `empTitle`.`deletedAt` IS NULL   \n" +
                "  \n" +
                "	WHERE (`Employee`.`deletedAt` IS NULL AND (`Employee`.`id` = pEmployeeID AND `Employee`.`isDeleted` = FALSE));  \n" +
                "	/****************************************** Get 2.Employee Details *******************************************/  \n" +
                "  \n" +
                "	/************************************** Get 3.Workorder Operation List ***********************************************/  \n" +
                "	SELECT   \n" +
                "		a.`woID` AS `woID`,   \n" +
                "		a.`opID` AS `opID`,   \n" +
                "		a.`woOPID` AS `woOPID`,   \n" +
                "		a.`opNumber` AS `opNumber`,   \n" +
                "		a.`opName` AS `opName`,   \n" +
                "		a.`isNoClean` AS `isNoClean`,   \n" +
                "		a.`isWatersoluble` AS `isWatersoluble`,   \n" +
                "		a.`isRework` AS `isRework`,   \n" +
                "		a.`operationTypeID` AS `operationTypeID`  \n" +
                "	FROM workorder_operation a  \n" +
                "	WHERE a.deletedAt IS NULL AND a.woID = @pwoID;   \n" +
                "	/**************************************** Get 3.Workorder Operation List *********************************************/  \n" +
                "  \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	  \n" +
                "	SELECT   \n" +
                "	`woTransHold`.`reason` AS `reason`,   \n" +
                "	`woTransHold`.`resumeReason` AS `resumeReason`,   \n" +
                "	`woTransHold`.`startDate` AS `woStartDate`,   \n" +
                "	`woTransHold`.`holdEmployeeId` AS `woHoldEmployeeId`,   \n" +
                "	`woTransHoldEmployee`.`firstName` AS `woHoldEmployeeFirstName`,   \n" +
                "	`woTransHoldEmployee`.`lastName` AS `woHoldEmployeeLastName`,   \n" +
                "	`woTransHoldEmployee`.`initialName` AS `woHoldBy`  \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woTransHold`   \n" +
                "	LEFT OUTER JOIN `employees` AS `woTransHoldEmployee`   \n" +
                "	ON `woTransHold`.`holdEmployeeId` = `woTransHoldEmployee`.`id`   \n" +
                "	AND `woTransHoldEmployee`.`deletedAt` IS NULL   \n" +
                "	WHERE `woTransHold`.`woID` = @pwoID AND (`woTransHold`.`deletedAt` IS NULL   \n" +
                "	AND `woTransHold`.`endDate` IS NULL);  \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	  \n" +
                "  \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	  \n" +
                "	SELECT    \n" +
                "	`woOPTransHold`.`woTransOpHoldUnholdId` AS `woTransOpHoldUnholdId`,   \n" +
                "	`woOPTransHold`.`reason` AS `reason`,   \n" +
                "	`woOPTransHold`.`resumeReason` AS `resumeReason`,   \n" +
                "	`woOPTransHold`.`startDate` AS `opStartDate`,   \n" +
                "	`woOPTransHold`.`endDate` AS `opEndDate`,   \n" +
                "	`woOPTransHold`.`holdEmployeeId` AS `woopHoldEmployeeId`,  \n" +
                "	`woOPTransHoldEmployee`.`firstName` AS `woopHoldEmployeesFirstName`,   \n" +
                "	`woOPTransHoldEmployee`.`lastName` AS `woopHoldEmployeesLastName`,   \n" +
                "	`woOPTransHoldEmployee`.`initialName` AS `opHoldBy`  \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woOPTransHold`   \n" +
                "	LEFT OUTER JOIN `employees` AS `woOPTransHoldEmployee`   \n" +
                "	ON `woOPTransHold`.`holdEmployeeId` = `woOPTransHoldEmployee`.`id`   \n" +
                "	AND `woOPTransHoldEmployee`.`deletedAt` IS NULL   \n" +
                "	WHERE `woOPTransHold`.`woOPID` = pWOOPID   \n" +
                "	AND (`woOPTransHold`.`deletedAt` IS NULL   \n" +
                "	AND `woOPTransHold`.`endDate` IS NULL);  \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	  \n" +
                "  \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction, 7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/  \n" +
                "	CALL Sproc_GetTravelerLatestDetails (pWOOPID, pEmployeeID, @pWOID );  \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction,7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (319,'2.00','V1',' Traveler Page Changes - Vaibhav '," + userid + ");"
            );
            break;
        case 319:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentDetail AS   \n" +
                "SELECT c.id,c.aliasgroupID  \n" +
                "               FROM   component c LEFT JOIN mfgcodemst m  \n" +
                "               ON c.mfgcodeid=m.id WHERE m.iscustordisty IS NULL AND m.mfgtype='MFG'AND c.aliasgroupID IS NOT NULL;  \n" +
                "UPDATE component SET refSupplierMfgpnComponentID=(SELECT id FROM tempComponentDetail t WHERE t.aliasgroupID=component.aliasgroupID LIMIT 1);  \n" +
                "UPDATE component SET refSupplierMfgpnComponentID=(NULL) WHERE refSupplierMfgpnComponentID=id;  \n" +
                "INSERT INTO component_fields_genericalias_mst (refTableName,refId,alias,isDeleted,createdBy)   \n" +
                "SELECT 'component_packagingmst',id,'Cut Strips',0,'1' FROM component_packagingmst WHERE `name`='Cut Tape';  \n" +
                /* **************************** Add Script Version -> 04-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (320,'2.00','V1','Update entry for component table-champak'," + userid + ");"
            );
            break;
        case 320:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                                                          \n" +
                "			UNION ALL                                                          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)   \n" +
                "			UNION ALL                                                          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)   \n" +
                "			UNION ALL                                                          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)   \n" +
                "		    ) q');                                                          \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                                                          \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempcustomer_addresses;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempcustomer_addresses;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (321,'2.00','V1',' sp Sproc_checkDelete_customer_addresses - KETAN '," + userid + ");"
            );
            break;
        case 321:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/04/2019   *********************************** */
                "ALTER TABLE shippedassembly DROP FOREIGN KEY FK_outwardassembly_customerID;  \n" +
                "Update shippedassembly s SET s.customerID = (select id From mfgcodemst where customerid =  s.customerID);   \n" +
                "ALTER TABLE shippedassembly ADD CONSTRAINT FK_shippedassembly_mfgcodemst_customerID FOREIGN KEY (customerID) REFERENCES MfgCodemst(id);  \n" +
                /* **************************** New Script -> 03/04/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetShippedAssembly`;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedAssembly`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "    IN pWhereClause VARCHAR(16383)          \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "		SELECT 	ow.*, 				co.PIDCode AS PIDCode,  	Cast('' as char(255)) mfgName,		  \n" +
                "				wo.woNumber,  		woop.opName,				spm.description,			  \n" +
                "                som.salesOrderNumber      \n" +
                "		FROM shippedassembly ow      \n" +
                "		LEFT JOIN component co ON ow.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category, 0) = 3      \n" +
                "        LEFT JOIN workorder wo ON ow.workorderID = wo.woID AND IFNULL(wo.isdeleted,0) = 0      \n" +
                "        LEFT JOIN workorder_operation woop ON ow.woOPID=woop.woOPID AND IFNULL(woop.isdeleted,0) = 0      \n" +
                "        LEFT JOIN salesshippingmst spm ON spm.shippingID=ow.shippingId AND IFNULL(spm.isdeleted,0) = 0      \n" +
                "        LEFT JOIN salesorderdet sdet ON sdet.id=spm.sDetID AND IFNULL(sdet.isdeleted,0) = 0      \n" +
                "        LEFT JOIN salesordermst som ON som.id=sdet.refSalesOrderID AND IFNULL(som.isdeleted,0) = 0      \n" +
                "        WHERE IFNULL(ow.isdeleted,0) = 0;      \n" +
                "  \n" +
                "    UPDATE 	Results r,  mfgcodemst m  \n" +
                "    SET		r.mfgName = CONCAT(\"(\", m.mfgCode, \") \", m.mfgName)  \n" +
                "    WHERE	r.customerID = m.id  \n" +
                "	AND 	IFNULL(m.isdeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"PIDCode DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03/04/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetShippingRequestDet`;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippingRequestDet`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "    IN pWhereClause VARCHAR(16383)          \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "		SELECT 	srd.id, 				srd.woID, 		srd.note, 		srd.qty,   \n" +
                "				srd.shippingRequestID, 	wo.woNumber,	wo.buildQty, 	wo.poQty,   \n" +
                "                wo.poNumber,    		 wo.customerID,  \n" +
                "				co.nickname AS `nickName`, co.PIDcode AS `PIDCode`,   \n" +
                "                Cast('' as char(255)) mfgName     \n" +
                "        FROM shipping_requestdet srd      \n" +
                "        JOIN workorder wo ON srd.woID = wo.woID AND IFNULL(wo.isDeleted, 0) = 0      \n" +
                "        JOIN component co ON wo.partID = co.id AND IFNULL(co.isDeleted, 0) = 0  AND IFNULL(co.category, 0) = 3     \n" +
                "        WHERE IFNULL(srd.isDeleted, 0) = 0;      \n" +
                "  \n" +
                "	UPDATE 	Results r,  mfgcodemst m  \n" +
                "    SET		r.mfgName = CONCAT(\"(\", m.mfgCode, \") \", m.mfgName)  \n" +
                "    WHERE	r.customerID = m.id  \n" +
                "	AND 	IFNULL(m.isdeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\");      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/04/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (322,'2.00','V1',' Shipped assembly related changes for customer table merge - Dharmishtha '," + userid + ");"
            );
            break;
        case 322:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                                                                \n" +
                "	IN tableName VARCHAR(255),                                                                \n" +
                "	IN IDs LONGTEXT,                                                                \n" +
                "	IN deletedBy INT,                                                                \n" +
                "	IN entityID VARCHAR(255),                                                                \n" +
                "	IN refrenceIDs LONGTEXT                                                                \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                     \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                                \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                                \n" +
                "			FROM                                                                 \n" +
                "			(                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias_rev_pn\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                                \n" +
                "				UNION ALL                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "			) q');                                                                \n" +
                "		PREPARE stmt FROM @SQL;                                                                \n" +
                "		EXECUTE stmt;                                                                \n" +
                "		IF (SELECT TotalCount FROM tempComponent)=0 THEN                                                                \n" +
                "			START TRANSACTION;        \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                                \n" +
                "					EXECUTE stmt1;                                                                \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');      \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                                \n" +
                "					EXECUTE stmt1;      \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;         \n" +
                "  \n" +
                "			COMMIT;                                                               \n" +
                "		ELSE                                                                \n" +
                "			SELECT * FROM tempComponent;                                                                \n" +
                "		END IF;                                                                \n" +
                "		DROP TABLE tempComponent;            \n" +
                "        END;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyComponent`(                  \n" +
                "	IN BuyByID INT(1),                  \n" +
                "	IN BuyToID INT(1),                \n" +
                "    IN UserID INT(1)                \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "  BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "    START TRANSACTION;                  \n" +
                "  \n" +
                "				SET @rank = (SELECT id FROM component ORDER BY id DESC LIMIT 1);      \n" +
                "  \n" +
                "				INSERT INTO `component`                \n" +
                "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `RoHSStatusID`,                \n" +
                "				`isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`,                \n" +
                "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,                 \n" +
                "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,                \n" +
                "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,                 \n" +
                "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,                \n" +
                "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)                \n" +
                "				-- SELECT  @rank:=@rank+1 AS `PID`,                \n" +
                "				 SELECT  @rank+1 AS `PID`,                \n" +
                "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,                 \n" +
                "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`RoHSStatusID`,             \n" +
                "                com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,                \n" +
                "				com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,                 \n" +
                "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,                 \n" +
                "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,                 \n" +
                "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,                 \n" +
                "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,                \n" +
                "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,                \n" +
                "				(SELECT LEFT(CONCAT((SELECT mfgCode FROM mfgcodemst WHERE id = BuyByID),'+',c.mfgPN),30) `PIDCode`                \n" +
                "				 FROM component c JOIN mfgcodemst m ON m.id = c.mfgcodeID  WHERE c.mfgcodeID = BuyToID AND c.id = com.id AND IFNULL(c.isDeleted,0) = 0) `PIDCode`                \n" +
                "				FROM component com                 \n" +
                "				WHERE com.mfgcodeID = BuyToID AND IFNULL(com.isDeleted,0) = 0;               \n" +
                "  \n" +
                "                /*   As per discussion with Dixitbhai not require to insert alias, packeging alias, and alternate alias for component.(04-10-2028)            \n" +
                "				INSERT INTO `component_alias`                \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)                \n" +
                "				select                \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,                 \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`                \n" +
                "				from component_alias ca join component c on c.id = ca.componentID                \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;                \n" +
                "  \n" +
                "                INSERT INTO `component_alternatepn`                \n" +
                "				(`refComponentID`,`componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)                \n" +
                "				select                \n" +
                "				ca.`refComponentID` ,(select id from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,                 \n" +
                "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`                \n" +
                "				from component_alternatepn ca join component c on c.id = ca.componentID                \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);                \n" +
                "				INSERT INTO `component_packagingalias`                \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)                \n" +
                "				select                \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,                \n" +
                "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`                \n" +
                "				from component_packagingalias ca join component c on c.id = ca.componentID                \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;                \n" +
                "  \n" +
                "                */            \n" +
                "				INSERT INTO `component_rohsalternatepn`                \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)                \n" +
                "				SELECT                \n" +
                "				ca.`aliasgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`                \n" +
                "				FROM component_rohsalternatepn ca JOIN component c ON c.id = ca.componentID                \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;                \n" +
                "				/*   \n" +
                "				INSERT INTO `component_goodbadpartmapping`                \n" +
                "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)                \n" +
                "				SELECT            \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cG.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,                 \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cB.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,                \n" +
                "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`                \n" +
                "				FROM component_goodbadpartmapping ca JOIN component cB ON cB.id = ca.badComponentID                \n" +
                "				JOIN component cG ON cG.id	= ca.goodComponentID                \n" +
                "				WHERE ca.badComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) OR             \n" +
                "				ca.goodComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;                \n" +
                "				*/  \n" +
                "  \n" +
                "				INSERT INTO `component_standard_details`                \n" +
                "				(`componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)                \n" +
                "				SELECT                \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,                \n" +
                "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`                \n" +
                "				FROM component_standard_details ca JOIN component c ON c.id = ca.componentID                \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;                \n" +
                "				INSERT INTO `component_drivetools`                \n" +
                "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)                \n" +
                "				SELECT                \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`                \n" +
                "				FROM component_drivetools ca JOIN component c ON c.id = ca.refComponentID                \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;                \n" +
                "				INSERT INTO `component_requiremapping_parts`                \n" +
                "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)                \n" +
                "				SELECT                \n" +
                "				ca.`requiredMatingPartgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,                \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`                \n" +
                "				FROM component_requiremapping_parts ca JOIN component c ON c.id = ca.refComponentID                \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;                \n" +
                "				INSERT INTO `component_dataelement`                \n" +
                "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)                \n" +
                "				SELECT                \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,                \n" +
                "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`                \n" +
                "				FROM component_dataelement ca JOIN component c ON c.id = ca.componentID                \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;                \n" +
                "  COMMIT;                  \n" +
                "SELECT * FROM component WHERE mfgcodeID = BuyByID;                \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;                  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                               \n" +
                "	IN pPassword VARCHAR(500)                     \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN                      \n" +
                "		#Start - Delete Role                    \n" +
                "		TRUNCATE TABLE rolepagedetail;                    \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                    \n" +
                "		TRUNCATE TABLE standard_role;                    \n" +
                "  \n" +
                "		#Start - Delete Features of roles                    \n" +
                "		DELETE FROM feature_role_mapping;                    \n" +
                "		#End - Delete Features of roles                    \n" +
                "  \n" +
                "		#Start - Delete Generic Folder                    \n" +
                "		UPDATE genericfiles SET refParentId = NULL               \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));                   \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);                    \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL               \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);              \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;                    \n" +
                "  \n" +
                "		#End - Delete Generic Folder                    \n" +
                "  \n" +
                "		#Start - Delete Generic Files                    \n" +
                "		TRUNCATE TABLE genericfiles;                    \n" +
                "		#End - Delete Generic Files                    \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');                    \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;                    \n" +
                "		#End - Delete Role                    \n" +
                "		#Start - Delete Generic Category                    \n" +
                "			TRUNCATE TABLE employee_department;                    \n" +
                "			#Start - Delete Part                    \n" +
                "			TRUNCATE TABLE operation_part;                    \n" +
                "			TRUNCATE TABLE workorder_operation_part;           \n" +
                "			#End - Delete Part                    \n" +
                "			#Start - Delete Equipment                    \n" +
                "				TRUNCATE TABLE operation_equipment;                    \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;                    \n" +
                "				TRUNCATE TABLE equipment_dataelement;                    \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;                    \n" +
                "  \n" +
                "				#Start - Delete Equipment Task                    \n" +
                "				TRUNCATE TABLE equipment_task_schedule;                    \n" +
                "				DELETE FROM equipment_task;                    \n" +
                "				#End - Delete Equipment Task                    \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master                    \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;                    \n" +
                "				DELETE FROM workorder_serialmst;                    \n" +
                "				# End - Delete Workorder Trans Serial Master                    \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail                    \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;                    \n" +
                "				DELETE FROM workorder_trans_empinout;                    \n" +
                "				#End - Delete Workorder Transaction InOut Detail                    \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction                    \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;                    \n" +
                "				TRUNCATE TABLE workorder_trans_production;                    \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;                    \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;                    \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;                    \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;                    \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;                    \n" +
                "				DELETE FROM workorder_trans;                    \n" +
                "				# End - Delete Workorder Transaction                    \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;                    \n" +
                "				DELETE FROM equipment;                    \n" +
                "			#End - Delete Equipment                    \n" +
                "			# Start - Delete Operation                    \n" +
                "			TRUNCATE TABLE operation_equipment;                    \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element                    \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;                    \n" +
                "			DELETE FROM workorder_operation_dataelement;                    \n" +
                "			# End - Delete Workorder Operation Data Element                    \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;                    \n" +
                "			TRUNCATE TABLE workorder_operation_employee;                    \n" +
                "			TRUNCATE TABLE operation_master_templates;                    \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			                    \n" +
                "				# Start - Delete ECO Request 			                    \n" +
                "					# Start - Delete ECO Request Approval                    \n" +
                "					TRUNCATE TABLE eco_request_department_employee;                    \n" +
                "					DELETE FROM eco_request_department_approval;                    \n" +
                "					# End - Delete ECO Request Approval                    \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;                    \n" +
                "				DELETE FROM eco_request;                    \n" +
                "				# End - Delete ECO Request                    \n" +
                "  \n" +
                "			# Start - Delete Shipping Details                    \n" +
                "			TRUNCATE TABLE shippedassembly;                    \n" +
                "			DELETE FROM salesshippingmst;                    \n" +
                "			DELETE FROM workorder_salesorder_details;                    \n" +
                "			DELETE FROM salesorderdet;                    \n" +
                "			DELETE FROM salesordermst;                    \n" +
                "			# End - Delete Shipping Details                    \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review                     \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;                    \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;                    \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;                    \n" +
                "			DELETE FROM workorder_reqforreview;                    \n" +
                "			# End - Delete Workorder Request Review                     \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;                    \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;                    \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming                    \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;                    \n" +
                "			DELETE FROM workorder_preprogcomp_designator;                    \n" +
                "			DELETE FROM workorder_preprogcomp;                    \n" +
                "			# End - Delete Workorder Tran PreProgramming                    \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;                    \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;                    \n" +
                "			# End - Delete Workorder Operation                    \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;                    \n" +
                "  \n" +
                "			#Start - Delete Chart                    \n" +
                "			TRUNCATE TABLE chart_template_operations;              \n" +
                "			TRUNCATE TABLE chart_template_employee_details;                   \n" +
                "			TRUNCATE TABLE chart_template_access;               \n" +
                "			DELETE FROM chart_templatemst;                    \n" +
                "			#Start - End Chart                    \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;                    \n" +
                "			# End - Delete Operation                    \n" +
                "			TRUNCATE TABLE standard_message;                    \n" +
                "			# Start - Delete Component                    \n" +
                "			TRUNCATE TABLE component_alias;                   \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';                \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;                    \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;                    \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;              \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;                 \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;                 \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';                \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;                \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;                \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';                \n" +
                "			#TRUNCATE TABLE component_goodbadpartmapping;                    \n" +
                "			TRUNCATE TABLE component_processmaterial;                    \n" +
                "			TRUNCATE TABLE component_drivetools;                    \n" +
                "			TRUNCATE TABLE component_standard_details;                    \n" +
                "  \n" +
                "			# Start - Delete Recieving Material                    \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;                    \n" +
                "			DELETE FROM component_sid_stock;                \n" +
                "			DELETE FROM cost_category;                        \n" +
                "			# End - Delete Recieving Material                    \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;                    \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;                 \n" +
                "			TRUNCATE TABLE standard_class;                   \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;              \n" +
                "			DELETE FROM certificate_standards;                  \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;              \n" +
                "			DELETE FROM br_label_template;              \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL              \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Ownerships';              \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL              \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Types';              \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL              \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Types';              \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL              \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Types';              \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL              \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Responsibilities';              \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;                    \n" +
                "			# End - Delete Component                    \n" +
                "  \n" +
                "		#End - Delete Generic Category                    \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;              \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;              \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;              \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;              \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;              \n" +
                "		TRUNCATE TABLE rfq_assembly_history;              \n" +
                "		DELETE FROM rfq_lineitems;              \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;              \n" +
                "		DELETE FROM component WHERE id > 0;               \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;                    \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;               \n" +
                "		#Start - Delete Entity                    \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                    \n" +
                "		DELETE FROM workorder_operation_dataelement;                    \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;                    \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                    \n" +
                "		DELETE FROM workorder_trans_subform_data;                  \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;                 \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';                \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                    \n" +
                "		DELETE FROM subform_transaction;                    \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;                    \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;              \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;              \n" +
                "		DELETE FROM dataelement;                  \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;                    \n" +
                "		#End - Delete Entity                    \n" +
                "		#Start - Delete UOMS                         \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;              \n" +
                "		DELETE FROM rfq_assy_quotations;                  \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;                   \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;                    \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;                    \n" +
                "		#End - Delete UOMS                    \n" +
                "		#Start - Delete MFG                        \n" +
                "		TRUNCATE TABLE mfgcodealias;                    \n" +
                "		TRUNCATE TABLE who_bought_who;                    \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;                    \n" +
                "		#End - Delete MFG                        \n" +
                "		#Start - Delete BOM                    \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;                    \n" +
                "		DELETE FROM component_cust_alias_rev;                    \n" +
                "		DELETE FROM rfq_assy_bom;                    \n" +
                "		#End - Delete BOM                    \n" +
                "		#Start - Delete RFQ                    \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;                    \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;                    \n" +
                "		DELETE FROM rfq_assy_quantity;                    \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;            \n" +
                "		DELETE FROM rfq_assemblies;                    \n" +
                "		DELETE FROM rfqforms;                    \n" +
                "		#End - Delete RFQ                    \n" +
                "		DELETE FROM customer_addresses;                    \n" +
                "		DELETE FROM customer_contactperson;                    \n" +
                "		TRUNCATE TABLE assemblystock;                    \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;                    \n" +
                "		#Start - Delete Customer                    \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;                    \n" +
                "		DELETE FROM workorder_assy_designators;                   \n" +
                "		DELETE FROM workorder_cluster;                        \n" +
                "		DELETE FROM workorder_operation_firstpiece;                    \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;                    \n" +
                "		TRUNCATE TABLE shipping_requestdet;                    \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;                    \n" +
                "		DELETE FROM workorder;                    \n" +
                "		TRUNCATE TABLE assembly_revision_comments;                 \n" +
                "		DELETE FROM customers;                    \n" +
                "		#End - Delete Customer                    \n" +
                "		#Start - Delete Employee                    \n" +
                "		UPDATE department SET parentDeptID=NULL;               \n" +
                "		DELETE FROM department;                    \n" +
                "		TRUNCATE TABLE dynamicreportaccess;                    \n" +
                "		UPDATE employees SET `managerID`=NULL;                    \n" +
                "		TRUNCATE TABLE notificationdet;                    \n" +
                "		DELETE FROM notificationmst;                    \n" +
                "		TRUNCATE TABLE group_participant_details;                    \n" +
                "		TRUNCATE TABLE group_chat_log;                    \n" +
                "		DELETE FROM group_chat;                    \n" +
                "		TRUNCATE TABLE chat;                    \n" +
                "		TRUNCATE TABLE feature_user_mapping;                    \n" +
                "		TRUNCATE TABLE user_agreement;                    \n" +
                "		TRUNCATE TABLE userpagedetail;                    \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');                    \n" +
                "		TRUNCATE TABLE shipping_request_empdet;                    \n" +
                "		DELETE FROM shipping_request;                    \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');                    \n" +
                "		#End - Delete Employee                    \n" +
                "  \n" +
                "		DELETE FROM master_templates WHERE systemGenerated=0;                    \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards                    \n" +
                "		TRUNCATE TABLE component_standard_details;         \n" +
                "		#End - Delete Component Standards                    \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log                    \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;                    \n" +
                "		#End - Delete Data Entry Audit Log                    \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	                    \n" +
                "		TRUNCATE TABLE dynamicreportfields;                      \n" +
                "		DELETE FROM dynamicreportmst;                    \n" +
                "		#End - Delete Dynamic Report                    \n" +
                "  \n" +
                "		#Start - Delete Job Type                    \n" +
                "		DELETE FROM jobtype;                    \n" +
                "		#End - Delete Job Type                    \n" +
                "  \n" +
                "		#Start - Delete Log Master                    \n" +
                "		TRUNCATE TABLE logmst;                    \n" +
                "		#End - Delete Log Master                    \n" +
                "  \n" +
                "		#Start - Delete Order Type                    \n" +
                "		-- DELETE FROM ordertype;                    \n" +
                "		#End - Delete Order Type                    \n" +
                "  \n" +
                "		#Start - Delete Reason                    \n" +
                "		DELETE FROM reasonmst;                    \n" +
                "		#End - Delete Reason                    \n" +
                "  \n" +
                "		#Start - Delete Requirement                    \n" +
                "		DELETE FROM requirement;                    \n" +
                "		#End - Delete Requirement                    \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data                    \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;                    \n" +
                "		#End - Delete Assy Auto Pricing Data                    \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log                    \n" +
                "		TRUNCATE TABLE taskconfirmation;                    \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log                    \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log                    \n" +
                "		TRUNCATE TABLE timeline;                    \n" +
                "		#End - Delete All Timeline Log                    \n" +
                "  \n" +
                "		#Start - Delete All Chart Category                    \n" +
                "		DELETE FROM chart_category;                    \n" +
                "		#End - Delete All Chart Category                    \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias                    \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;                    \n" +
                "		#End - Delete All Component Generic Alias                    \n" +
                "  \n" +
                "		#Start - Delete All Defect Category                    \n" +
                "		-- DELETE FROM defectcategory;                    \n" +
                "		#End - Delete All Defect Category                    \n" +
                "  \n" +
                "		#Start - Delete All ECO Category                    \n" +
                "		DELETE FROM eco_type_values WHERE systemGenerated = 0;                    \n" +
                "		DELETE FROM eco_type_category WHERE systemGenerated = 0;                       \n" +
                "		#End - Delete All ECO Category                    \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;                \n" +
                "  \n" +
                "		SELECT 'Done';                    \n" +
                "	ELSE                     \n" +
                "		SELECT 'Invalid Argument';                    \n" +
                "	END IF;                      \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-03-2019  *********************************** */
                "DROP TABLE component_goodbadpartmapping;  \n" +
                /* **************************** Add Script Version -> 04-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (323,'2.00','V1',' Remove Table component_goodbadpartmapping with all reference.  - Jignesh K '," + userid + ");"
            );
            break;
        case 323:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "CREATE TABLE `component_images` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `imageURL` VARCHAR(1000) NOT NULL,  \n" +
                "  `refComponentID` int(11) NOT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_component_images_refComponentID` (`refComponentID`),  \n" +
                "  CONSTRAINT `FK_component_images_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
                ");  \n" +
                "insert into component_images(imageURL, refComponentID,createdBy,createdAt, isDeleted)  \n" +
                "select imageURL, id refComponentID,createdBy,createdAt, 0 isDeleted from component  \n" +
                "where imageURL is not null and imageURL != \"\";  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (324,'2.00','V1','check-in only Modal and DB changes for multiple images save on component master - Ashish'," + userid + ");"
            );
            break;
        case 324:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/05/2019   *********************************** */
                "ALTER TABLE component_sid_stock_history ADD COLUMN uom INT NULL;  \n" +
                "ALTER TABLE component_sid_stock_history ADD COLUMN packaging INT NULL;    \n" +
                "UPDATE 	component_sid_stock_history ch, component_sid_stock_history c  \n" +
                "SET 	ch.packaging = c.packaging  \n" +
                "WHERE 	ch.refCompSIDStockID = c.id;    \n" +
                "  \n" +
                "ALTER TABLE component_sid_stock_history ADD COLUMN refSupplierPartId INT NULL;    \n" +
                "ALTER TABLE component_sid_stock_history ADD CONSTRAINT FK_component_sid_stock_history_refSupplierPartId FOREIGN KEY (refSupplierPartId) REFERENCES component(id);  \n" +
                /* **************************** New Script -> 03/05/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(        \n" +
                "	pBinID int(11),        \n" +
                "    pGlobalSearchUIDId int(11),     \n" +
                "	pSearchUIDId INT(11),    \n" +
                "	pSearchString varchar(100)    \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "	SELECT 	css.id,					css.scanlabel,		css.pkgQty,		css.uid,         \n" +
                "            c.PIDCode, 				c.mfgcodeID,        c.mfgPN,  		mfg.mfgCode, 	ro.rohsIcon,         \n" +
                "            ro.name AS rohsName,	css.nickName,		css.binID,		css.uom,		cast('' as char(100)) uomName                                 \n" +
                "	FROM component_sid_stock css                                \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                               \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                                \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                       \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)            \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)            \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )            \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0    \n" +
                "	AND 	css.uid like CONCAT('%', IFNULL(pSearchString,'') ,'%');     \n" +
                "  \n" +
                "    update 	Results r, uoms u    \n" +
                "    SET   	r.uomName = u.abbreviation    \n" +
                "    WHERE	r.uom = u.id;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;         \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/05/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_Transfer_Stock_History`;  \n" +
                "CREATE PROCEDURE `Sproc_Transfer_Stock_History`(	                            \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),	                            \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pUID varchar(14)  \n" +
                ")   \n" +
                "BEGIN                            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "	SELECT 	css.id, 				css.scanlabel, 				css.pkgQty, 						css.uid,   \n" +
                "			css.printStatus, 		cc.categoryName, 			css.lotCode, 						css.dateCode,   \n" +
                "            c.mfgcodeID, 			c.mfgPN, 					c.PIDCode, 							c.packaginggroupID,  \n" +
                "			0 AS dedicatedQty, 		0 AS reservedQty, 			mfg.id AS mfgID, 					mfg.mfgCode,   \n" +
                "            ro.rohsIcon, 			ro.name AS rohsName, 		IFNULL(c.packageQty,1) packageQty,  css.binID,  \n" +
                "            CONCAT('(',mfg.mfgCode,')', ' ', mfg.mfgName) AS mfg,      \n" +
                "			(SELECT bm.Name FROM binmst bm WHERE bm.id=css.binID AND bm.isActive=1 AND bm.deletedAt IS NULL LIMIT 1) location,                          \n" +
                "			(SELECT wm.Name FROM warehousemst wm INNER JOIN binmst bim ON wm.ID = bim.WarehouseID AND wm.isActive=1 AND wm.deletedAt IS NULL WHERE bim.id=css.binID LIMIT 1) warehouse,                          \n" +
                "			(SELECT c_c.categoryName FROM cost_category c_c WHERE c_c.id=css.costCategoryID AND c_c.deletedAt IS NULL LIMIT 1) costCategory,                \n" +
                "			(SELECT com.mslID FROM component com WHERE com.id=css.refcompid AND com.deletedAt IS NULL LIMIT 1) mslLevel,                \n" +
                "			(SELECT CONCAT('(', mfg.mfgCode, ')',mfg.mfgName) FROM mfgcodemst mfg WHERE mfg.id=css.customerID AND mfg.deletedAt IS NULL LIMIT 1) customer,                \n" +
                "			(SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = css.refCompSIDStockID AND gf.isActive = 1 AND gf.deletedAt IS NULL) pictureCount,                \n" +
                "			(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,                \n" +
                "			(SELECT com.PIDCode FROM component com WHERE com.id=css.assyID AND com.deletedAt IS NULL LIMIT 1) assembly,                \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,                \n" +
                "			(SELECT CONCAT('(',mcm.mfgCode,')', ' ', mcm.mfgName) AS CPNMFG FROM mfgcodemst mcm INNER JOIN component com ON com.mfgcodeID = mcm.id WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGCode,                \n" +
                "			(SELECT com.mfgPN FROM component com WHERE com.id=css.refCPNMFGPNID AND com.deletedAt IS NULL LIMIT 1) cpnMFGPN,                \n" +
                "			c.mfgPNDescription, 	css.receiveMaterialType, 	css.spq, css.pcbPerArray, 			css.updatedAt, css.nickName                               \n" +
                "	FROM component_sid_stock_history css                              \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                             \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                              \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                           \n" +
                "	LEFT OUTER JOIN cost_category cc ON cc.id=css.costCategoryID AND  IFNULL(cc.isdeleted,0)=0                            \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                            \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;	       \n" +
                "  \n" +
                "    IF(pUID IS NOT NULL) THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND uid = '\", pUID, \"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "    PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                            \n" +
                "  \n" +
                "    END;  \n" +

                /* **************************** New Script -> 03/05/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(             \n" +
                "	IN pTransferType VARCHAR(100),     					          \n" +
                "	IN pFromWHID INT(11),                                                                  \n" +
                "	IN pToWHID INT(11),                                                                  \n" +
                "	IN pFromBinID INT(11),                                                                  \n" +
                "	IN pToBinID INT(11),      \n" +
                "    IN pUIDID INT(11)      \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	SET @vWhareClause = \" 1 = 1 \";      \n" +
                "    SET @vFromBinID = 0;    \n" +
                "    SET @vFromWHID = 0;    \n" +
                "	SET @vToWHID = 0;     \n" +
                "	SET @vFromWHBinCount = 0; 	    \n" +
                "    SET @vToWHBinCount = 0;	    \n" +
                "	SET @vFromWHUIDCount = 0; 	    \n" +
                "	SET @vToWHUIDCount  = 0;    \n" +
                "	SET @vFromBinUIDCount = 0;     \n" +
                "	SET @vToBinUIDCount = 0;    \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);      \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN          \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);      \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS            \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID       \n" +
                "									FROM 	component_sid_stock             \n" +
                "									WHERE \", @vWhareClause );         \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b        \n" +
                "	SET 	t.warehouseID = b.warehouseID        \n" +
                "	WHERE 	t.binid = b.id;      \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w      \n" +
                "	SET 	t.deptWHID = w.parentWHID      \n" +
                "	WHERE 	t.warehouseID = w.id;      \n" +
                "  \n" +
                "	IF(pTransferType = \"Warehouse to Warehouse\") THEN      \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));      \n" +
                "        SET @vToWHID = pToWHID;    \n" +
                "        IF(pFromWHID IS NOT NULL) THEN      \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;      \n" +
                "		ELSEIF (pFromBinID IS NOT NULL) THEN      \n" +
                "			UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;      \n" +
                "		END IF;       \n" +
                "    ELSEIF(pTransferType = \"Bin to Bin\") THEN      \n" +
                "		SET @vFromBinID = pFromBinID;    \n" +
                "		UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;      \n" +
                "	ELSEIF(pTransferType = \"UID to Bin\") THEN      \n" +
                "		SELECT binid INTO @vFromBinID FROM component_sid_stock WHERE id = pUIDID;      \n" +
                "        UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;      \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSE      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history      \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					isinStk,					isDeleted,			createdBy,      \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			     \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		refCompSIDStockID,			uom,				packaging,			refSupplierPartId)      \n" +
                "	SELECT       \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					isinStk,					0,					1,      \n" +
                "		current_timestamp,			1,							current_timestamp,	NULL,				NULL,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			     \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		id,							uom,				packaging,			refSupplierPartId      \n" +
                "	FROM tempStockDetail;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTransferType = \"Bin to Bin\" OR pTransferType = \"UID to Bin\") THEN      \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = @vFromBinID));      \n" +
                "        SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pToBinID));    \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID;      \n" +
                "        SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount into @vFromWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID =  @vToWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b WHERE b.warehouseID =  @vToWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 		pFromWHID fromWHID, 				pToWHID toWHID,       \n" +
                "			pFromBinID fromBinID, 				pToBinID toBinID, 					pUIDID uidID,      \n" +
                "			@vFromWHBinCount fromWHBinCount,	@vToWHBinCount toWHBinCount,		    \n" +
                "            @vFromWHUIDCount fromWHUIDCount,	@vToWHUIDCount toWHUIDCount,		    \n" +
                "            @vFromBinUIDCount fromBinUIDCount,	@vToBinUIDCount toBinUIDCount;       \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/05/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (325,'2.00','V1',' Modified procedure to get selected UID history - Dharmishtha '," + userid + ");"
            );
            break;
        case 325:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                          \n" +
                "	IN tableName VARCHAR(255),                                                                          \n" +
                "	IN IDs LONGTEXT,                                                                          \n" +
                "	IN deletedBy INT,                                                                          \n" +
                "	IN entityID VARCHAR(255),                                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                                          \n" +
                "    )  \n" +
                "BEGIN                                                                          \n" +
                "IF tableName=\"employees\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                               \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                          \n" +
                "	 CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                          \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"customers\" THEN                                                                          \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"department\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                          \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"genericcategory\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"equipment\" THEN                                                                          \n" +
                "	CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs);                                                            \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"parts\" THEN                                                                         \n" +
                "   CALL Sproc_checkDelete_parts(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"master_templates\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"operations\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                         \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"roles\" THEN                                                                         \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"standard_class\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"dataelement\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                     \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"component\" THEN                                                                          \n" +
                "	CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                                         \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                           \n" +
                "	CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_operation\" THEN                                                                         \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs);                            \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                      \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"entity\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"salesordermst\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                         \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                          \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                          \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs);                      \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"assemblymst\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_assemblymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_assembly_revisionmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs);                     \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"br_label_template\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs);                     \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"measurement_types\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"uoms\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"jobtypes\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"rfqtype\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"reasonmst\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"component_sid_stock\" THEN	                                                                          \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                                                          \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN	                                                                          \n" +
                "	CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                  \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"chart_templatemst\" THEN	                                                                          \n" +
                "	CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs);  													                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"shipping_request\" THEN                                                                          \n" +
                "    CALL Sproc_checkDelete_shipping_request(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                          \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                    \n" +
                "END IF;                                                                                                                                                                                                                      \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                          \n" +
                "	  CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs);   	                                                                                     \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"requirement\" THEN                                                                          \n" +
                "	CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                                     \n" +
                "	CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                                     \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                       \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"rfqforms\" THEN                                                                          \n" +
                "	CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                          \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                          \n" +
                "	CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                          \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                          \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                          \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                          \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                          \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                          \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs);                                                                        \n" +
                "END IF;                                                      \n" +
                "IF tableName=\"cost_category\" THEN                                                                          \n" +
                "	CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs); 	                                                      \n" +
                "END IF;                                       \n" +
                "IF tableName=\"chartypemst\" THEN                                                                          \n" +
                "	CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);	                                   \n" +
                "END IF;                      \n" +
                "IF tableName=\"countrymst\" THEN                      \n" +
                "	 CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                      \n" +
                "	 CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                    \n" +
                "END IF;                    \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN                  \n" +
                "	 CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;              \n" +
                "IF tableName=\"warehousemst\" THEN                  \n" +
                "	 CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;           \n" +
                "IF tableName=\"binmst\" THEN                  \n" +
                "	 CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;       \n" +
                "IF tableName=\"component_logicalgroup\" THEN          \n" +
                "	 CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs);                \n" +
                "END IF;                        \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                                                                  \n" +
                "	IN tableName VARCHAR(255),                                                                  \n" +
                "	IN IDs LONGTEXT,                                                                  \n" +
                "	IN deletedBy INT,                                                                  \n" +
                "	IN entityID VARCHAR(255),                                                                  \n" +
                "	IN refrenceIDs LONGTEXT                                                                  \n" +
                "    )  \n" +
                "BEGIN           \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                        \n" +
                "BEGIN                        \n" +
                "	ROLLBACK;                        \n" +
                "	RESIGNAL;                        \n" +
                "END;                        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                        \n" +
                "BEGIN                        \n" +
                "	ROLLBACK;                        \n" +
                "	RESIGNAL;                        \n" +
                "END;                       \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                                                                  \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                                  \n" +
                "			FROM                                                                   \n" +
                "			(                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                                                  \n" +
                "				UNION ALL                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                                                    \n" +
                "			) q');                                                                  \n" +
                "		PREPARE stmt FROM @SQL;                                                                  \n" +
                "		EXECUTE stmt;                                                                  \n" +
                "		IF (SELECT TotalCount FROM tempComponent)=0 THEN                                                                  \n" +
                "			START TRANSACTION;          \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                  \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                                  \n" +
                "					EXECUTE stmt1;                                                                  \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');        \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                                  \n" +
                "					EXECUTE stmt1;        \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;           \n" +
                "  \n" +
                "			COMMIT;                                                                 \n" +
                "		ELSE                                                                  \n" +
                "			SELECT * FROM tempComponent;                                                                  \n" +
                "		END IF;                                                                  \n" +
                "		DROP TABLE tempComponent;              \n" +
                "        END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component_cust_alias_rev` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component_cust_alias_rev`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN                                                          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;        \n" +
                "START TRANSACTION;    \n" +
                "  \n" +
                "SET @SQl2 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE refComponentCustAliasRevID IN(',IDs,') and deletedAt is NULL');                    \n" +
                "		PREPARE stmt2 FROM @SQL2;                                                            \n" +
                "		EXECUTE stmt2;       \n" +
                "  \n" +
                "COMMIT;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQAssyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteRFQAssyDetails`(      \n" +
                "	IN pRFQAssyID INT,            \n" +
                "    IN pUserID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DECLARE pPartID INT(11);    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "  BEGIN            \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "START TRANSACTION;          \n" +
                "SELECT IFNULL(partID,0) INTO pPartID FROM rfq_assemblies WHERE id = pRFQAssyID;            \n" +
                "  \n" +
                "UPDATE rfq_lineitems_alternatepart rla SET rla.isDeleted = 1, rla.deletedAt = UTC_TIMESTAMP(), rla.deletedBy = pUserID WHERE rla.partID = pPartID;      \n" +
                "UPDATE rfq_assy_bom_relationship rabr SET rabr.isDeleted = 1, rabr.deletedAt = UTC_TIMESTAMP(), rabr.deletedBy = pUserID WHERE rabr.rfqAssyID = pRFQAssyID;      \n" +
                "/*  UPDATE component_cust_alias_rev_pn ccarp SET ccarp.isDeleted = 1, ccarp.deletedAt = UTC_TIMESTAMP(), ccarp.deletedBy = pUserID  WHERE ccarp.refComponentCustAliasRevID IN      \n" +
                "(      \n" +
                "	SELECT ccar.id FROM component_cust_alias_rev ccar WHERE ccar.rfqAssyBomID IN       \n" +
                "	(SELECT rab.id FROM rfq_assy_bom rab WHERE rab.reqAssyID = 12 AND rab.bomNumber IS NOT NULL)      \n" +
                ");    \n" +
                "  \n" +
                "UPDATE component_cust_alias_rev ccar SET ccar.isDeleted = 1, ccar.deletedAt = UTC_TIMESTAMP(), ccar.deletedBy = pUserID  WHERE ccar.rfqAssyBomID IN       \n" +
                "(      \n" +
                "	SELECT rab.id FROM rfq_assy_bom rab WHERE rab.reqAssyID = 12 AND rab.bomNumber IS NOT NULL      \n" +
                ");  */  \n" +
                "  \n" +
                "UPDATE rfq_consolidate_mfgpn_lineitem_quantity rcmlq SET rcmlq.isDeleted = 1, rcmlq.deletedAt = UTC_TIMESTAMP(), rcmlq.deletedBy = pUserID WHERE rcmlq.consolidateID IN (      \n" +
                "	SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL      \n" +
                ");    \n" +
                "  \n" +
                "DELETE FROM rfq_assy_autopricingstatus WHERE rfqAssyID = pRFQAssyID;      \n" +
                "DELETE FROM rfq_lineitem_autopricingstatus WHERE rfqAssyID = pRFQAssyID;      \n" +
                "UPDATE rfq_assy_quotations raq SET raq.isDeleted = 1, raq.deletedAt = UTC_TIMESTAMP(), raq.deletedBy = pUserID WHERE raq.rfqAssyID = pRFQAssyID;      \n" +
                "UPDATE rfq_consolidated_mfgpn_lineitem_alternate rcmla SET rcmla.isDeleted = 1, rcmla.deletedAt = UTC_TIMESTAMP(), rcmla.deletedBy = pUserID WHERE rcmla.consolidateID IN (      \n" +
                "	SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL      \n" +
                ");    \n" +
                "  \n" +
                "UPDATE rfq_consolidated_mfgpn_lineitem rcml SET rcml.isDeleted = 1, rcml.deletedAt = UTC_TIMESTAMP(), rcml.deletedBy = pUserID WHERE rcml.rfqAssyID = pRFQAssyID;      \n" +
                "UPDATE rfq_lineitems rl SET rl.isDeleted = 1, rl.deletedAt = UTC_TIMESTAMP(), rl.deletedBy = pUserID WHERE rl.partID = pPartID;      \n" +
                "UPDATE rfq_assy_bom rab SET rab.isDeleted = 1, rab.deletedAt = UTC_TIMESTAMP(), rab.deletedBy = pUserID WHERE rab.reqAssyID = pRFQAssyID AND rab.bomNumber IS NOT NULL;      \n" +
                "UPDATE rfq_assemblies ra SET ra.isBOMVerified = NULL, ra.isReadyForPricing = NULL, ra.status = NULL WHERE ra.id = pRFQAssyID;      \n" +
                "COMMIT;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentCustAliasRev` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustAliasRev`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "        IN pWhereClause VARCHAR(16383),    \n" +
                "        IN pcustomerID VARCHAR(255)     \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "               SELECT  car.id,car.custpn,car.customerID,car.revision,car.flextronRevision,c.companyName,car.rfqAssyBomID,    \n" +
                "              CASE     \n" +
                "              /*WHEN (car.flextronRevision = (select cca.flextronRevision from component_cust_alias_rev cca     \n" +
                "				where car.custpn = cca.custpn    \n" +
                "                and car.revision = cca.revision    \n" +
                "                and car.customerID = cca.customerID    \n" +
                "                order by cca.id desc limit 1)    \n" +
                "                ) THEN true  */  \n" +
                "                WHEN (car.rfqAssyBomID IS NULL) THEN FALSE    \n" +
                "                ELSE FALSE    \n" +
                "                END AS isAllowDelete    \n" +
                "               FROM component_cust_alias_rev car    \n" +
                "               LEFT OUTER JOIN customers c ON car.customerID=c.id AND IFNULL(c.isDeleted,0)=0    \n" +
                "		WHERE IFNULL(car.isDeleted,0)=0 AND car.customerID=pcustomerID;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"revision ASC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponetCustAliasRevPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponetCustAliasRevPN`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),	  \n" +
                "        IN pWhereClause VARCHAR(16383),  \n" +
                "        IN prefComponentCustAliasRevID VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "               SELECT car_pn.refComponentID,comp.mfgPN,mfg.mfgCode,car_pn.id FROM component_cust_alias_rev_pn car_pn  \n" +
                "               LEFT OUTER JOIN component comp ON comp.id=car_pn.refComponentID AND IFNULL(comp.isDeleted,0)=0  \n" +
                "		LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=comp.mfgcodeID AND IFNULL(mfg.isDeleted,0)=0  \n" +
                "		WHERE IFNULL(car_pn.isDeleted,0)=0 AND car_pn.refComponentCustAliasRevID=prefComponentCustAliasRevID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(                                 \n" +
                "	IN pPassword VARCHAR(500)                       \n" +
                ")  \n" +
                "BEGIN                             \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN                        \n" +
                "		#Start - Delete Role                      \n" +
                "		TRUNCATE TABLE rolepagedetail;                      \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                      \n" +
                "		TRUNCATE TABLE standard_role;                      \n" +
                "  \n" +
                "		#Start - Delete Features of roles                      \n" +
                "		DELETE FROM feature_role_mapping;                      \n" +
                "		#End - Delete Features of roles                      \n" +
                "  \n" +
                "		#Start - Delete Generic Folder                      \n" +
                "		UPDATE genericfiles SET refParentId = NULL                 \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0));                     \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE systemGenerated=0);                      \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL                 \n" +
                "		WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);                \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;                      \n" +
                "  \n" +
                "		#End - Delete Generic Folder                      \n" +
                "  \n" +
                "		#Start - Delete Generic Files                      \n" +
                "		TRUNCATE TABLE genericfiles;                      \n" +
                "		#End - Delete Generic Files                      \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1');                      \n" +
                "  \n" +
                "		DELETE FROM roles WHERE systemGenerated=0;                      \n" +
                "		#End - Delete Role                      \n" +
                "		#Start - Delete Generic Category                      \n" +
                "			TRUNCATE TABLE employee_department;                      \n" +
                "			#Start - Delete Part                      \n" +
                "			TRUNCATE TABLE operation_part;                      \n" +
                "			TRUNCATE TABLE workorder_operation_part;             \n" +
                "			#End - Delete Part                      \n" +
                "			#Start - Delete Equipment                      \n" +
                "				TRUNCATE TABLE operation_equipment;                      \n" +
                "				TRUNCATE TABLE workorder_operation_equipment;                      \n" +
                "				TRUNCATE TABLE equipment_dataelement;                      \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;                      \n" +
                "  \n" +
                "				#Start - Delete Equipment Task                      \n" +
                "				TRUNCATE TABLE equipment_task_schedule;                      \n" +
                "				DELETE FROM equipment_task;                      \n" +
                "				#End - Delete Equipment Task                      \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master                      \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;                      \n" +
                "				DELETE FROM workorder_serialmst;                      \n" +
                "				# End - Delete Workorder Trans Serial Master                      \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail                      \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;                      \n" +
                "				DELETE FROM workorder_trans_empinout;                      \n" +
                "				#End - Delete Workorder Transaction InOut Detail                      \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction                      \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;                      \n" +
                "				TRUNCATE TABLE workorder_trans_production;                      \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;                      \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;                      \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;                      \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;                      \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;                      \n" +
                "				DELETE FROM workorder_trans;                      \n" +
                "				# End - Delete Workorder Transaction                      \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;                      \n" +
                "				DELETE FROM equipment;                      \n" +
                "			#End - Delete Equipment                      \n" +
                "			# Start - Delete Operation                      \n" +
                "			TRUNCATE TABLE operation_equipment;                      \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element                      \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;                      \n" +
                "			DELETE FROM workorder_operation_dataelement;                      \n" +
                "			# End - Delete Workorder Operation Data Element                      \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;                      \n" +
                "			TRUNCATE TABLE workorder_operation_employee;                      \n" +
                "			TRUNCATE TABLE operation_master_templates;                      \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation			                      \n" +
                "				# Start - Delete ECO Request 			                      \n" +
                "					# Start - Delete ECO Request Approval                      \n" +
                "					TRUNCATE TABLE eco_request_department_employee;                      \n" +
                "					DELETE FROM eco_request_department_approval;                      \n" +
                "					# End - Delete ECO Request Approval                      \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;                      \n" +
                "				DELETE FROM eco_request;                      \n" +
                "				# End - Delete ECO Request                      \n" +
                "  \n" +
                "			# Start - Delete Shipping Details                      \n" +
                "			TRUNCATE TABLE shippedassembly;                      \n" +
                "			DELETE FROM salesshippingmst;                      \n" +
                "			DELETE FROM workorder_salesorder_details;                      \n" +
                "			DELETE FROM salesorderdet;                      \n" +
                "			DELETE FROM salesordermst;                      \n" +
                "			# End - Delete Shipping Details                      \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review                       \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;                      \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;                      \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;                      \n" +
                "			DELETE FROM workorder_reqforreview;                      \n" +
                "			# End - Delete Workorder Request Review                       \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;                      \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;                      \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming                      \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;                      \n" +
                "			DELETE FROM workorder_preprogcomp_designator;                      \n" +
                "			DELETE FROM workorder_preprogcomp;                      \n" +
                "			# End - Delete Workorder Tran PreProgramming                      \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;                      \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;                      \n" +
                "			# End - Delete Workorder Operation                      \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;                      \n" +
                "  \n" +
                "			#Start - Delete Chart                      \n" +
                "			TRUNCATE TABLE chart_template_operations;                \n" +
                "			TRUNCATE TABLE chart_template_employee_details;                     \n" +
                "			TRUNCATE TABLE chart_template_access;                 \n" +
                "			DELETE FROM chart_templatemst;                      \n" +
                "			#Start - End Chart                      \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;                      \n" +
                "			# End - Delete Operation                      \n" +
                "			TRUNCATE TABLE standard_message;                      \n" +
                "			# Start - Delete Component                      \n" +
                "			TRUNCATE TABLE component_alias;                     \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';                  \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;                      \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;                      \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;                \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;                   \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;                   \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';                  \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;                  \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;                  \n" +
                "            UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';                  \n" +
                "			#TRUNCATE TABLE component_goodbadpartmapping;                      \n" +
                "			TRUNCATE TABLE component_processmaterial;                      \n" +
                "			TRUNCATE TABLE component_drivetools;                      \n" +
                "			TRUNCATE TABLE component_standard_details;                      \n" +
                "  \n" +
                "			# Start - Delete Recieving Material                      \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;                      \n" +
                "			DELETE FROM component_sid_stock;                  \n" +
                "			DELETE FROM cost_category;                          \n" +
                "			# End - Delete Recieving Material                      \n" +
                "  \n" +
                "			UPDATE component SET replacementPartID=NULL;                      \n" +
                "  \n" +
                "			DELETE FROM component WHERE id > 0;TRUNCATE TABLE workorder_certification;                   \n" +
                "			TRUNCATE TABLE standard_class;                     \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;                \n" +
                "			DELETE FROM certificate_standards;                    \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;                \n" +
                "			DELETE FROM br_label_template;                \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL                \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Ownerships';                \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL                \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Standard Types';                \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL                \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Equipment & Workstation Types';                \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL                \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Operation Types';                \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL                \n" +
                "			WHERE systemGenerated=1 AND gencCategoryCode='Responsibilities';                \n" +
                "			DELETE FROM genericcategory WHERE systemGenerated=0;                      \n" +
                "			# End - Delete Component                      \n" +
                "  \n" +
                "		#End - Delete Generic Category                      \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;                \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;                \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;                \n" +
                "		TRUNCATE TABLE rfq_assy_bom_relationship;                \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;                \n" +
                "		TRUNCATE TABLE rfq_assembly_history;                \n" +
                "		DELETE FROM rfq_lineitems;                \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;                \n" +
                "		DELETE FROM component WHERE id > 0;                 \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;                      \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE systemGenerated=0;                 \n" +
                "		#Start - Delete Entity                      \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;                      \n" +
                "		DELETE FROM workorder_operation_dataelement;                      \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;                      \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                      \n" +
                "		DELETE FROM workorder_trans_subform_data;                    \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;                   \n" +
                "        UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';                  \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;                      \n" +
                "		DELETE FROM subform_transaction;                      \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;                      \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;                \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;                \n" +
                "		DELETE FROM dataelement;                    \n" +
                "		DELETE FROM entity WHERE systemGenerated=0;                      \n" +
                "		#End - Delete Entity                      \n" +
                "		#Start - Delete UOMS                           \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;                \n" +
                "		DELETE FROM rfq_assy_quotations;                    \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;                     \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;                      \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;                      \n" +
                "		#End - Delete UOMS                      \n" +
                "		#Start - Delete MFG                          \n" +
                "		TRUNCATE TABLE mfgcodealias;                      \n" +
                "		TRUNCATE TABLE who_bought_who;                      \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0;                      \n" +
                "		#End - Delete MFG                          \n" +
                "		#Start - Delete BOM                      \n" +
                "		TRUNCATE TABLE rfq_assemblies_requirement;                      \n" +
                "		#DELETE FROM component_cust_alias_rev;                      \n" +
                "		DELETE FROM rfq_assy_bom;                      \n" +
                "		#End - Delete BOM                      \n" +
                "		#Start - Delete RFQ                      \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;                      \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;                      \n" +
                "		DELETE FROM rfq_assy_quantity;                      \n" +
                "		TRUNCATE TABLE rfq_assemblies_quotation_status;              \n" +
                "		DELETE FROM rfq_assemblies;                      \n" +
                "		DELETE FROM rfqforms;                      \n" +
                "		#End - Delete RFQ                      \n" +
                "		DELETE FROM customer_addresses;                      \n" +
                "		DELETE FROM customer_contactperson;                      \n" +
                "		TRUNCATE TABLE assemblystock;                      \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;                      \n" +
                "		#Start - Delete Customer                      \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;                      \n" +
                "		DELETE FROM workorder_assy_designators;                     \n" +
                "		DELETE FROM workorder_cluster;                          \n" +
                "		DELETE FROM workorder_operation_firstpiece;                      \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;                      \n" +
                "		TRUNCATE TABLE shipping_requestdet;                      \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;                      \n" +
                "		DELETE FROM workorder;                      \n" +
                "		TRUNCATE TABLE assembly_revision_comments;                   \n" +
                "		DELETE FROM customers;                      \n" +
                "		#End - Delete Customer                      \n" +
                "		#Start - Delete Employee                      \n" +
                "		UPDATE department SET parentDeptID=NULL;                 \n" +
                "		DELETE FROM department;                      \n" +
                "		TRUNCATE TABLE dynamicreportaccess;                      \n" +
                "		UPDATE employees SET `managerID`=NULL;                      \n" +
                "		TRUNCATE TABLE notificationdet;                      \n" +
                "		DELETE FROM notificationmst;                      \n" +
                "		TRUNCATE TABLE group_participant_details;                      \n" +
                "		TRUNCATE TABLE group_chat_log;                      \n" +
                "		DELETE FROM group_chat;                      \n" +
                "		TRUNCATE TABLE chat;                      \n" +
                "		TRUNCATE TABLE feature_user_mapping;                      \n" +
                "		TRUNCATE TABLE user_agreement;                      \n" +
                "		TRUNCATE TABLE userpagedetail;                      \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');                      \n" +
                "		TRUNCATE TABLE shipping_request_empdet;                      \n" +
                "		DELETE FROM shipping_request;                      \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');                      \n" +
                "		#End - Delete Employee                      \n" +
                "  \n" +
                "		DELETE FROM master_templates WHERE systemGenerated=0;                      \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards                      \n" +
                "		TRUNCATE TABLE component_standard_details;           \n" +
                "		#End - Delete Component Standards                      \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log                      \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;                      \n" +
                "		#End - Delete Data Entry Audit Log                      \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report	                      \n" +
                "		TRUNCATE TABLE dynamicreportfields;                        \n" +
                "		DELETE FROM dynamicreportmst;                      \n" +
                "		#End - Delete Dynamic Report                      \n" +
                "  \n" +
                "		#Start - Delete Job Type                      \n" +
                "		DELETE FROM jobtype;                      \n" +
                "		#End - Delete Job Type                      \n" +
                "  \n" +
                "		#Start - Delete Log Master                      \n" +
                "		TRUNCATE TABLE logmst;                      \n" +
                "		#End - Delete Log Master                      \n" +
                "  \n" +
                "		#Start - Delete Order Type                      \n" +
                "		-- DELETE FROM ordertype;                      \n" +
                "		#End - Delete Order Type                      \n" +
                "  \n" +
                "		#Start - Delete Reason                      \n" +
                "		DELETE FROM reasonmst;                      \n" +
                "		#End - Delete Reason                      \n" +
                "  \n" +
                "		#Start - Delete Requirement                      \n" +
                "		DELETE FROM requirement;                      \n" +
                "		#End - Delete Requirement                      \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data                      \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;                      \n" +
                "		#End - Delete Assy Auto Pricing Data                      \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log                      \n" +
                "		TRUNCATE TABLE taskconfirmation;                      \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log                      \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log                      \n" +
                "		TRUNCATE TABLE timeline;                      \n" +
                "		#End - Delete All Timeline Log                      \n" +
                "  \n" +
                "		#Start - Delete All Chart Category                      \n" +
                "		DELETE FROM chart_category;                      \n" +
                "		#End - Delete All Chart Category                      \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias                      \n" +
                "		TRUNCATE TABLE component_fields_genericalias_mst;                      \n" +
                "		#End - Delete All Component Generic Alias                      \n" +
                "  \n" +
                "		#Start - Delete All Defect Category                      \n" +
                "		-- DELETE FROM defectcategory;                      \n" +
                "		#End - Delete All Defect Category                      \n" +
                "  \n" +
                "		#Start - Delete All ECO Category                      \n" +
                "		DELETE FROM eco_type_values WHERE systemGenerated = 0;                      \n" +
                "		DELETE FROM eco_type_category WHERE systemGenerated = 0;                         \n" +
                "		#End - Delete All ECO Category                      \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE systemGenerated = 0;                  \n" +
                "  \n" +
                "		SELECT 'Done';                      \n" +
                "	ELSE                       \n" +
                "		SELECT 'Invalid Argument';                      \n" +
                "	END IF;                        \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP TABLE component_cust_alias_rev;  \n" +
                /* **************************** Add Script Version -> 05-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (326,'2.00','V1',' Remove table component_cust_alias_rev with all reference. - Jignesh K '," + userid + ");"
            );
            break;
        case 326:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                          \n" +
                " IN tabquery LONGTEXT                          \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "   SET @sqlQ=tabquery;                          \n" +
                "   PREPARE stmt1 FROM @sqlQ;                           \n" +
                "   EXECUTE stmt1;                            \n" +
                "   DEALLOCATE PREPARE stmt1;                           \n" +
                "  \n" +
                "  SELECT '1';                          \n" +
                "  \n" +
                "    block1:BEGIN                          \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                            \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                          \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                            \n" +
                "	DECLARE  current_mfgcode INT ;                          \n" +
                "	DECLARE current_Ismfg TINYINT;                            \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                            \n" +
                "        DECLARE current_component INT ;                          \n" +
                "        DECLARE current_ComponentID INT;                          \n" +
                "	DECLARE maxvalueid INT;                          \n" +
                "        DECLARE aliasgroup INT;    \n" +
                "        DECLARE refsuppliercomponentID INT;                          \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                            \n" +
                "    DECLARE component_cursor CURSOR FOR                            \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                          \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                            \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                            \n" +
                "     -- open the cursor                            \n" +
                "    OPEN component_cursor;                          \n" +
                "     -- start looping                            \n" +
                "     component_loop: LOOP                              \n" +
                "     -- read the name from next row into the variables                             \n" +
                "     FETCH component_cursor INTO current_ComponentID;                            \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                             \n" +
                "     -- close the cursor and exit the loop if it has.                            \n" +
                "       IF exit_loop THEN	                           \n" +
                "				 LEAVE component_loop;                            \n" +
                "			END IF;                            \n" +
                "        SELECT '1';                          \n" +
                "  \n" +
                "	SET current_mfgpn='';                          \n" +
                "	SET current_mfgcode=1;                          \n" +
                "	SET current_mfgPartNumber='';                          \n" +
                "	SET current_Ismfg=1;                          \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                          \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                          \n" +
                "	 -- insert new component                           \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,                          \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                          \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                          \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,              \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,partType)                          \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,                          \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                          \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                          \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,              \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,category                          \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                          \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                          \n" +
                "	 -- check component is manufacturer part or distributor part                          \n" +
                "                   IF(current_Ismfg=1) THEN                          \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                          \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                          \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                          \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                          \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                          \n" +
                "                    ELSE                \n" +
                "  \n" +
                "		        SELECT aliasgroupID,id INTO aliasgroup,refsuppliercomponentID FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                          \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                          \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                          \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                          \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto',refSupplierMfgpnComponentID=refsuppliercomponentID WHERE id=current_component;                          \n" +
                "		        END IF;                          \n" +
                "		    END IF;                          \n" +
                "      END IF;                          \n" +
                "  \n" +
                "    END LOOP component_loop;                          \n" +
                "      CLOSE component_cursor;                          \n" +
                "    END  block1;                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (327,'2.00','V1','Alter sp Sproc_saveVerifiedComponentFromApi-Champak'," + userid + ");"
            );
            break;
        case 327:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 05-02-2019  *********************************** */

                "alter table salesordermst add column revisionChangeNote longtext;  \n" +
                //  /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "drop FUNCTION if exists `fun_getAssyDescrByID`;  \n" +
                "CREATE FUNCTION `fun_getAssyDescrByID`(        \n" +
                "	ppartID INT) RETURNS varchar(50) CHARSET utf8  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(255);        \n" +
                "  \n" +
                "	SELECT mfgPNDescription INTO @result FROM component WHERE id = ppartID      \n" +
                "	AND IFNULL(category,0) = 3;          \n" +
                "      	SET result = @result;        \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "Drop  view if exists `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS   \n" +
                "select `a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate`  \n" +
                "AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID`   \n" +
                "AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment`   \n" +
                "AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`partID` AS `PartID`,`a`.`PIDCode`   \n" +
                "AS `Assy ID`,`a`.`mfgPN` AS `Assy Name`,`a`.`rev` AS `Assy Revision`,`a`.`nickName` AS `NickName`,`a`.`mfgPNDescription`   \n" +
                "AS `AssyDescr`,`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`companyName` AS `Company Name`,`a`.`fullName`   \n" +
                "AS `Full Name`,`a`.`gencCategoryCode` AS `GencCategory Code`,(ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0))   \n" +
                "AS `Balanced Due Qty`,(case when ((ifnull(`a`.`qty`,0) - ifnull(`a`.`ShippedQty`,0)) > 0) then 'Pending' else 'Completed' end)   \n" +
                "AS `Status`,`a`.`modifyDate` AS `modifyDate`,`a`.`salesOrderDetailId` AS `SalesOrderDetailId`   \n" +
                "from   \n" +
                "(select `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,`sm`.`poDate`   \n" +
                "AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID`   \n" +
                "AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID`   \n" +
                "AS `termsID`,`sm`.`soDate` AS `soDate`,`sm`.`updatedAt` AS `modifyDate`,`fun_getAssyidByID`(`a`.`partID`)   \n" +
                "AS `PIDCode`,`fun_getAssyNameByID`(`a`.`partID`) AS `mfgPN`,`fun_getAssyrevNameByID`(`a`.`partID`)   \n" +
                "AS `rev`,`fun_getAssyNickNameByID`(`a`.`partID`) AS `nickName`,`fun_getAssyDescrByID`(`a`.`partID`)   \n" +
                "AS `mfgPNDescription`,concat('(',`cu`.`mfgCode`,') ',`cu`.`mfgName`)   \n" +
                "AS `companyName`,concat(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode`   \n" +
                "AS `gencCategoryCode`,`a`.`qty` AS `qty`,`a`.`id` AS `salesOrderDetailId`,`a`.`partID` AS `partID`,  \n" +
                "(select ifnull(sum(`shippedassembly`.`shippedqty`),0) from `shippedassembly`   \n" +
                "where ((`shippedassembly`.`partID` = `a`.`partID`) and (`shippedassembly`.`isDeleted` = 0) and `shippedassembly`.`shippingId`   \n" +
                "in (select `salesshippingmst`.`shippingID` from `salesshippingmst` where (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty`   \n" +
                "from ((((`salesorderdet` `a` join `salesordermst` `sm` on(((`sm`.`id` = `a`.`refSalesOrderID`) and (ifnull(`sm`.`isDeleted`,0) = 0))))   \n" +
                "left join `mfgcodemst` `cu` on(((`sm`.`customerID` = `cu`.`id`) and (ifnull(`cu`.`isDeleted`,0) = 0))))   \n" +
                "left join `customer_contactperson` `cc` on(((`sm`.`contactPersonID` = `cc`.`personId`) and (ifnull(`cc`.`isDeleted`,0) = 0))))   \n" +
                "left join `genericcategory` `gc` on(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) and (ifnull(`gc`.`isDeleted`,0) = 0))))   \n" +
                "where (ifnull(`a`.`isDeleted`,0) = 0)) `a`;  \n" +
                //  /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "Drop PROCEDURE if Exists `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(	    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "    IN pWhereClause VARCHAR(16383)        \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "	SELECT  sd.id as salesdetailid, sd.qty,sd.mrpQty,sd.price,sd.materialTentitiveDocDate,sd.prcNumberofWeek,  \n" +
                "    sd.isHotJob,sd.materialDueDate,sd.shippingQty,sd.remark,sd.partID as assyID,   \n" +
                "    part.id as componentID, part.PIDCode ,part.rev, part.assyCode, part.nickName,part.mfgPNDescription,  \n" +
                "    (CASE WHEN (`sd`.`isHotJob` = 0) THEN 'No'    \n" +
                "					WHEN (`sd`.`isHotJob` = 1) THEN 'Yes' ELSE '' END) AS `isHotJobValue`,    \n" +
                "	`vuss`.`Sales Order ID` AS id,    \n" +
                "	`vuss`.`Sales Order` AS salesOrderNumber,    \n" +
                "	`vuss`.`Po Number` AS poNumber,    \n" +
                "	`vuss`.`Po Date` AS poDate,    \n" +
                "	`vuss`.`Customer ID` AS customerID,    \n" +
                "	`vuss`.`ContactPerson ID` AS contactPersonID,    \n" +
                "	`vuss`.`ShippingMethod ID` AS shippingMethodID,    \n" +
                "	`vuss`.`Sales Order Status` AS `status`,    \n" +
                "	`vuss`.`Revision` AS revision,    \n" +
                "	`vuss`.`Shipping Comment` AS shippingComment,    \n" +
                "	`vuss`.`Terms ID` AS termsID,    \n" +
                "	`vuss`.`So Date` AS soDate,    \n" +
                "	`vuss`.`Company Name` AS companyName,    \n" +
                "	`vuss`.`Full Name` AS fullName,    \n" +
                "	`vuss`.`GencCategory Code` AS genCategoryCode,    \n" +
                "	`vuss`.`Status` AS completedStatus,    \n" +
                "    `vuss`.`modifyDate` As modifyDate,  \n" +
                "	(CASE WHEN (`vuss`.`Sales Order Status` = 0) THEN 'Draft'     \n" +
                "		WHEN (`vuss`.`Sales Order Status` = 1) THEN 'Published'    \n" +
                "		ELSE '' END) AS `statusConvertedValue`     \n" +
                "	FROM vu_salesorder_shipped_summary vuss   \n" +
                "    left outer join salesorderdet sd on sd.refSalesOrderID = `vuss`.`Sales Order ID`   \n" +
                "    inner join component part on sd.partID = part.id;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 05-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (328,'2.00','V1',' slase order change - Mona'," + userid + ");"
            );
            break;
        case 328:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/05/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(             \n" +
                "	IN pTransferType VARCHAR(100),     					          \n" +
                "	IN pFromWHID INT(11),                                                                  \n" +
                "	IN pToWHID INT(11),                                                                  \n" +
                "	IN pFromBinID INT(11),                                                                  \n" +
                "	IN pToBinID INT(11),      \n" +
                "    IN pUIDID INT(11)      \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	SET @vWhareClause = \" 1 = 1 \";      \n" +
                "    SET @vFromBinID = 0;    \n" +
                "    SET @vFromWHID = 0;    \n" +
                "	SET @vToWHID = 0;     \n" +
                "	SET @vFromWHBinCount = 0; 	    \n" +
                "    SET @vToWHBinCount = 0;	    \n" +
                "	SET @vFromWHUIDCount = 0; 	    \n" +
                "	SET @vToWHUIDCount  = 0;    \n" +
                "	SET @vFromBinUIDCount = 0;     \n" +
                "	SET @vToBinUIDCount = 0;    \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);      \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN          \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);      \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS            \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID       \n" +
                "									FROM 	component_sid_stock             \n" +
                "									WHERE \", @vWhareClause );         \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b        \n" +
                "	SET 	t.warehouseID = b.warehouseID        \n" +
                "	WHERE 	t.binid = b.id;      \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w      \n" +
                "	SET 	t.deptWHID = w.parentWHID      \n" +
                "	WHERE 	t.warehouseID = w.id;      \n" +
                "  \n" +
                "	IF(pTransferType = \"Stock Transfer\") THEN      \n" +
                "		IF(IFNULL(pFromWHID, pFromBinID) IS NOT NULL AND pToWHID IS NOT NULL) THEN      \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));      \n" +
                "			SET @vToWHID = pToWHID;    \n" +
                "			IF(pFromWHID IS NOT NULL) THEN      \n" +
                "				UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;      \n" +
                "			ELSEIF (pFromBinID IS NOT NULL) THEN      \n" +
                "				UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;      \n" +
                "			END IF;       \n" +
                "		ELSEIF(pFromBinID  IS NOT NULL AND pToBinID IS NOT NULL) THEN      \n" +
                "			SET @vFromBinID = pFromBinID;    \n" +
                "			UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;      \n" +
                "		ELSEIF(pUIDID  IS NOT NULL AND pToBinID IS NOT NULL) THEN      \n" +
                "			SELECT binid INTO @vFromBinID FROM component_sid_stock WHERE id = pUIDID;      \n" +
                "			UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;    \n" +
                "        END IF;  \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSE      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history      \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					isinStk,					isDeleted,			createdBy,      \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			     \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		refCompSIDStockID,			uom,				packaging,			refSupplierPartId)      \n" +
                "	SELECT       \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					isinStk,					0,					1,      \n" +
                "		current_timestamp,			1,							current_timestamp,	NULL,				NULL,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			     \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		id,							uom,				packaging,			refSupplierPartId      \n" +
                "	FROM tempStockDetail;       \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTransferType = \"Stock Transfer\" AND (IFNULL(pFromBinID, pUIDID) IS NOT NULL AND pToBinID IS NOT NULL)) THEN      \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = @vFromBinID));      \n" +
                "        SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pToBinID));    \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID;      \n" +
                "        SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount into @vFromWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID =  @vToWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b WHERE b.warehouseID =  @vToWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 		pFromWHID fromWHID, 				pToWHID toWHID,       \n" +
                "			pFromBinID fromBinID, 				pToBinID toBinID, 					pUIDID uidID,      \n" +
                "			@vFromWHBinCount fromWHBinCount,	@vToWHBinCount toWHBinCount,		    \n" +
                "            @vFromWHUIDCount fromWHUIDCount,	@vToWHUIDCount toWHUIDCount,		    \n" +
                "            @vFromBinUIDCount fromBinUIDCount,	@vToBinUIDCount toBinUIDCount;       \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/05/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (329,'2.00','V1',' Modify procedure Sproc_transfer_stock for change in transfer type - Dharmishtha '," + userid + ");"
            );
            break;
        case 329:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 06-03-2019  *********************************** */
                "alter table operations  modify  column opWorkingCondition longtext;  \n" +
                "alter table operations modify column opManagementInstruction longtext;  \n" +
                "alter table operations modify column opDeferredInstruction longtext;  \n" +
                //  /* **************************** Add Script Version -> 06-03-2019*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (330,'2.00','V1','Alter Operation table '," + userid + ");"
            );
            break;
        case 330:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 06-03-2019  *********************************** */
                "CREATE TABLE `workorder_dataelement` (  \n" +
                "  `woDataElementID` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `woID` INT(11) NOT NULL,  \n" +
                "  `dataElementID` INT(11) NOT NULL,  \n" +
                "  `displayOrder` DECIMAL(6,2) DEFAULT NULL,  \n" +
                "  `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "  `isDeleted` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "  `description` TEXT,  \n" +
                "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`woDataElementID`),  \n" +
                "  UNIQUE KEY `workorder_dataelement_unique` (`woID`,`dataElementID`,`deletedAt`),  \n" +
                "  KEY `FK_dataelement_woDataElementID` (`dataElementID`),  \n" +
                "  KEY `FK_workorder_woDataElementID` (`woID`),  \n" +
                "  CONSTRAINT `FK_dataelement_woDataElementID` FOREIGN KEY (`dataElementID`) REFERENCES `dataelement` (`dataElementID`),  \n" +
                "  CONSTRAINT `FK_workorder_woDataElementID` FOREIGN KEY (`woID`) REFERENCES `workorder` (`woID`)  \n" +
                ") ENGINE=INNODB AUTO_INCREMENT=0  \n" +
                "DEFAULT CHARSET=utf8;  \n" +
                //  /* **************************** Add Script Version -> 06-03-2019*********************************** */
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,  \n" +
                "`menuRoute`,`pageRoute`,`pageURL`,`menuName`,  \n" +
                "`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,  \n" +
                "`tabLevel`,`iconClass`,`isActive`,`createdAt`,  \n" +
                "`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,  \n" +
                "`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`) VALUES   \n" +
                "('Manage Work Order Datafields',0,0,  \n" +
                "'','app.workorder.manage.datafields','/datafields/:woID/:woRevReqID/:openRevReq',' Work Order',  \n" +
                "NULL,(SELECT a.pageID FROM page_detail a WHERE a.pageName='Work Order'),0,NULL,  \n" +
                "NULL,NULL,1,'2018-02-16 10:05:31',  \n" +
                "'2018-02-16 10:05:31',NULL,'1',NULL,  \n" +
                "NULL,0,(SELECT b.pageID FROM page_detail b WHERE b.pageName='Add Work Order'),1,' Work Order');  \n" +
                //  /* **************************** Add Script Version -> 06-03-2019*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (331,'2.00','V1','Work Order Data Element Changes - Vaibhav'," + userid + ");"
            );
            break;
        case 331:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-03-2019  *********************************** */
                "ALTER TABLE kit_allocation ADD COLUMN refUIDId INT NULL;  \n" +
                "ALTER TABLE kit_allocation ADD CONSTRAINT FK_kit_allocation_refUIDId FOREIGN KEY (refUIDId) REFERENCES component_sid_stock(id);  \n" +
                "UPDATE kit_allocation ka SET ka.refUIDId = (SELECT id FROM component_sid_stock css WHERE css.uid = ka.uid);  \n" +
                "UPDATE kit_allocation SET STATUS = 'A' WHERE STATUS = 'Allocated';  \n" +
                /* **************************** Add Script Version -> 06-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (332,'2.00','V1',' DB changes of kit_allocation - FENIL '," + userid + ");"
            );
            break;
        case 332:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-03-2019  *********************************** */
                "UPDATE quotecharges_dynamic_fields_mst SET dataType=1;  \n" +
                "ALTER TABLE rfq_assy_quotations ADD materialDays INT;   \n" +
                "ALTER TABLE rfq_assy_quotations ADD nreDays INT;   \n" +
                "ALTER TABLE rfq_assy_quotations ADD nreCost DECIMAL(16,6);  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetSummaryTermsAndCondition` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSummaryTermsAndCondition`(	        \n" +
                "	    IN prfqAssyID INT           \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	SELECT (SELECT `name` FROM rfq_rohsmst  WHERE id = c.RoHSStatusID) AS additional         \n" +
                "        FROM rfq_assemblies  ra  \n" +
                "        LEFT JOIN component c ON c.id=ra.partid      \n" +
                "        WHERE ra.id=prfqAssyID        \n" +
                "	UNION        \n" +
                "		SELECT CONCAT(cs.fullName,'|',rc.classname) additional FROM standard_class rc         \n" +
                "		LEFT JOIN certificate_standards cs ON rc.certificateStandardID=cs.certificatestandardid        \n" +
                "		AND rc.isdeleted=0 WHERE FIND_IN_SET(rc.classid,(SELECT GROUP_CONCAT(ClassID) FROM component_standard_details     \n" +
                "		WHERE componentID=(SELECT partID FROM rfq_assemblies WHERE id=prfqAssyID ) AND isdeleted=0))        \n" +
                "	UNION        \n" +
                "		SELECT CONCAT('Main Standard','|',cs.fullName) additional FROM component_standard_details ras         \n" +
                "		LEFT JOIN certificate_standards cs ON ras.certificateStandardID=cs.certificatestandardid AND cs.isdeleted=0        \n" +
                "		WHERE ras.componentID=(SELECT partID FROM rfq_assemblies WHERE id=prfqAssyID ) AND ras.ClassID IS NULL AND ras.isdeleted=0;        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (333,'2.00','V1','Summary Changes-Champak'," + userid + ");"
            );
            break;
        case 333:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/06/2019   *********************************** */
                "update component_sid_stock_history set uom = -1 where uom is null;  \n" +
                /* **************************** New Script -> 03/06/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(             \n" +
                "	IN pTransferType VARCHAR(100),     					          \n" +
                "	IN pFromWHID INT(11),                                                                  \n" +
                "	IN pToWHID INT(11),                                                                  \n" +
                "	IN pFromBinID INT(11),                                                                  \n" +
                "	IN pToBinID INT(11),      \n" +
                "    IN pUIDID INT(11),       \n" +
                "	IN pCreatedBy VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	SET @vWhareClause = \" 1 = 1 \";      \n" +
                "    SET @vFromBinID = 0;    \n" +
                "    SET @vFromWHID = 0;    \n" +
                "	SET @vToWHID = 0;     \n" +
                "	SET @vFromWHBinCount = 0; 	    \n" +
                "    SET @vToWHBinCount = 0;	    \n" +
                "	SET @vFromWHUIDCount = 0; 	    \n" +
                "	SET @vToWHUIDCount  = 0;    \n" +
                "	SET @vFromBinUIDCount = 0;     \n" +
                "	SET @vToBinUIDCount = 0;    \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);      \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN          \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);      \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN      \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst where  WarehouseID = \", pFromWHID,\")\");      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS            \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID       \n" +
                "									FROM 	component_sid_stock             \n" +
                "									WHERE \", @vWhareClause );         \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b        \n" +
                "	SET 	t.warehouseID = b.warehouseID        \n" +
                "	WHERE 	t.binid = b.id;      \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w      \n" +
                "	SET 	t.deptWHID = w.parentWHID      \n" +
                "	WHERE 	t.warehouseID = w.id;      \n" +
                "  \n" +
                "	IF(pTransferType = \"Stock Transfer\") THEN      \n" +
                "		IF(IFNULL(pFromWHID, pFromBinID) IS NOT NULL AND pToWHID IS NOT NULL) THEN      \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));      \n" +
                "			SET @vToWHID = pToWHID;    \n" +
                "			IF(pFromWHID IS NOT NULL) THEN      \n" +
                "				UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;      \n" +
                "			ELSEIF (pFromBinID IS NOT NULL) THEN      \n" +
                "				UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;      \n" +
                "			END IF;       \n" +
                "		ELSEIF(pFromBinID  IS NOT NULL AND pToBinID IS NOT NULL) THEN      \n" +
                "			SET @vFromBinID = pFromBinID;    \n" +
                "			UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;      \n" +
                "		ELSEIF(pUIDID  IS NOT NULL AND pToBinID IS NOT NULL) THEN      \n" +
                "			SELECT binid INTO @vFromBinID FROM component_sid_stock WHERE id = pUIDID;      \n" +
                "			UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;    \n" +
                "        END IF;  \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;      \n" +
                "	ELSE      \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;     \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history      \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					isinStk,					isDeleted,			createdBy,      \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			     \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		refCompSIDStockID,			uom,				packaging,			refSupplierPartId)      \n" +
                "	SELECT       \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,      \n" +
                "		refinvdate,					isinStk,					0,					pCreatedBy,      \n" +
                "		current_timestamp,			pCreatedBy,					current_timestamp,	NULL,				NULL,      \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			      \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			     \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,      \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				      \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,      \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	      \n" +
                "        receiveMaterialType,		id,							uom,				packaging,			refSupplierPartId      \n" +
                "	FROM tempStockDetail;       \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTransferType = \"Stock Transfer\" AND (IFNULL(pFromBinID, pUIDID) IS NOT NULL AND pToBinID IS NOT NULL)) THEN      \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = @vFromBinID));      \n" +
                "        SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pToBinID));    \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID;      \n" +
                "        SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount into @vFromWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID = @vFromWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b WHERE b.warehouseID = @vFromWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN    \n" +
                "		SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b WHERE b.id = c.binid AND b.warehouseID =  @vToWHID;      \n" +
                "		SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b WHERE b.warehouseID =  @vToWHID;      \n" +
                "	END IF;    \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 		pFromWHID fromWHID, 				pToWHID toWHID,       \n" +
                "			pFromBinID fromBinID, 				pToBinID toBinID, 					pUIDID uidID,      \n" +
                "			@vFromWHBinCount fromWHBinCount,	@vToWHBinCount toWHBinCount,		    \n" +
                "            @vFromWHUIDCount fromWHUIDCount,	@vToWHUIDCount toWHUIDCount,		    \n" +
                "            @vFromBinUIDCount fromBinUIDCount,	@vToBinUIDCount toBinUIDCount;       \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/06/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(          \n" +
                "	pBinID int(11),          \n" +
                "    pGlobalSearchUIDId int(11),       \n" +
                "	pSearchUIDId INT(11),      \n" +
                "	pSearchString varchar(100)      \n" +
                ")   \n" +
                "BEGIN     \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                  \n" +
                "	SELECT 	css.id,					css.scanlabel,		css.pkgQty,				css.uid,           \n" +
                "            c.PIDCode, 				c.mfgcodeID,        c.mfgPN,  				mfg.mfgCode, 	  \n" +
                "            mfg.mfgName,			ro.rohsIcon,        ro.name AS rohsName,	css.nickName,		  \n" +
                "            css.binID,				css.uom,			cast('' as char(100)) uomName                                   \n" +
                "	FROM component_sid_stock css                                  \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                                 \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                                  \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                         \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)              \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)              \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )              \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0      \n" +
                "	AND 	css.uid like CONCAT('%', IFNULL(pSearchString,'') ,'%');       \n" +
                "  \n" +
                "    update 	Results r, uoms u      \n" +
                "    SET   	r.uomName = u.abbreviation      \n" +
                "    WHERE	r.uom = u.id;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;           \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/06/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_Transfer_Stock_History`;  \n" +
                "CREATE PROCEDURE `Sproc_Transfer_Stock_History`(	                            \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),	                            \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pUID varchar(14)  \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "	SELECT 	css.id, 									css.scanlabel, 							  \n" +
                "			css.pkgQty, 								css.uom,									cast(NULL as char(100)) uomName,  \n" +
                "			css.uid, 									css.printStatus, 							css.costCategoryID,  \n" +
                "            cast(NULL as char(100)) costCategory, 		css.lotCode, 								css.dateCode,             				  \n" +
                "            css.refcompid,								0 mfgcodeID, 								cast(NULL as char(100)) mfgPN, 			  \n" +
                "            cast(NULL as char(50)) PIDCode, 			0 packaginggroupID,							0 mfgID, 	  \n" +
                "            cast(NULL as char(255)) mfgCode, 			0 packageQty,  								cast(NULL as char(500)) mfg,  \n" +
                "            0 mslLevel,									0 pictureCount,								css.refCompSIDStockID,			  \n" +
                "            0 RoHSStatusID,								cast(NULL as char(255)) rohsIcon, 			cast(NULL as char(50)) rohsName,			  \n" +
                "            css.binID,    								cast(NULL as char(50)) location,   		  \n" +
                "            0 warehouseID,								cast(NULL as char(50)) warehouse,             \n" +
                "            0 departmentID,								cast(NULL as char(50)) department,  \n" +
                "            css.customerID,								cast(NULL as char(500)) customer,             \n" +
                "            css.assyID,									cast(NULL as char(50)) assembly,                          \n" +
                "            (CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,         \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "            css.refCPNMFGPNID,							cast(NULL as char(500)) cpnMFGCode,     	cast(NULL as char(100)) cpnMFGPN,                \n" +
                "			cast(NULL as char(100)) mfgPNDescription, 	css.receiveMaterialType, 					css.spq,   \n" +
                "            css.pcbPerArray, 							css.updatedAt, 								css.nickName,  \n" +
                "			css.packaging,								cast(NULL as char(100)) packagingName,	  \n" +
                "            css.refSupplierPartId, 						cast(NULL as char(500)) supplierMFGCode,  	cast(NULL as char(100)) supplieMFGPN,  \n" +
                "			css.expiryDate,								css.createdAt,								css.createdBy,	  \n" +
                "            CAST(NULL AS CHAR(255)) createdByName                             \n" +
                "	FROM component_sid_stock_history css                    \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;  \n" +
                "  \n" +
                "    -- Set bin name  \n" +
                "	UPDATE 	Results r, binmst b    \n" +
                "	SET 	r.location = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE 	r.binID = b.id;   \n" +
                "  \n" +
                "    -- Set warehouse name  \n" +
                "    UPDATE 	Results r, warehousemst w    \n" +
                "	SET 	r.warehouse = w.Name, r.departmentID = w.parentWHID  \n" +
                "	WHERE 	r.WarehouseID = w.id;   \n" +
                "  \n" +
                "	-- Set department name  \n" +
                "	UPDATE 	Results r, warehousemst w    \n" +
                "	SET 	r.department = w.Name  \n" +
                "	WHERE 	r.departmentID = w.id;   \n" +
                "  \n" +
                "    -- Set component detail  \n" +
                "    UPDATE 	Results r, component c    \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.PIDCode = c.PIDCode, r.packageQty = IFNULL(c.packageQty,1),  \n" +
                "			r.RoHSStatusID = c.RoHSStatusID, r.packaginggroupID = IFNULL(c.packaginggroupID, 0), r.mslLevel =  IFNULL(c.mslID,0),  \n" +
                "            r.mfgPNDescription = c.mfgPNDescription  \n" +
                "	WHERE 	r.refcompid = c.id;  \n" +
                "  \n" +
                "    -- Set UOM  \n" +
                "    UPDATE 	Results r, uoms u      \n" +
                "    SET   	r.uomName = u.abbreviation      \n" +
                "    WHERE	r.uom = u.id;     \n" +
                "  \n" +
                "	-- Set manufacturer detail  \n" +
                "    UPDATE 	Results r, mfgcodemst m   \n" +
                "	SET 	r.mfgID = m.id,	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)  \n" +
                "	WHERE 	r.mfgcodeID = m.id;  \n" +
                "  \n" +
                "    -- Set customer detail  \n" +
                "    UPDATE 	Results r, mfgcodemst m   \n" +
                "	SET 	r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)  \n" +
                "	WHERE 	r.customerID = m.id;  \n" +
                "  \n" +
                "	-- Set cost category name  \n" +
                "	UPDATE 	Results r, cost_category c    \n" +
                "	SET 	r.costCategory = c.categoryName  \n" +
                "	WHERE 	r.costCategoryID = c.id;  \n" +
                "  \n" +
                "    -- Set RoHS det  \n" +
                "	UPDATE 	Results r, rfq_rohsmst rohs    \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name  \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;  \n" +
                "  \n" +
                "    -- Update picture count  \n" +
                "    UPDATE 	Results r  \n" +
                "	SET 	r.pictureCount = (SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = r.refCompSIDStockID AND gf.isActive = 1 AND gf.deletedAt IS NULL);  \n" +
                "  \n" +
                "	 -- Set ref. CPN detail  \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m    \n" +
                "	SET 	r.cpnMFGPN = c.mfgPN, r.cpnMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)  \n" +
                "	WHERE 	r.refCPNMFGPNID = c.id  \n" +
                "    AND		c.mfgcodeID = m.id;  \n" +
                "  \n" +
                "	-- Set assembly detail  \n" +
                "    UPDATE 	Results r, component c  \n" +
                "	SET 	r.assembly = c.PIDCode  \n" +
                "	WHERE 	r.assyID = c.id;  \n" +
                "  \n" +
                "    -- Set packaging detail  \n" +
                "    UPDATE 	Results r, Component_PackagingMst c  \n" +
                "	SET 	r.packagingName = c.name  \n" +
                "	WHERE 	r.packaging = c.id;  \n" +
                "  \n" +
                "  -- Set supplier part detail  \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m    \n" +
                "	SET 	r.supplieMFGPN = c.mfgPN, r.supplierMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)  \n" +
                "	WHERE 	r.refSupplierPartId = c.id  \n" +
                "    AND		c.mfgcodeID = m.id;  \n" +
                "  \n" +
                "	-- set transferred by  \n" +
                "    UPDATE 	Results r, users u    \n" +
                "	SET 	r.createdByName = u.username    \n" +
                "	WHERE 	r.createdBy = u.id;   \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                            \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;	       \n" +
                "  \n" +
                "    IF(pUID IS NOT NULL) THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND uid = '\", pUID, \"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE	                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;	                            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "    PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/06/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (334,'2.00','V1',' Modified procedure Sproc_retrive_UID_to_transfer, Sproc_Transfer_Stock_History, Sproc_transfer_stock - Dharmishtha '," + userid + ");"
            );
            break;
        case 334:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/06/2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                  \n" +
                "    IN pcodeDigest VARCHAR(1000),              \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN        \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;            \n" +
                "DECLARE whereClause2 VARCHAR(255) ;   \n" +
                "  \n" +
                "/************************ Save Employee Details in Temp Table ************************************/  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (          \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),          \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)          \n" +
                ");          \n" +
                "INSERT INTO temp_sproc_employeedetails          \n" +
                "SELECT empdep.employeeID, emp.firstname, emp.lastname,           \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName          \n" +
                "FROM employee_department empdep          \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL          \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.deletedAt IS NULL AND empdep.isdefault = 1)  \n" +
                "LEFT JOIN employees emp ON emp.id = empdep.employeeID AND emp.deletedAt IS NULL          \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1;         \n" +
                "/************************ Create Temp Table for Workorder Details ************************************/  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (          \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),          \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),          \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,          \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),          \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(100),	imageURL VARCHAR(1000),          \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),          \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			          \n" +
                "		poNumber VARCHAR(1000)	          \n" +
                ");    \n" +
                "/************************ If user is not admin than whereclause ************************************/        \n" +
                "IF pisUserAdmin = 1 THEN          \n" +
                "	SET whereClause1 = '';            \n" +
                "ELSE          \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe           \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)          \n" +
                ")';          \n" +
                "END IF;     \n" +
                "/************************ Get Prefix values from system configuration ************************************/            \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";          \n" +
                "/************************ save all workorder details in temp table for further use ************************************/            \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails          \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,          \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,           \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,          \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,           \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,          \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,          \n" +
                "	NULL,			NULL,								NULL,          \n" +
                "	NULL          \n" +
                "FROM workorder wo          \n" +
                "LEFT JOIN component c ON wo.partID = c.id           \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id           \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                                      \n" +
                "PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "EXECUTE query1;                                      \n" +
                "DEALLOCATE PREPARE query1;    \n" +
                "/************************ 1. Get all employee details ************************************/            \n" +
                "SELECT * FROM temp_sproc_employeedetails;          \n" +
                "/************************ 1. Get all employee details ************************************/            \n" +
                "/************************ save all salesorder details in temp table for further use ************************************/   \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (          \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)          \n" +
                ");          \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails          \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID           \n" +
                "FROM workorder_salesorder_details wosd           \n" +
                "WHERE wosd.deletedAt IS NULL           \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)          \n" +
                "GROUP BY wosd.woID;     \n" +
                "/************************ save all certificate details in temp table for further use ************************************/   \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (          \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),          \n" +
                "		fullname VARCHAR(255),		woID INT(11)          \n" +
                ");          \n" +
                "INSERT INTO temp_sproc_certificatedetails          \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID           \n" +
                "	FROM temp_sproc_workorderdetails tempWO          \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL          \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL          \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL          \n" +
                "	GROUP BY tempWO.woID;          \n" +
                "/************************ 2.1 Update details in workorder details from certificate tables ************************************/            \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,           \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result          \n" +
                "SET tempWO1.colorcode = result.colorcode,          \n" +
                "tempWO1.classname = result.classname,          \n" +
                "tempWO1.standardName = result.fullname          \n" +
                "WHERE tempWO1.woID = result.woID;          \n" +
                "/************************ 2.2 Update details in workorder details from sales order tables ************************************/            \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,          \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1          \n" +
                "SET tempWO1.poQty = result1.poQty,          \n" +
                "tempWO1.poNumber = result1.refPONumber          \n" +
                "WHERE tempWO1.woID = result1.woID;          \n" +
                "/************************ 2. Get all workroder list ************************************/            \n" +
                "SELECT * FROM temp_sproc_workorderdetails;          \n" +
                "/************************ 2. Get all workroder list ************************************/            \n" +
                "/************************ 3. Get all active operation list ************************************/            \n" +
                "IF pisUserAdmin = 1 THEN          \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';            \n" +
                "ELSE          \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';          \n" +
                "END IF;       \n" +
                "  \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,           \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,           \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation          \n" +
                "FROM workorder_trans_empinout wte          \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL           \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL          \n" +
                "WHERE wte.deletedAt IS NULL           \n" +
                "AND wte.checkoutTime IS NULL           \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                  \n" +
                " /************************ 3. Get all active operation list ************************************/            \n" +
                "  \n" +
                "PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "EXECUTE query2;                                      \n" +
                "DEALLOCATE PREPARE query2;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/06/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (335,'2.00','V1','Resolved task list issue(condition with department) - Vaibhav '," + userid + ");"
            );
            break;
        case 335:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                            \n" +
                " IN tabquery LONGTEXT                            \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "   SET @sqlQ=tabquery;                            \n" +
                "   PREPARE stmt1 FROM @sqlQ;                             \n" +
                "   EXECUTE stmt1;                              \n" +
                "   DEALLOCATE PREPARE stmt1;                             \n" +
                "  \n" +
                "  SELECT '1';                            \n" +
                "  \n" +
                "    block1:BEGIN                            \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                              \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                            \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                              \n" +
                "	DECLARE  current_mfgcode INT ;                            \n" +
                "	DECLARE current_Ismfg TINYINT;                              \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                              \n" +
                "        DECLARE current_component INT ;                            \n" +
                "        DECLARE current_ComponentID INT;                            \n" +
                "	DECLARE maxvalueid INT;                            \n" +
                "        DECLARE aliasgroup INT;      \n" +
                "        DECLARE refsuppliercomponentID INT;                            \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                              \n" +
                "    DECLARE component_cursor CURSOR FOR                              \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                            \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                              \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                              \n" +
                "     -- open the cursor                              \n" +
                "    OPEN component_cursor;                            \n" +
                "     -- start looping                              \n" +
                "     component_loop: LOOP                                \n" +
                "     -- read the name from next row into the variables                               \n" +
                "     FETCH component_cursor INTO current_ComponentID;                              \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                               \n" +
                "     -- close the cursor and exit the loop if it has.                              \n" +
                "       IF exit_loop THEN	                             \n" +
                "				 LEAVE component_loop;                              \n" +
                "			END IF;                              \n" +
                "        SELECT '1';                            \n" +
                "  \n" +
                "	SET current_mfgpn='';                            \n" +
                "	SET current_mfgcode=1;                            \n" +
                "	SET current_mfgPartNumber='';                            \n" +
                "	SET current_Ismfg=1;                            \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                            \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                            \n" +
                "	 -- insert new component                             \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,                            \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                            \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                            \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,                \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,partType)                            \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,'Auto',dataSheetLink,eolDate,feature,heightText,                            \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                            \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                            \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,                \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,category                            \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                            \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                            \n" +
                "	 -- check component is manufacturer part or distributor part                            \n" +
                "                   IF(current_Ismfg=1) THEN                            \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                            \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                            \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                            \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                            \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                            \n" +
                "                    ELSE                  \n" +
                "  \n" +
                "		        SELECT aliasgroupID,id INTO aliasgroup,refsuppliercomponentID FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                            \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                            \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                            \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                            \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto',refSupplierMfgpnComponentID=refsuppliercomponentID WHERE id=current_component;                            \n" +
                "		        END IF;                            \n" +
                "		    END IF;                            \n" +
                "      END IF;                            \n" +
                "  \n" +
                "    END LOOP component_loop;                            \n" +
                "      CLOSE component_cursor;                            \n" +
                "    END  block1;                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (336,'2.00','V1','Alter sp Sproc_saveVerifiedComponentFromApi-Champak '," + userid + ");"
            );
            break;
        case 336:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                  \n" +
                "    IN pcodeDigest VARCHAR(1000),              \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN        \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;            \n" +
                "DECLARE whereClause2 VARCHAR(255) ;   \n" +
                "  \n" +
                "/************************ Save Employee Details in Temp Table ************************************/  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (          \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),          \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)          \n" +
                ");          \n" +
                "INSERT INTO temp_sproc_employeedetails     \n" +
                "SELECT emp.id, emp.firstname, emp.lastname,           \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName          \n" +
                "FROM employees emp          \n" +
                "LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.deletedAt IS NULL AND empdep.isdefault = 1)    \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL          \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.deletedAt IS NULL)   \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1;      \n" +
                "/************************ Create Temp Table for Workorder Details ************************************/  \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (          \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),          \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),          \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,          \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),          \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(100),	imageURL VARCHAR(1000),          \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),          \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			          \n" +
                "		poNumber VARCHAR(1000)	          \n" +
                ");    \n" +
                "/************************ If user is not admin than whereclause ************************************/        \n" +
                "IF pisUserAdmin = 1 THEN          \n" +
                "	SET whereClause1 = '';            \n" +
                "ELSE          \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe           \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)          \n" +
                ")';          \n" +
                "END IF;     \n" +
                "/************************ Get Prefix values from system configuration ************************************/            \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";          \n" +
                "/************************ save all workorder details in temp table for further use ************************************/            \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails          \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,          \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,           \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,          \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,           \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,          \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,          \n" +
                "	NULL,			NULL,								NULL,          \n" +
                "	NULL          \n" +
                "FROM workorder wo          \n" +
                "LEFT JOIN component c ON wo.partID = c.id           \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id           \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                                      \n" +
                "PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "EXECUTE query1;                                      \n" +
                "DEALLOCATE PREPARE query1;    \n" +
                "/************************ 1. Get all employee details ************************************/            \n" +
                "SELECT * FROM temp_sproc_employeedetails;          \n" +
                "/************************ 1. Get all employee details ************************************/            \n" +
                "/************************ save all salesorder details in temp table for further use ************************************/   \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (          \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)          \n" +
                ");          \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails          \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID           \n" +
                "FROM workorder_salesorder_details wosd           \n" +
                "WHERE wosd.deletedAt IS NULL           \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)          \n" +
                "GROUP BY wosd.woID;     \n" +
                "/************************ save all certificate details in temp table for further use ************************************/   \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;          \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (          \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),          \n" +
                "		fullname VARCHAR(255),		woID INT(11)          \n" +
                ");          \n" +
                "INSERT INTO temp_sproc_certificatedetails          \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID           \n" +
                "	FROM temp_sproc_workorderdetails tempWO          \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL          \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL          \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL          \n" +
                "	GROUP BY tempWO.woID;          \n" +
                "/************************ 2.1 Update details in workorder details from certificate tables ************************************/            \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,           \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result          \n" +
                "SET tempWO1.colorcode = result.colorcode,          \n" +
                "tempWO1.classname = result.classname,          \n" +
                "tempWO1.standardName = result.fullname          \n" +
                "WHERE tempWO1.woID = result.woID;          \n" +
                "/************************ 2.2 Update details in workorder details from sales order tables ************************************/            \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,          \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1          \n" +
                "SET tempWO1.poQty = result1.poQty,          \n" +
                "tempWO1.poNumber = result1.refPONumber          \n" +
                "WHERE tempWO1.woID = result1.woID;          \n" +
                "/************************ 2. Get all workroder list ************************************/            \n" +
                "SELECT * FROM temp_sproc_workorderdetails;          \n" +
                "/************************ 2. Get all workroder list ************************************/            \n" +
                "/************************ 3. Get all active operation list ************************************/            \n" +
                "IF pisUserAdmin = 1 THEN          \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';            \n" +
                "ELSE          \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';          \n" +
                "END IF;       \n" +
                "  \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,           \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,           \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation          \n" +
                "FROM workorder_trans_empinout wte          \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL           \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL          \n" +
                "WHERE wte.deletedAt IS NULL           \n" +
                "AND wte.checkoutTime IS NULL           \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                  \n" +
                " /************************ 3. Get all active operation list ************************************/            \n" +
                "  \n" +
                "PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "EXECUTE query2;                                      \n" +
                "DEALLOCATE PREPARE query2;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOSuppliesMaterialsAndTools` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOSuppliesMaterialsAndTools`(    \n" +
                "			IN ppartID INT(11),  \n" +
                "			IN pwoOPID INT(11)  \n" +
                "		)  \n" +
                "BEGIN     \n" +
                "	DECLARE pWhereClause VARCHAR(2000);    \n" +
                "	SET pWhereClause = '';    \n" +
                "	IF ppartID IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND c.id=\" , ppartID);    \n" +
                "	END IF;     \n" +
                "	IF pwoOPID IS NOT NULL THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND wop.woopid=\" , pwoOPID);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"SELECT c.id,    \n" +
                "	c.PIDCode,    \n" +
                "	c.mfgPN,    \n" +
                "	c.rev,    \n" +
                "	c.imageURL,    \n" +
                "	c.dataSheetLink,    \n" +
                "	c.mountingTypeID,    \n" +
                "	rr.name rohsStatus,    \n" +
                "	rr.rohsIcon rohsIcon FROM workorder_operation_part wop    \n" +
                "LEFT JOIN component c ON c.id = wop.partID AND c.deletedAt IS NULL AND IFNULL(c.isDeleted,0) =0     \n" +
                "LEFT JOIN rfq_rohsmst rr ON rr.id = c.roHSStatusID AND c.deletedAt IS NULL AND IFNULL(rr.isDeleted,0) =0    \n" +
                "WHERE c.mountingTypeID IN (  \n" +
                "	SELECT rm.id FROM rfq_mountingtypemst rm  \n" +
                "		WHERE rm.id IN (  \n" +
                "			SELECT cld.rfqmountingTypeID FROM component_logicalgroup_detail cld   \n" +
                "				WHERE logicalgroupID IN ('1','2','3') AND (cld.deletedAt IS NULL AND IFNULL(cld.isDeleted,0) =0)  \n" +
                "			) AND (rm.deletedAt IS NULL AND IFNULL(rm.isDeleted,0) =0)  \n" +
                "		) AND wop.deletedAt IS NULL AND IFNULL(wop.isDeleted,0) =0\", pWhereClause);      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (337,'2.00','V1','Alter sp Sproc_GetWorkorderEmployeeDetailsByEmpCode ,Sproc_GetWOSuppliesMaterialsAndTools-Vaibhav '," + userid + ");"
            );
            break;

        case 337:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                // ADD REFERENCES to mfgcodemst
                "ALTER TABLE employees DROP FOREIGN KEY FK_employees_supplierID;  \n" +
                "UPDATE employees a SET a.supplierID = (SELECT id FROM mfgcodemst WHERE customerid =  a.supplierID);  \n" +
                " ALTER TABLE employees ADD CONSTRAINT FK_employees_supplierID FOREIGN KEY (supplierID) REFERENCES mfgcodemst (id);  \n" +
                // ADD REFERENCES to mfgcodemst
                "ALTER TABLE certificate_standards DROP FOREIGN KEY FK_certificate_standards_certificateSupplierID;  \n" +
                "UPDATE certificate_standards a SET a.certificateSupplierID = (SELECT id FROM mfgcodemst WHERE customerid =  a.certificateSupplierID);  \n" +
                "ALTER TABLE certificate_standards ADD CONSTRAINT FK_certificate_standards_certificateSupplierID FOREIGN KEY (certificateSupplierID) REFERENCES mfgcodemst (id);  \n" +
                //Quote Terms & Condition parent menu
                "INSERT INTO page_detail(pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive, createdAt, updatedAt, deletedAt, createdBy, updatedBy, deletedBy, isDeleted, parentTabID, isDisplay, displayMenuName)   \n" +
                "VALUES \n" +
                "('Quote Terms & Conditions', '0', '0', 'setting.system.rfqsetting.quotetermsandconditions', NULL, NULL, 'Quote Terms & Conditions', NULL, '175', '1', '20.46', '1', NULL, '1', '2019-02-28 10:44:40', '2019-03-05 07:45:43', NULL, '1', NULL, NULL, '0', NULL, '1', 'Quote Terms & Conditions');  \n" +
                //Add menu Quote Terms & Condition Category
                "INSERT INTO page_detail(pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive, createdAt, updatedAt, deletedAt, createdBy, updatedBy, deletedBy, isDeleted, parentTabID, isDisplay, displayMenuName)   \n" +
                "VALUES    \n" +
                "('Quote Terms & Conditions Categorys', '0', '0', 'setting.system.rfqsetting.quotetermsandconditions.categorys', 'app.rfqcategorys', '/rfqsetting/quotetermsandconditions/categorys/:categoryType', 'Quote Terms & Conditions Categorys', NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename='Quote Terms & Conditions' LIMIT 1), '0', '20.47', '2', NULL, '1', '2019-02-28 10:51:25', '2019-03-05 07:53:16', NULL, '1', NULL, NULL, '0', NULL, '1', 'Quote Terms & Conditions Categorys');  \n" +
                //Add menu Quote Terms & Condition Attributes
                "INSERT INTO page_detail(pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive, createdAt, updatedAt, deletedAt, createdBy, updatedBy, deletedBy, isDeleted, parentTabID, isDisplay, displayMenuName)   \n" +
                "VALUES    \n" +
                "('Quote Terms & Conditions Attributes', '0', '0', 'setting.system.rfqsetting.quotetermsandconditions.attributes', 'app.rfqattributes', '/rfqsetting/quotetermsandconditions/attributes/:categoryType', 'Quote Terms & Conditions Attributes', NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename='Quote Terms & Conditions Attributes' LIMIT 1), '0', '20.48', '2', NULL, '1', '2019-02-28 10:57:03', '2019-03-05 07:56:13', NULL, '1', NULL, NULL, '0', NULL, '1', 'Quote Terms & Conditions Attributes');  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveECOCategory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveECOCategory`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pcategory INT(11)  \n" +
                "  \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "		SET @SQL = NULL;    \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "		SELECT *,    \n" +
                "               (CASE WHEN (pcategory = 1) THEN 'Work Order' WHEN (pcategory = 2) THEN 'RFQ Terms & Condition' ELSE '' END) AS `reqCategory`      \n" +
                "		FROM eco_type_category    \n" +
                "		WHERE deletedAt IS NULL AND category=pcategory;    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_RetriveECOTypeValues` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveECOTypeValues`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pcategory INT(11)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		 SELECT `etv`.`ecoTypeValID`, `etv`.`ecoTypeCatID`, `etv`.`name`,`etv`.`noteRequired`, `etv`.`displayOrder`,  \n" +
                "			`etv`.`isDeleted`, `etv`.`createdBy`, `etv`.`updatedBy`,`etv`.`deletedBy`,   \n" +
                "			`etv`.`createdAt`, `etv`.`updatedAt`,`etv`.`deletedAt`,`etc`.`name`  AS `ecoTypeCatName`,`etc`.`category`,  \n" +
                "			(CASE WHEN (`etv`.`noteRequired` = 0) THEN 'NO'  \n" +
                "				WHEN (`etv`.`noteRequired` = 1) THEN 'Yes' ELSE '' END) AS `noteRequiredConvertedValue`,  \n" +
                "			(CASE WHEN (pcategory = 1) THEN 'Work Order'  \n" +
                "				WHEN (pcategory= 2) THEN 'RFQ Terms & Condition' ELSE '' END) AS `categoryConvertedValue`  \n" +
                "		FROM `eco_type_values` AS `etv`   \n" +
                "			LEFT OUTER JOIN `eco_type_category` AS `etc` ON `etv`.`ecoTypeCatID` = `etc`.`ecoTypeCatID`   \n" +
                "			AND `etc`.`deletedAt` IS NULL   \n" +
                "		WHERE `etv`.`deletedAt` IS NULL  AND `etc`.`category`=pcategory  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                //Add logoutIdleTime filed
                "ALTER TABLE employees  \n" +
                "ADD COLUMN logoutIdleTime INT(11);  \n" +

                /* **************************** Add Script Version ->07-03-2019*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (338,'2.00','V1','Add menu and change references - Deepshikha '," + userid + ");"
            );
            break;
        case 338:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllManufacturers` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllManufacturers`(	          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),	          \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pMfgType VARCHAR(50)      \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "	SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName, mc.isCustOrDisty ,  \n" +
                "		CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
                "		END AS isCustOrDistyText,  \n" +
                "		(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias           \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist          \n" +
                "	FROM mfgcodemst mc	      \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0      \n" +
                "	AND  deletedAt IS NULL      \n" +
                "	AND mfgType = pMfgType;        \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode ASC\") ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN       \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );         \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(	        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),	        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	-- IN pIsMFG TINYINT(1),  \n" +
                "	IN pmfgType VARCHAR(20),  \n" +
                "	IN pisCustOrDisty TINYINT(1)       \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	/* DECLARE SQLStatement varchar(255); */        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.createdAt,mc.updatedAt,emp.firstName, emp.lastName,        \n" +
                "		    CONCAT(emp.firstName, ' ', emp.lastName) AS fullName, wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,        \n" +
                "		(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias         \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,   \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive   ,  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'     \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`      \n" +
                "	FROM mfgcodemst mc         \n" +
                "		JOIN users us ON mc.createdBy = us.id AND us.deletedAt IS NULL         \n" +
                "		JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL          \n" +
                "		LEFT JOIN who_bought_who wbw ON wbw.buyTo = mc.id      \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0   \n" +
                "	AND mc.deletedAt IS NULL  \n" +
                "	AND mc.mfgType = pmfgType  \n" +
                "	AND CASE WHEN pisCustOrDisty IS NULL THEN 1 = 1  \n" +
                "		WHEN  pisCustOrDisty IS NOT NULL THEN mc.isCustOrDisty = pisCustOrDisty ELSE TRUE END  \n" +
                "	;     \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode DESC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;        \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "			(                                                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL    \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                            \n" +
                "				UNION ALL                                                             \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)      \n" +
                "				UNION ALL                                                             \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"certificate_standards\" ELSE \"\" END AS msg FROM  certificate_standards cs WHERE cs.deletedAt IS NULL AND cs.certificateSupplierID IN(',IDs,') LIMIT 1)       \n" +
                "				UNION ALL                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                                            \n" +
                "		      ) q');                                                            \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                            \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "					EXECUTE stmt1;                    \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');                    \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                            \n" +
                "					EXECUTE stmt2;                       \n" +
                "  \n" +
                "			SELECT * FROM tempMFGCodeMst;    \n" +
                "  \n" +
                "			COMMIT;                                                            \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM tempMFGCodeMst;                                                            \n" +
                "  \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE tempMFGCodeMst;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (339,'2.00','V1',' sp for customer/supplier/mfg - KETAN '," + userid + ");"
            );
            break;
        case 339:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                              \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),	                              \n" +
                "        IN pWhereClause VARCHAR(16383)                                  \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                               \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                              \n" +
                "	SELECT 	css.id,					  css.scanlabel,   \n" +
                "		css.pkgQty,				  css.uom,				CAST(NULL AS CHAR(100)) uomName,  \n" +
                "		css.uid,				  css.printStatus,			css.costCategoryID,  \n" +
                "		CAST(NULL AS CHAR(100)) costCategory, 	  css.lotCode,				css.dateCode,  \n" +
                "		css.refcompid,				  0 mfgcodeID,				CAST(NULL AS CHAR(100)) mfgPN,  \n" +
                "		CAST(NULL AS CHAR(50)) PIDCode,		  0 packaginggroupID,			0 mfgID,  \n" +
                "		CAST(NULL AS CHAR(255)) mfgCode, 	  0 packageQty,				CAST(NULL AS CHAR(500)) mfg,  \n" +
                "		0 mslLevel,				  0 pictureCount,				  \n" +
                "		0 RoHSStatusID,				  CAST(NULL AS CHAR(255)) rohsIcon,	CAST(NULL AS CHAR(50)) rohsName,  \n" +
                "		css.binID,    				  CAST(NULL AS CHAR(50)) location,     \n" +
                "		0 warehouseID,				  CAST(NULL AS CHAR(50)) warehouse,  \n" +
                "		0 departmentID,				  CAST(NULL AS CHAR(50)) department,		    \n" +
                "		css.customerID,				  CAST(NULL AS CHAR(500)) customer,  \n" +
                "		css.assyID,				  CAST(NULL AS CHAR(50)) assembly,  \n" +
                "		css.refCPNMFGPNID,			  CAST(NULL AS CHAR(500)) cpnMFGCode,	CAST(NULL AS CHAR(100)) cpnMFGPN,  \n" +
                "		CAST(NULL AS CHAR(100)) mfgPNDescription, css.receiveMaterialType, 		css.spq,  \n" +
                "		css.pcbPerArray, 			  css.updatedAt,			css.nickName,  \n" +
                "		css.packaging,				  CAST(NULL AS CHAR(100)) packagingName,  \n" +
                "		css.refSupplierPartId, 			  CAST(NULL AS CHAR(500)) supplierMFGCode,  \n" +
                "		CAST(NULL AS CHAR(100)) supplieMFGPN,	  css.expiryDate,			css.createdAt,  \n" +
                "		css.createdBy,				  CAST(NULL AS CHAR(255)) createdByName,CAST(NULL AS CHAR(255)) allocatedToKit,   \n" +
                "		(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "		(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable  \n" +
                "	FROM component_sid_stock css                      \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;  \n" +
                "  \n" +
                "	-- Set bin name    \n" +
                "	UPDATE 	Results r, binmst b      \n" +
                "	SET 	r.location = b.Name, r.warehouseID = b.WarehouseID    \n" +
                "	WHERE 	r.binID = b.id;     \n" +
                "  \n" +
                "	-- Set warehouse name    \n" +
                "	UPDATE 	Results r, warehousemst w      \n" +
                "	SET 	r.warehouse = w.Name, r.departmentID = w.parentWHID    \n" +
                "	WHERE 	r.WarehouseID = w.id;     \n" +
                "  \n" +
                "	-- Set department name    \n" +
                "	UPDATE 	Results r, warehousemst w      \n" +
                "	SET 	r.department = w.Name    \n" +
                "	WHERE 	r.departmentID = w.id;     \n" +
                "  \n" +
                "	-- Set component detail    \n" +
                "	UPDATE 	Results r, component c      \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.PIDCode = c.PIDCode, r.packageQty = IFNULL(c.packageQty,1),    \n" +
                "		r.RoHSStatusID = c.RoHSStatusID, r.packaginggroupID = IFNULL(c.packaginggroupID, 0), r.mslLevel =  IFNULL(c.mslID,0),    \n" +
                "		r.mfgPNDescription = c.mfgPNDescription    \n" +
                "	WHERE 	r.refcompid = c.id;    \n" +
                "  \n" +
                "	-- Set UOM    \n" +
                "	UPDATE 	Results r, uoms u        \n" +
                "	SET   	r.uomName = u.abbreviation        \n" +
                "	WHERE	r.uom = u.id;       \n" +
                "  \n" +
                "	-- Set manufacturer detail    \n" +
                "	UPDATE 	Results r, mfgcodemst m     \n" +
                "	SET 	r.mfgID = m.id,	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)    \n" +
                "	WHERE 	r.mfgcodeID = m.id;    \n" +
                "  \n" +
                "	-- Set customer detail    \n" +
                "	UPDATE 	Results r, mfgcodemst m     \n" +
                "	SET 	r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)    \n" +
                "	WHERE 	r.customerID = m.id;    \n" +
                "  \n" +
                "	-- Set cost category name    \n" +
                "	UPDATE 	Results r, cost_category c      \n" +
                "	SET 	r.costCategory = c.categoryName    \n" +
                "	WHERE 	r.costCategoryID = c.id;    \n" +
                "  \n" +
                "	-- Set RoHS det    \n" +
                "	UPDATE 	Results r, rfq_rohsmst rohs      \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name    \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;    \n" +
                "  \n" +
                "	-- Update picture count    \n" +
                "	UPDATE 	Results r    \n" +
                "	SET 	r.pictureCount = (SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = r.id AND gf.isActive = 1 AND gf.deletedAt IS NULL);    \n" +
                "  \n" +
                "	 -- Set ref. CPN detail    \n" +
                "	UPDATE 	Results r, component c, mfgcodemst m      \n" +
                "	SET 	r.cpnMFGPN = c.mfgPN, r.cpnMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)    \n" +
                "	WHERE 	r.refCPNMFGPNID = c.id    \n" +
                "	AND	c.mfgcodeID = m.id;    \n" +
                "  \n" +
                "	-- Set assembly detail    \n" +
                "	UPDATE 	Results r, component c    \n" +
                "	SET 	r.assembly = c.PIDCode    \n" +
                "	WHERE 	r.assyID = c.id;    \n" +
                "  \n" +
                "	-- Set packaging detail    \n" +
                "	UPDATE 	Results r, Component_PackagingMst c    \n" +
                "	SET 	r.packagingName = c.name    \n" +
                "	WHERE 	r.packaging = c.id;    \n" +
                "  \n" +
                "	-- Set supplier part detail    \n" +
                "	UPDATE 	Results r, component c, mfgcodemst m      \n" +
                "	SET 	r.supplieMFGPN = c.mfgPN, r.supplierMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)    \n" +
                "	WHERE 	r.refSupplierPartId = c.id AND c.mfgcodeID = m.id;    \n" +
                "  \n" +
                "	-- set transferred by    \n" +
                "	UPDATE 	Results r, users u      \n" +
                "	SET 	r.createdByName = u.username      \n" +
                "	WHERE 	r.createdBy = u.id;   \n" +
                "  \n" +
                "	-- Update allocatedToKit  \n" +
                "	UPDATE 	Results r    \n" +
                "	SET 	r.allocatedToKit = (SELECT GROUP_CONCAT('(', ssr.`Po Number`, ssr.`Sales Order`, ssr.`Assy ID`, ')') FROM kit_allocation ka LEFT JOIN vu_salesorder_shipped_report ssr ON ka.refSalesOrderDetID = ssr.SalesOrderDetailID WHERE ka.refUIDId = r.id);    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                              \n" +
                "		SET pWhereClause = '1=1';    \n" +
                "	END IF;	         \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (340,'2.00','V1',' Sproc_GetReceivingMaterial - FENIL '," + userid + ");"
            );
            break;
        case 340:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(	          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),	          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	-- IN pIsMFG TINYINT(1),    \n" +
                "	IN pmfgType VARCHAR(20),    \n" +
                "	IN pisCustOrDisty TINYINT(1)         \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "	/* DECLARE SQLStatement varchar(255); */          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.createdAt,mc.updatedAt,emp.firstName, emp.lastName,(CASE WHEN (mc.isPricingApi=1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi ,        \n" +
                "		    CONCAT(emp.firstName, ' ', emp.lastName) AS fullName, wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,          \n" +
                "		(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias           \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,    \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,     \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive   ,    \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'       \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`        \n" +
                "	FROM mfgcodemst mc           \n" +
                "		JOIN users us ON mc.createdBy = us.id AND us.deletedAt IS NULL           \n" +
                "		JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL            \n" +
                "		LEFT JOIN who_bought_who wbw ON wbw.buyTo = mc.id        \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0     \n" +
                "	AND mc.deletedAt IS NULL    \n" +
                "	AND mc.mfgType = pmfgType    \n" +
                "	AND CASE WHEN pisCustOrDisty IS NULL THEN 1 = 1    \n" +
                "		WHEN  pisCustOrDisty IS NOT NULL THEN mc.isCustOrDisty = pisCustOrDisty ELSE TRUE END    \n" +
                "	;       \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode DESC\") ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );              \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (341,'2.00','V1','Alter sp Sproc_GetManufacturer-Champak'," + userid + ");"
            );
            break;
        case 341:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `isDeleted`, `isDisplay`, `displayMenuName`,`createdBy`)  \n" +
                "VALUES ('Part Attributes', '0', '0', 'setting.partmaintenance.PartAttributes', 'Part Attributes', (SELECT a.pageID FROM page_detail a WHERE a.pagename='Part' LIMIT 1), '1', '32.65', 'mdi mdi-unity', '1', '0', '0', 'Part Attributes','1');  \n" +
                "UPDATE `page_detail` b,  \n" +
                "	(SELECT pageID FROM page_detail WHERE pagename='Part Attributes' limit 1) a  \n" +
                "	SET `menuRoute` = 'setting.partmaintenance.PartAttributes.partstatus',   \n" +
                "		`parentPageID` = a.pageID  \n" +
                "  WHERE `pageName`= 'Part Status';  \n" +
                "UPDATE `page_detail` b,  \n" +
                "	(SELECT pageID FROM page_detail WHERE pagename='Part Attributes' LIMIT 1) a  \n" +
                "	SET `menuRoute` = 'setting.partmaintenance.PartAttributes.componentlogicalgroup',   \n" +
                "		`parentPageID` = a.pageID  \n" +
                "  WHERE `pageName`= 'Component Logical Group';  \n" +
                "UPDATE `page_detail` b,  \n" +
                "	(SELECT pageID FROM page_detail WHERE pagename='Part Attributes' LIMIT 1) a  \n" +
                "	SET `menuRoute` = 'setting.partmaintenance.PartAttributes.parttype',   \n" +
                "		`parentPageID` = a.pageID  \n" +
                "  WHERE `pageName`= 'RFQ Part Type';  \n" +
                "UPDATE `page_detail` b,  \n" +
                "	(SELECT pageID FROM page_detail WHERE pagename='Part Attributes' LIMIT 1) a  \n" +
                "	SET `menuRoute` = 'setting.partmaintenance.PartAttributes.mountingtype',   \n" +
                "		`parentPageID` = a.pageID  \n" +
                "  WHERE `pageName`= 'Mounting Type';  \n" +
                "UPDATE `page_detail` b,  \n" +
                "	(SELECT pageID FROM page_detail WHERE pagename='Part Attributes' LIMIT 1) a  \n" +
                "	SET `menuRoute` = 'setting.partmaintenance.PartAttributes.costcategory',   \n" +
                "		`parentPageID` = a.pageID  \n" +
                "  WHERE `pageName`= 'Cost Category';  \n" +
                "update `page_detail`  \n" +
                "  set orderBy = 32.58  \n" +
                "where `pageName`= 'Who Acquired Who';  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (342,'2.00','V1','Menu changes - Ashish'," + userid + ");"
            );
            break;
        case 342:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveVerifiedComponentFromApi` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveVerifiedComponentFromApi`(                              \n" +
                " IN tabquery LONGTEXT                              \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "   SET @sqlQ=tabquery;                              \n" +
                "   PREPARE stmt1 FROM @sqlQ;                               \n" +
                "   EXECUTE stmt1;                                \n" +
                "   DEALLOCATE PREPARE stmt1;                               \n" +
                "  \n" +
                "  SELECT '1';                              \n" +
                "  \n" +
                "    block1:BEGIN                              \n" +
                "    -- 1 this flag will be set to true when cursor reaches end of table                                \n" +
                "        DECLARE exit_loop BOOLEAN DEFAULT FALSE;                              \n" +
                "        DECLARE current_mfgpn VARCHAR (50);                                \n" +
                "	DECLARE  current_mfgcode INT ;                              \n" +
                "	DECLARE current_Ismfg TINYINT;                                \n" +
                "	DECLARE current_mfgPartNumber VARCHAR (50);                                \n" +
                "        DECLARE current_component INT ;                              \n" +
                "        DECLARE current_ComponentID INT;                              \n" +
                "	DECLARE maxvalueid INT;                              \n" +
                "        DECLARE aliasgroup INT;        \n" +
                "        DECLARE refsuppliercomponentID INT;                              \n" +
                "  \n" +
                "     -- 2 declare the cursor operation                                \n" +
                "    DECLARE component_cursor CURSOR FOR                                \n" +
                "    SELECT id FROM tempComponent ORDER BY id;                              \n" +
                "  \n" +
                "    -- 3 set exit_loop flag to true if there are no more rows                                \n" +
                "    DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                \n" +
                "     -- open the cursor                                \n" +
                "    OPEN component_cursor;                              \n" +
                "     -- start looping                                \n" +
                "     component_loop: LOOP                                  \n" +
                "     -- read the name from next row into the variables                                 \n" +
                "     FETCH component_cursor INTO current_ComponentID;                                \n" +
                "  \n" +
                "     -- check if the exit_loop flag has been set by mysql,                                 \n" +
                "     -- close the cursor and exit the loop if it has.                                \n" +
                "       IF exit_loop THEN	                               \n" +
                "				 LEAVE component_loop;                                \n" +
                "			END IF;                                \n" +
                "        SELECT '1';                              \n" +
                "  \n" +
                "	SET current_mfgpn='';                              \n" +
                "	SET current_mfgcode=1;                              \n" +
                "	SET current_mfgPartNumber='';                              \n" +
                "	SET current_Ismfg=1;                              \n" +
                "	SELECT mfgPN,mfgcodeID,isMfg,manufacturePID INTO current_mfgpn, current_mfgcode,current_Ismfg,current_mfgPartNumber FROM  tempComponent WHERE id=current_ComponentID LIMIT 1;                              \n" +
                "	IF(SELECT COUNT(1) FROM component WHERE mfgPN=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0)=0 THEN                              \n" +
                "	 -- insert new component                               \n" +
                "	INSERT INTO component (functionalCategoryText,countryOfOrigin,createdBy,dataSheetLink,eolDate,feature,heightText,                              \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                              \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                              \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,                  \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,partType,imageURL)                              \n" +
                "	SELECT functionalCategoryText,countryOfOrigin,'Auto',dataSheetLink,eolDate,feature,heightText,                              \n" +
                "	isGoodPart, isLeadFree,leadTime,ltbDate,maxOperatingTemp,mfgcodeID,mfgPN,mfgPNDescription,                              \n" +
                "	minimum,minOperatingTemp,mountingTypeID,mountingTypeText,mult,noOfPosition,packageQty,packaging,partPackage,                              \n" +
                "	partStatusText,functionalCategoryID,PIDCode,RoHSStatusID,rohsText,supplier,tolerance,uomText,weight,uom,category,partStatus,connecterTypeID,connectorTypeText,                  \n" +
                "	sizeDimension,operatingTemp,voltage,`value`,powerRating,noOfRows,pitch,pitchMating,costCategoryID,temperatureCoefficient,temperatureCoefficientValue,temperatureCoefficientUnit,color,category,imageURL                              \n" +
                "	 FROM tempComponent WHERE id=current_ComponentID LIMIT 1;                              \n" +
                "  \n" +
                "  \n" +
                "	 SELECT id INTO current_component FROM component WHERE mfgpn=current_mfgpn AND mfgcodeID=current_mfgcode AND isdeleted=0 LIMIT 1;                              \n" +
                "	 -- check component is manufacturer part or distributor part                              \n" +
                "                   IF(current_Ismfg=1) THEN                              \n" +
                "  \n" +
                "			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= 'AliasGroupID'  AND isdeleted=0 LIMIT 1;                              \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                              \n" +
                "			VALUES (maxvalueid,current_component,0,'Auto');                              \n" +
                "			UPDATE component SET aliasgroupID=maxvalueid,updatedBy='Auto' WHERE id=current_component;                              \n" +
                "			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`='AliasGroupID' AND isdeleted=0;                              \n" +
                "                    ELSE                    \n" +
                "  \n" +
                "		        SELECT aliasgroupID,id INTO aliasgroup,refsuppliercomponentID FROM `component` WHERE mfgPN= current_mfgPartNumber  AND isdeleted=0 LIMIT 1;                              \n" +
                "			IF(aliasgroup IS NOT NULL) THEN                              \n" +
                "			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)                              \n" +
                "			VALUES (aliasgroup,current_component,0,'Auto');                              \n" +
                "			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto',refSupplierMfgpnComponentID=refsuppliercomponentID WHERE id=current_component;                              \n" +
                "		        END IF;                              \n" +
                "		    END IF;                              \n" +
                "      END IF;                              \n" +
                "  \n" +
                "    END LOOP component_loop;                              \n" +
                "      CLOSE component_cursor;                              \n" +
                "    END  block1;                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (343,'2.00','V1','change in sp Sproc_saveVerifiedComponentFromApi-champak'," + userid + ");"
            );
            break;
        case 343:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "ALTER TABLE rfq_assemblies ADD COLUMN quoteSubmittedBy varchar(255) DEFAULT NULL;  \n" +
                "  \n" +
                "update page_detail set pageURL = '/quotesummanydetails/:id/:quoteSubmittedID' where pageName = 'Quote Summary Details';  \n" +
                "  \n" +
                "alter table rfq_assemblies_quotation_submitted  \n" +
                "add column `custShippingAddressID` int(11) default null;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted add constraint FK_rfq_assemblies_quotation_submitted_custShippingAddressID   \n" +
                "foreign key  (`custShippingAddressID`) References customer_addresses(`id`);  \n" +
                "  \n" +
                "alter table rfq_assemblies_quotation_submitted  \n" +
                "add column `custBillingAddressID` int(11) default null;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted add constraint FK_rfq_assemblies_quotation_submitted_custBillingAddressID   \n" +
                "foreign key  (`custBillingAddressID`) References customer_addresses(`id`);  \n" +
                "  \n" +
                "alter table rfq_assemblies_quotation_submitted  \n" +
                "add column `custTermsID` int(11) default null;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted add constraint FK_rfq_assemblies_quotation_submitted_custTermsID   \n" +
                "foreign key  (`custTermsID`) References genericcategory(`gencCategoryID`);  \n" +
                "  \n" +
                "alter table mfgcodemst  \n" +
                "add column `custTermsID` int(11) default null;  \n" +
                "  \n" +
                "ALTER TABLE mfgcodemst add constraint FK_mfgcodemst_custTermsID   \n" +
                "foreign key  (`custTermsID`) References genericcategory(`gencCategoryID`);  \n" +
                "  \n" +
                "alter table rfq_assy_quote_submitted_assydetail  \n" +
                "add column `nreCost` decimal(16,6) default null;  \n" +
                "  \n" +
                "alter table rfq_assy_quote_submitted_assydetail  \n" +
                "add column `nreDays` decimal(16,6) default null;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies  \n" +
                "modify column quoteFinalStatus int(11) default null;  \n" +
                "  \n" +
                "ALTER TABLE rfq_consolidated_mfgpn_lineitem   \n" +
                "ADD COLUMN consolidatedpartlineID longtext default null;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (344,'2.00','V1','Quote Summary detail changes  - shirish'," + userid + ");"
            );
            break;
        case 344:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                    \n" +
                "	IN prfqAssyID INT(1),    \n" +
                "    IN ppartID INT(1),    \n" +
                "	IN puserID INT(1)                    \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "  BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                    \n" +
                "  \n" +
                "    START TRANSACTION;            \n" +
                "  \n" +
                "    #consoliadte select             \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS             \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;              \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                    \n" +
                "		drop temporary table if exists leveldata;    \n" +
                "		create temporary table if not exists leveldata as    \n" +
                "			WITH RECURSIVE cte AS        \n" +
                "			(     \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,0 as level, com.category,    \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa as qpa1,                    \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                     \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                    \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID as rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode      \n" +
                "				from rfq_lineitems_alternatepart rla    \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0    \n" +
                "				join component com on com.id = rla.mfgPNID    \n" +
                "                left join component comp on comp.id = rl.partID    \n" +
                "				where rl.partId = ppartID and rla.isDeleted = 0    \n" +
                "				)    \n" +
                "			  UNION ALL        \n" +
                "  \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,cte.level+1 as level, com.category,    \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, ceiling((cte.qpa1 * rl.qpa)) as qpa1,                    \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                     \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                    \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode      \n" +
                "				from rfq_lineitems_alternatepart rla    \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0    \n" +
                "				join component com on com.id = rla.mfgPNID #and com.category != 3    \n" +
                "                left join component comp on comp.id = rl.partID    \n" +
                "				join cte cte on cte.category = 3 and rl.partID = cte.mfgPNID    \n" +
                "				where rla.isDeleted =0    \n" +
                "			   )    \n" +
                "			)    \n" +
                "			SELECT cte.* FROM cte     \n" +
                "			where cte.category !=3    \n" +
                "			order by lineItemID,partcode;    \n" +
                "  \n" +
                "		drop temporary table if exists Results;    \n" +
                "		create temporary table if not exists Results as    \n" +
                "		select  group_concat(partlineID) as consolidatedpartlineID,count(b.rfqLineItemsID) as multiple,group_concat(b.refDesig) as consolidatedrefDesig, group_concat(b.rfqLineItemsID) as consolidatedLineItemIDs,sum(qpa1)qpa, b.* from (    \n" +
                "		select concat('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',a.lineID,'}') as partlineID, GROUP_CONCAT(part) as part1,GROUP_CONCAT(partcode) as partcode1,    \n" +
                "		a.* from leveldata a    \n" +
                "		group by rfqLineItemsID,level    \n" +
                "		)b    \n" +
                "		group by  numOfPosition,isPurchase,partcode1;    \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                    \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                    \n" +
                "			SET                     \n" +
                "			cl.isDeleted = TRUE,                    \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                    \n" +
                "			cl.deletedBy = puserID                    \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                    \n" +
                "            SELECT * FROM(                         \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                     \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                    \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                    \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                     \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                    \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                    \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                    \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`)                    \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                    \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                    \n" +
                "		puserID `createdBy`, R.`numOfPosition`,                    \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`                     \n" +
                "        FROM Results R                    \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                    \n" +
                "		 WHERE cl.id IS NULL;                    \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                    \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                    \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                    \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                    \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                    \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                     \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                    \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                    \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                     \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                     \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                     \n" +
                "		SET                     \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                    \n" +
                "        rq.updatedBy = puserID,                    \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                    \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                    \n" +
                "# Update Consilidated LineItems                    \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                     \n" +
                "		SET                     \n" +
                "		cl.isInstall = R.isInstall ,                    \n" +
                "		cl.isPurchase = R.isPurchase,                    \n" +
                "		cl.numOfPosition = R.numOfPosition,                    \n" +
                "		cl.attritionRate = R.attritionRate,                    \n" +
                "		cl.leadQty = R.leadQty,                    \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                    \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                    \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                    \n" +
                "        cl.qpa = R.qpa,                    \n" +
                "        cl.uomID = R.uomID,          \n" +
                "        cl.refDesig = R.consolidatedrefDesig,          \n" +
                "        cl.lineID = R.lineID,                    \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,  \n" +
                "        cl.updatedBy = puserID                    \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                    \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                    \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                    \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                    \n" +
                "		SET                     \n" +
                "        cap.isDeleted = TRUE,                    \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                    \n" +
                "		cap.deletedBy = puserID                    \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                      \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                         \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                    \n" +
                "  ############################    \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                     \n" +
                "		SET                     \n" +
                "        isDeleted = TRUE,                    \n" +
                "        deletedAt = UTC_TIMESTAMP(),                    \n" +
                "		deletedBy = puserID                    \n" +
                "        WHERE id IN(                     \n" +
                "        SELECT capID FROM (                    \n" +
                "		SELECT DISTINCT(cap.id)AS capID                    \n" +
                "		FROM rfq_lineitems_alternatepart ap                     \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))    \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                    \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                     \n" +
                "		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                    \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))    \n" +
                "        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                    \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                     \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                  \n" +
                "		SET                     \n" +
                "        cq.isDeleted = TRUE,                    \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                    \n" +
                "		cq.deletedBy = puserID                    \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                      \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                         \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove       \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                  \n" +
                "		SET                     \n" +
                "        cq.isDeleted = TRUE,                    \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                    \n" +
                "		cq.deletedBy = puserID                    \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                      \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                      \n" +
                "# delete Consolidate lineItems                     \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                    \n" +
                "		SET                     \n" +
                "        cl.isDeleted = TRUE,                    \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                    \n" +
                "		cl.deletedBy = puserID                    \n" +
                "		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                    \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                            \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                     \n" +
                "  #################################    \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                    \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                    \n" +
                "		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                    \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                    \n" +
                "		FROM rfq_lineitems_alternatepart ap                     \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))    \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                    \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))    \n" +
                "        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                  \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed       \n" +
                "#################################             \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl                \n" +
                "		SET                     \n" +
                "        cap.isDeleted = TRUE,                    \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                    \n" +
                "		cap.deletedBy = puserID                \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (                 \n" +
                "        SELECT  DISTINCT(cap.id)                    \n" +
                "		FROM rfq_lineitems_alternatepart ap                     \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))    \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))    \n" +
                "        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);                \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove       \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,                 \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,                \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                      \n" +
                "		SET                     \n" +
                "        cq.finalPrice = NULL,                \n" +
                "        cq.selectedPIDCode = NULL,                \n" +
                "        cq.selectedMpn = NULL,                \n" +
                "        cq.selectionMode = NULL,                \n" +
                "        cq.supplier = NULL,                \n" +
                "        cq.supplierStock = NULL,                \n" +
                "        cq.currentStock = NULL,                \n" +
                "        cq.grossStock = NULL,                \n" +
                "        cq.leadTime = NULL,                \n" +
                "        cq.min = NULL,                \n" +
                "        cq.mult = NULL,                \n" +
                "        cq.unitPrice = NULL,                \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                    \n" +
                "		cq.updatedBy = puserID                    \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                      \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                   \n" +
                "  \n" +
                "  # update rfq assembly pricing status        \n" +
                "    update rfq_assemblies set isReadyForPricing = true, updatedAt = UTC_TIMESTAMP(), updatedBy = puserID where isDeleted = 0 and id = prfqAssyID;       \n" +
                "  \n" +
                "    COMMIT;                \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)              \n" +
                "    UNION            \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id             \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);            \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;             \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfDaysByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfDaysByCostingType`(          \n" +
                "	prfqAssyQuoteID int(11),          \n" +
                "    pRFQAssyID int(11),    \n" +
                "    pcostingType varchar(20)    \n" +
                ") RETURNS decimal(18,6)  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN          \n" +
                "			return (select ifnull(days,0)+ ifnull(leadtime,0) from  \n" +
                "            ( select  \n" +
                "            (case when pcostingType = 'labor' then 0     \n" +
                "            when pcostingType = 'material' then qo.days     \n" +
                "            when pcostingType = 'ad-hoc' then 0     \n" +
                "            end) days,  \n" +
                "            sum(qac.days) leadtime from rfq_assy_quotations_additionalcost qac    \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null    \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID    \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)    \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType)a);    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSumOfAmountByCostingType`;  \n" +
                "CREATE FUNCTION `fun_getSumOfAmountByCostingType`(          \n" +
                "	prfqAssyQuoteID int(11),          \n" +
                "    pRFQAssyID int(11),    \n" +
                "    pcostingType varchar(20)    \n" +
                ") RETURNS decimal(18,6)  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN          \n" +
                "			return (select ifnull(cost,0)+ifnull(amount,0) from   \n" +
                "            (select   \n" +
                "            (case when pcostingType = 'labor' then 0     \n" +
                "            when pcostingType = 'material' then qo.unitPrice     \n" +
                "            when pcostingType = 'ad-hoc' then 0     \n" +
                "            end) cost,     \n" +
                "			sum(amount) amount from rfq_assy_quotations_additionalcost qac    \n" +
                "			join quotecharges_dynamic_fields_mst qdf on qdf.id = qac.quoteChargeDynamicFieldID and qdf.deletedAt is null    \n" +
                "			join rfq_assy_quotations qo on qo.id = qac.rfqAssyQuoteID    \n" +
                "			where qo.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = pRFQAssyID order by id desc limit 1)    \n" +
                "			and rfqAssyQuoteID = prfqAssyQuoteID and costingType = pcostingType) as a);    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),	                                      \n" +
                "    IN pWhereClause VARCHAR(16383)                                          \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                      \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,    \n" +
                "		(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS revisedQuoteCount,          \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,           \n" +
                "        CONCAT('Internal-',part.liveInternalVersion) AS liveInternalVersion,          \n" +
                "		(CASE WHEN ra.status = 1 THEN 'InProgress'     \n" +
                "			  WHEN ra.status = 2 THEN 'FollowUp'   \n" +
                "			  WHEN ra.status = 3 THEN 'Win'    \n" +
                "			  WHEN ra.status = 4 THEN 'Lost' END) `status` ,  \n" +
                "		#(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending' WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote' WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,        \n" +
                "		ro.name AS `rohsComplientConvertedValue`,            \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'            \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,            \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'            \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'            \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,            \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer,    \n" +
                "		concat(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,     \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "        ra.isBOMVerified            \n" +
                "		FROM rfqforms rf            \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0            \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0            \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0           \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0            \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0        \n" +
                "        LEFT JOIN users em ON em.id = ra.quoteSubmittedBy    \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0            \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                                   \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "	EXECUTE query1;                                      \n" +
                "	DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "	EXECUTE query2;                                      \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                      \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "	EXECUTE query3;                                      \n" +
                "	DEALLOCATE PREPARE query3;                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                    \n" +
                "	IN prfqAssyID INT(11),  \n" +
                "    IN pAssyQuoteSubmittedID INT(11)  \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "		# select list for quote summary details of last submitted quote      \n" +
                "			select unitPrice, qty, turnTime,  \n" +
                "            (case when qo.turnType = 'B' then (turnTime+(2*(turnTime/5)))  \n" +
                "            when qo.turnType = 'D' then turntime  \n" +
                "            when qo.turnType = 'W' then (turntime*7) end) turntimedays,  \n" +
                "  \n" +
                "            (case when qo.turnType = 'B' then 'Business Days'  \n" +
                "            when qo.turnType = 'D' then 'Week Days'  \n" +
                "            when qo.turnType = 'W' then 'Week' end) turnType  \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,      \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime      \n" +
                "			from rfq_assy_quote_submitted_assydetail qo      \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID      \n" +
                "			where refSubmittedQuoteID = pAssyQuoteSubmittedID;      \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy       \n" +
                "			select ra.id rfqAssyID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.mfgName,cu.mfgCode,      \n" +
                "            rf.customerid,rqs.custBillingAddressID, ifnull(rqs.custTermsID, cu.custTermsID) as custTermsID, rqs.custShippingAddressID, rqs.BOMIssues, rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID,      \n" +
                "            ra.assyNote,rf.quoteNote, rt.name RFQType, jt.name JobType, rqs.OtherNotes,ra.isSummaryComplete      \n" +
                "            from rfq_assemblies ra     \n" +
                "            join rfq_assemblies_quotation_submitted rqs on rqs.rfqAssyID = ra.id  \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "            join rfqtype rt on rt.id = ra.rfqTypeID and rt.isDeleted = 0  \n" +
                "            join jobtype jt on jt.id = ra.jobTypeID and jt.isDeleted = 0  \n" +
                "			join mfgcodemst cu on cu.id = rf.customerid and cu.isDeleted = 0  \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0  \n" +
                "			where ra.id= prfqAssyID and rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary      \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and id = pAssyQuoteSubmittedID ;      \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote      \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd      \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0      \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0      \n" +
                "			where csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;      \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary      \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0      \n" +
                "            and RefSubmittedQuoteID = pAssyQuoteSubmittedID;      \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQassyRequoteHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQassyRequoteHistory`(	                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),	                                \n" +
                "    IN pWhereClause VARCHAR(16383),    \n" +
                "    IN prfqAssyID INT(11)    \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "	DECLARE pOffset INT(11);                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "  \n" +
                "		select rqs.id, rqs.rfqAssyID, rqs.quoteNumber,rqs.quoteSubmitDate, rqs.BOMIssues,rqs.OtherNotes,rqs.quoteInDate,rqs.quoteDueDate,  \n" +
                "        concat('Internal-',rqs.bomInternalVersion) as internalversion, com.custAssyPN,com.PIDCode,com.mfgPN,com.rev,  \n" +
                "        com.nickName,com.mfgPNDescription,com.assyCode,com.RoHSStatusID, ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,   \n" +
                "        CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer  \n" +
                "        from rfq_assemblies_quotation_submitted rqs  \n" +
                "        join rfq_assemblies ra on ra.id = rqs.rfqAssyID and ra.isDeleted = 0  \n" +
                "        join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0  \n" +
                "        join component com on com.id = ra.partID and com.isDeleted = 0  \n" +
                "        left join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0    \n" +
                "        where rqs.rfqAssyID = prfqAssyID;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                     \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                \n" +
                "	EXECUTE query3;                                \n" +
                "	DEALLOCATE PREPARE query3;                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateQuoteSubmittedSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateQuoteSubmittedSummaryDetails`(	                                  \n" +
                "	IN prfqAssyID INT(11),    \n" +
                "    IN pUserID INT(11)    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	# insert quote summary details     \n" +
                "		INSERT INTO `rfq_assy_quote_submitted_assydetail`    \n" +
                "		(`refSubmittedQuoteID`, `rfqAssyID`, `qty`, `turnTime`, `turnType`, `materialCost`, `materialLeadTime`, `laborCost`, `laborLeadTime`,    \n" +
                "		`additionalCost`, `customItemLeadTime`, `unitPrice`, `totalLeadTime`, `extendedCost`, `excessMaterialCost`, `additionalCostDetail`, `nreDays`, `nreCost`,   \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`)    \n" +
                "		select sb.id `refSubmittedQuoteID`, prfqAssyID `rfqAssyID`, requestedQty `qty`, turntime `turnTime`, timeType `turnType`,     \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material') materialCost,fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Material') materialLeadTime,    \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor') laborCost, fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor') laborLeadTime,    \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc') additionalCost, fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc') `customItemLeadTime`,    \n" +
                "		(fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc')) `unitPrice`,    \n" +
                "		(fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Material')+  \n" +
                "        (case when (fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor')>fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc'))   \n" +
                "        then fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor')  \n" +
                "        else fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc') end  \n" +
                "        )) `totalLeadTime`,    \n" +
                "		(qo.requestedQty *(fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc'))) extendedCost,    \n" +
                "		qo.excessQtyTotalPrice `excessMaterialCost`, null, qo.nreDays, qo.nreCost ,pUserID `createdBy`, current_timestamp(),pUserID `updatedBy`,current_timestamp()    \n" +
                "		from rfq_assy_quotations qo    \n" +
                "		join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID    \n" +
                "		where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "  \n" +
                "	# insert standards details from component standard details to rfq assy standard detail    \n" +
                "        INSERT INTO `rfq_assy_standard_class_detail`    \n" +
                "		(`refSubmittedQuoteID`, `standardID`, `standardClassIDs`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`)    \n" +
                "		select (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) refSubmittedQuoteID, certificateStandardID `standardID`,ClassID `standardClassIDs`,     \n" +
                "		pUserID `createdBy`, current_timestamp() `createdAt`, pUserID `updatedBy`, current_timestamp() `updatedAt`    \n" +
                "		from component_standard_details csd     \n" +
                "		where deletedAt is null and componentID = (select partID from rfq_assemblies where id = prfqAssyID);    \n" +
                "  \n" +
                "	# select Last inserted data    \n" +
                "		select * from rfq_assy_standard_class_detail where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "		select * from rfq_assy_quote_submitted_assydetail where rfqAssyID = prfqAssyID and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyQuoteSummary`(                \n" +
                "	IN prfqAssyID INT(1),              \n" +
                "    IN UserID INT(1)      \n" +
                ")  \n" +
                "BEGIN                \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                \n" +
                "BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                \n" +
                "  BEGIN                \n" +
                "	ROLLBACK;                \n" +
                "	RESIGNAL;                \n" +
                "END;                \n" +
                "    START TRANSACTION;     \n" +
                "# copy  rfq_assy_quotations Detail with null ref submitted id  \n" +
                "		INSERT INTO `rfq_assy_quotations`      \n" +
                "		(`rfqAssyID`, `rfqAssyQtyID`, `rfqAssyQtyTurnTimeID`, `requestedQty`, `turnTime`, `timeType`, `unitPrice`, `materialCost`, `total`,       \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `excessQtyTotalPrice`, `days`,`nreCost`,`nreDays`)      \n" +
                "		select rfqAssyID, rfqAssyQtyID, rfqAssyQtyTurnTimeID, requestedQty, turnTime, timeType, unitPrice, materialCost, total,       \n" +
                "		UserID `createdBy`, current_timestamp() `createdAt`, UserID `updatedBy`, current_timestamp() `updatedAt`, excessQtyTotalPrice, days, aq.nreCost,aq.nreDays  \n" +
                "        from rfq_assy_quotations aq      \n" +
                "		where aq.rfqAssyID = prfqAssyID and aq.isDeleted = 0       \n" +
                "        and aq.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);      \n" +
                "# Copy rfq_assy_quotations_additionalcost details for new generated quotaion records   \n" +
                "        INSERT INTO `rfq_assy_quotations_additionalcost`      \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,       \n" +
                "        `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`)      \n" +
                "		select raqn.`id` `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,       \n" +
                "        UserID `createdBy`, current_timestamp() `createdAt`, UserID `updatedBy`, current_timestamp() `updatedAt`, raqa.`days` from rfq_assy_quotations_additionalcost raqa      \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0       \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1)      \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL;       \n" +
                "  \n" +
                "# update rfq_assembly details         \n" +
                "       update rfq_assemblies ra,      \n" +
                "			(select DATE_ADD(current_timestamp(), INTERVAL TIMESTAMPDIFF(day,quoteInDate,quoteDueDate) DAY) as duedate      \n" +
                "			from rfq_assemblies where id=prfqAssyID) ran      \n" +
                "		set ra.isSummaryComplete = FALSE, ra.quoteSubmittedBy = null, ra.status = 1,ra.quoteFinalStatus = 2, ra.quoteNumber = NULL, ra.quoteSubmitDate = NULL, ra.updatedAt = current_timestamp(),      \n" +
                "		ra.quoteInDate = current_timestamp(), ra.quoteDueDate = ran.duedate,updatedBy = UserID      \n" +
                "		where ra.id = prfqAssyID;     \n" +
                "  \n" +
                "  select * from rfq_assy_quotations where rfqAssyID = prfqAssyID ;    \n" +
                " COMMIT;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (345,'2.00','V1','Quote Summary detail changes  - shirish'," + userid + ");"
            );
            break;
        case 345:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfqforms` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfqforms`(                                                            \n" +
                "	IN tableName VARCHAR(255),                                                            \n" +
                "	IN IDs LONGTEXT,                                                            \n" +
                "	IN deletedBy INT,                                                            \n" +
                "	IN entityID VARCHAR(255),                                                            \n" +
                "	IN refrenceIDs LONGTEXT                                                            \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                 \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                                                            \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                            \n" +
                "			FROM                                                             \n" +
                "				(SELECT  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                                                             \n" +
                "					from rfq_lineitems rl where deletedAt IS NULL and rl.rfqAssyID in (',IDs,')) q');                                                            \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                            \n" +
                "		EXECUTE stmt;                                                            \n" +
                "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                                                            \n" +
                "			START TRANSACTION;    \n" +
                "  \n" +
                "			-- SET @SQl1 = 	CONCAT('UPDATE rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\" where rb.id in               \n" +
                "			-- 				   (SELECT rab.id from	(select b.id from rfq_assy_bom b where b.reqAssyID in (',IDs,') and b.deletedAt IS NULL)as rab)');              \n" +
                "  \n" +
                "			-- SET @SQl2 = 	CONCAT('UPDATE rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                                                             \n" +
                "			-- 				   (SELECT rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as rar)');              \n" +
                "  \n" +
                "			SET @SQl3 = 	CONCAT('UPDATE rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in              \n" +
                "								(SELECT rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as rat)');              \n" +
                "  \n" +
                "			SET @SQl4 = 	CONCAT('UPDATE rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in              \n" +
                "								(SELECT raq.id from (SELECT * from rfq_assy_quantity b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as raq)');              \n" +
                "  \n" +
                "			SET @SQl5 = 	CONCAT('UPDATE rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\"               \n" +
                "								WHERE ra.id in (',IDs,') and ra.deletedAt IS NULL');              \n" +
                "  \n" +
                "			-- SET @SQl6 = 	CONCAT('UPDATE rfq_assy_standard_class_detail rs set rs.deletedBy = ',deletedBy,', rs.isDeleted=',1,',rs.deletedAt= \"',NOW(),'\"  where rs.id in              \n" +
                "			-- 					(SELECT ras.id from (select b.id from rfq_assy_standard_class_detail b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as ras)');              \n" +
                "  \n" +
                "			SET @SQl7 = 	CONCAT('UPDATE rfq_assemblies_quotation_status rqs set rqs.deletedBy = ',deletedBy,', rqs.isDeleted=',1,',rqs.deletedAt= \"',NOW(),'\" where rqs.id in              \n" +
                "								(SELECT raq.id from (select b.id from rfq_assemblies_quotation_status b where b.rfqAssyID in (',IDs,') and b.deletedAt IS NULL)as raq)');                          \n" +
                "  \n" +
                "			SET @SQl8 = 	CONCAT('UPDATE rfqforms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN               \n" +
                "								(SELECT id from (select rf.id, count(ra.id) from rfqforms rf left outer join rfq_assemblies ra on ra.rfqrefID = rf.id and ra.isDeleted=0 where rf.isDeleted = 0 group by rf.id having count(ra.id)=0)as rfq) and deletedAt IS NULL');	              \n" +
                "  \n" +
                "					-- PREPARE stmt1 FROM @SQL1;                                                            \n" +
                "					-- PREPARE stmt2 FROM @SQL2;                                       \n" +
                "					-- PREPARE stmt6 FROM @SQL6;                     \n" +
                "					PREPARE stmt7 FROM @SQL7;                 \n" +
                "					PREPARE stmt3 FROM @SQL3;                                                            \n" +
                "					PREPARE stmt4 FROM @SQL4;                                                            \n" +
                "					PREPARE stmt5 FROM @SQL5;                                                            \n" +
                "					PREPARE stmt8 FROM @SQL8;                                                            \n" +
                "  \n" +
                "					-- EXECUTE stmt1;                                                            \n" +
                "					-- EXECUTE stmt2;                           \n" +
                "					-- EXECUTE stmt6;            	    \n" +
                "					EXECUTE stmt7;                \n" +
                "					EXECUTE stmt3;                                                            \n" +
                "					EXECUTE stmt4;                                                            \n" +
                "					EXECUTE stmt5;                                                            \n" +
                "					EXECUTE stmt8;                                                            \n" +
                "  \n" +
                "			SELECT * FROM temprfqformss;      \n" +
                "  \n" +
                "			COMMIT;                                                          \n" +
                "		ELSE                                                            \n" +
                "			SELECT * FROM temprfqformss;                                                            \n" +
                "  \n" +
                "		END IF;                                                            \n" +
                "		DROP TABLE temprfqformss;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (346,'2.00','V1','RFQ delete SP changes  - shirish'," + userid + ");"
            );
            break;
        case 346:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2019  *********************************** */
                "INSERT INTO component_packagingmst(`name`,isActive,isDeleted,createdBy)VALUES  \n" +
                "('Tape & Box',1,0,'1');  \n" +
                "INSERT INTO component_fields_genericalias_mst(refTableName,refId,alias,isDeleted,createdBy)  \n" +
                "SELECT 'component_packagingmst',id,'Tape & Box (TB)',0,'1' FROM component_packagingmst WHERE `name`='Tape & Box';  \n" +
                /* **************************** Add Script Version -> 07-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (347,'2.00','V1','Insert packaging -Champak'," + userid + ");"
            );
            break;
        case 347:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2019  *********************************** */
                "ALTER TABLE `component` DROP FOREIGN KEY `FK_component_customerID`;  \n" +
                "ALTER TABLE `component` DROP INDEX `FK_component_customerID` ;  \n" +
                "update component a set a.customerID = (select b.id from mfgcodemst b where b.customerID = a.customerID) where a.customerID is not null;  \n" +
                "ALTER TABLE component ADD CONSTRAINT `FK_component_customerID` FOREIGN KEY (customerID) REFERENCES mfgcodemst (id) ON DELETE NO ACTION ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (348,'2.00','V1','Change compoennt table relation with customer table- Ashish'," + userid + ");"
            );
            break;
        case 348:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2019  *********************************** */
                "drop procedure if exists `Sproc_GetAcquisitionDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAcquisitionDetails`(  \n" +
                "	IN buyToID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "WITH RECURSIVE cte AS  \n" +
                "	(select bt.mfgName buyToName, bb.mfgName buyByName, w.buyDate, w.buyBy, w.buyTo  \n" +
                "	   from who_bought_who w  \n" +
                "	   join mfgcodemst bb ON bb.id = w.buyby  \n" +
                "	   join mfgcodemst bt ON bt.id = w.buyto  \n" +
                "	  where w.buyto = buyToID  \n" +
                "	  union all  \n" +
                "	select bt.mfgName buyToName, bb.mfgName buyByName, w.buyDate, w.buyBy, w.buyTo  \n" +
                "	  from who_bought_who w  \n" +
                "	  join mfgcodemst bb ON bb.id = w.buyby  \n" +
                "	  join mfgcodemst bt ON bt.id = w.buyto  \n" +
                "	  join cte parent ON parent.buyBy = w.buyTo  \n" +
                ")  \n" +
                "select * from cte  \n" +
                "order by buyDate;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (349,'2.00','V1','Created Sproc_GetAcquisitionDetails - Ashish'," + userid + ");"
            );
            break;
        case 349:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2019  *********************************** */
                "UPDATE component_sid_stock SET expiryDate = NULL WHERE expiryDate = '1970-01-01 00:00:00';  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (350,'2.00','V1',' Change db entry of UID Management List - FENIL '," + userid + ");"
            );
            break;
        case 350:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveAssyTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveAssyTypeList`(        \n" +
                "    IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "			SELECT * ,        \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'         \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,    \n" +
                "					(CASE WHEN (`isPCBRequire` = 0) THEN 'No'         \n" +
                "					WHEN (`isPCBRequire` = 1) THEN 'Yes' ELSE '' END) AS `pcbValue`           \n" +
                "			FROM `rfq_assy_typemst`        \n" +
                "			WHERE `deletedAt` IS NULL ;         \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;        \n" +
                "		ELSE        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "			SET pWhereClause = '1=1' ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "		ELSE	        \n" +
                "			SET rowNumWhere = '';        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* to get total count of rows */        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveConnecterTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveConnecterTypeList`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383)          \n" +
                "	)  \n" +
                "BEGIN          \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);          \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "			SELECT * ,       \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'           \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,      \n" +
                "		  (SELECT GROUP_CONCAT(alias) AS aliaslist FROM component_fields_genericalias_mst WHERE IFNULL(isdeleted,0) = 0 AND  refTableName ='rfq_connectertypemst' AND refId=`rfq_connectertypemst`.`id` GROUP BY refId ) AS aliaslist      \n" +
                "			FROM `rfq_connectertypemst`          \n" +
                "			WHERE `deletedAt` IS NULL          \n" +
                "		;          \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;          \n" +
                "		ELSE          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "			SET pWhereClause = '1=1' ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "		ELSE	          \n" +
                "			SET rowNumWhere = '';          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		/* to get total count of rows */          \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "		PREPARE query1 FROM @SQLStatement1;          \n" +
                "		EXECUTE query1;          \n" +
                "		DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "		PREPARE query2 FROM @SQLStatement2;          \n" +
                "		EXECUTE query2;          \n" +
                "		DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveJobTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveJobTypeList`(    \n" +
                "    IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT * ,    \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'     \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`    \n" +
                "			FROM `jobtype`    \n" +
                "			WHERE `deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveMountingTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMountingTypeList`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "			SELECT * ,     \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'         \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,    \n" +
                "		  (select group_concat(alias) as aliaslist from component_fields_genericalias_mst where IFNULL(isdeleted,0) = 0 and  refTableName ='rfq_mountingtypemst' and refId=`rfq_mountingtypemst`.`id` group by refId ) as aliaslist    \n" +
                "			FROM `rfq_mountingtypemst`        \n" +
                "			WHERE `deletedAt` IS NULL        \n" +
                "		;        \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;        \n" +
                "		ELSE        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "			SET pWhereClause = '1=1' ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "		ELSE	        \n" +
                "			SET rowNumWhere = '';        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* to get total count of rows */        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "		PREPARE query1 FROM @SQLStatement1;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePartTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePartTypeList`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383)          \n" +
                "	)  \n" +
                "BEGIN          \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);          \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "			SELECT pt.*,          \n" +
                "			(CASE WHEN (pt.isActive = 0) THEN 'Disable'           \n" +
                "					WHEN (pt.isActive = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,     \n" +
                "                    (SELECT  GROUP_CONCAT(alias) AS aliaslist FROM component_fields_genericalias_mst WHERE IFNULL(isdeleted,0) = 0 AND  refTableName ='rfq_parttypemst' AND refId = pt.id GROUP BY refId ) AS aliaslist      \n" +
                "			FROM rfq_parttypemst pt     \n" +
                "			WHERE pt.deletedAt IS NULL  ;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"partTypeName ASC\") ;          \n" +
                "		ELSE          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "			SET pWhereClause = '1=1' ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "		ELSE	          \n" +
                "			SET rowNumWhere = '';          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		/* to get total count of rows */          \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "		PREPARE query1 FROM @SQLStatement1;          \n" +
                "		EXECUTE query1;          \n" +
                "		DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "		PREPARE query2 FROM @SQLStatement2;          \n" +
                "		EXECUTE query2;          \n" +
                "		DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),	                                      \n" +
                "    IN pWhereClause VARCHAR(16383)                                          \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                      \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,    \n" +
                "		(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS revisedQuoteCount,          \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,           \n" +
                "        CONCAT('Internal-',part.liveInternalVersion) AS liveInternalVersion,          \n" +
                "		(CASE WHEN ra.status = 1 THEN 'InProgress'     \n" +
                "			  WHEN ra.status = 2 THEN 'FollowUp'   \n" +
                "			  WHEN ra.status = 3 THEN 'Win'    \n" +
                "			  WHEN ra.status = 4 THEN 'Lost' END) `status` ,  \n" +
                "		#(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending' WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote' WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,        \n" +
                "		ro.name AS `rohsComplientConvertedValue`,            \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'            \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,            \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'            \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'            \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,            \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer,    \n" +
                "		concat(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy,     \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "        ra.isBOMVerified,ra.updatedAt            \n" +
                "		FROM rfqforms rf            \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0            \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0            \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0           \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0            \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0        \n" +
                "        LEFT JOIN users em ON em.id = ra.quoteSubmittedBy    \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0            \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                                   \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "	EXECUTE query1;                                      \n" +
                "	DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "	EXECUTE query2;                                      \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                      \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "	EXECUTE query3;                                      \n" +
                "	DEALLOCATE PREPARE query3;                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRequirement`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRequirement`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383)      \n" +
                "	)  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);      \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "			SELECT *,      \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable' WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,    \n" +
                "            (CASE WHEN (`category` = 1) THEN 'Customer Quote Requirement' WHEN (`category` = 2) THEN 'Assembly Requirement' ELSE '' END) AS `reqCategory`    \n" +
                "			FROM requirement      \n" +
                "			WHERE deletedAt IS NULL       \n" +
                "		;      \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;      \n" +
                "		ELSE      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "			SET pWhereClause = '1=1' ;      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "		ELSE	      \n" +
                "			SET rowNumWhere = '';      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "		/* to get total count of rows */      \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
                "		PREPARE query1 FROM @SQLStatement1;      \n" +
                "		EXECUTE query1;      \n" +
                "		DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "		PREPARE query2 FROM @SQLStatement2;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRfqTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRfqTypeList`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT * ,    \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'     \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`    \n" +
                "			FROM `rfqtype`    \n" +
                "			WHERE `deletedAt` IS NULL    \n" +
                "		;    \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		/* to get total count of rows */    \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;    \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRohsList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRohsList`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383)          \n" +
                "	)  \n" +
                "BEGIN          \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);          \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "			SELECT * ,       \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Disable'           \n" +
                "					WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,      \n" +
                "		  (SELECT GROUP_CONCAT(alias) AS aliaslist FROM component_fields_genericalias_mst WHERE IFNULL(isdeleted,0) = 0 AND  refTableName ='rfq_rohsmst' AND refId=`rfq_rohsmst`.`id` GROUP BY refId ) AS aliaslist      \n" +
                "			FROM `rfq_rohsmst`          \n" +
                "			WHERE `deletedAt` IS NULL          \n" +
                "		;          \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;          \n" +
                "		ELSE          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "			SET pWhereClause = '1=1' ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "		ELSE	          \n" +
                "			SET rowNumWhere = '';          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		/* to get total count of rows */          \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "		PREPARE query1 FROM @SQLStatement1;          \n" +
                "		EXECUTE query1;          \n" +
                "		DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "		PREPARE query2 FROM @SQLStatement2;          \n" +
                "		EXECUTE query2;          \n" +
                "		DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (351,'2.00','V1','RFQ setting masters related SP changes  - shirish'," + userid + ");"
            );
            break;
        case 351:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2019  *********************************** */
                "UPDATE page_detail SET pageRoute=\"app.workorder.attributes\" WHERE  pageName=\"ECO Category Values\";  \n" +
                "UPDATE page_detail SET pageRoute=\"app.workorder.categorys\" WHERE  pageName=\"ECO Category\";  \n" +
                /* **************************** Add Script Version -> 09-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (352,'2.00','V1','update menu pageRoute filed - DEEPSHIKHA '," + userid + ");"
            );
            break;
        case 352:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/09/2019   *********************************** */
                "CREATE TABLE `binmst_history` (  \n" +
                "	`id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "	`Name` varchar(50) DEFAULT NULL,  \n" +
                "	`Description` varchar(255) DEFAULT NULL,  \n" +
                "	`WarehouseID` int(11) DEFAULT NULL,  \n" +
                "	`nickname` varchar(50) DEFAULT NULL,  \n" +
                "	`isActive` tinyint(1) NOT NULL,  \n" +
                "	`isPermanentBin` tinyint(1) DEFAULT '0',  \n" +
                "	`refBinID` int(11) DEFAULT NULL,  \n" +
                "	`createdBy` varchar(255) NOT NULL,  \n" +
                "	`createdAt` datetime NOT NULL,  \n" +
                "	PRIMARY KEY (`id`),  \n" +
                "	KEY `FK_binmst_refBinID` (`refBinID`),  \n" +
                "	CONSTRAINT `FK_binmst_refBinID` FOREIGN KEY (`refBinID`) REFERENCES `binmst` (`id`),  \n" +
                "	KEY `FK_binmst_WarehouseID` (`WarehouseID`),  \n" +
                "	CONSTRAINT `FK_binmst_WarehouseID` FOREIGN KEY (`WarehouseID`) REFERENCES `warehousemst` (`ID`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** New Script -> 03/09/2019   *********************************** */
                "DROP TRIGGER IF EXISTS Trg_Manage_Bin_History;  \n" +
                "CREATE TRIGGER Trg_Manage_Bin_History  \n" +
                "BEFORE UPDATE ON binmst  \n" +
                "FOR EACH ROW   \n" +
                "BEGIN  \n" +
                "    INSERT INTO binmst_history(  \n" +
                "		Name, 			Description, 		WarehouseID, 		nickname,   \n" +
                "        isActive, 		isPermanentBin, 	refBinID, 			createdBy,   \n" +
                "        createdAt)  \n" +
                "	VALUES(  \n" +
                "		OLD.Name,		OLD.Description,	OLD.WarehouseID,	OLD.nickname,  \n" +
                "		OLD.isActive,	OLD.isPermanentBin,	OLD.id,				OLD.createdBy,  \n" +
                "        current_timestamp);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/09/2019   *********************************** */
                "CREATE TABLE `warehousemst_history` (  \n" +
                "  `ID` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `Name` varchar(50) NOT NULL,  \n" +
                "  `Description` varchar(255) DEFAULT NULL,  \n" +
                "  `nickname` varchar(50) DEFAULT NULL,  \n" +
                "  `parentWHID` int(11) DEFAULT NULL,  \n" +
                "  `isActive` tinyint(1) NOT NULL,  \n" +
                "  `isPermanentWH` tinyint(1) DEFAULT NULL,  \n" +
                "  `isDepartment` tinyint(1) DEFAULT '0',  \n" +
                "  `refWHID` int(11) DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  PRIMARY KEY (`ID`),  \n" +
                "  KEY `FK_warehousemst_parentWHID` (`parentWHID`),  \n" +
                "  CONSTRAINT `FK_warehousemst_history_parentWHID` FOREIGN KEY (`parentWHID`) REFERENCES `warehousemst` (`ID`),  \n" +
                "  KEY `FK_warehousemst_refWHID` (`refWHID`),  \n" +
                "  CONSTRAINT `FK_warehousemst_history_refWHID` FOREIGN KEY (`refWHID`) REFERENCES `warehousemst` (`ID`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;  \n" +
                /* **************************** New Script -> 03/09/2019   *********************************** */
                "DROP TRIGGER IF EXISTS Trg_Manage_WH_History;  \n" +
                "CREATE TRIGGER Trg_Manage_WH_History  \n" +
                "BEFORE UPDATE ON warehousemst  \n" +
                "FOR EACH ROW   \n" +
                "BEGIN  \n" +
                "	INSERT INTO warehousemst_history(  \n" +
                "		Name, 			Description, 		nickname,			parentWHID,   \n" +
                "        isActive, 		isPermanentWH, 		isDepartment,		refWHID, 			  \n" +
                "        createdBy,      createdAt)  \n" +
                "	VALUES(  \n" +
                "		OLD.Name,		OLD.Description,	OLD.nickname,		OLD.parentWHID,  \n" +
                "		OLD.isActive,	OLD.isPermanentWH,	OLD.isDepartment,	OLD.id,				  \n" +
                "        OLD.createdBy,  current_timestamp);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/09/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveBin_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin_History`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pBinID INT(11)    \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT(11);   \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "	SELECT  id,				Name, 									Description, 		  \n" +
                "			WarehouseID, 	cast(NULL as char(50)) wareHoueseName,	nickname,   \n" +
                "			isActive,		(CASE WHEN (isActive= 0) THEN 'Inactive' WHEN (isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,      \n" +
                "			isPermanentBin,	(CASE WHEN (isPermanentBin = 0) THEN 'No' WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS isPermanentBinConvertedValue,  \n" +
                "            refBinID, 		createdBy, 			createdAt,			CAST(NULL AS CHAR(255)) createdByName            \n" +
                "	FROM binmst_history;      \n" +
                "  \n" +
                "	-- Set warehouse name    \n" +
                "    UPDATE 	Results r, warehousemst w      \n" +
                "	SET 	r.wareHoueseName = w.Name  \n" +
                "	WHERE 	r.WarehouseID = w.id;     \n" +
                "  \n" +
                "	-- set created by    \n" +
                "    UPDATE 	Results r, users u      \n" +
                "	SET 	r.createdByName = u.username      \n" +
                "	WHERE 	r.createdBy = u.id;     \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY Name ASC\") ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "    IF(pBinID IS NOT NULL) THEN    \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refBinID = '\", pBinID, \"'\");    \n" +
                "    END IF;   \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );     \n" +
                "    PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);       \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/09/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_Transfer_Stock_History`;  \n" +
                "CREATE PROCEDURE `Sproc_Transfer_Stock_History`(	                              \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),	                              \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pUID varchar(14)    \n" +
                ")  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "	SELECT 	css.id, 									css.scanlabel, 							    \n" +
                "			css.pkgQty, 								css.uom,									cast(NULL as char(100)) uomName,    \n" +
                "			css.uid, 									css.printStatus, 							css.costCategoryID,    \n" +
                "            cast(NULL as char(100)) costCategory, 		css.lotCode, 								css.dateCode,             				    \n" +
                "            css.refcompid,								0 mfgcodeID, 								cast(NULL as char(100)) mfgPN, 			    \n" +
                "            cast(NULL as char(50)) PIDCode, 			0 packaginggroupID,							0 mfgID, 	    \n" +
                "            cast(NULL as char(255)) mfgCode, 			0 packageQty,  							cast(NULL as char(500)) mfg,    \n" +
                "            0 mslLevel,									0 pictureCount,								css.refCompSIDStockID,			    \n" +
                "            0 RoHSStatusID,								cast(NULL as char(255)) rohsIcon, 			cast(NULL as char(50)) rohsName,			    \n" +
                "            css.binID,    								cast(NULL as char(50)) location,   		    \n" +
                "            css.warehouseID,							cast(NULL as char(50)) warehouse,               \n" +
                "            css.deptWHID,					cast(NULL as char(50)) department,    \n" +
                "            css.customerID,								cast(NULL as char(500)) customer,               \n" +
                "            css.assyID,									cast(NULL as char(50)) assembly,                            \n" +
                "            (CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,           \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,    \n" +
                "            css.refCPNMFGPNID,							cast(NULL as char(500)) cpnMFGCode,     	cast(NULL as char(100)) cpnMFGPN,                  \n" +
                "			cast(NULL as char(100)) mfgPNDescription, 	css.receiveMaterialType, 					css.spq,     \n" +
                "            css.pcbPerArray, 							css.updatedAt, 								css.nickName,    \n" +
                "			css.packaging,								cast(NULL as char(100)) packagingName,	    \n" +
                "            css.refSupplierPartId, 						cast(NULL as char(500)) supplierMFGCode,  	cast(NULL as char(100)) supplieMFGPN,    \n" +
                "			css.expiryDate,								css.createdAt,								css.createdBy,	    \n" +
                "            CAST(NULL AS CHAR(255)) createdByName                               \n" +
                "	FROM component_sid_stock_history css                      \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;    \n" +
                "  \n" +
                "    -- Set bin name    \n" +
                "	UPDATE 	Results r, binmst b      \n" +
                "	SET 	r.location = b.Name   \n" +
                "	WHERE 	r.binID = b.id;     \n" +
                "  \n" +
                "    -- Set warehouse name    \n" +
                "    UPDATE 	Results r, warehousemst w      \n" +
                "	SET 	r.warehouse = w.Name  \n" +
                "	WHERE 	r.WarehouseID = w.id;     \n" +
                "  \n" +
                "	-- Set department name    \n" +
                "	UPDATE 	Results r, warehousemst w      \n" +
                "	SET 	r.department = w.Name    \n" +
                "	WHERE 	r.deptWHID = w.id;     \n" +
                "  \n" +
                "    -- Set component detail    \n" +
                "    UPDATE 	Results r, component c      \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.PIDCode = c.PIDCode, r.packageQty = IFNULL(c.packageQty,1),    \n" +
                "			r.RoHSStatusID = c.RoHSStatusID, r.packaginggroupID = IFNULL(c.packaginggroupID, 0), r.mslLevel =  IFNULL(c.mslID,0),    \n" +
                "            r.mfgPNDescription = c.mfgPNDescription    \n" +
                "	WHERE 	r.refcompid = c.id;    \n" +
                "  \n" +
                "    -- Set UOM    \n" +
                "    UPDATE 	Results r, uoms u        \n" +
                "    SET   	r.uomName = u.abbreviation        \n" +
                "    WHERE	r.uom = u.id;       \n" +
                "  \n" +
                "	-- Set manufacturer detail    \n" +
                "    UPDATE 	Results r, mfgcodemst m     \n" +
                "	SET 	r.mfgID = m.id,	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)    \n" +
                "	WHERE 	r.mfgcodeID = m.id;    \n" +
                "  \n" +
                "    -- Set customer detail    \n" +
                "    UPDATE 	Results r, mfgcodemst m     \n" +
                "	SET 	r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)    \n" +
                "	WHERE 	r.customerID = m.id;    \n" +
                "  \n" +
                "	-- Set cost category name    \n" +
                "	UPDATE 	Results r, cost_category c      \n" +
                "	SET 	r.costCategory = c.categoryName    \n" +
                "	WHERE 	r.costCategoryID = c.id;    \n" +
                "  \n" +
                "    -- Set RoHS det    \n" +
                "	UPDATE 	Results r, rfq_rohsmst rohs      \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name    \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;    \n" +
                "  \n" +
                "    -- Update picture count    \n" +
                "    UPDATE 	Results r    \n" +
                "	SET 	r.pictureCount = (SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = r.refCompSIDStockID AND gf.isActive = 1 AND gf.deletedAt IS NULL);    \n" +
                "  \n" +
                "	 -- Set ref. CPN detail    \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m      \n" +
                "	SET 	r.cpnMFGPN = c.mfgPN, r.cpnMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)    \n" +
                "	WHERE 	r.refCPNMFGPNID = c.id    \n" +
                "    AND		c.mfgcodeID = m.id;    \n" +
                "  \n" +
                "	-- Set assembly detail    \n" +
                "    UPDATE 	Results r, component c    \n" +
                "	SET 	r.assembly = c.PIDCode    \n" +
                "	WHERE 	r.assyID = c.id;    \n" +
                "  \n" +
                "    -- Set packaging detail    \n" +
                "    UPDATE 	Results r, Component_PackagingMst c    \n" +
                "	SET 	r.packagingName = c.name    \n" +
                "	WHERE 	r.packaging = c.id;    \n" +
                "  \n" +
                "  -- Set supplier part detail    \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m      \n" +
                "	SET 	r.supplieMFGPN = c.mfgPN, r.supplierMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)    \n" +
                "	WHERE 	r.refSupplierPartId = c.id    \n" +
                "    AND		c.mfgcodeID = m.id;    \n" +
                "  \n" +
                "	-- set transferred by    \n" +
                "    UPDATE 	Results r, users u      \n" +
                "	SET 	r.createdByName = u.username      \n" +
                "	WHERE 	r.createdBy = u.id;     \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                              \n" +
                "		SET pWhereClause = '1=1';    \n" +
                "	END IF;	         \n" +
                "  \n" +
                "    IF(pUID IS NOT NULL) THEN    \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND uid = '\", pUID, \"'\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE	                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "    PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/09/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (353,'2.00','V1',' Created table and trigger to manage bin and warehouse history - Dharmishtha '," + userid + ");"
            );
            break;
        case 353:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckMFGUsedInFlow` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckMFGUsedInFlow`(  \n" +
                "	IN pmfgcodemstID INT(11)    \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	IF EXISTS (SELECT 1 FROM salesordermst WHERE deletedAt IS NULL AND customerID = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use';        \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM workorder WHERE deletedAt IS NULL AND customerID = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use';       \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM rfqforms WHERE deletedAt IS NULL AND customerid = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use';       \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM equipment WHERE deletedAt IS NULL AND customerId = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use'; 	  \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM component WHERE deletedAt IS NULL AND mfgcodeID = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use';   \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM employees WHERE deletedAt IS NULL AND supplierID = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use'; 	  \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use'; 	  \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use'; 	  \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM shippedassembly WHERE deletedAt IS NULL AND customerID = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use'; 	  \n" +
                "  \n" +
                "	ELSEIF EXISTS (SELECT 1 FROM who_bought_who WHERE deletedAt IS NULL AND buyBy = pmfgcodemstID LIMIT 1) THEN        \n" +
                "		SELECT 'mfg_in_use'; 					  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		SELECT '';  \n" +
                "  \n" +
                "	END IF;        \n" +
                "    END;  \n" +
                /* **************************** New Script -> 09-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(                                                              \n" +
                "	IN tableName VARCHAR(255),                                                              \n" +
                "	IN IDs LONGTEXT,                                                              \n" +
                "	IN deletedBy INT,                                                              \n" +
                "	IN entityID VARCHAR(255),                                                              \n" +
                "	IN refrenceIDs LONGTEXT                                                              \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;          \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                                                              \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                              \n" +
                "			FROM                                                               \n" +
                "			(                                                                                                  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL      \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                              \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                              \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)        \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"certificate_standards\" ELSE \"\" END AS msg FROM  certificate_standards cs WHERE cs.deletedAt IS NULL AND cs.certificateSupplierID IN(',IDs,') LIMIT 1)         \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)    \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                                                                                                        \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                           \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)             \n" +
                "				UNION ALL                                                               \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)                                                                                                                                                                                                                     \n" +
                "		      ) q');                                                              \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                              \n" +
                "		EXECUTE stmt;                                                              \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                                                              \n" +
                "			START TRANSACTION;      \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                              \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                              \n" +
                "					EXECUTE stmt1;                      \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');                      \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                              \n" +
                "					EXECUTE stmt2;                         \n" +
                "  \n" +
                "			SELECT * FROM tempMFGCodeMst;      \n" +
                "  \n" +
                "			COMMIT;                                                              \n" +
                "		ELSE                                                              \n" +
                "			SELECT * FROM tempMFGCodeMst;                                                              \n" +
                "  \n" +
                "		END IF;                                                              \n" +
                "		DROP TABLE tempMFGCodeMst;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 09-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(          \n" +
                "	IN pwoID INT(11)  ,          \n" +
                "	IN pwoOPID INT(11)                                                                             \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";            \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN          \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,       \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,       \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`,            \n" +
                "			`wocerti`.woAllStandardsWithClass ,      \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL           \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,          \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL           \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,          \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,       \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  `ca`.specialNote ,       \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon`, salesorddet.totalpoQty, salesorddet.poQty ,          \n" +
                "   			 salesorddet.totalmrpQty, salesorddet.mrpQty, salesorddet.poNumber , salesorddet.salesOrderNumber          \n" +
                "		FROM workorder AS `wo`           \n" +
                "		LEFT OUTER JOIN     \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass     \n" +
                "			FROM `workorder_certification` a    \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID    \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	    \n" +
                "			) AS `wocerti`    \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`      \n" +
                "		LEFT OUTER JOIN `component` AS `ca`          \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL              \n" +
                "		LEFT OUTER JOIN       \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,          \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,          \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber          \n" +
                "			FROM `workorder_salesorder_details` AS `wsd`           \n" +
                "			INNER JOIN `salesorderdet` AS `sod`           \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL           \n" +
                "			INNER JOIN `salesordermst` AS `som`           \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL           \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet          \n" +
                "			ON salesorddet.woID = `wo`.`woID`          \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID          \n" +
                "		GROUP BY `wo`.`woID` ;          \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN          \n" +
                "		SELECT       \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,       \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,       \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`,          \n" +
                "			 `wocerti`.woAllStandardsWithClass ,      \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL           \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,          \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL           \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,         \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion,          \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`, CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,      \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,       \n" +
                "			`ca`.`RoHSStatusID`, (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,          \n" +
                "			 salesorddet.totalpoQty, salesorddet.poQty, salesorddet.totalmrpQty,       \n" +
                "			 salesorddet.mrpQty, salesorddet.poNumber, salesorddet.salesOrderNumber          \n" +
                "		FROM workorder AS `wo`        \n" +
                "		LEFT OUTER JOIN     \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass     \n" +
                "			FROM `workorder_certification` a    \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID    \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	    \n" +
                "			) AS `wocerti`		    \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`     \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`          \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID        \n" +
                "		LEFT OUTER JOIN `component` AS `ca`          \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL              \n" +
                "		LEFT OUTER JOIN       \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,          \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,          \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber          \n" +
                "  			FROM `workorder_salesorder_details` AS `wsd`           \n" +
                "			INNER JOIN `salesorderdet` AS `sod`           \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL           \n" +
                "			INNER JOIN `salesordermst` AS `som`           \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL           \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet          \n" +
                "		ON salesorddet.woID = `wo`.`woID`          \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID          \n" +
                "		GROUP BY `wo`.`woID` ;          \n" +
                "	END IF ;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (354,'2.00','V1',' sps for mfg and wo header - KETAN '," + userid + ");"
            );
            break;
        case 354:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/11/2019 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(            \n" +
                "	pBinID int(11),            \n" +
                "    pGlobalSearchUIDId int(11),         \n" +
                "	pSearchUIDId INT(11),        \n" +
                "	pSearchString varchar(100)   \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                    \n" +
                "	SELECT 	css.id,					css.scanlabel,						css.pkgQty,				css.uid,             \n" +
                "            c.PIDCode, 				c.mfgcodeID,        				c.mfgPN,  				mfg.mfgCode, 	    \n" +
                "            mfg.mfgName,			ro.rohsIcon,       					ro.name AS rohsName,	css.nickName,		    \n" +
                "            css.binID,				cast(NULL as char(100)) binName, 	css.uom,				cast('' as char(100)) uomName                                     \n" +
                "	FROM component_sid_stock css                                    \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                                   \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                                    \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                           \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)                \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)                \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )                \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0        \n" +
                "	AND 	css.uid like CONCAT('%', IFNULL(pSearchString,'') ,'%');         \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	update 	Results r, binmst b        \n" +
                "    SET   	r.binName = b.Name        \n" +
                "    WHERE	r.binID = b.id;     \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "    update 	Results r, uoms u        \n" +
                "    SET   	r.uomName = u.abbreviation        \n" +
                "    WHERE	r.uom = u.id;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;             \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/11/2019 *********************************** */
                "DROP procedure IF EXISTS `Sproc_Transfer_Stock_History`;  \n" +
                "CREATE PROCEDURE `Sproc_Transfer_Stock_History`(	                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),	                                \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "    IN pUID varchar(14)    \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                  \n" +
                "	SELECT 	css.id, 									css.scanlabel, 							      \n" +
                "			css.pkgQty, 								css.uom,									cast(NULL as char(100)) uomName,      \n" +
                "			css.uid, 									css.printStatus, 							css.costCategoryID,      \n" +
                "            cast(NULL as char(100)) costCategory, 		css.lotCode, 								css.dateCode,             				      \n" +
                "            css.refcompid,								0 mfgcodeID, 								cast(NULL as char(100)) mfgPN, 			      \n" +
                "            cast(NULL as char(50)) PIDCode, 			0 packaginggroupID,							0 mfgID, 	      \n" +
                "            cast(NULL as char(255)) mfgCode, 			0 packageQty,  							cast(NULL as char(500)) mfg,      \n" +
                "            0 mslLevel,									0 pictureCount,								css.refCompSIDStockID,			      \n" +
                "            0 RoHSStatusID,								cast(NULL as char(255)) rohsIcon, 			cast(NULL as char(50)) rohsName,			      \n" +
                "            css.binID,    								cast(NULL as char(50)) location,   		      \n" +
                "            css.warehouseID,							cast(NULL as char(50)) warehouse,                 \n" +
                "            css.deptWHID,					cast(NULL as char(50)) department,      \n" +
                "            css.customerID,								cast(NULL as char(500)) customer,                 \n" +
                "            css.assyID,									cast(NULL as char(50)) assembly,                              \n" +
                "            (CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,             \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,      \n" +
                "            css.refCPNMFGPNID,							cast(NULL as char(500)) cpnMFGCode,     	cast(NULL as char(100)) cpnMFGPN,                    \n" +
                "			cast(NULL as char(100)) mfgPNDescription, 	css.receiveMaterialType, 					css.spq,       \n" +
                "            css.pcbPerArray, 							css.updatedAt, 								css.nickName,      \n" +
                "			css.packaging,								cast(NULL as char(100)) packagingName,	      \n" +
                "            css.refSupplierPartId, 						cast(NULL as char(500)) supplierMFGCode,  	cast(NULL as char(100)) supplieMFGPN,      \n" +
                "			css.expiryDate,								css.createdAt,								css.createdBy,	      \n" +
                "            CAST(NULL AS CHAR(255)) createdByName                                 \n" +
                "	FROM component_sid_stock_history css                        \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;      \n" +
                "  \n" +
                "    -- Set bin name      \n" +
                "	UPDATE 	Results r, binmst b        \n" +
                "	SET 	r.location = b.Name     \n" +
                "	WHERE 	r.binID = b.id;       \n" +
                "  \n" +
                "    -- Set warehouse name      \n" +
                "    UPDATE 	Results r, warehousemst w        \n" +
                "	SET 	r.warehouse = w.Name    \n" +
                "	WHERE 	r.WarehouseID = w.id;       \n" +
                "  \n" +
                "	-- Set department name      \n" +
                "	UPDATE 	Results r, warehousemst w        \n" +
                "	SET 	r.department = w.Name      \n" +
                "	WHERE 	r.deptWHID = w.id;       \n" +
                "  \n" +
                "    -- Set component detail      \n" +
                "    UPDATE 	Results r, component c        \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.PIDCode = c.PIDCode, r.packageQty = IFNULL(c.packageQty,1),      \n" +
                "			r.RoHSStatusID = c.RoHSStatusID, r.packaginggroupID = IFNULL(c.packaginggroupID, 0), r.mslLevel =  IFNULL(c.mslID,0),      \n" +
                "            r.mfgPNDescription = c.mfgPNDescription      \n" +
                "	WHERE 	r.refcompid = c.id;      \n" +
                "  \n" +
                "    -- Set UOM      \n" +
                "    UPDATE 	Results r, uoms u          \n" +
                "    SET   	r.uomName = u.abbreviation          \n" +
                "    WHERE	r.uom = u.id;         \n" +
                "  \n" +
                "	-- Set manufacturer detail      \n" +
                "    UPDATE 	Results r, mfgcodemst m       \n" +
                "	SET 	r.mfgID = m.id,	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)      \n" +
                "	WHERE 	r.mfgcodeID = m.id;      \n" +
                "  \n" +
                "    -- Set customer detail      \n" +
                "    UPDATE 	Results r, mfgcodemst m       \n" +
                "	SET 	r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)      \n" +
                "	WHERE 	r.customerID = m.id;      \n" +
                "  \n" +
                "	-- Set cost category name      \n" +
                "	UPDATE 	Results r, cost_category c        \n" +
                "	SET 	r.costCategory = c.categoryName      \n" +
                "	WHERE 	r.costCategoryID = c.id;      \n" +
                "  \n" +
                "    -- Set RoHS det      \n" +
                "	UPDATE 	Results r, rfq_rohsmst rohs        \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name      \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;      \n" +
                "  \n" +
                "    -- Update picture count      \n" +
                "    UPDATE 	Results r      \n" +
                "	SET 	r.pictureCount = (SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = r.refCompSIDStockID AND gf.isActive = 1 AND gf.deletedAt IS NULL);      \n" +
                "  \n" +
                "	 -- Set ref. CPN detail      \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m        \n" +
                "	SET 	r.cpnMFGPN = c.mfgPN, r.cpnMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)      \n" +
                "	WHERE 	r.refCPNMFGPNID = c.id      \n" +
                "    AND		c.mfgcodeID = m.id;      \n" +
                "  \n" +
                "	-- Set assembly detail      \n" +
                "    UPDATE 	Results r, component c      \n" +
                "	SET 	r.assembly = c.PIDCode      \n" +
                "	WHERE 	r.assyID = c.id;      \n" +
                "  \n" +
                "    -- Set packaging detail      \n" +
                "    UPDATE 	Results r, Component_PackagingMst c      \n" +
                "	SET 	r.packagingName = c.name      \n" +
                "	WHERE 	r.packaging = c.id;      \n" +
                "  \n" +
                "  -- Set supplier part detail      \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m        \n" +
                "	SET 	r.supplieMFGPN = c.mfgPN, r.supplierMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)      \n" +
                "	WHERE 	r.refSupplierPartId = c.id      \n" +
                "    AND		c.mfgcodeID = m.id;      \n" +
                "  \n" +
                "	-- set transferred by      \n" +
                "    UPDATE 	Results r, users u        \n" +
                "	SET 	r.createdByName = u.username        \n" +
                "	WHERE 	r.createdBy = u.id;       \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                \n" +
                "		SET pWhereClause = '1=1';      \n" +
                "	END IF;	           \n" +
                "  \n" +
                "    IF(pUID IS NOT NULL) THEN      \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND uid = '\", pUID, \"'\");      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03/11/2019 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveWarehouse_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse_History`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pWarehouseID INT(11)  \n" +
                ")   \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "	SELECT w.*,  CAST(NULL AS CHAR(50)) parentWarehouseName,      \n" +
                "			(CASE WHEN (w.isActive = 0) THEN 'Inactive' WHEN (w.isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,  \n" +
                "			(CASE WHEN (w.isPermanentWH = 0) THEN 'No' WHEN (w.isPermanentWH = 1) THEN 'Yes' ELSE '' END) AS parentConvertedValue,  \n" +
                "            CAST(NULL AS CHAR(255)) createdByName   \n" +
                "	FROM	warehousemst_history w;  \n" +
                "  \n" +
                "	-- Set department name      \n" +
                "	UPDATE Results r, warehousemst w    \n" +
                "	SET r.parentWarehouseName = w.name    \n" +
                "	WHERE r.parentWHID = w.id;    \n" +
                "  \n" +
                "	-- set created by      \n" +
                "    UPDATE 	Results r, users u        \n" +
                "	SET 	r.createdByName = u.username        \n" +
                "	WHERE 	r.createdBy = u.id;       \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"Name ASC\") ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWarehouseID IS NOT NULL) THEN      \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refWHID = '\", pWarehouseID, \"'\");      \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/11/2019 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveBin_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin_History`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "    IN pBinID INT(11)     \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT(11);     \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "	SELECT  id,				Name, 									Description, 		    \n" +
                "			WarehouseID, 	cast(NULL as char(50)) wareHoueseName,	nickname,     \n" +
                "			isActive,		(CASE WHEN (isActive= 0) THEN 'Inactive' WHEN (isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,        \n" +
                "			isPermanentBin,	(CASE WHEN (isPermanentBin = 0) THEN 'No' WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS isPermanentBinConvertedValue,    \n" +
                "            refBinID, 		createdBy, 			createdAt,			CAST(NULL AS CHAR(255)) createdByName              \n" +
                "	FROM binmst_history;        \n" +
                "  \n" +
                "	-- Set warehouse name      \n" +
                "    UPDATE 	Results r, warehousemst w        \n" +
                "	SET 	r.wareHoueseName = w.Name    \n" +
                "	WHERE 	r.WarehouseID = w.id;       \n" +
                "  \n" +
                "	-- set created by      \n" +
                "    UPDATE 	Results r, users u        \n" +
                "	SET 	r.createdByName = u.username        \n" +
                "	WHERE 	r.createdBy = u.id;       \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY Name ASC\") ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "    IF(pBinID IS NOT NULL) THEN      \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refBinID = '\", pBinID, \"'\");      \n" +
                "    END IF;     \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );       \n" +
                "    PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);         \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/11/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (355,'2.00','V1',' Create procedure for warehouse and bin history and modified procedure to retrive bin detail - Dharmishtha '," + userid + ");"
            );
            break;
        case 355:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2019  *********************************** */
                "UPDATE page_detail SET menuName = 'UMID Management', displayMenuName = 'UMID Management' WHERE pageName = 'Manage Receiving Material';  \n" +
                "UPDATE uid_verification_history SET verificationType = 'UMID & MFG/DISTY PN label (1D or 2D)' WHERE verificationType = 'UID & MFG/DISTY PN label (1D or 2D)';  \n" +
                "UPDATE uid_verification_history SET verificationType = 'UMID to PID' WHERE verificationType = 'UID to PID';  \n" +
                "UPDATE uid_verification_history SET verificationType = 'UMID to CPN' WHERE verificationType = 'UID to CPN';  \n" +
                "UPDATE uid_verification_history SET verificationType = 'UMID to UMID' WHERE verificationType = 'UID to UID';  \n" +
                "UPDATE uid_verification_history SET verificationType = 'UMID to MFG PN (Without Barcode)' WHERE verificationType = 'UID to MFG PN (Without Barcode)';  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (356,'2.00','V1',' Update record realated to UID to UMID - FENIL '," + userid + ");"
            );
            break;
        case 356:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/11/2019   *********************************** */
                "update page_detail set iconClass = 'mdi mdi-domain' where menuname in ('Warehouse', 'Warehouse/Bin'); \n" +
                "update page_detail set iconClass = 'mdi mdi-package' where menuname in ('Bin'); \n" +
                /* **************************** Add Script Version -> 03/09/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (357,'2.00','V1',' Update icon of bin and warehouse menu - Dharmishtha '," + userid + ");"
            );
            break;
        case 357:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/11/2019   *********************************** */
                "Alter table warehousemst add column (  \n" +
                "                uniqueCartID varchar(50),  \n" +
                "                scanWH varchar(50),  \n" +
                "                scanBin varchar(50),  \n" +
                "                allMovableBin tinyint(1),  \n" +
                "                userAccessMode varchar(5)  \n" +
                "            );  \n" +
                /* **************************** Add Script Version -> 03/09/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (358,'2.00','V1',' Update icon of bin and warehouse menu - Dharmishtha '," + userid + ");"
            );
            break;
        case 358:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                                \n" +
                "	IN ppageIndex INT(11),                                \n" +
                "	IN precordPerPage INT(11),                                \n" +
                "	IN pOrderBy VARCHAR(255),	                                \n" +
                "        IN pWhereClause VARCHAR(16383)                                    \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                 \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                \n" +
                "	SELECT 	css.id,					  css.scanlabel,     \n" +
                "		css.pkgQty,				  css.uom,				CAST(NULL AS CHAR(100)) uomName,    \n" +
                "		css.uid,				  css.printStatus,			css.costCategoryID,    \n" +
                "		CAST(NULL AS CHAR(100)) costCategory, 	  css.lotCode,				css.dateCode,    \n" +
                "		css.refcompid,				  0 mfgcodeID,				CAST(NULL AS CHAR(100)) mfgPN,    \n" +
                "		CAST(NULL AS CHAR(50)) PIDCode,		  0 packaginggroupID,			0 mfgID,    \n" +
                "		CAST(NULL AS CHAR(255)) mfgCode, 	  0 packageQty,				CAST(NULL AS CHAR(500)) mfg,    \n" +
                "		0 mslLevel,				  0 pictureCount,				    \n" +
                "		0 RoHSStatusID,				  CAST(NULL AS CHAR(255)) rohsIcon,	CAST(NULL AS CHAR(50)) rohsName,    \n" +
                "		css.binID,    				  CAST(NULL AS CHAR(50)) location,       \n" +
                "		0 warehouseID,				  CAST(NULL AS CHAR(50)) warehouse,    \n" +
                "		0 departmentID,				  CAST(NULL AS CHAR(50)) department,		      \n" +
                "		css.customerID,				  CAST(NULL AS CHAR(500)) customer,    \n" +
                "		css.assyID,				  CAST(NULL AS CHAR(50)) assembly,    \n" +
                "		css.refCPNMFGPNID,			  CAST(NULL AS CHAR(500)) cpnMFGCode,	CAST(NULL AS CHAR(100)) cpnMFGPN,    \n" +
                "		CAST(NULL AS CHAR(100)) mfgPNDescription, css.receiveMaterialType, 		css.spq,    \n" +
                "		css.pcbPerArray, 			  css.updatedAt,			css.nickName,    \n" +
                "		css.packaging,				  CAST(NULL AS CHAR(100)) packagingName,    \n" +
                "		css.refSupplierPartId, 			  CAST(NULL AS CHAR(500)) supplierMFGCode,    \n" +
                "		CAST(NULL AS CHAR(100)) supplieMFGPN,	  css.expiryDate,			css.createdAt,    \n" +
                "		css.createdBy,				  CAST(NULL AS CHAR(255)) createdByName,CAST(NULL AS CHAR(255)) allocatedToKit,     \n" +
                "		(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,    \n" +
                "		(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable    \n" +
                "	FROM component_sid_stock css                        \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;    \n" +
                "  \n" +
                "	-- Set bin name      \n" +
                "	UPDATE 	Results r, binmst b        \n" +
                "	SET 	r.location = b.Name, r.warehouseID = b.WarehouseID      \n" +
                "	WHERE 	r.binID = b.id;       \n" +
                "  \n" +
                "	-- Set warehouse name      \n" +
                "	UPDATE 	Results r, warehousemst w        \n" +
                "	SET 	r.warehouse = w.Name, r.departmentID = w.parentWHID      \n" +
                "	WHERE 	r.WarehouseID = w.id;       \n" +
                "  \n" +
                "	-- Set department name      \n" +
                "	UPDATE 	Results r, warehousemst w        \n" +
                "	SET 	r.department = w.Name      \n" +
                "	WHERE 	r.departmentID = w.id;       \n" +
                "  \n" +
                "	-- Set component detail      \n" +
                "	UPDATE 	Results r, component c        \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.PIDCode = c.PIDCode, r.packageQty = IFNULL(c.packageQty,1),      \n" +
                "		r.RoHSStatusID = c.RoHSStatusID, r.packaginggroupID = IFNULL(c.packaginggroupID, 0), r.mslLevel =  IFNULL(c.mslID,0),      \n" +
                "		r.mfgPNDescription = c.mfgPNDescription      \n" +
                "	WHERE 	r.refcompid = c.id;      \n" +
                "  \n" +
                "	-- Set UOM      \n" +
                "	UPDATE 	Results r, uoms u          \n" +
                "	SET   	r.uomName = u.abbreviation          \n" +
                "	WHERE	r.uom = u.id;         \n" +
                "  \n" +
                "	-- Set manufacturer detail      \n" +
                "	UPDATE 	Results r, mfgcodemst m       \n" +
                "	SET 	r.mfgID = m.id,	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)      \n" +
                "	WHERE 	r.mfgcodeID = m.id;      \n" +
                "  \n" +
                "	-- Set customer detail      \n" +
                "	UPDATE 	Results r, mfgcodemst m       \n" +
                "	SET 	r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)      \n" +
                "	WHERE 	r.customerID = m.id;      \n" +
                "  \n" +
                "	-- Set cost category name      \n" +
                "	UPDATE 	Results r, cost_category c        \n" +
                "	SET 	r.costCategory = c.categoryName      \n" +
                "	WHERE 	r.costCategoryID = c.id;      \n" +
                "  \n" +
                "	-- Set RoHS det      \n" +
                "	UPDATE 	Results r, rfq_rohsmst rohs        \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name      \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;      \n" +
                "  \n" +
                "	-- Update picture count      \n" +
                "	UPDATE 	Results r      \n" +
                "	SET 	r.pictureCount = (SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = r.id AND gf.isActive = 1 AND gf.deletedAt IS NULL);      \n" +
                "  \n" +
                "	 -- Set ref. CPN detail      \n" +
                "	UPDATE 	Results r, component c, mfgcodemst m        \n" +
                "	SET 	r.cpnMFGPN = c.mfgPN, r.cpnMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)      \n" +
                "	WHERE 	r.refCPNMFGPNID = c.id      \n" +
                "	AND	c.mfgcodeID = m.id;      \n" +
                "  \n" +
                "	-- Set assembly detail      \n" +
                "	UPDATE 	Results r, component c      \n" +
                "	SET 	r.assembly = c.PIDCode      \n" +
                "	WHERE 	r.assyID = c.id;      \n" +
                "  \n" +
                "	-- Set packaging detail      \n" +
                "	UPDATE 	Results r, Component_PackagingMst c      \n" +
                "	SET 	r.packagingName = c.name      \n" +
                "	WHERE 	r.packaging = c.id;      \n" +
                "  \n" +
                "	-- Set supplier part detail      \n" +
                "	UPDATE 	Results r, component c, mfgcodemst m        \n" +
                "	SET 	r.supplieMFGPN = c.mfgPN, r.supplierMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)      \n" +
                "	WHERE 	r.refSupplierPartId = c.id AND c.mfgcodeID = m.id;      \n" +
                "  \n" +
                "	-- set transferred by      \n" +
                "	UPDATE 	Results r, users u        \n" +
                "	SET 	r.createdByName = u.username        \n" +
                "	WHERE 	r.createdBy = u.id;     \n" +
                "  \n" +
                "	-- Update allocatedToKit    \n" +
                "	UPDATE 	Results r      \n" +
                "	SET 	r.allocatedToKit = (SELECT GROUP_CONCAT('(', ssr.`Po Number`, ', ', ssr.`Sales Order`, ', ', ssr.`Assy ID`, ')') FROM kit_allocation ka LEFT JOIN vu_salesorder_shipped_report ssr ON ka.refSalesOrderDetID = ssr.SalesOrderDetailID WHERE ka.refUIDId = r.id);      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                \n" +
                "		SET pWhereClause = '1=1';      \n" +
                "	END IF;	           \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (359,'2.00','V1','Sproc_GetReceivingMaterial - FENIL '," + userid + ");"
            );
            break;
        case 359:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(	            \n" +
                "	IN ppartID INT(11)      \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "		(      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID      \n" +
                "			FROM       \n" +
                "			(      \n" +
                "					SELECT rl.qpa, ra.mountingtypeID, mt.name AS `mountingType`, rl.id, rl.partID      \n" +
                "							FROM rfq_lineitems rl      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id and ram.isDeleted = 0 AND ram.mountingtypeID = ra.mountingtypeID AND ram.id != ra.id      \n" +
                "					LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0      \n" +
                "					WHERE rl.partID = ppartID and rl.isDeleted = 0 AND rl.id NOT IN       \n" +
                "						(      \n" +
                "							SELECT rl.id#, ra.id, ra.mountingtypeID,ram.mountingtypeID,ram.id    \n" +
                "                            FROM rfq_lineitems_alternatepart ra      \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "							left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0     \n" +
                "							LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0      \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND ram.mountingtypeID != ra.mountingtypeID      \n" +
                "							GROUP BY rl.id      \n" +
                "						)      \n" +
                "					GROUP BY rl.id      \n" +
                "			) a      \n" +
                "			GROUP BY mountingtypeID      \n" +
                "		) UNION       \n" +
                "		(      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID      \n" +
                "			FROM      \n" +
                "			(      \n" +
                "				SELECT rl.qpa, ra.mountingtypeID, 'Mismatched' AS `mountingType`, rl.id, rl.partID      \n" +
                "				FROM rfq_lineitems_alternatepart ra      \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0      \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND ram.mountingtypeID != ra.mountingtypeID      \n" +
                "				GROUP BY rl.id      \n" +
                "			)a      \n" +
                "		);      \n" +
                "  \n" +
                "  \n" +
                "  (      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, RoHSStatusID, RoHSStatus, partID      \n" +
                "			FROM       \n" +
                "			(      \n" +
                "					SELECT rl.qpa, ra.RoHSStatusID, ro.name AS `RoHSStatus`, rl.id, rl.partID      \n" +
                "							FROM rfq_lineitems rl      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id and ram.isDeleted = 0 AND ram.mountingtypeID = ra.mountingtypeID AND ram.id != ra.id      \n" +
                "					LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0      \n" +
                "					WHERE rl.partID = ppartID and rl.isDeleted = 0 AND rl.id NOT IN       \n" +
                "						(      \n" +
                "							SELECT rl.id#, ra.id, ra.mountingtypeID,ram.mountingtypeID,ram.id    \n" +
                "                            FROM rfq_lineitems_alternatepart ra      \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "							left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0     \n" +
                "							LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0      \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND ram.RoHSStatusID != ra.RoHSStatusID      \n" +
                "							GROUP BY rl.id      \n" +
                "						)      \n" +
                "					GROUP BY rl.id      \n" +
                "			) a      \n" +
                "			GROUP BY RoHSStatusID      \n" +
                "		) UNION       \n" +
                "		(      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, RoHSStatusID, RoHSStatus, partID      \n" +
                "			FROM      \n" +
                "			(      \n" +
                "				SELECT rl.qpa, ra.RoHSStatusID, 'Mismatched' AS `RoHSStatus`, rl.id, rl.partID      \n" +
                "				FROM rfq_lineitems_alternatepart ra      \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.RoHSStatusID AND mt.isDeleted = 0      \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND ram.RoHSStatusID != ra.RoHSStatusID      \n" +
                "				GROUP BY rl.id      \n" +
                "			)a      \n" +
                "		);     \n" +
                "	/*	SELECT sum(rl.qpa) as `QPA`, ra.RoHSStatusID, ro.name AS `RoHSStatus`, count(rl.id) as `ItemCount`, rl.partID      \n" +
                "		FROM rfq_lineitems rl      \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0      \n" +
                "		LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0      \n" +
                "		WHERE rl.partID = ppartID and rl.isDeleted = 0     \n" +
                "		GROUP BY ra.RoHSStatusID;      \n" +
                "  */  \n" +
                "        select sc.className, cs.fullName as standardName,csd.* from component_standard_details csd    \n" +
                "		left join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isDeleted = 0    \n" +
                "		left join standard_class sc on sc.classID = csd.ClassID and sc.isDeleted = 0    \n" +
                "		where csd.isDeleted = 0 and csd.componentID = ppartID;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (360,'2.00','V1','Assembly at glance SP changes  - shirish'," + userid + ");"
            );
            break;
        case 360:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(	            \n" +
                "	IN ppartID INT(11)      \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "		(      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID      \n" +
                "			FROM       \n" +
                "			(      \n" +
                "					SELECT rl.qpa, ra.mountingtypeID, mt.name AS `mountingType`, rl.id, rl.partID      \n" +
                "							FROM rfq_lineitems rl      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id and ram.isDeleted = 0 AND ram.mountingtypeID = ra.mountingtypeID AND ram.id != ra.id      \n" +
                "					LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0      \n" +
                "					WHERE rl.partID = ppartID and rl.isDeleted = 0 AND rl.id NOT IN       \n" +
                "						(      \n" +
                "							SELECT rl.id#, ra.id, ra.mountingtypeID,ram.mountingtypeID,ram.id    \n" +
                "                            FROM rfq_lineitems_alternatepart ra      \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "							left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0     \n" +
                "							LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0      \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND ram.mountingtypeID != ra.mountingtypeID      \n" +
                "							GROUP BY rl.id      \n" +
                "						)      \n" +
                "					GROUP BY rl.id      \n" +
                "			) a    \n" +
                "			GROUP BY mountingtypeID      \n" +
                "		) UNION       \n" +
                "		(      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID      \n" +
                "			FROM      \n" +
                "			(      \n" +
                "				SELECT rl.qpa, ra.mountingtypeID, 'Mismatched' AS `mountingType`, rl.id, rl.partID      \n" +
                "				FROM rfq_lineitems_alternatepart ra      \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0      \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND ram.mountingtypeID != ra.mountingtypeID      \n" +
                "				GROUP BY rl.id      \n" +
                "			)a  having sum(ifnull(a.qpa,0)) > 0       \n" +
                "		);      \n" +
                "  \n" +
                "  \n" +
                "  (      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, RoHSStatusID, RoHSStatus, partID      \n" +
                "			FROM       \n" +
                "			(      \n" +
                "					SELECT rl.qpa, ra.RoHSStatusID, ro.name AS `RoHSStatus`, rl.id, rl.partID      \n" +
                "							FROM rfq_lineitems rl      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0      \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id and ram.isDeleted = 0 AND ram.mountingtypeID = ra.mountingtypeID AND ram.id != ra.id      \n" +
                "					LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0      \n" +
                "					WHERE rl.partID = ppartID and rl.isDeleted = 0 AND rl.id NOT IN       \n" +
                "						(      \n" +
                "							SELECT rl.id#, ra.id, ra.mountingtypeID,ram.mountingtypeID,ram.id    \n" +
                "                            FROM rfq_lineitems_alternatepart ra      \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "							left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0     \n" +
                "							LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0      \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND ram.RoHSStatusID != ra.RoHSStatusID      \n" +
                "							GROUP BY rl.id      \n" +
                "						)      \n" +
                "					GROUP BY rl.id      \n" +
                "			) a      \n" +
                "			GROUP BY RoHSStatusID      \n" +
                "		) UNION       \n" +
                "		(      \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, RoHSStatusID, RoHSStatus, partID      \n" +
                "			FROM      \n" +
                "			(      \n" +
                "				SELECT rl.qpa, ra.RoHSStatusID, 'Mismatched' AS `RoHSStatus`, rl.id, rl.partID      \n" +
                "				FROM rfq_lineitems_alternatepart ra      \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0      \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.RoHSStatusID AND mt.isDeleted = 0      \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND ram.RoHSStatusID != ra.RoHSStatusID      \n" +
                "				GROUP BY rl.id      \n" +
                "			)a  having sum(ifnull(a.qpa,0)) > 0        \n" +
                "		);     \n" +
                "	/*	SELECT sum(rl.qpa) as `QPA`, ra.RoHSStatusID, ro.name AS `RoHSStatus`, count(rl.id) as `ItemCount`, rl.partID      \n" +
                "		FROM rfq_lineitems rl      \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0      \n" +
                "		LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0      \n" +
                "		WHERE rl.partID = ppartID and rl.isDeleted = 0     \n" +
                "		GROUP BY ra.RoHSStatusID;      \n" +
                "  */  \n" +
                "        select sc.className, cs.fullName as standardName,csd.* from component_standard_details csd    \n" +
                "		left join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isDeleted = 0    \n" +
                "		left join standard_class sc on sc.classID = csd.ClassID and sc.isDeleted = 0    \n" +
                "		where csd.isDeleted = 0 and csd.componentID = ppartID;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (361,'2.00','V1','Assembly at glance SP changes  - shirish'," + userid + ");"
            );
            break;
        case 361:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(            \n" +
                "	IN pwoID INT(11)  ,            \n" +
                "	IN pwoOPID INT(11)                                                                               \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";              \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN            \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,         \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,         \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`partID`,                  \n" +
                "			`wocerti`.woAllStandardsWithClass ,        \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL             \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,            \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL             \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,            \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,         \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  `ca`.specialNote ,         \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon`, salesorddet.totalpoQty, salesorddet.poQty ,            \n" +
                "   			 salesorddet.totalmrpQty, salesorddet.mrpQty, salesorddet.poNumber , salesorddet.salesOrderNumber            \n" +
                "		FROM workorder AS `wo`             \n" +
                "		LEFT OUTER JOIN       \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''    \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END    \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass       \n" +
                "			FROM `workorder_certification` a      \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID      \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	      \n" +
                "			) AS `wocerti`      \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`        \n" +
                "		LEFT OUTER JOIN `component` AS `ca`            \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                \n" +
                "		LEFT OUTER JOIN         \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,            \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,            \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber            \n" +
                "			FROM `workorder_salesorder_details` AS `wsd`             \n" +
                "			INNER JOIN `salesorderdet` AS `sod`             \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL             \n" +
                "			INNER JOIN `salesordermst` AS `som`             \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL             \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet            \n" +
                "			ON salesorddet.woID = `wo`.`woID`            \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID            \n" +
                "		GROUP BY `wo`.`woID` ;            \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN            \n" +
                "		SELECT         \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,         \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,         \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`partID`,        \n" +
                "			 `wocerti`.woAllStandardsWithClass ,        \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL             \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,            \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL             \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,           \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion,   \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,   \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent,   \n" +
                "			`woop`.colorCode,   \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`, CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,        \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,         \n" +
                "			`ca`.`RoHSStatusID`, (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,            \n" +
                "			 salesorddet.totalpoQty, salesorddet.poQty, salesorddet.totalmrpQty,         \n" +
                "			 salesorddet.mrpQty, salesorddet.poNumber, salesorddet.salesOrderNumber            \n" +
                "		FROM workorder AS `wo`          \n" +
                "		LEFT OUTER JOIN       \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''    \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END    \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass       \n" +
                "			FROM `workorder_certification` a      \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID      \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	      \n" +
                "			) AS `wocerti`		      \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`       \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`            \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID          \n" +
                "		LEFT OUTER JOIN `component` AS `ca`            \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                \n" +
                "		LEFT OUTER JOIN         \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,            \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,            \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber            \n" +
                "  			FROM `workorder_salesorder_details` AS `wsd`             \n" +
                "			INNER JOIN `salesorderdet` AS `sod`             \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL             \n" +
                "			INNER JOIN `salesordermst` AS `som`             \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL             \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet            \n" +
                "		ON salesorddet.woID = `wo`.`woID`            \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID            \n" +
                "		GROUP BY `wo`.`woID` ;            \n" +
                "	END IF ;            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerLatestDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerLatestDetails`(              \n" +
                "    IN pWOOPID INT(11),    \n" +
                "    IN pEmployeeID INT(11),           \n" +
                "    IN pWOID INT(11)    \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	-- SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;    \n" +
                "	/****************************************** 1.Get WO Transaction Details *******************************************/    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_wo_trans;        \n" +
                "	CREATE TEMPORARY TABLE temp_wo_trans AS     \n" +
                "	SELECT     \n" +
                "		`woTransID`,     \n" +
                "		`woID`,     \n" +
                "		`opID`,     \n" +
                "		`woOPID`,     \n" +
                "		`issueQty`,     \n" +
                "		`checkinEmployeeID`,     \n" +
                "		`checkinTime`,     \n" +
                "		`checkoutTime`,     \n" +
                "		`woentrytype`,     \n" +
                "		`isSetup`     \n" +
                "		FROM `workorder_trans` AS `woTransDetails`    \n" +
                "			WHERE (`woTransDetails`.`deletedAt` IS NULL     \n" +
                "				AND (`woTransDetails`.`woOPID` = pWOOPID    \n" +
                "				AND `woTransDetails`.`woentrytype` = 'T'     \n" +
                "				AND `woTransDetails`.`checkoutTime` IS NULL)    \n" +
                "			)     \n" +
                "		AND     \n" +
                "		(     \n" +
                "			SELECT `woTransID` FROM `workorder_trans_empinout` AS `Workorder_Trans_Empinout`     \n" +
                "			WHERE (`Workorder_Trans_Empinout`.`woTransID` = `woTransDetails`.`woTransID`     \n" +
                "				AND (`Workorder_Trans_Empinout`.`deletedAt` IS NULL     \n" +
                "					AND (`Workorder_Trans_Empinout`.`woTransID` = `woTransDetails`.`woTransID`     \n" +
                "						AND `Workorder_Trans_Empinout`.`employeeID` = pEmployeeID    \n" +
                "						AND `Workorder_Trans_Empinout`.`checkoutTime` IS NULL)    \n" +
                "						)    \n" +
                "				) LIMIT 1     \n" +
                "			) IS NOT NULL LIMIT 1;    \n" +
                "  \n" +
                "	SELECT * FROM temp_wo_trans;    \n" +
                "	SELECT woTransID INTO @pwoTransID FROM temp_wo_trans;    \n" +
                "	/****************************************** 1.Get WO Transaction Details *******************************************/    \n" +
                "  \n" +
                "	/****************************************** 2.Get WO Transaction With Employee CheckIn-CheckOut and Pause/Resume Details *******************************************/    \n" +
                "	SELECT woOPEmp.woID,    \n" +
                "		woOPEmp.opID,    \n" +
                "		woOPEmp.employeeID,    \n" +
                "		woOPEmp.woOPID,    \n" +
                "		emp.firstName,    \n" +
                "		emp.lastName,    \n" +
                "		woOPEmpInOut.woTransID,    \n" +
                "		woOPEmpInOut.woTransinoutID,    \n" +
                "		woOPEmpInOut.checkinTime,    \n" +
                "		woOPEmpInOut.checkoutTime,    \n" +
                "		woOPEmpInOut.isPaused,    \n" +
                "		woOPEmpPauseDet.woTransemppausedID,    \n" +
                "		woOPEmpPauseDet.pausedTime FROM workorder_operation_employee woOPEmp    \n" +
                "	LEFT JOIN workorder_trans_empinout woOPEmpInOut     \n" +
                "	ON woOPEmp.employeeID = woOPEmpInOut.employeeID     \n" +
                "	AND (woOPEmp.deletedAt IS NULL     \n" +
                "		AND woOPEmpInOut.woTransID = @pwoTransID    \n" +
                "		AND woOPEmpInOut.woOPID = woOPEmp.woOPID    \n" +
                "		AND `woOPEmpInOut`.`checkoutTime` IS NULL)    \n" +
                "  \n" +
                "	LEFT JOIN workorder_trans_emp_pausedet woOPEmpPauseDet     \n" +
                "	ON  woOPEmpPauseDet.woTransinoutID = woOPEmpInOut.woTransinoutID     \n" +
                "	AND (woOPEmpPauseDet.deletedAt IS NULL    \n" +
                "		AND woOPEmpPauseDet.resumeTime IS NULL)    \n" +
                "  \n" +
                "	LEFT JOIN employees emp     \n" +
                "	ON emp.id = woOPEmp.employeeID     \n" +
                "	AND (emp.isActive = TRUE     \n" +
                "		AND emp.deletedAt IS NULL)    \n" +
                "  \n" +
                "	WHERE woOPEmp.woOPID = pWOOPID AND woOPEmp.woID = pWOID AND woOPEmp.deletedAt IS NULL;    \n" +
                "	/****************************************** 2.Get WO Transaction With Employee CheckIn-CheckOut and Pause/Resume Details *******************************************/    \n" +
                "  \n" +
                "	/********************************* 3.current data ****************************************************/	    \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);    \n" +
                "	/********************************* 3.current data ****************************************************/	    \n" +
                "  \n" +
                "	/********************************** 4.current data ***************************************************/    \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, @pwoTransID);    \n" +
                "	/********************************** 4.current data ***************************************************/    \n" +
                "  \n" +
                "	SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";   \n" +
                "	/****************************************** 5.Get Active Operation Details from current workorder *******************************************/    \n" +
                "	SELECT woop.opName,     \n" +
                "		woop.opNumber,      \n" +
                "		woop.opVersion,    \n" +
                "		woop.isTeamOperation,     \n" +
                "		woop.isStopOperation,     \n" +
                "		wo.woVersion,    \n" +
                "		wo.woNumber,    \n" +
                "		wo.isStopWorkorder,   \n" +
                "		wo.partID,  \n" +
                "		comp.mfgPN,  \n" +
                "		comp.nickName,  \n" +
                "		comp.PIDCode,  \n" +
                "		comp.rev,  \n" +
                "		CONCAT(@RFQInternalPrefix1, '-',IFNULL(`comp`.`liveInternalVersion`,0)) liveInternalVersion,  \n" +
                "		(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `comp`.`RoHSStatusID`) `rohsIcon`,     \n" +
                "		woOPEmpInOut.woTransID,    \n" +
                "		woOPEmpInOut.woTransinoutID,    \n" +
                "		woOPEmpInOut.woID,    \n" +
                "		woOPEmpInOut.opID,    \n" +
                "		woOPEmpInOut.woOPID,    \n" +
                "		woOPEmpInOut.employeeID,    \n" +
                "		woOPEmpInOut.checkinTime,    \n" +
                "		woOPEmpInOut.checkoutTime,    \n" +
                "		woOPEmpInOut.isPaused  \n" +
                "		FROM workorder_trans_empinout woOPEmpInOut     \n" +
                "	LEFT JOIN workorder_operation woop    \n" +
                "	ON woop.woopid = woOPEmpInOut.woopid    \n" +
                "	AND woop.deletedAt IS NULL    \n" +
                "  \n" +
                "	LEFT JOIN workorder wo    \n" +
                "	ON wo.woid = woOPEmpInOut.woid    \n" +
                "	AND wo.deletedAt IS NULL    \n" +
                "  \n" +
                "	LEFT JOIN component comp  \n" +
                "	ON wo.partID = comp.id  \n" +
                "	AND comp.deletedAt IS NULL  \n" +
                "  \n" +
                "	WHERE woOPEmpInOut.employeeID=pEmployeeID     \n" +
                "	AND woOPEmpInOut.woID = pWOID  \n" +
                "	AND woOPEmpInOut.checkOutTime IS NULL    \n" +
                "	AND woOPEmpInOut.deletedAt IS NULL;    \n" +
                "	/****************************************** 5.Get Active Operation Details from current workorder   *******************************************/    \n" +
                "  \n" +
                "  \n" +
                "	/****************************************** 6.Get Paused Operation Details from all workorder *******************************************/    \n" +
                "	SELECT woop.opName,     \n" +
                "		woop.opNumber,      \n" +
                "		woop.opVersion,    \n" +
                "		woop.isTeamOperation,     \n" +
                "		woop.isStopOperation,     \n" +
                "		wo.woVersion,    \n" +
                "		wo.woNumber,    \n" +
                "		wo.isStopWorkorder,   \n" +
                "		wo.partID,  \n" +
                "		comp.mfgPN,  \n" +
                "		comp.nickName,  \n" +
                "		comp.PIDCode,  \n" +
                "		comp.rev,  \n" +
                "		(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `comp`.`RoHSStatusID`) `rohsIcon`,    \n" +
                "		CONCAT(@RFQInternalPrefix1, '-',IFNULL(`comp`.`liveInternalVersion`,0)) liveInternalVersion,   \n" +
                "		woOPEmpInOut.woTransID,    \n" +
                "		woOPEmpInOut.woTransinoutID,    \n" +
                "		woOPEmpInOut.woID,    \n" +
                "		woOPEmpInOut.opID,    \n" +
                "		woOPEmpInOut.woOPID,    \n" +
                "		woOPEmpInOut.employeeID,    \n" +
                "		woOPEmpInOut.checkinTime,    \n" +
                "		woOPEmpInOut.checkoutTime,    \n" +
                "		woOPEmpInOut.isPaused,    \n" +
                "		woOPEmpPauseDet.woTransemppausedID,    \n" +
                "		woOPEmpPauseDet.pausedTime    \n" +
                "	FROM workorder_trans_emp_pausedet woOPEmpPauseDet  \n" +
                "  \n" +
                "	LEFT JOIN workorder_trans_empinout woOPEmpInOut  \n" +
                "	ON  woOPEmpPauseDet.woTransinoutID = woOPEmpInOut.woTransinoutID     \n" +
                "	AND (woOPEmpInOut.deletedAt IS NULL    \n" +
                "		AND woOPEmpInOut.checkOutTime IS NULL  \n" +
                "		AND woOPEmpInOut.employeeID=pEmployeeID)    \n" +
                "  \n" +
                "	LEFT JOIN workorder_operation woop    \n" +
                "	ON woop.woopid = woOPEmpInOut.woopid    \n" +
                "	AND woop.deletedAt IS NULL    \n" +
                "  \n" +
                "	LEFT JOIN workorder wo    \n" +
                "	ON wo.woid = woOPEmpInOut.woid    \n" +
                "	AND wo.deletedAt IS NULL    \n" +
                "  \n" +
                "	LEFT JOIN component comp  \n" +
                "	ON wo.partID = comp.id  \n" +
                "	AND comp.deletedAt IS NULL  \n" +
                "  \n" +
                "	WHERE woOPEmpPauseDet.deletedAt IS NULL    \n" +
                "		AND woOPEmpPauseDet.resumeTime IS NULL;  \n" +
                "	/****************************************** 6.Get Paused Operation Details from all workorder  *******************************************/    \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerPageDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerPageDetails`(              \n" +
                "    IN pWOOPID INT(11),    \n" +
                "    IN pEmployeeID INT(11)    \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "	SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/    \n" +
                "	SELECT     \n" +
                "	`woop`.`woOPID`,     \n" +
                "	`woop`.`woID`,     \n" +
                "	`woop`.`opID`,     \n" +
                "	`woop`.`opName`,     \n" +
                "	`woop`.`opNumber`,     \n" +
                "	`woop`.`opStatus`,     \n" +
                "	`woop`.`opDoes`,     \n" +
                "	`woop`.`opDonts`,     \n" +
                "	`woop`.`opDescription`,     \n" +
                "	`woop`.`opWorkingCondition`,     \n" +
                "	`woop`.`opManagementInstruction`,     \n" +
                "	`woop`.`opDeferredInstruction`,     \n" +
                "	`woop`.`colorCode`,     \n" +
                "	`woop`.`qtyControl`,     \n" +
                "	`woop`.`isIssueQty`,     \n" +
                "	`woop`.`opVersion`,     \n" +
                "	`woop`.`isRework`,     \n" +
                "	`woop`.`isNoClean`,     \n" +
                "	`woop`.`isWatersoluble`,     \n" +
                "	`woop`.`isTeamOperation`,     \n" +
                "	`woop`.`isStopOperation`,     \n" +
                "	`woop`.`firstPcsModel`,     \n" +
                "	`woop`.`firstPcsConclusion`,     \n" +
                "	`woop`.`firstPcsStatus`,     \n" +
                "	`woop`.`isPreProgrammingComponent`,      \n" +
                "	`opType`.`gencCategoryName` AS `operationType`,     \n" +
                "	`woCluster`.`isParellelOperation` AS `isParellelOperation`,    \n" +
                "	`wo`.`woID` AS `woID`,     \n" +
                "	`wo`.`woNumber` AS `woNumber`,     \n" +
                "	`wo`.`buildQty` AS `buildQty`,     \n" +
                "	`wo`.`RoHSStatusID` AS `RoHSStatusID`,     \n" +
                "	`wo`.`isNoClean` AS `isNoClean`,     \n" +
                "	`wo`.`isWatersoluble` AS `isWatersoluble`,     \n" +
                "	`wo`.`woVersion` AS `woVersion`,     \n" +
                "	`wo`.`woStatus` AS `woStatus`,     \n" +
                "	`wo`.`isOperationTrackBySerialNo` AS `isOperationTrackBySerialNo`,     \n" +
                "	`wo`.`isStopWorkorder` AS `isStopWorkorder`,     \n" +
                "	`componentAssembly`.`mfgPN` AS `mfgPN`,     \n" +
                "	`componentAssembly`.`PIDCode` AS `PIDCode`,     \n" +
                "	`componentAssembly`.`rev` AS `rev`,     \n" +
                "	`componentAssembly`.`nickName` AS `nickName`    \n" +
                "	FROM `workorder_operation` AS `woop`     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_operation_cluster` AS `woOPCluster`     \n" +
                "	ON `woop`.`woOPID` = `woOPCluster`.`woOPID`     \n" +
                "	AND `woOPCluster`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_cluster` AS `woCluster`     \n" +
                "	ON `woOPCluster`.`clusterID` = `woCluster`.`clusterID`     \n" +
                "	AND `woCluster`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder` AS `wo`    \n" +
                "	ON `woop`.`woID` = `wo`.`woID`     \n" +
                "	AND `wo`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `component` AS `componentAssembly`     \n" +
                "	ON `wo`.`partID` = `componentAssembly`.`id`     \n" +
                "	AND `componentAssembly`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `opType`     \n" +
                "	ON `woop`.`operationTypeID` = `opType`.`gencCategoryID`     \n" +
                "	AND `opType`.`deletedAt` IS NULL     \n" +
                "	WHERE (`woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pWOOPID);    \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/    \n" +
                "  \n" +
                "	/************************************** 2.Get Employee Details *****************************************/    \n" +
                "	SELECT     \n" +
                "	`Employee`.`id`,     \n" +
                "	`Employee`.`firstName`,     \n" +
                "	`Employee`.`lastName`,     \n" +
                "	`Employee`.`profileImg`,     \n" +
                "	`dept`.`deptName` AS `deptName`,    \n" +
                "	`empTitle`.`gencCategoryName` AS `titleName`    \n" +
                "	FROM `employees` AS `Employee`     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `employee_department` AS `empDept`     \n" +
                "	ON `Employee`.`id` = `empDept`.`employeeID`     \n" +
                "	AND (`empDept`.`deletedAt` IS NULL AND `empDept`.`isDefault` = TRUE)     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `department` AS `dept`     \n" +
                "	ON `empDept`.`departmentID` = `dept`.`deptID`     \n" +
                "	AND `dept`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `empTitle`     \n" +
                "	ON `empDept`.`titleID` = `empTitle`.`gencCategoryID`     \n" +
                "	AND `empTitle`.`deletedAt` IS NULL     \n" +
                "  \n" +
                "	WHERE (`Employee`.`deletedAt` IS NULL AND (`Employee`.`id` = pEmployeeID AND `Employee`.`isDeleted` = FALSE));    \n" +
                "	/****************************************** Get 2.Employee Details *******************************************/    \n" +
                "  \n" +
                "	/************************************** Get 3.Workorder Operation List ***********************************************/    \n" +
                "	SELECT     \n" +
                "		a.`woID` AS `woID`,     \n" +
                "		a.`opID` AS `opID`,     \n" +
                "		a.`woOPID` AS `woOPID`,     \n" +
                "		a.`opNumber` AS `opNumber`,     \n" +
                "		a.`opName` AS `opName`,     \n" +
                "		a.`isNoClean` AS `isNoClean`,     \n" +
                "		a.`isWatersoluble` AS `isWatersoluble`,     \n" +
                "		a.`isRework` AS `isRework`,     \n" +
                "		a.`operationTypeID` AS `operationTypeID`,  \n" +
                "		(SELECT isParellelOperation FROM workorder_cluster WHERE clusterID=b.clusterID) isParellelOperation  \n" +
                "	FROM workorder_operation a    \n" +
                "	LEFT JOIN workorder_operation_cluster b   \n" +
                "	ON b.woopid = a.woopid AND b.deletedAt IS NULL  \n" +
                "	WHERE a.deletedAt IS NULL AND a.woID = @pwoID;     \n" +
                "	/**************************************** Get 3.Workorder Operation List *********************************************/    \n" +
                "  \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	    \n" +
                "	SELECT     \n" +
                "	`woTransHold`.`reason` AS `reason`,     \n" +
                "	`woTransHold`.`resumeReason` AS `resumeReason`,     \n" +
                "	`woTransHold`.`startDate` AS `woStartDate`,     \n" +
                "	`woTransHold`.`holdEmployeeId` AS `woHoldEmployeeId`,     \n" +
                "	`woTransHoldEmployee`.`firstName` AS `woHoldEmployeeFirstName`,     \n" +
                "	`woTransHoldEmployee`.`lastName` AS `woHoldEmployeeLastName`,     \n" +
                "	`woTransHoldEmployee`.`initialName` AS `woHoldBy`    \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woTransHold`     \n" +
                "	LEFT OUTER JOIN `employees` AS `woTransHoldEmployee`     \n" +
                "	ON `woTransHold`.`holdEmployeeId` = `woTransHoldEmployee`.`id`     \n" +
                "	AND `woTransHoldEmployee`.`deletedAt` IS NULL     \n" +
                "	WHERE `woTransHold`.`woID` = @pwoID AND (`woTransHold`.`deletedAt` IS NULL     \n" +
                "	AND `woTransHold`.`endDate` IS NULL);    \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	    \n" +
                "  \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	    \n" +
                "	SELECT      \n" +
                "	`woOPTransHold`.`woTransOpHoldUnholdId` AS `woTransOpHoldUnholdId`,     \n" +
                "	`woOPTransHold`.`reason` AS `reason`,     \n" +
                "	`woOPTransHold`.`resumeReason` AS `resumeReason`,     \n" +
                "	`woOPTransHold`.`startDate` AS `opStartDate`,     \n" +
                "	`woOPTransHold`.`endDate` AS `opEndDate`,     \n" +
                "	`woOPTransHold`.`holdEmployeeId` AS `woopHoldEmployeeId`,    \n" +
                "	`woOPTransHoldEmployee`.`firstName` AS `woopHoldEmployeesFirstName`,     \n" +
                "	`woOPTransHoldEmployee`.`lastName` AS `woopHoldEmployeesLastName`,     \n" +
                "	`woOPTransHoldEmployee`.`initialName` AS `opHoldBy`    \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woOPTransHold`     \n" +
                "	LEFT OUTER JOIN `employees` AS `woOPTransHoldEmployee`     \n" +
                "	ON `woOPTransHold`.`holdEmployeeId` = `woOPTransHoldEmployee`.`id`     \n" +
                "	AND `woOPTransHoldEmployee`.`deletedAt` IS NULL     \n" +
                "	WHERE `woOPTransHold`.`woOPID` = pWOOPID     \n" +
                "	AND (`woOPTransHold`.`deletedAt` IS NULL     \n" +
                "	AND `woOPTransHold`.`endDate` IS NULL);    \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	    \n" +
                "  \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction, 7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/    \n" +
                "	CALL Sproc_GetTravelerLatestDetails (pWOOPID, pEmployeeID, @pWOID );    \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction,7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/    \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                    \n" +
                "    IN pcodeDigest VARCHAR(1000),                \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN          \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;              \n" +
                "DECLARE whereClause2 VARCHAR(255) ;     \n" +
                "  \n" +
                "/************************ Save Employee Details in Temp Table ************************************/    \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;            \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (            \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),            \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)            \n" +
                ");            \n" +
                "INSERT INTO temp_sproc_employeedetails       \n" +
                "SELECT emp.id, emp.firstname, emp.lastname,             \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName            \n" +
                "FROM employees emp            \n" +
                "LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.deletedAt IS NULL AND empdep.isdefault = 1)      \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL            \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.deletedAt IS NULL)     \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1;        \n" +
                "/************************ Create Temp Table for Workorder Details ************************************/    \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;            \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (            \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),            \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),            \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,            \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),            \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(100),	imageURL VARCHAR(1000),            \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),            \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			            \n" +
                "		poNumber VARCHAR(1000), 	partID INT(11)	            \n" +
                ");      \n" +
                "/************************ If user is not admin than whereclause ************************************/          \n" +
                "IF pisUserAdmin = 1 THEN            \n" +
                "	SET whereClause1 = '';              \n" +
                "ELSE            \n" +
                "	SET whereClause1 = ' AND wo.woid IN (SELECT woe.woID FROM workorder_operation_employee woe             \n" +
                "WHERE woe.deletedAt IS NULL AND woe.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)            \n" +
                ")';            \n" +
                "END IF;       \n" +
                "/************************ Get Prefix values from system configuration ************************************/              \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";            \n" +
                "/************************ save all workorder details in temp table for further use ************************************/              \n" +
                "SET @SQLStatement1 = CONCAT(\"INSERT INTO temp_sproc_workorderdetails            \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 						wo.woVersion,            \n" +
                "	wo.buildQty,		wo.woStatus,							wo.isClusterApplied,             \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,						wo.createdAt,            \n" +
                "	c.mfgPN, 		c.PIDCode, 							c.rev,             \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,            \n" +
                "	rohs.name, 		rohs.rohsIcon,							NULL,            \n" +
                "	NULL,			NULL,								NULL,            \n" +
                "	NULL,			wo.partID           \n" +
                "FROM workorder wo            \n" +
                "LEFT JOIN component c ON wo.partID = c.id             \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id             \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6) \", whereClause1);                                        \n" +
                "PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "EXECUTE query1;                                        \n" +
                "DEALLOCATE PREPARE query1;      \n" +
                "/************************ 1. Get all employee details ************************************/              \n" +
                "SELECT * FROM temp_sproc_employeedetails;            \n" +
                "/************************ 1. Get all employee details ************************************/              \n" +
                "/************************ save all salesorder details in temp table for further use ************************************/     \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;            \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (            \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)            \n" +
                ");            \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails            \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID             \n" +
                "FROM workorder_salesorder_details wosd             \n" +
                "WHERE wosd.deletedAt IS NULL             \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)            \n" +
                "GROUP BY wosd.woID;       \n" +
                "/************************ save all certificate details in temp table for further use ************************************/     \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;            \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (            \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),            \n" +
                "		fullname VARCHAR(255),		woID INT(11)            \n" +
                ");            \n" +
                "INSERT INTO temp_sproc_certificatedetails            \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID             \n" +
                "	FROM temp_sproc_workorderdetails tempWO            \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL            \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL            \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL            \n" +
                "	GROUP BY tempWO.woID;            \n" +
                "/************************ 2.1 Update details in workorder details from certificate tables ************************************/              \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,             \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result            \n" +
                "SET tempWO1.colorcode = result.colorcode,            \n" +
                "tempWO1.classname = result.classname,            \n" +
                "tempWO1.standardName = result.fullname            \n" +
                "WHERE tempWO1.woID = result.woID;            \n" +
                "/************************ 2.2 Update details in workorder details from sales order tables ************************************/              \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,            \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1            \n" +
                "SET tempWO1.poQty = result1.poQty,            \n" +
                "tempWO1.poNumber = result1.refPONumber            \n" +
                "WHERE tempWO1.woID = result1.woID;            \n" +
                "/************************ 2. Get all workroder list ************************************/              \n" +
                "SELECT * FROM temp_sproc_workorderdetails;            \n" +
                "/************************ 2. Get all workroder list ************************************/              \n" +
                "/************************ 3. Get all active operation list ************************************/              \n" +
                "IF pisUserAdmin = 1 THEN            \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';              \n" +
                "ELSE            \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';            \n" +
                "END IF;         \n" +
                "  \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,             \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,             \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation            \n" +
                "FROM workorder_trans_empinout wte            \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL             \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL            \n" +
                "WHERE wte.deletedAt IS NULL             \n" +
                "AND wte.checkoutTime IS NULL             \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                    \n" +
                " /************************ 3. Get all active operation list ************************************/              \n" +
                "  \n" +
                "PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "EXECUTE query2;                                        \n" +
                "DEALLOCATE PREPARE query2;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ResumeAllEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_ResumeAllEmployeeForOperation`(        \n" +
                "	IN pwoOPID INT(11),        \n" +
                "	IN pwoTransID INT(11),    \n" +
                "	IN pUpdatedBy VARCHAR(255)       \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	DECLARE lvwoNumber VARCHAR(255);        \n" +
                "	DECLARE lvopName VARCHAR(255);        \n" +
                "	DECLARE lvempNames VARCHAR(255);        \n" +
                "	DECLARE lvemployeeID INT(11);        \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);        \n" +
                "	DECLARE lvwoOPID INT(11);    \n" +
                "  \n" +
                "	SELECT @pResumeTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TeamOpEmpListToResume_Temp AS    \n" +
                "		SELECT woTransinoutID,employeeID FROM workorder_trans_empinout     \n" +
                "		WHERE deletedAt IS NULL    \n" +
                "		AND woOPID = pwoOPID AND woTransID = pwoTransID AND checkinTime IS NOT NULL     \n" +
                "		AND checkoutTime IS NULL AND isPaused = 1;      \n" +
                "  \n" +
                "	UPDATE workorder_trans_empinout	 SET isPaused = 0, updatedBy = pUpdatedBy         \n" +
                "	WHERE woTransinoutID IN (SELECT woTransinoutID FROM TeamOpEmpListToResume_Temp);     \n" +
                "  \n" +
                "	UPDATE workorder_trans_emp_pausedet         \n" +
                "	SET resumeTime=@pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,@pResumeTime), updatedBy = pUpdatedBy         \n" +
                "	WHERE woTransinoutID IN (SELECT woTransinoutID FROM TeamOpEmpListToResume_Temp) AND resumeTime IS NULL;        \n" +
                "  \n" +
                "	/* [S] - Add Time line log for resume operation employee to work order operation */        \n" +
                "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),        \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID        \n" +
                "		INTO lvwoNumber,lvopName,lvopNumber,lvwoOPID        \n" +
                "	FROM workorder_trans_empinout  wteio        \n" +
                "	WHERE wteio.woTransinoutID = (SELECT woTransinoutID FROM TeamOpEmpListToResume_Temp LIMIT 1);        \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(CONCAT(firstName,\" \",lastName)) INTO lvempNames FROM employees     \n" +
                "	WHERE id IN (SELECT employeeID FROM TeamOpEmpListToResume_Temp);    \n" +
                "  \n" +
                "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		        \n" +
                "  \n" +
                "	SET @pEventTitle = CONCAT(\"Team member resume for work order operation\");        \n" +
                "	SET @pEventDescription = CONCAT('Team member \"',lvempNames,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of         \n" +
                "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');         \n" +
                "	CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',    \n" +
                "		(SELECT GROUP_CONCAT(woTransinoutID) FROM TeamOpEmpListToResume_Temp),5.10,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			        \n" +
                "	/* [E] - Add Time line log for resume operation employee to work order operation */    \n" +
                "  \n" +
                "	 DROP TEMPORARY TABLE TeamOpEmpListToResume_Temp;       \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (362,'2.00','V1','Traveler and Header Page Changes - Vaibhav'," + userid + ");"
            );
            break;
        case 362:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_resumeEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_resumeEmployeeForOperation`(        \n" +
                "	IN pWOTransemppausedID INT,        \n" +
                "	IN pWOTransinoutID INT,        \n" +
                "	IN pUpdatedBy VARCHAR(255)        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	DECLARE lvwoNumber VARCHAR(255);        \n" +
                "	DECLARE lvopName VARCHAR(255);        \n" +
                "	DECLARE lvempName VARCHAR(255);        \n" +
                "	DECLARE lvemployeeID INT(11);        \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);        \n" +
                "	DECLARE lvwoOPID INT(11);        \n" +
                "	DECLARE lEmpResumeDetailCnt INT(11);    \n" +
                "	DECLARE pResumeTime DATETIME;    \n" +
                "	SET pResumeTime = CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');      \n" +
                "  \n" +
                "	-- create temporary table for error          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;           \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error          \n" +
                "	(          \n" +
                "	     errorText NVARCHAR(2000)          \n" +
                "	);          \n" +
                "  \n" +
                "	SET lEmpResumeDetailCnt = 0;    \n" +
                "	SELECT COUNT(*) INTO lEmpResumeDetailCnt FROM workorder_trans_empinout WHERE woTransinoutID = pWOTransinoutID AND isPaused = 0;      \n" +
                "	IF (lEmpResumeDetailCnt = 0) THEN		      \n" +
                "		UPDATE workorder_trans_empinout	        \n" +
                "		SET isPaused = 0, updatedBy = pUpdatedBy         \n" +
                "		WHERE woTransinoutID = pWOTransinoutID;        \n" +
                "  \n" +
                "		UPDATE workorder_trans_emp_pausedet         \n" +
                "		SET resumeTime=pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,pResumeTime), updatedBy = pUpdatedBy         \n" +
                "		WHERE woTransinoutID = pWOTransinoutID AND woTransemppausedID= pWOTransemppausedID AND resumeTime IS NULL;        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for resume operation employee to work order operation */        \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),        \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,        \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID        \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID        \n" +
                "		FROM workorder_trans_empinout  wteio        \n" +
                "		WHERE wteio.woTransinoutID = pWOTransinoutID        \n" +
                "		;        \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		        \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee resume for work order operation\");        \n" +
                "		SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of         \n" +
                "			work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');         \n" +
                "		CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.10,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			        \n" +
                "		/* [E] - Add Time line log for resume operation employee to work order operation */	        \n" +
                "	ELSE     \n" +
                "		INSERT INTO temp_operation_error (errorText) VALUES ('Operation already resumed.');       \n" +
                "	END IF;    \n" +
                "	SELECT errorText FROM temp_operation_error;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (363,'2.00','V1','Resume Employee Case - Vaibhav '," + userid + ");"
            );
            break;
        case 363:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                      \n" +
                "	IN prfqAssyID INT(11),    \n" +
                "    IN pAssyQuoteSubmittedID INT(11)    \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "		# select list for quote summary details of last submitted quote        \n" +
                "			select unitPrice, qty, turnTime,    \n" +
                "            (case when qo.turnType = 'B' then (turnTime+(2*(turnTime/5)))    \n" +
                "            when qo.turnType = 'D' then turntime    \n" +
                "            when qo.turnType = 'W' then (turntime*7) end) turntimedays,    \n" +
                "  \n" +
                "            (case when qo.turnType = 'B' then 'Business Days'    \n" +
                "            when qo.turnType = 'D' then 'Week Days'    \n" +
                "            when qo.turnType = 'W' then 'Week' end) turnType    \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,        \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime        \n" +
                "			from rfq_assy_quote_submitted_assydetail qo        \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID        \n" +
                "			where refSubmittedQuoteID = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy         \n" +
                "			select ra.id rfqAssyID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.mfgName,cu.mfgCode,        \n" +
                "            rf.customerid,rqs.custBillingAddressID, ifnull(rqs.custTermsID, cu.custTermsID) as custTermsID, rqs.custShippingAddressID, rqs.BOMIssues, rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID,        \n" +
                "            ra.assyNote,rf.quoteNote, rt.name RFQType, jt.name JobType, rqs.OtherNotes,ra.isSummaryComplete,concat(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress        \n" +
                "            from rfq_assemblies ra       \n" +
                "            join rfq_assemblies_quotation_submitted rqs on rqs.rfqAssyID = ra.id    \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "            join rfqtype rt on rt.id = ra.rfqTypeID and rt.isDeleted = 0    \n" +
                "            join jobtype jt on jt.id = ra.jobTypeID and jt.isDeleted = 0    \n" +
                "			join mfgcodemst cu on cu.id = rf.customerid and cu.isDeleted = 0    \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0   \n" +
                "            left join users su on su.id = ra.quoteSubmittedBy   \n" +
                "			where ra.id= prfqAssyID and rqs.id = pAssyQuoteSubmittedID;    \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary        \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and id = pAssyQuoteSubmittedID ;        \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote        \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd        \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0        \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0        \n" +
                "			where csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary        \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0        \n" +
                "            and RefSubmittedQuoteID = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "		# select letest submited quote summary detail    \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (364,'2.00','V1','Quote summary detail SP changes  - shirish'," + userid + ");"
            );
            break;
        case 364:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(              \n" +
                "	IN pwoID INT(11)  ,              \n" +
                "	IN pwoOPID INT(11)                                                                                 \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";                \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN              \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,           \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,           \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`partID`,                    \n" +
                "			`wocerti`.woAllStandardsWithClass ,          \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL               \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,              \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL               \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,              \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,           \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  `ca`.specialNote ,           \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon`, salesorddet.totalpoQty, salesorddet.poQty ,              \n" +
                "   			 salesorddet.totalmrpQty, salesorddet.mrpQty, salesorddet.poNumber , salesorddet.salesOrderNumber              \n" +
                "		FROM workorder AS `wo`               \n" +
                "		LEFT OUTER JOIN         \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''      \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END      \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass         \n" +
                "			FROM `workorder_certification` a        \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID        \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	        \n" +
                "			) AS `wocerti`        \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`          \n" +
                "		LEFT OUTER JOIN `component` AS `ca`              \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                  \n" +
                "		LEFT OUTER JOIN           \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,              \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,              \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber              \n" +
                "			FROM `workorder_salesorder_details` AS `wsd`               \n" +
                "			INNER JOIN `salesorderdet` AS `sod`               \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL               \n" +
                "			INNER JOIN `salesordermst` AS `som`               \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL               \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet              \n" +
                "			ON salesorddet.woID = `wo`.`woID`              \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID              \n" +
                "		GROUP BY `wo`.`woID` ;              \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN              \n" +
                "		SELECT           \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,           \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,           \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`partID`,          \n" +
                "			 `wocerti`.woAllStandardsWithClass ,          \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL               \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,              \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL               \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,             \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion,     \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,     \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent,     \n" +
                "			`woop`.colorCode,     \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`, CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,          \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,           \n" +
                "			`ca`.`RoHSStatusID`, (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,              \n" +
                "			 salesorddet.totalpoQty, salesorddet.poQty, salesorddet.totalmrpQty,           \n" +
                "			 salesorddet.mrpQty, salesorddet.poNumber, salesorddet.salesOrderNumber,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID   \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=`woop`.`woOPID` AND `woc`.`deletedAt` IS NULL)  \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = `wo`.woID  \n" +
                "			) isParellelOperation    \n" +
                "		FROM workorder AS `wo`            \n" +
                "		LEFT OUTER JOIN         \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''      \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END      \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass         \n" +
                "			FROM `workorder_certification` a        \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID        \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	        \n" +
                "			) AS `wocerti`		        \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`         \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`              \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID            \n" +
                "		LEFT OUTER JOIN `component` AS `ca`              \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                  \n" +
                "		LEFT OUTER JOIN           \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,              \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,              \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber              \n" +
                "  			FROM `workorder_salesorder_details` AS `wsd`               \n" +
                "			INNER JOIN `salesorderdet` AS `sod`               \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL               \n" +
                "			INNER JOIN `salesordermst` AS `som`               \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL               \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet              \n" +
                "		ON salesorddet.woID = `wo`.`woID`              \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID              \n" +
                "		GROUP BY `wo`.`woID` ;              \n" +
                "	END IF ;              \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerPageDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerPageDetails`(                \n" +
                "    IN pWOOPID INT(11),      \n" +
                "    IN pEmployeeID INT(11)      \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;      \n" +
                "  \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/      \n" +
                "	SELECT       \n" +
                "	`woop`.`woOPID`,       \n" +
                "	`woop`.`woID`,       \n" +
                "	`woop`.`opID`,       \n" +
                "	`woop`.`opName`,       \n" +
                "	`woop`.`opNumber`,       \n" +
                "	`woop`.`opStatus`,       \n" +
                "	`woop`.`opDoes`,       \n" +
                "	`woop`.`opDonts`,       \n" +
                "	`woop`.`opDescription`,       \n" +
                "	`woop`.`opWorkingCondition`,       \n" +
                "	`woop`.`opManagementInstruction`,       \n" +
                "	`woop`.`opDeferredInstruction`,       \n" +
                "	`woop`.`colorCode`,       \n" +
                "	`woop`.`qtyControl`,       \n" +
                "	`woop`.`isIssueQty`,       \n" +
                "	`woop`.`opVersion`,       \n" +
                "	`woop`.`isRework`,       \n" +
                "	`woop`.`isNoClean`,       \n" +
                "	`woop`.`isWatersoluble`,       \n" +
                "	`woop`.`isTeamOperation`,       \n" +
                "	`woop`.`isStopOperation`,       \n" +
                "	`woop`.`firstPcsModel`,       \n" +
                "	`woop`.`firstPcsConclusion`,       \n" +
                "	`woop`.`firstPcsStatus`,       \n" +
                "	`woop`.`isPreProgrammingComponent`,        \n" +
                "	`opType`.`gencCategoryName` AS `operationType`,       \n" +
                "	`woCluster`.`isParellelOperation` AS `isParellelOperation`,      \n" +
                "	`wo`.`woID` AS `woID`,       \n" +
                "	`wo`.`woNumber` AS `woNumber`,       \n" +
                "	`wo`.`buildQty` AS `buildQty`,       \n" +
                "	`wo`.`RoHSStatusID` AS `RoHSStatusID`,       \n" +
                "	`wo`.`isNoClean` AS `isNoClean`,       \n" +
                "	`wo`.`isWatersoluble` AS `isWatersoluble`,       \n" +
                "	`wo`.`woVersion` AS `woVersion`,       \n" +
                "	`wo`.`woStatus` AS `woStatus`,       \n" +
                "	`wo`.`isOperationTrackBySerialNo` AS `isOperationTrackBySerialNo`,       \n" +
                "	`wo`.`isStopWorkorder` AS `isStopWorkorder`,       \n" +
                "	`componentAssembly`.`mfgPN` AS `mfgPN`,       \n" +
                "	`componentAssembly`.`PIDCode` AS `PIDCode`,       \n" +
                "	`componentAssembly`.`rev` AS `rev`,       \n" +
                "	`componentAssembly`.`nickName` AS `nickName`      \n" +
                "	FROM `workorder_operation` AS `woop`       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_operation_cluster` AS `woOPCluster`       \n" +
                "	ON `woop`.`woOPID` = `woOPCluster`.`woOPID`       \n" +
                "	AND `woOPCluster`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_cluster` AS `woCluster`       \n" +
                "	ON `woOPCluster`.`clusterID` = `woCluster`.`clusterID`       \n" +
                "	AND `woCluster`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder` AS `wo`      \n" +
                "	ON `woop`.`woID` = `wo`.`woID`       \n" +
                "	AND `wo`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `component` AS `componentAssembly`       \n" +
                "	ON `wo`.`partID` = `componentAssembly`.`id`       \n" +
                "	AND `componentAssembly`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `opType`       \n" +
                "	ON `woop`.`operationTypeID` = `opType`.`gencCategoryID`       \n" +
                "	AND `opType`.`deletedAt` IS NULL       \n" +
                "	WHERE (`woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pWOOPID);      \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/      \n" +
                "  \n" +
                "	/************************************** 2.Get Employee Details *****************************************/      \n" +
                "	SELECT       \n" +
                "	`Employee`.`id`,       \n" +
                "	`Employee`.`firstName`,       \n" +
                "	`Employee`.`lastName`,       \n" +
                "	`Employee`.`profileImg`,       \n" +
                "	`dept`.`deptName` AS `deptName`,      \n" +
                "	`empTitle`.`gencCategoryName` AS `titleName`      \n" +
                "	FROM `employees` AS `Employee`       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `employee_department` AS `empDept`       \n" +
                "	ON `Employee`.`id` = `empDept`.`employeeID`       \n" +
                "	AND (`empDept`.`deletedAt` IS NULL AND `empDept`.`isDefault` = TRUE)       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `department` AS `dept`       \n" +
                "	ON `empDept`.`departmentID` = `dept`.`deptID`       \n" +
                "	AND `dept`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `empTitle`       \n" +
                "	ON `empDept`.`titleID` = `empTitle`.`gencCategoryID`       \n" +
                "	AND `empTitle`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	WHERE (`Employee`.`deletedAt` IS NULL AND (`Employee`.`id` = pEmployeeID AND `Employee`.`isDeleted` = FALSE));      \n" +
                "	/****************************************** Get 2.Employee Details *******************************************/      \n" +
                "  \n" +
                "	/************************************** Get 3.Workorder Operation List ***********************************************/      \n" +
                "	SELECT       \n" +
                "		a.`woID` AS `woID`,       \n" +
                "		a.`opID` AS `opID`,       \n" +
                "		a.`woOPID` AS `woOPID`,       \n" +
                "		a.`opNumber` AS `opNumber`,       \n" +
                "		a.`opName` AS `opName`,       \n" +
                "		a.`isNoClean` AS `isNoClean`,       \n" +
                "		a.`isWatersoluble` AS `isWatersoluble`,       \n" +
                "		a.`isRework` AS `isRework`,       \n" +
                "		a.`operationTypeID` AS `operationTypeID`,    \n" +
                "		(SELECT isParellelOperation FROM workorder_cluster WHERE clusterID=b.clusterID AND deletedAt IS NULL) isParellelOperation,  \n" +
                "		(SELECT COUNT(*) FROM workorder_operation_employee WHERE woid=@pwoID AND woopid=a.woopid AND employeeID=pEmployeeID AND deletedAt IS NULL) operationAssignedCount  \n" +
                "	FROM workorder_operation a      \n" +
                "	LEFT JOIN workorder_operation_cluster b     \n" +
                "	ON b.woopid = a.woopid AND b.deletedAt IS NULL    \n" +
                "	WHERE a.deletedAt IS NULL AND a.woID = @pwoID;       \n" +
                "	/**************************************** Get 3.Workorder Operation List *********************************************/      \n" +
                "  \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	      \n" +
                "	SELECT       \n" +
                "	`woTransHold`.`reason` AS `reason`,       \n" +
                "	`woTransHold`.`resumeReason` AS `resumeReason`,       \n" +
                "	`woTransHold`.`startDate` AS `woStartDate`,       \n" +
                "	`woTransHold`.`holdEmployeeId` AS `woHoldEmployeeId`,       \n" +
                "	`woTransHoldEmployee`.`firstName` AS `woHoldEmployeeFirstName`,       \n" +
                "	`woTransHoldEmployee`.`lastName` AS `woHoldEmployeeLastName`,       \n" +
                "	`woTransHoldEmployee`.`initialName` AS `woHoldBy`      \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woTransHold`       \n" +
                "	LEFT OUTER JOIN `employees` AS `woTransHoldEmployee`       \n" +
                "	ON `woTransHold`.`holdEmployeeId` = `woTransHoldEmployee`.`id`       \n" +
                "	AND `woTransHoldEmployee`.`deletedAt` IS NULL       \n" +
                "	WHERE `woTransHold`.`woID` = @pwoID AND (`woTransHold`.`deletedAt` IS NULL       \n" +
                "	AND `woTransHold`.`endDate` IS NULL);      \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	      \n" +
                "  \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	      \n" +
                "	SELECT        \n" +
                "	`woOPTransHold`.`woTransOpHoldUnholdId` AS `woTransOpHoldUnholdId`,       \n" +
                "	`woOPTransHold`.`reason` AS `reason`,       \n" +
                "	`woOPTransHold`.`resumeReason` AS `resumeReason`,       \n" +
                "	`woOPTransHold`.`startDate` AS `opStartDate`,       \n" +
                "	`woOPTransHold`.`endDate` AS `opEndDate`,       \n" +
                "	`woOPTransHold`.`holdEmployeeId` AS `woopHoldEmployeeId`,      \n" +
                "	`woOPTransHoldEmployee`.`firstName` AS `woopHoldEmployeesFirstName`,       \n" +
                "	`woOPTransHoldEmployee`.`lastName` AS `woopHoldEmployeesLastName`,       \n" +
                "	`woOPTransHoldEmployee`.`initialName` AS `opHoldBy`      \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woOPTransHold`       \n" +
                "	LEFT OUTER JOIN `employees` AS `woOPTransHoldEmployee`       \n" +
                "	ON `woOPTransHold`.`holdEmployeeId` = `woOPTransHoldEmployee`.`id`       \n" +
                "	AND `woOPTransHoldEmployee`.`deletedAt` IS NULL       \n" +
                "	WHERE `woOPTransHold`.`woOPID` = pWOOPID       \n" +
                "	AND (`woOPTransHold`.`deletedAt` IS NULL       \n" +
                "	AND `woOPTransHold`.`endDate` IS NULL);      \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	      \n" +
                "  \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction, 7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/      \n" +
                "	CALL Sproc_GetTravelerLatestDetails (pWOOPID, pEmployeeID, @pWOID );      \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction,7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/      \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (365,'2.00','V1','Header SP Changes and Traveler Page SP Change - Vaibhav '," + userid + ");"
            );
            break;
        case 365:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/12/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(              \n" +
                "	pDeptID INT(11),      \n" +
                "    pGlobalSearchWHId INT(11),    \n" +
                "	pGlobalSearchBinId int(11),      \n" +
                "	pGlobalSearchUIDId int(11),      \n" +
                "    pSearchWHId INT(11),  \n" +
                "    pSearchString varchar(100)  \n" +
                ")  \n" +
                "BEGIN                 \n" +
                "  \n" +
                "	set @vGlobalSearchBinWHId = NULL;    \n" +
                "    set @vGlobalSearchUIDBinId = NULL;    \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN    \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;     \n" +
                "         SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = @vGlobalSearchUIDBinId;     \n" +
                "    END IF;    \n" +
                "  \n" +
                "    IF(pGlobalSearchBinId IS NOT NULL) THEN    \n" +
                "		 SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = pGlobalSearchBinId;     \n" +
                "    END IF;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS     \n" +
                "	SELECT 	w.id, w.name, w.isPermanentWH, w.parentWHID,  cast(NULL as char(50)) deptName, 0 binCount, 0 uidCount       \n" +
                "	FROM 	warehousemst w       \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)      \n" +
                "	AND 	w.id = IFNULL(pSearchWHId, w.id)   \n" +
                "	AND 	w.id = IFNULL(@vGlobalSearchBinWHId, w.id)     \n" +
                "	AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))        \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1         \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0          \n" +
                "	AND 	IFNULL(w.isActive,1) = 1  \n" +
                "    AND 	w.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS            \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID          \n" +
                "	FROM 	binmst b          \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)         \n" +
                "    AND		b.id = IFNULL(pGlobalSearchBinId, b.id)   		-- Need to remove if show all counts    \n" +
                "    AND		b.id = IFNULL(@vGlobalSearchUIDBinId, id) 		-- Need to remove if show all counts      \n" +
                "	AND 	IFNULL(b.isActive,1) = 1           \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS          \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount          \n" +
                "	FROM 	component_sid_stock           \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)      \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts    \n" +
                "	AND		IFNULL(isDeleted,0) = 0          \n" +
                "	GROUP BY binID;      \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c       \n" +
                "	SET    	t.uidCount = c.uidCount      \n" +
                "	WHERE   t.id = c.binID;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS           \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount          \n" +
                "	FROM 	tempBinDet           \n" +
                "	GROUP BY warehouseID;       \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c       \n" +
                "	SET   	t.binCount = c.binCount,      \n" +
                "			t.uidCount = c.uidCount      \n" +
                "	WHERE  	t.id = c.warehouseID;      \n" +
                "  \n" +
                "	-- SET department name    \n" +
                "	update 	tempWarehouseDet t, warehousemst w          \n" +
                "    SET   	t.deptName = w.Name       \n" +
                "    WHERE	t.parentWHID = w.id;   \n" +
                "  \n" +
                "    SELECT * FROM tempWarehouseDet;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;          \n" +
                "	DROP TEMPORARY TABLE tempBinDet;          \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;          \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/12/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(     \n" +
                "		pWarehouseID int(11),        \n" +
                "		pGlobalSearchBinId int(11),        \n" +
                "        pGlobalSearchUIDId int(11),        \n" +
                "		pSearchBinId INT(11),  \n" +
                "		pSearchString varchar(100)     \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	SET @vGlobalSearchUIDBinId = NULL;     \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN      \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;       \n" +
                "    END IF;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS          \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount          \n" +
                "	FROM 	component_sid_stock           \n" +
                "	WHERE 	IFNULL(isDeleted,0) = 0        \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts       \n" +
                "	group by binID;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS           \n" +
                "	SELECT 	b.id, 				b.name, 								b.isPermanentBin, 	  \n" +
                "			b.warehouseID, 		cast(NULL as char(50)) warehouseName,  \n" +
                "            0 departmentID,		cast(NULL as char(50)) deptName,		0 uidCount           \n" +
                "	FROM 	binmst b          \n" +
                "	WHERE 	b.id = IFNULL(pGlobalSearchBinId, b.id)            \n" +
                "    AND 	b.id = IFNULL(pSearchBinId, b.id)          \n" +
                "    AND 	b.id = IFNULL(@vGlobalSearchUIDBinId, b.id)        \n" +
                "    AND 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)          \n" +
                "	AND 	IFNULL(b.isActive,1) = 1           \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0  \n" +
                "	AND 	b.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');  \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c          \n" +
                "	set t.uidCount = c.uidCount          \n" +
                "	where t.id = c.binID;      \n" +
                "  \n" +
                "     -- SET warehouse name    \n" +
                "	update 	tempBinDet t, warehousemst w          \n" +
                "    SET   	t.warehouseName = w.Name, t.departmentID = w.parentWHID       \n" +
                "    WHERE	t.warehouseID = w.id;       \n" +
                "  \n" +
                "    -- SET department name    \n" +
                "	update 	tempBinDet t, warehousemst w          \n" +
                "    SET   	t.deptName = w.Name       \n" +
                "    WHERE	t.departmentID = w.id;   \n" +
                "  \n" +
                "	SELECT * FROM tempBinDet;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;          \n" +
                "	DROP TEMPORARY TABLE tempBinDet;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/12/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(   \n" +
                "	pBinID int(11),              \n" +
                "    pGlobalSearchUIDId int(11),           \n" +
                "	pSearchUIDId INT(11),          \n" +
                "	pSearchString varchar(100)     \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                      \n" +
                "	SELECT 	css.id,					css.scanlabel,						css.pkgQty,				css.uid,               \n" +
                "            c.PIDCode, 				c.mfgcodeID,        				c.mfgPN,  				mfg.mfgCode, 	      \n" +
                "            mfg.mfgName,			ro.rohsIcon,       					ro.name AS rohsName,	css.nickName,		      \n" +
                "            css.binID,				cast(NULL as char(50)) binName, 	0 warehouseID,			cast(NULL as char(50)) warehouseName,  \n" +
                "            0 departmentID,			cast(NULL as char(50)) deptName,	css.uom,				cast('' as char(100)) uomName                                       \n" +
                "	FROM component_sid_stock css                                      \n" +
                "	LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                                     \n" +
                "	LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                                      \n" +
                "	LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                             \n" +
                "	WHERE	css.id = IFNULL(pGlobalSearchUIDId, css.id)                  \n" +
                "    AND 	css.id = IFNULL(pSearchUIDId, css.id)                  \n" +
                "    AND 	css.binID  = IFNULL(pBinID, css.binID )                  \n" +
                "    AND		IFNULL(css.isdeleted,0) = 0          \n" +
                "	AND 	css.uid like CONCAT('%', IFNULL(pSearchString,'') ,'%');           \n" +
                "  \n" +
                "	-- SET Bin name    \n" +
                "	update 	Results r, binmst b          \n" +
                "    SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID       \n" +
                "    WHERE	r.binID = b.id;     \n" +
                "  \n" +
                "    -- SET warehouse name    \n" +
                "	update 	Results r, warehousemst w          \n" +
                "    SET   	r.warehouseName = w.Name, r.departmentID = w.parentWHID       \n" +
                "    WHERE	r.warehouseID = w.id;       \n" +
                "  \n" +
                "    -- SET department name    \n" +
                "	update 	Results r, warehousemst w          \n" +
                "    SET   	r.deptName = w.Name       \n" +
                "    WHERE	r.departmentID = w.id;    \n" +
                "  \n" +
                "	-- Set UOM    \n" +
                "    update 	Results r, uoms u          \n" +
                "    SET   	r.uomName = u.abbreviation          \n" +
                "    WHERE	r.uom = u.id;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "	EXECUTE query2;                                      \n" +
                "	DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/12/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (366,'2.00','V1',' Sample entry - Dharmishtha '," + userid + ");"
            );
            break;
        case 366:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                          \n" +
                "	IN pCustomerID INT(11)                    \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DECLARE mfgCodeID INT(11);                     \n" +
                "	DECLARE whereClause VARCHAR(500);              \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";               \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN              \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);              \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,           \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, mfg.mfgCode , mfg.mfgName          \n" +
                "	FROM component c           \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0           \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                    \n" +
                "    PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;                   \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (367,'2.00','V1',' sp Sproc_GetPIDList - KETAN '," + userid + ");"
            );
            break;

        case 367:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-03-2019  *********************************** */
                "DROP TABLE IF EXISTS `rfq_consolidated_history`;  \n" +
                "CREATE TABLE `rfq_consolidated_history` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `rfqAssyID` int(11) NOT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_consolidated_history_rfqAssyID` (`rfqAssyID`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidated_history_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=0;  \n" +
                "DROP TABLE IF EXISTS `rfq_consolidated_mfgpn_lineitem_history`;  \n" +
                "CREATE TABLE `rfq_consolidated_mfgpn_lineitem_history` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refHistoryID` int(11) NOT NULL,  \n" +
                "  `rfqAssyID` int(11) NOT NULL,  \n" +
                "  `lineID` decimal(16,8) DEFAULT NULL,  \n" +
                "  `consolidateID` int(11) NOT NULL,  \n" +
                "  `isInstall` tinyint(1) DEFAULT NULL,  \n" +
                "  `isPurchase` tinyint(1) DEFAULT NULL,  \n" +
                "  `uomID` int(11) DEFAULT NULL,  \n" +
                "  `qpa` int(11) DEFAULT NULL,  \n" +
                "  `numOfPosition` decimal(10,5) DEFAULT NULL,  \n" +
                "  `consolidatedLineItemIDs` longtext,  \n" +
                "  `refDesig` text,  \n" +
                "  `numOfRows` int(11) DEFAULT NULL,  \n" +
                "  `consolidatedpartlineID` longtext,  \n" +
                "  `leadQty` decimal(8,2) DEFAULT NULL,  \n" +
                "  `attritionRate` decimal(8,2) DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_consolidated_mfgpn_lineitem_history_refHistoryID` (`refHistoryID`),  \n" +
                "  KEY `FK_rfq_consolidated_mfgpn_lineitem_history_consolidateID` (`consolidateID`),  \n" +
                "  KEY `FK_rfq_consolidated_mfgpn_lineitem_history_uomID` (`uomID`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidated_mfgpn_lineitem_history_consolidateID` FOREIGN KEY (`consolidateID`) REFERENCES `rfq_consolidated_mfgpn_lineitem` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidated_mfgpn_lineitem_history_refHistoryID` FOREIGN KEY (`refHistoryID`) REFERENCES `rfq_consolidated_history` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidated_mfgpn_lineitem_history_uomID` FOREIGN KEY (`uomID`) REFERENCES `uoms` (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=0;  \n" +
                "DROP TABLE IF EXISTS `rfq_consolidated_mfgpn_lineitem_alternate_history`;  \n" +
                "CREATE TABLE `rfq_consolidated_mfgpn_lineitem_alternate_history` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refHistoryID` int(11) NOT NULL,  \n" +
                "  `consolidateID` int(11) NOT NULL,  \n" +
                "  `mfgPN` varchar(255) DEFAULT NULL,  \n" +
                "  `mfgPNID` int(11) DEFAULT NULL,  \n" +
                "  `PIDCode` varchar(50) DEFAULT NULL,  \n" +
                "  `customerApproval` varchar(1) DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_consolidated_lineitem_alternate_history_refHistoryID` (`refHistoryID`),  \n" +
                "  KEY `FK_rfq_consolidated_lineitem_alternate_history_mfgPNID` (`mfgPNID`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidated_lineitem_alternate_history_mfgPNID` FOREIGN KEY (`mfgPNID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidated_lineitem_alternate_history_refHistoryID` FOREIGN KEY (`refHistoryID`) REFERENCES `rfq_consolidated_history` (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=0;  \n" +
                "DROP TABLE IF EXISTS `rfq_consolidate_mfgpn_lineitem_quantity_history`;  \n" +
                "CREATE TABLE `rfq_consolidate_mfgpn_lineitem_quantity_history` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refHistoryID` int(11) NOT NULL,  \n" +
                "  `consolidateID` int(11) NOT NULL,  \n" +
                "  `qtyID` int(11) DEFAULT NULL,  \n" +
                "  `requestQty` int(11) DEFAULT NULL,  \n" +
                "  `finalPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `supplier` varchar(255) DEFAULT NULL,  \n" +
                "  `selectedMpn` varchar(255) DEFAULT NULL,  \n" +
                "  `selectionMode` varchar(100) DEFAULT NULL,  \n" +
                "  `min` int(11) DEFAULT NULL,  \n" +
                "  `mult` int(11) DEFAULT NULL,  \n" +
                "  `currentStock` int(11) DEFAULT NULL,  \n" +
                "  `selectedPIDCode` varchar(50) DEFAULT NULL,  \n" +
                "  `leadTime` int(11) DEFAULT NULL,  \n" +
                "  `supplierStock` int(11) DEFAULT NULL,  \n" +
                "  `grossStock` int(11) DEFAULT NULL,  \n" +
                "  `pricingSupplier` varchar(500) DEFAULT NULL,  \n" +
                "  `apiLead` int(11) DEFAULT NULL,  \n" +
                "  `componentID` int(11) DEFAULT NULL,  \n" +
                "  `packaging` varchar(50) DEFAULT NULL,  \n" +
                "  `quoteQty` int(11) DEFAULT NULL,  \n" +
                "  `pricenotselectreason` text,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_consolidate_mfgpn_lineitem_quantity_history_refHistoryID` (`refHistoryID`),  \n" +
                "  KEY `FK_consolidate_mfgpn_lineitem_quantity_history_qtyID` (`qtyID`),  \n" +
                "  CONSTRAINT `FK_consolidate_mfgpn_lineitem_quantity_history_qtyID` FOREIGN KEY (`qtyID`) REFERENCES `rfq_assy_quantity` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_consolidate_mfgpn_lineitem_quantity_history_refHistoryID` FOREIGN KEY (`refHistoryID`) REFERENCES `rfq_consolidated_history` (`id`)  \n" +
                ") ENGINE=InnoDB AUTO_INCREMENT=0;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_savePricingHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_savePricingHistory`(                                \n" +
                " IN rfqAssyID INT,  \n" +
                " IN created	VARCHAR(50)                                 \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "           DECLARE historyID INT  ;             \n" +
                "	INSERT INTO rfq_consolidated_history (rfqAssyID,createdBy,isDeleted) VALUES (rfqAssyID,created,0);  \n" +
                "	    SELECT LAST_INSERT_ID() INTO historyID;  \n" +
                "  \n" +
                "	 -- insert history for consolidate table  \n" +
                "	INSERT INTO rfq_consolidated_mfgpn_lineitem_history (refHistoryID,rfqAssyID,lineID,consolidateID,isInstall,isPurchase,uomID,                                \n" +
                "	qpa, numOfPosition,consolidatedLineItemIDs,refDesig,numOfRows,consolidatedpartlineID,leadQty,attritionRate,                                \n" +
                "	createdBy,isDeleted)                                \n" +
                "	SELECT historyID,rfqAssyID,lineID,id,isInstall,isPurchase,uomID,                                \n" +
                "	qpa, numOfPosition,consolidatedLineItemIDs,refDesig,numOfRows,consolidatedpartlineID,leadQty,attritionRate,                                \n" +
                "	created,isDeleted                             \n" +
                "	 FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID=rfqAssyID AND isDeleted=0;                                \n" +
                "     -- insert history for alternate parts  \n" +
                "     INSERT INTO rfq_consolidated_mfgpn_lineitem_alternate_history (refHistoryID,consolidateID,mfgPN,mfgPNID,PIDCode,customerApproval,createdBy,  \n" +
                "     isDeleted)                      \n" +
                "	SELECT historyID,ra.consolidateID,ra.mfgPN,ra.mfgPNID,ra.PIDCode,ra.customerApproval,created,ra.isDeleted  \n" +
                "	 FROM rfq_consolidated_mfgpn_lineitem_alternate ra LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON  \n" +
                "	 rl.id=ra.consolidateID WHERE rl.rfqAssyID=rfqAssyID AND rl.isDeleted=0 AND ra.isDeleted=0;   \n" +
                "  \n" +
                "	 -- insert history for quantity  \n" +
                "	   INSERT INTO rfq_consolidate_mfgpn_lineitem_quantity_history (refHistoryID,consolidateID,qtyID,requestQty,finalPrice,unitPrice,supplier,  \n" +
                "     selectedMpn,selectionMode,`min`,mult,currentStock,selectedPIDCode,leadTime,supplierStock,grossStock,pricingSupplier,apiLead,componentID,  \n" +
                "     packaging,quoteQty,pricenotselectreason,createdBy,isDeleted)                      \n" +
                "	SELECT historyID,rq.consolidateID,rq.qtyID,ra.requestQty,rq.finalPrice,rq.unitPrice,rq.supplier,  \n" +
                "	rq.selectedMpn,rq.selectionMode,rq.min,rq.mult,rq.currentStock,rq.selectedPIDCode,rq.leadTime,rq.supplierStock,rq.grossStock,rq.pricingSuppliers,rq.apiLead,rq.componentID,  \n" +
                "	rq.packaging,rq.quoteQty,rq.pricenotselectreason,created,rq.isDeleted  \n" +
                "	 FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON  \n" +
                "	 rl.id=rq.consolidateID LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "          WHERE rl.rfqAssyID=rfqAssyID AND rl.isDeleted=0 AND rq.isDeleted=0 ;   \n" +
                "  \n" +
                "          SELECT historyID LIMIT 1;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetCountForFilter` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCountForFilter`(    \n" +
                "	IN rfqAssyID INT(11),    \n" +
                "	IN pcustomerID INT(11)                                              \n" +
                "    )  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "  \n" +
                "		SELECT                                                \n" +
                "                      GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                                \n" +
                "						ra.requestQty,                                                \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                \n" +
                "						ra.requestQty,''''                                                \n" +
                "					)                                                \n" +
                "					),                                            \n" +
                "			GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                                \n" +
                "						ra.requestQty,                                                \n" +
                "					''', rq.finalPrice, null))) IS NULL'                                                \n" +
                "					) SEPARATOR ' OR '                                               \n" +
                "					)                                            \n" +
                "				INTO @SQLString, @HavingClause                                            \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                              \n" +
                "  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,0));     \n" +
                "			          SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                                                     \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                \n" +
                "			EXECUTE stmt;    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp\" );                                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                \n" +
                "			EXECUTE query1;                                                \n" +
                "			DEALLOCATE PREPARE query1;   \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT *  FROM consolidatetemp\" );                                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "			EXECUTE query2;                                                \n" +
                "			DEALLOCATE PREPARE query2;   \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;      \n" +
                "			SET @SQLStatement = CONCAT(' CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                 \n" +
                "					SELECT                                                   \n" +
                "						 rl.id FROM rfq_consolidated_mfgpn_lineitem rl                                                  \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                  \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                          \n" +
                "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                                                           \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                                  \n" +
                "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                                                  \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                         \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                                         \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                                         \n" +
                "						(SELECT gencCategoryID FROM genericcategory                                         \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                                        \n" +
                "					GROUP BY rl.id');      \n" +
                "  \n" +
                "		        PREPARE stmt FROM @SQLStatement;                                                \n" +
                "			EXECUTE stmt;	                                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp\");     \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                \n" +
                "			EXECUTE query3;                                                \n" +
                "			DEALLOCATE PREPARE query3;    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;     \n" +
                "  \n" +
                "			IF(SELECT COUNT(*) FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
                "			WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND rq.selectionMode IS NOT NULL)=0 THEN    \n" +
                "			SELECT 0 AS 'COUNT(*)';    \n" +
                "			ELSE    \n" +
                "			SELECT                                                \n" +
                "                      GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'Max((IF(rq.selectionMode = ''',                                                \n" +
                "						rq.selectionMode,                                                \n" +
                "					''', rq.selectionMode, null))) AS ''',                                                \n" +
                "						rq.selectionMode,''''                                                \n" +
                "					)                                                \n" +
                "					),                                            \n" +
                "			GROUP_CONCAT(DISTINCT                                                \n" +
                "				CONCAT(                                                \n" +
                "					'Max((IF(rq.selectionMode = ''',                                                \n" +
                "						rq.selectionMode,                                                \n" +
                "					''', rq.selectionMode, null))) =\"Manual\"'                                                \n" +
                "					) SEPARATOR ' OR '                                               \n" +
                "					)                                            \n" +
                "				INTO @SQLString1, @HavingClause1                                            \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND rq.selectionMode IS NOT NULL;                                              \n" +
                "  \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString1,pcustomerID,0));     \n" +
                "			          SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause1);                                                     \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                \n" +
                "			EXECUTE stmt;    \n" +
                "  \n" +
                "			SET @SQLStatement4 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp\" );                                                \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                \n" +
                "			EXECUTE query4;                                                \n" +
                "			DEALLOCATE PREPARE query4;    \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;      \n" +
                "			END IF;                                                \n" +
                "    END;  \n" +
                "ALTER TABLE rfq_assy_quotations ADD historyID INT;  \n" +
                "ALTER TABLE rfq_assy_quotations ADD nonQuotedConsolidatelineItemIDs TEXT;  \n" +
                /* **************************** Add Script Version -> 13-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (368,'2.00','V1','added tables for pricing history-Champak '," + userid + ");"
            );
            break;
        case 368:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-03-2019  *********************************** */
                "drop procedure if exists `Sproc_GetSupplierMFGPNSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierMFGPNSearch`(  \n" +
                "IN pGoodPart VARCHAR(100),  \n" +
                "IN pSearch VARCHAR(100),  \n" +
                "IN pId INT(11),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pMfgCodeId INT(11))  \n" +
                "BEGIN  \n" +
                "	SELECT * FROM  \n" +
                "	(SELECT `com`.`id`,  \n" +
                "			`com`.`PIDCode`,  \n" +
                "			CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "			`com`.`mfgPN` orgMfgPN,  \n" +
                "			`com`.`isGoodPart`  \n" +
                "		FROM `component` AS `com`  \n" +
                "		INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND  \n" +
                "		(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "		WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))  \n" +
                "		AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
                "		AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "				(pSearch IS NOT NULL AND (PIDCode LIKE CONCAT('%', pSearch , '%'))));  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (369,'2.00','V1','added Sproc_GetSupplierMFGPNSearch - Ashish'," + userid + ");"
            );
            break;
        case 369:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-03-2019  *********************************** */
                "UPDATE page_detail SET displayMenuName=\"Quote Terms & Conditions Categories\",  \n" +
                "menuName=\"Quote Terms & Conditions Categories\",pageName=\"Quote Terms & Conditions Categories\"   WHERE pageName= \"Quote Terms & Conditions Categorys\";  \n" +
                "  \n" +
                "UPDATE page_detail SET iconClass=\"mdi mdi-bookmark\" WHERE displayMenuName=\"Quote Terms & Conditions\";  \n" +
                "UPDATE page_detail SET  iconClass=\"mdi mdi-bookmark-outline\"  WHERE displayMenuName=\"Quote Terms & Conditions Categorie\";  \n" +
                "UPDATE page_detail SET  iconClass=\"mdi mdi-bookmark-check\"  WHERE displayMenuName=\"Quote Terms & Conditions Attributes\";  \n" +
                "  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Equipments & Workstations'   \n" +
                "WHERE pageName = 'Equipment & Tools';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageName = 'Manage Equipment & Workstation'   \n" +
                "WHERE pageName = 'Manage Equipment & Tools';  \n" +
                "  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Equipment & Workstation Profile', menuName = 'Equipment & Workstation Profile', displayMenuName = 'Equipment & Workstation Profile'  \n" +
                "WHERE pageName = 'Equipment & Tools Profile';  \n" +
                "  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Equipment & Workstation'  \n" +
                "WHERE pageName = 'Equipment & Special Tools';  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName = 'Equipment & Workstation Type'  \n" +
                "WHERE pageName='Manage Equipment Type Generic Category';  \n" +
                /* **************************** Add Script Version -> 13-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (370,'2.00','V1','Change menu name icon- Deepshikha '," + userid + ");"
            );
            break;
        case 370:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_History_Pricing` ;  \n" +
                "CREATE TRIGGER `Trg_History_Pricing` AFTER UPDATE ON `rfq_assy_quotations`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	IF IFNULL(OLD.unitPrice, 0) != IFNULL(NEW.unitPrice, 0) THEN   \n" +
                "  \n" +
                "		UPDATE rfq_assy_quotations_additionalcost   \n" +
                "		SET  amount=((IFNULL(percentage,0) * IFNULL(NEW.unitPrice,0))/100)   \n" +
                "		 WHERE rfqAssyQuoteID=OLD.id AND isDeleted=0   \n" +
                "		 AND quoteChargeDynamicFieldID IN (SELECT qfm.id FROM quotecharges_dynamic_fields_mst qfm   \n" +
                "		 					WHERE qfm.costingType IN ('Labor','Material') AND IFNULL(qfm.isDeleted,0)=0);   \n" +
                "		 UPDATE rfq_assy_quotations_additionalcost   \n" +
                "		 SET  margin=(IFNULL(amount,0) * 100)/(IFNULL(NEW.unitPrice,0)+(IFNULL(amount,0)))   \n" +
                "		  WHERE rfqAssyQuoteID=OLD.id AND isDeleted=0   \n" +
                "		  AND quoteChargeDynamicFieldID IN (SELECT qfm.id FROM quotecharges_dynamic_fields_mst qfm   \n" +
                "		 	 				WHERE qfm.costingType IN ('Labor','Material') AND IFNULL(qfm.isDeleted,0)=0);   \n" +
                "  \n" +
                "  \n" +
                "	 END IF;    \n" +
                "  \n" +
                "END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_updateAssyQuoteDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_updateAssyQuoteDetails`(                                \n" +
                " IN rfqAssyID INT   \n" +
                ")  \n" +
                "BEGIN   \n" +
                "UPDATE rfq_assy_quotations ab  \n" +
                "SET ab.materialCost=((SELECT (SUM(IFNULL(a.amount,0))+ IFNULL(ab.unitPrice,0))   \n" +
                "		FROM rfq_assy_quotations_additionalcost a WHERE a.rfqAssyQuoteID=ab.id   \n" +
                "		AND a.isdeleted=0 AND a.quoteChargeDynamicFieldID IN   \n" +
                "		 (SELECT qfm.id FROM quotecharges_dynamic_fields_mst qfm   \n" +
                "		 	 WHERE qfm.costingType IN ('Material') AND IFNULL(qfm.isDeleted,0)=0)))  \n" +
                "WHERE ab.rfqAssyID=rfqAssyID AND ab.isdeleted=0;  \n" +
                "  \n" +
                "        UPDATE rfq_assy_quotations ab SET ab.laborCost=((SELECT SUM(IFNULL(a.amount,0)) FROM rfq_assy_quotations_additionalcost a WHERE a.rfqAssyQuoteID=ab.id AND a.isdeleted=0 AND a.quoteChargeDynamicFieldID IN   \n" +
                "		 (SELECT qfm.id FROM quotecharges_dynamic_fields_mst qfm   \n" +
                "		 	 				WHERE qfm.costingType IN ('Labor') AND IFNULL(qfm.isDeleted,0)=0)))  \n" +
                "		 	 				WHERE ab.rfqAssyID=rfqAssyID AND ab.isdeleted=0;  \n" +
                "		 	 				UPDATE rfq_assy_quotations ab SET ab.total=((SELECT (SUM(IFNULL(a.amount,0))+ IFNULL(ab.laborCost,0) + IFNULL(ab.materialCost,0)) FROM rfq_assy_quotations_additionalcost a WHERE a.rfqAssyQuoteID=ab.id AND a.isdeleted=0 AND a.quoteChargeDynamicFieldID IN   \n" +
                "		 (SELECT qfm.id FROM quotecharges_dynamic_fields_mst qfm   \n" +
                "		 	 				WHERE qfm.costingType IN ('Ad-hoc') AND IFNULL(qfm.isDeleted,0)=0)))  \n" +
                "		 	 				WHERE ab.rfqAssyID=rfqAssyID AND ab.isDeleted=0;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (371,'2.00','V1','Make summary auto updated -Champak '," + userid + ");"
            );
            break;
        case 371:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-03-2019  *********************************** */
                "INSERT INTO component_packagingmst(`name`,isActive,isDeleted,createdBy)VALUES  \n" +
                "('Plastic Box with Bin Guide',1,0,'1');  \n" +
                /* **************************** Add Script Version -> 13-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (372,'2.00','V1','Added packaging alias-champak'," + userid + ");"
            );
            break
        case 372:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "UPDATE rfq_lineitems_headers SET `name` ='Buy' WHERE `field` = 'isPurchase';  \n" +
                "UPDATE rfq_lineitems_headers SET `name` ='Lead Per RFQ DES on PCB' WHERE `field` = 'numOfPosition';  \n" +
                "UPDATE rfq_lineitems_headers SET `name` ='Internal Comment' WHERE `field` = 'description';  \n" +
                "UPDATE rfq_lineitems_headers SET `name` ='Supplier' WHERE `field` = 'distributor';  \n" +
                "UPDATE rfq_lineitems_headers SET `name` ='Supplier PN' WHERE `field` = 'distPN';  \n" +
                "ALTER TABLE rfq_lineitems_errorcode ADD CONSTRAINT rfq_lineitems_errorcode_logicID UNIQUE KEY(logicID);  \n" +
                "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
                "VALUES (38,'MILITARYSTANDARDROHS','#236589','Military standard type Non RoHS assembly can not allowed RoHS component.Please advice or approve.','Military standard type Non RoHS assembly can not allowed RoHS component.Please advice or approve.','','1','2019-02-19',NULL,NULL,NULL,NULL,NULL,'Military Standard RoHS');  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `militaryStandardRoHSStep` TINYINT(1);  \n" +
                "  \n" +
                "UPDATE page_detail SET displayMenuName = 'Bill Of Materials' WHERE pageRoute = 'app.rfq.bom.importbom';  \n" +
                "UPDATE page_detail SET displayMenuName = 'Bill Of Materials - Plan' WHERE pageRoute = 'app.rfq.bom.plannedbom';  \n" +
                "UPDATE page_detail SET displayMenuName = 'Bill Of Materials - Part Costing' WHERE pageRoute = 'app.rfq.bom.partcosting';  \n" +
                "UPDATE page_detail SET displayMenuName = 'Bill Of Materials - Summary' WHERE pageRoute = 'app.rfq.bom.summary';  \n" +
                "UPDATE page_detail SET displayMenuName = 'Bill Of Materials - Quote' WHERE pageRoute = 'app.rfq.bom.quote';  \n" +
                "UPDATE page_detail SET displayMenuName = 'Bill Of Materials - Document' WHERE pageRoute = 'app.rfq.bom.document';  \n" +
                "  \n" +
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`, `createdBy`,`isEditable`,`description`)  \n" +
                "VALUES('RFQInternalVersionMethod','Prefix Text','Company',1,1,'This is use for internal version method selection. For Prefix Text use \"P\" and For Date Format user \"D\".');  \n" +
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`, `createdBy`,`isEditable`,`description`)  \n" +
                "VALUES('RFQInternalVersionPrefixText','Internal','Company',1,1,'This is use for internal version method prefix base then add prefix text over here.Allow maximum 8 character only.');  \n" +
                "INSERT INTO systemconfigrations(`key`,`values`,`clusterName`, `createdBy`,`isEditable`,`description`)  \n" +
                "VALUES('RFQInternalVersionDateFormat','MMDDYY','Company',1,1,'This is use for internal version method date wise. Allow only \"MMDDYY\" and \"YYMMDD\" format only.');   \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_errorcode ADD narrative TEXT;  \n" +
                "ALTER TABLE rfq_assembly_history ADD narrative TEXT;  \n" +
                "ALTER TABLE rfq_assembly_history ADD `time` INT(11);  \n" +
                "ALTER TABLE rfq_assembly_history ADD `updatedBy` VARCHAR(255) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assembly_history ADD `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                        \n" +
                "	IN ppageIndex INT(11),                        \n" +
                "	IN precordPerPage INT(11),                        \n" +
                "	IN pOrderBy VARCHAR(255),                        \n" +
                "	IN pWhereClause VARCHAR(16383)                        \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "DECLARE pOffset INT(11);                        \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                        \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                        \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Distributor Verification'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Distributor Mapping'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                         \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                         \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Distributor Invalid'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Distributor PN Invalid'                                       \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Distributor Bad Part'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'                      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'                \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'             \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Category'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Functional Testing Required'            \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 38) THEN 'Military Standard RoHS'            \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,                         \n" +
                "              description, systemVariable,logicID, displayName, org_description,updatedAt, narrative                \n" +
                "			FROM `rfq_lineitems_errorcode`                        \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                        \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                        \n" +
                "		ELSE                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "		END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "			SET pWhereClause = '1=1' ;                        \n" +
                "		END IF;	                        \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
                "		ELSE	                        \n" +
                "			SET rowNumWhere = '';                        \n" +
                "		END IF;	                        \n" +
                "  \n" +
                "		/* to get total count of rows */                        \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                        \n" +
                "		PREPARE query1 FROM @SQLStatement1;                        \n" +
                "		EXECUTE query1;                        \n" +
                "		DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "		PREPARE query2 FROM @SQLStatement2;                        \n" +
                "		EXECUTE query2;                        \n" +
                "		DEALLOCATE PREPARE query2;                        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;                        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                                \n" +
                "	IN ppartID INT                        \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                        \n" +
                "	SELECT 	a.id,             \n" +
                "		a.lineID,             \n" +
                "		a.qpa,             \n" +
                "		a.refDesig,             \n" +
                "		a.custPN,            \n" +
                "		a.custPNID,                                     \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                                    \n" +
                "		a.description,            \n" +
                "		a.level,            \n" +
                "		a.numOfPosition,            \n" +
                "		a.customerRev,             \n" +
                "		a.customerDescription,             \n" +
                "		a.customerPartDesc,                                     \n" +
                "		CONCAT(part.partTypeName) partclassID,             \n" +
                "		a.isInstall,             \n" +
                "		a.isPurchase,             \n" +
                "		a.leadQty,             \n" +
                "		a.attritionRate,            \n" +
                "		a.valueAddedCost,            \n" +
                "		a.refRFQLineItemID,                          \n" +
                "		a.dnpQty,             \n" +
                "		a.dnpDesig,             \n" +
                "		a.qpaDesignatorStep,            \n" +
                "		a.duplicateCPNStep,          \n" +
                "		a.requireMountingTypeStep,          \n" +
                "		a.requireFunctionalTypeStep,          \n" +
                "		a.qpaDesignatorColorPriority,            \n" +
                "		a.mergeLines,            \n" +
                "		a.lineMergeStep,            \n" +
                "		a.isBuyDNPQty                          \n" +
                "	FROM rfq_lineitems a                          \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                          \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0               \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                                    \n" +
                "  \n" +
                "	SELECT 	b.id,            \n" +
                "		b.lineID,             \n" +
                "		b.qpa,             \n" +
                "		b.refDesig,                                 \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                                \n" +
                "		a.mfgCodeID,             \n" +
                "		a.mfgPN,             \n" +
                "		a.mfgPNID,                                    \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                                \n" +
                "		a.distMfgCodeID,             \n" +
                "		a.distPN,             \n" +
                "		a.distMfgPNID,                                     \n" +
                "		b.custPN,             \n" +
                "		b.custPNID,             \n" +
                "		b.uomID,             \n" +
                "		a.description descriptionAlternate,             \n" +
                "		b.description,             \n" +
                "		b.level,             \n" +
                "		b.numOfPosition,             \n" +
                "		b.customerRev,             \n" +
                "		b.customerDescription,             \n" +
                "		b.customerPartDesc,                              \n" +
                "		b.partclassID,             \n" +
                "		b.isInstall,             \n" +
                "		b.isPurchase,             \n" +
                "		b.leadQty,             \n" +
                "		b.attritionRate,             \n" +
                "		b.valueAddedCost,             \n" +
                "		b.refRFQLineItemID,                                     \n" +
                "		b.dnpQty,             \n" +
                "		b.dnpDesig,             \n" +
                "		a.id AS rfqAlternatePartID,             \n" +
                "		b.qpaDesignatorStep,            \n" +
                "		b.qpaDesignatorColorPriority,             \n" +
                "		b.duplicateCPNStep,      \n" +
                "		b.requireMountingTypeStep,      \n" +
                "		b.requireFunctionalTypeStep,          \n" +
                "		b.isBuyDNPQty,                          \n" +
                "		a.mfgVerificationStep,             \n" +
                "		a.mfgDistMappingStep,            \n" +
                "		a.mfgCodeStep,            \n" +
                "		a.customerApproval,            \n" +
                "		a.org_mfgCode,             \n" +
                "		a.org_mfgPN,                                  \n" +
                "		a.org_distributor,             \n" +
                "		a.org_distPN,                                  \n" +
                "		a.distVerificationStep,             \n" +
                "		a.distCodeStep,             \n" +
                "		a.getMFGPNStep,             \n" +
                "		a.obsoletePartStep,            \n" +
                "		a.mfgGoodPartMappingStep,            \n" +
                "		a.mfgPNStep,             \n" +
                "		a.distPNStep,                                \n" +
                "		a.badMfgPN,             \n" +
                "		a.distGoodPartMappingStep,             \n" +
                "		a.nonRohsStep,             \n" +
                "		a.oneRohsComponentStep,             \n" +
                "		a.epoxyStep,             \n" +
                "		a.invalidConnectorTypeStep,            \n" +
                "		a.duplicateMPNInSameLineStep,          \n" +
                "		a.mismatchMountingTypeStep,          \n" +
                "		a.mismatchFunctionalCategoryStep,             \n" +
                "		a.restrictUseWithPermissionStep,          \n" +
                "		a.restrictUsePermanentlyStep,            \n" +
                "		a.userData1,            \n" +
                "		a.userData2,        \n" +
                "		a.userData3,        \n" +
                "		a.userData4,        \n" +
                "		a.userData5,        \n" +
                "		a.userData6,        \n" +
                "		a.userData7,        \n" +
                "		a.userData8,        \n" +
                "		a.userData9,        \n" +
                "		a.userData10,        \n" +
                "		a.pickupPadRequiredStep,      \n" +
                "		a.matingPartRquiredStep,      \n" +
                "		a.driverToolsRequiredStep,      \n" +
                "		a.functionalTestingRequiredStep,     \n" +
                "		a.mismatchValueStep,    \n" +
                "		a.mismatchPackageStep,    \n" +
                "		a.mismatchPowerStep,    \n" +
                "		a.mismatchToleranceStep,    \n" +
                "		a.mismatchTempratureStep,    \n" +
                "		a.militaryStandardRoHSStep,  \n" +
                "		CONCAT(part.partTypeName) parttypeID,            \n" +
                "		CONCAT(mount.name) mountingtypeID,             \n" +
                "		CONCAT(cat.categoryname) partcategoryID,            \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                              \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                            \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                          \n" +
                "		CASE WHEN                           \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                          \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                          \n" +
                "			THEN 1 ELSE 0 END isObsolete,                          \n" +
                "		co.mfgPNDescription,            \n" +
                "		co.pitch,          \n" +
                "		co.partPackage,          \n" +
                "		co.value,          \n" +
                "		co.tolerance,          \n" +
                "		co.voltage,          \n" +
                "		co.packaging,     \n" +
                "		co.powerRating,    \n" +
                "		co.minOperatingTemp,    \n" +
                "		co.maxOperatingTemp,         \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment                      \n" +
                "	FROM rfq_lineitems_alternatepart a                                      \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                                       \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                                \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0             \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                             \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                              \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                                    \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                              \n" +
                "	IN pPartID INT(11)                         \n" +
                "	)  \n" +
                "BEGIN                                  \n" +
                "	DECLARE pValidCount INT(11);                              \n" +
                "	DECLARE pInValidCount INT(11);                              \n" +
                "	DECLARE pTotalCount INT(11);                          \n" +
                "	DECLARE pProgress INT(11);                              \n" +
                "	SET pProgress = 0;                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                    \n" +
                "	SELECT  p.rfqLineItemsID,                         \n" +
                "	CASE                         \n" +
                "		WHEN                         \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                         \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND                    \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND                   \n" +
                "			IFNULL(l.requireFunctionalTypeStep,0) = 1 AND                   \n" +
                "			IFNULL(l.requireMountingTypeStep,0) = 1 AND                   \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND                         \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                         \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND                         \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND                         \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND                         \n" +
                "			IFNULL(p.getMFGPNStep,0) = 1 AND                         \n" +
                "			IFNULL(p.obsoletePartStep,0) = 1 AND                         \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                         \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND                         \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND                         \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                         \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND                        \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND                  \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND              \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND              \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND              \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND                \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1   AND            \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND                \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND          \n" +
                "			IFNULL(p.pickupPadRequiredStep,0) = 1   AND     \n" +
                "			IFNULL(p.matingPartRquiredStep,0) = 1   AND     \n" +
                "			-- IFNULL(p.driverToolsRequiredStep,0) = 1   AND     \n" +
                "			IFNULL(p.functionalTestingRequiredStep,0) = 1    AND  \n" +
                "			IFNULL(p.militaryStandardRoHSStep,0) = 1      \n" +
                "		THEN 1                        \n" +
                "		ELSE 0                        \n" +
                "	END AS ProgressCount                        \n" +
                "	FROM rfq_lineitems l                        \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                        \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;                        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                        \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;       \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                        \n" +
                "		SET pProgress = 0;                        \n" +
                "	ELSE                         \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	SELECT pProgress;                          \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "    END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMAssyHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMAssyHistory`(          \n" +
                "	IN pPartID INT(11),  \n" +
                "	IN pNarrative TINYINT(1),          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383)        \n" +
                "	)  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS         \n" +
                "	SELECT 	h.id,        \n" +
                "		h.tableName,        \n" +
                "		h.rfqLineItemID,        \n" +
                "		h.rfqAssyID,        \n" +
                "		h.columnName,        \n" +
                "		h.oldValue,        \n" +
                "		h.newValue,        \n" +
                "		h.changeVersion,        \n" +
                "		h.createdAt,        \n" +
                "		h.description,    \n" +
                "		h.narrative,  \n" +
                "		h.time,  \n" +
                "		CONCAT(u.firstName ,\" \", u.lastName) AS CreatedUser,        \n" +
                "		i.lineID,        \n" +
                "		a.assemblyNumber,        \n" +
                "		a.assemblyRev,        \n" +
                "		a.assemblyDescription,        \n" +
                "		a.assemblyVersion,        \n" +
                "		c.liveInternalVersion    \n" +
                "	FROM rfq_assembly_history h        \n" +
                "	INNER JOIN component c ON c.id = h.partId    \n" +
                "	LEFT OUTER JOIN rfq_lineitems i ON i.id = h.rfqLineItemID        \n" +
                "	LEFT OUTER JOIN rfq_assemblies a ON a.id = h.rfqAssyID        \n" +
                "	LEFT OUTER JOIN users u ON u.id = h.createdBy        \n" +
                "	WHERE h.partID = pPartID;        \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	   \n" +
                "  \n" +
                "	IF pNarrative = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , \" AND columnName IN ('QPA Vs Designator', 'Duplicate CPN','Require Functional Type','Require Mounting Type','Invalid MFG','Supplier Verification', 'Get MFGPN',  \n" +
                "		'Check Obsolete Parts','MFG Verification','MFG Bad Part','MFG PN Invalid','Supplier Invalid','MFG-Supplier Mapping','Supplier PN Invalid','Supplier Bad Part',  \n" +
                "		'Non-RoHS','Epoxy','One RoHS Component','Lead Mismatch','Duplicate MFGPN','Mismatch Mounting Type','Mismatch Functional Type'  \n" +
                "		,'Restrict Use With Permission','Restrict Use Permanently','Pickup Pad Required','Mating Part Required','Functional Testing Required','Military Standard RoHS')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` AFTER INSERT ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	DECLARE pLiveInternalVersion INT(11);             \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);             \n" +
                "	DECLARE pCompanyName VARCHAR(100);         \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';   \n" +
                "	ELSE   \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';   \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE   \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = NEW.partID;            \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';        \n" +
                "  \n" +
                "	IF NEW.description IS NOT NULL AND pLiveInternalVersion > 0 THEN         \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,createdBy)         \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",        \n" +
                "			\"\", IFNULL(NEW.description,\"\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),        \n" +
                "			SYSDATE(),NEW.createdBy);        \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);      \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN              \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	        \n" +
                "	DECLARE pLiveInternalVersion INT(11);               \n" +
                "	DECLARE pRfqAssID INT(11);            \n" +
                "	DECLARE pPartID INT(11);               \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);         \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);          \n" +
                "	DECLARE pCompanyName VARCHAR(100);    \n" +
                "	DECLARE pErrorNarrative TEXT;                \n" +
                "	SET pIsUpdateRequired = FALSE;        \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;                   \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;   \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';   \n" +
                "	ELSE   \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';   \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE   \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';              \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN               \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier\",              \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;                 \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN\",              \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;	              \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",              \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;	              \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                  \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;              \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",              \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;		              \n" +
                "  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;                 \n" +
                "			IF NEW.rfqAssyBomID IS NOT NULL              \n" +
                "				THEN               \n" +
                "					SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;              \n" +
                "				ELSE               \n" +
                "					SET newRfqAssyBom = '';              \n" +
                "			END IF;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",              \n" +
                "				NULL,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;              \n" +
                "  \n" +
                "		-- IF NEW.customerApproval IS NOT NULL THEN            \n" +
                "		-- 	SET pIsUpdateRequired = TRUE;                 \n" +
                "		-- 	INSERT INTO rfq_assembly_history               \n" +
                "		-- 		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "		-- 		oldValue,newValue,changeVersion,              \n" +
                "		-- 		createdAt,createdBy)               \n" +
                "		-- 	VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",              \n" +
                "		-- 		NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "		-- 		SYSDATE(),NEW.createdBy);              \n" +
                "		-- END IF;              \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history               \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "				oldValue,newValue,changeVersion,              \n" +
                "				createdAt,createdBy)               \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",              \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),              \n" +
                "				SYSDATE(),NEW.createdBy);              \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                  \n" +
                "				NULL, CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                  \n" +
                "				NULL, CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                  \n" +
                "				NULL, CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                  \n" +
                "				NULL, CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                  \n" +
                "				NULL, CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                  \n" +
                "				NULL, CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                  \n" +
                "				NULL, CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                  \n" +
                "				NULL, CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                  \n" +
                "				NULL, CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                  \n" +
                "				NULL, CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                  \n" +
                "				NULL, CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                  \n" +
                "				NULL, CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                  \n" +
                "				NULL, CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.oneRohsComponentStep IS NOT NULL AND NEW.oneRohsComponentStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 19;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                  \n" +
                "				NULL, CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                  \n" +
                "				NULL, CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                  \n" +
                "				NULL, CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                  \n" +
                "				NULL, CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                  \n" +
                "				NULL, CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                  \n" +
                "				NULL, CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                  \n" +
                "				NULL, CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                  \n" +
                "				NULL, CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                  \n" +
                "				NULL, CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                  \n" +
                "				NULL, CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "		IF NEW.militaryStandardRoHSStep IS NOT NULL AND NEW.militaryStandardRoHSStep = 0 THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                  \n" +
                "				NULL, CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                 \n" +
                "		END IF;   \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                  \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),SYSDATE(),NEW.updatedBy);                  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;    \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  \"Customer Approval\",                  \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),SYSDATE(),NEW.updatedBy);                  \n" +
                "		END IF;  \n" +
                "	END IF;     \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN        \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);        \n" +
                "		END IF;        \n" +
                "  \n" +
                "	END IF;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                  \n" +
                "	DECLARE pIsUpdateRequired BOOL;        \n" +
                "	DECLARE pLiveInternalVersion INT(11);                   \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                  \n" +
                "	DECLARE newUOM VARCHAR(50);                 \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);     \n" +
                "	DECLARE pCompanyName VARCHAR(100);           \n" +
                "	DECLARE pRfqAssID INT(11);            \n" +
                "	DECLARE pErrorNarrative TEXT;             \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;        \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;    \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;        \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';   \n" +
                "	ELSE   \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';   \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE   \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';              \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;                  \n" +
                "	IF pLiveInternalVersion > 0 THEN                   \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;        \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Item\",                  \n" +
                "				NULL, CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"QPA\",                  \n" +
                "				NULL, CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;                    \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"REF DES\",                  \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;              \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"CPN\",                  \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.level IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Level\",                  \n" +
                "				NULL, CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;        \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Install\",                  \n" +
                "				NULL, CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN                   \n" +
                "			SET pIsUpdateRequired = TRUE;        \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Buy\",                  \n" +
                "				NULL, CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.isActive IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;        \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Active\",                  \n" +
                "				NULL, CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.leadQty IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead Qty\",                  \n" +
                "				NULL, CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.attritionRate IS NOT NULL THEN       \n" +
                "			SET pIsUpdateRequired = TRUE;        \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Overage %\",                  \n" +
                "				NULL, CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Rev\",                  \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.partclassID IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;                   \n" +
                "			IF NEW.partclassID != 0                  \n" +
                "				THEN                   \n" +
                "					SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                  \n" +
                "					SELECT `name` INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                  \n" +
                "				ELSE                   \n" +
                "					SET newPartTypeName = '';                  \n" +
                "					SET newMountingTypeName = '';                  \n" +
                "			END IF;                  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Mounting Type\",                  \n" +
                "				NULL,                  \n" +
                "				CONCAT(newPartTypeName,' | ', newMountingTypeName),                  \n" +
                "				CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Comment\",                  \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;               \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead\",                  \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN QTY\",                  \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN DES\",                  \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			IF NEW.uomID IS NOT NULL                  \n" +
                "				THEN                   \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                  \n" +
                "				ELSE                   \n" +
                "					SET newUOM = '';                  \n" +
                "			END IF;                  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"UOM\",                  \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.refRFQLineItemID IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Parent Line\",                  \n" +
                "				NULL, CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Part Desc\",                  \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;                 \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				createdAt,createdBy)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DNP Qty Buy\",                  \n" +
                "				NULL, CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				SYSDATE(),NEW.createdBy);                  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN                 	  \n" +
                "			SET pIsUpdateRequired = TRUE;     \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 1;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                  \n" +
                "				NULL, CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN                 	  \n" +
                "			SET pIsUpdateRequired = TRUE;     \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                  \n" +
                "				NULL, CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);          \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN                 	  \n" +
                "			SET pIsUpdateRequired = TRUE;     \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                  \n" +
                "				NULL, CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                  \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN                 	  \n" +
                "			SET pIsUpdateRequired = TRUE;     \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;         \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                  \n" +
                "				NULL, CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                  \n" +
                "		END IF;                        \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN        \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);        \n" +
                "		END IF;       \n" +
                "  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` AFTER UPDATE ON `rfq_lineitems_additional_comment`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	DECLARE pLiveInternalVersion INT(11);    \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);          \n" +
                "	DECLARE pCompanyName VARCHAR(100);           \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';   \n" +
                "	ELSE   \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';   \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE   \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = NEW.partID;          \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';          \n" +
                "  \n" +
                "	IF IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0) THEN           \n" +
                "		INSERT INTO rfq_assembly_history           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,          \n" +
                "			oldValue,newValue,changeVersion,          \n" +
                "			createdAt,createdBy)           \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",          \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),          \n" +
                "			SYSDATE(),NEW.updatedBy);          \n" +
                "  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);      \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	        \n" +
                "    	DECLARE pLiveInternalVersion INT(11);                     \n" +
                "	DECLARE pRfqAssID INT(11);             \n" +
                "	DECLARE pPartID INT(11);                    \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);                    \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);         \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                \n" +
                "	DECLARE pCompanyName VARCHAR(100);      \n" +
                "	DECLARE pErrorNarrative TEXT;                  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);            \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;      \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;               \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;          \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';   \n" +
                "	ELSE   \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';   \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE   \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                    \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;              \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier\",                    \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN\",                    \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",                    \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;	                    \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",                    \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN                \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN            \n" +
                "			SET pDeleteMessage =\"MFG PN \";               \n" +
                "		ELSE            \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);              \n" +
                "		END IF;            \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",                    \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.deletedBy);                    \n" +
                "	END IF;	                    \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                      \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN                     \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL                    \n" +
                "			THEN                     \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;                    \n" +
                "			ELSE                     \n" +
                "				SET oldRfqAssyBom = '';                    \n" +
                "		END IF;                    \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL                    \n" +
                "			THEN                     \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;                    \n" +
                "			ELSE                     \n" +
                "				SET newRfqAssyBom = '';                    \n" +
                "		END IF;              \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN                    \n" +
                "			SET pIsUpdateRequired = TRUE;        \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",                    \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.updatedBy);                    \n" +
                "		END IF;            \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	-- IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN            \n" +
                "	-- 	SET pIsUpdateRequired = TRUE;        \n" +
                "	-- 	INSERT INTO rfq_assembly_history                     \n" +
                "	-- 		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "	-- 		oldValue,newValue,changeVersion,                    \n" +
                "	-- 		createdAt,createdBy)                     \n" +
                "	-- 	VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                    \n" +
                "	-- 		CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "	-- 		SYSDATE(),NEW.updatedBy);                    \n" +
                "	-- END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",                    \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                       \n" +
                "  \n" +
                "	IF OLD.mfgCodeStep IS NULL OR (IFNULL(OLD.mfgCodeStep, 0) != IFNULL(NEW.mfgCodeStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;         \n" +
                "		IF IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                  \n" +
                "				CAST(OLD.mfgCodeStep AS CHAR), CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                  \n" +
                "				CAST(OLD.mfgCodeStep AS CHAR), CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF OLD.distVerificationStep IS NULL OR (IFNULL(OLD.distVerificationStep, 0) != IFNULL(NEW.distVerificationStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;        \n" +
                "		IF IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                  \n" +
                "				CAST(OLD.distVerificationStep AS CHAR), CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                  \n" +
                "				CAST(OLD.distVerificationStep AS CHAR), CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF OLD.distCodeStep IS NULL OR (IFNULL(OLD.distCodeStep, 0) != IFNULL(NEW.distCodeStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;         \n" +
                "		IF IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                  \n" +
                "				CAST(OLD.distCodeStep AS CHAR), CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                  \n" +
                "				CAST(OLD.distCodeStep AS CHAR), CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.mfgDistMappingStep IS NULL OR (IFNULL(OLD.mfgDistMappingStep, 0) != IFNULL(NEW.mfgDistMappingStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;         \n" +
                "		IF IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                  \n" +
                "				CAST(OLD.mfgDistMappingStep AS CHAR), CAST(NEW.mfgDistMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                  \n" +
                "				CAST(OLD.mfgDistMappingStep AS CHAR), CAST(NEW.mfgDistMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF OLD.getMFGPNStep IS NULL OR (IFNULL(OLD.getMFGPNStep, 0) != IFNULL(NEW.getMFGPNStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;         \n" +
                "		IF IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                  \n" +
                "				CAST(OLD.getMFGPNStep AS CHAR), CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                  \n" +
                "				CAST(OLD.getMFGPNStep AS CHAR), CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.obsoletePartStep IS NULL OR (IFNULL(OLD.obsoletePartStep, 0) != IFNULL(NEW.obsoletePartStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;         \n" +
                "		IF IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                  \n" +
                "				CAST(OLD.obsoletePartStep AS CHAR), CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                  \n" +
                "				CAST(OLD.obsoletePartStep AS CHAR), CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF OLD.mfgVerificationStep IS NULL OR (IFNULL(OLD.mfgVerificationStep, 0) != IFNULL(NEW.mfgVerificationStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;         \n" +
                "		IF IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                  \n" +
                "				CAST(OLD.mfgVerificationStep AS CHAR), CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                  \n" +
                "				CAST(OLD.mfgVerificationStep AS CHAR), CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF OLD.mfgGoodPartMappingStep IS NULL OR (IFNULL(OLD.mfgGoodPartMappingStep, 0) != IFNULL(NEW.mfgGoodPartMappingStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;         \n" +
                "		IF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                  \n" +
                "				CAST(OLD.mfgGoodPartMappingStep AS CHAR), CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                  \n" +
                "				CAST(OLD.mfgGoodPartMappingStep AS CHAR), CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF OLD.mfgPNStep IS NULL OR (IFNULL(OLD.mfgPNStep, 0) != IFNULL(NEW.mfgPNStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;         \n" +
                "		IF IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                  \n" +
                "				CAST(OLD.mfgPNStep AS CHAR), CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                  \n" +
                "				CAST(OLD.mfgPNStep AS CHAR), CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF OLD.distPNStep IS NULL OR (IFNULL(OLD.distPNStep, 0) != IFNULL(NEW.distPNStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;         \n" +
                "		IF IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                  \n" +
                "				CAST(OLD.distPNStep AS CHAR), CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                  \n" +
                "				CAST(OLD.distPNStep AS CHAR), CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF OLD.distGoodPartMappingStep IS NULL OR (IFNULL(OLD.distGoodPartMappingStep, 0) != IFNULL(NEW.distGoodPartMappingStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;         \n" +
                "		IF IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                  \n" +
                "				CAST(OLD.distGoodPartMappingStep AS CHAR), CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                  \n" +
                "				CAST(OLD.distGoodPartMappingStep AS CHAR), CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.nonRohsStep IS NULL OR (IFNULL(OLD.nonRohsStep, 0) != IFNULL(NEW.nonRohsStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;         \n" +
                "		IF IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                  \n" +
                "				CAST(OLD.nonRohsStep AS CHAR), CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                  \n" +
                "				CAST(OLD.nonRohsStep AS CHAR), CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.epoxyStep IS NULL OR (IFNULL(OLD.epoxyStep, 0) != IFNULL(NEW.epoxyStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;         \n" +
                "		IF IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                  \n" +
                "				CAST(OLD.epoxyStep AS CHAR), CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                  \n" +
                "				CAST(OLD.epoxyStep AS CHAR), CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.oneRohsComponentStep IS NULL OR (IFNULL(OLD.oneRohsComponentStep, 0) != IFNULL(NEW.oneRohsComponentStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 19;         \n" +
                "		IF IFNULL(NEW.oneRohsComponentStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                  \n" +
                "				CAST(OLD.oneRohsComponentStep AS CHAR), CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.oneRohsComponentStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                  \n" +
                "				CAST(OLD.oneRohsComponentStep AS CHAR), CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.invalidConnectorTypeStep IS NULL OR (IFNULL(OLD.invalidConnectorTypeStep, 0) != IFNULL(NEW.invalidConnectorTypeStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;         \n" +
                "		IF IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                  \n" +
                "				CAST(OLD.invalidConnectorTypeStep AS CHAR), CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                  \n" +
                "				CAST(OLD.invalidConnectorTypeStep AS CHAR), CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.duplicateMPNInSameLineStep IS NULL OR (IFNULL(OLD.duplicateMPNInSameLineStep, 0) != IFNULL(NEW.duplicateMPNInSameLineStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;         \n" +
                "		IF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                  \n" +
                "				CAST(OLD.duplicateMPNInSameLineStep AS CHAR), CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                  \n" +
                "				CAST(OLD.duplicateMPNInSameLineStep AS CHAR), CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.mismatchMountingTypeStep IS NULL OR (IFNULL(OLD.mismatchMountingTypeStep, 0) != IFNULL(NEW.mismatchMountingTypeStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;         \n" +
                "		IF IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                  \n" +
                "				CAST(OLD.mismatchMountingTypeStep AS CHAR), CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                  \n" +
                "				CAST(OLD.mismatchMountingTypeStep AS CHAR), CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF OLD.mismatchFunctionalCategoryStep IS NULL OR (IFNULL(OLD.mismatchFunctionalCategoryStep,0) != IFNULL(NEW.mismatchFunctionalCategoryStep,0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;         \n" +
                "		IF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                  \n" +
                "				CAST(OLD.mismatchFunctionalCategoryStep AS CHAR), CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                  \n" +
                "				CAST(OLD.mismatchFunctionalCategoryStep AS CHAR), CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;                 	  \n" +
                "	IF OLD.restrictUseWithPermissionStep IS NULL OR (IFNULL(OLD.restrictUseWithPermissionStep, 0) != IFNULL(NEW.restrictUseWithPermissionStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;         \n" +
                "		IF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                  \n" +
                "				CAST(OLD.restrictUseWithPermissionStep AS CHAR), CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                  \n" +
                "				CAST(OLD.restrictUseWithPermissionStep AS CHAR), CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.restrictUsePermanentlyStep IS NULL OR (IFNULL(OLD.restrictUsePermanentlyStep, 0) != IFNULL(NEW.restrictUsePermanentlyStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;         \n" +
                "		IF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                  \n" +
                "				CAST(OLD.restrictUsePermanentlyStep AS CHAR), CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                  \n" +
                "				CAST(OLD.restrictUsePermanentlyStep AS CHAR), CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.pickupPadRequiredStep IS NULL OR (IFNULL(OLD.pickupPadRequiredStep, 0) != IFNULL(NEW.pickupPadRequiredStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;         \n" +
                "		IF IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                  \n" +
                "				CAST(OLD.pickupPadRequiredStep AS CHAR), CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                  \n" +
                "				CAST(OLD.pickupPadRequiredStep AS CHAR), CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.matingPartRquiredStep IS NULL OR (IFNULL(OLD.matingPartRquiredStep, 0) != IFNULL(NEW.matingPartRquiredStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;         \n" +
                "		IF IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                  \n" +
                "				CAST(OLD.matingPartRquiredStep AS CHAR), CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                  \n" +
                "				CAST(OLD.matingPartRquiredStep AS CHAR), CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;   \n" +
                "	IF OLD.functionalTestingRequiredStep IS NULL OR (IFNULL(OLD.functionalTestingRequiredStep, 0) != IFNULL(NEW.functionalTestingRequiredStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;         \n" +
                "		IF IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                  \n" +
                "				CAST(OLD.functionalTestingRequiredStep AS CHAR), CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                  \n" +
                "				CAST(OLD.functionalTestingRequiredStep AS CHAR), CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF; 	  \n" +
                "	IF OLD.militaryStandardRoHSStep IS NULL OR (IFNULL(OLD.militaryStandardRoHSStep, 0) != IFNULL(NEW.militaryStandardRoHSStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;         \n" +
                "		IF IFNULL(NEW.militaryStandardRoHSStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                  \n" +
                "				CAST(OLD.militaryStandardRoHSStep AS CHAR), CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.militaryStandardRoHSStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                  \n" +
                "				CAST(OLD.militaryStandardRoHSStep AS CHAR), CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;    \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                  \n" +
                "				CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),SYSDATE(),NEW.updatedBy);                  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;    \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy)                   \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  \"Customer Approval\",                  \n" +
                "				CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),SYSDATE(),NEW.updatedBy);                  \n" +
                "		END IF;  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN        \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);        \n" +
                "	END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                  \n" +
                "	DECLARE pIsUpdateRequired BOOL;        \n" +
                "	DECLARE pLiveInternalVersion INT(11);             \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);                  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);                  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                  \n" +
                "	DECLARE oldUOM VARCHAR(50);                  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                     \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;                \n" +
                "	DECLARE pRfqAssID INT(11);               \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;        \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;    \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;         \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';      \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';   \n" +
                "	ELSE   \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';   \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE   \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN        \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",                  \n" +
                "			CAST(OLD.lineID AS CHAR), CAST(NEW.lineID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;	                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN              \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",                  \n" +
                "			CAST(OLD.qpa AS CHAR), CAST(NEW.qpa AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",                  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN              \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",                  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN           \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",                  \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;               \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Install\",                  \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN                \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Buy\",                  \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",                  \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN              \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",                  \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN              \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",                  \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",                  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN                   \n" +
                "		IF OLD.partclassID != 0                  \n" +
                "			THEN                   \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;                  \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;                  \n" +
                "			ELSE                   \n" +
                "				SET oldPartTypeName = '';                  \n" +
                "				SET oldMountingTypeName = '';                  \n" +
                "		END IF;                  \n" +
                "		IF NEW.partclassID != 0                  \n" +
                "			THEN                   \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                  \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                  \n" +
                "			ELSE                   \n" +
                "				SET newPartTypeName = '';                  \n" +
                "				SET newMountingTypeName = '';                  \n" +
                "		END IF;                  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",                  \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),                  \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),                  \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",                  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead\",                  \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;		        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",                  \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",                  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN                   \n" +
                "		IF OLD.uomID IS NOT NULL                  \n" +
                "			THEN                   \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;                  \n" +
                "			ELSE                   \n" +
                "				SET oldUOM = '';                  \n" +
                "		END IF;                  \n" +
                "		IF NEW.uomID IS NOT NULL                  \n" +
                "			THEN                   \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                  \n" +
                "			ELSE                   \n" +
                "				SET newUOM = '';                  \n" +
                "		END IF;                  \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",                  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",                  \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",                  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		INSERT INTO rfq_assembly_history                   \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "			oldValue,newValue,changeVersion,                  \n" +
                "			createdAt,createdBy)                   \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",                  \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "			SYSDATE(),NEW.updatedBy);                  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.qpaDesignatorStep IS NULL OR (IFNULL(OLD.qpaDesignatorStep, 0) != IFNULL(NEW.qpaDesignatorStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 1;         \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                  \n" +
                "				CAST(OLD.qpaDesignatorStep AS CHAR), CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                  \n" +
                "				CAST(OLD.qpaDesignatorStep AS CHAR), CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.duplicateCPNStep IS NULL OR (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;         \n" +
                "		IF IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                  \n" +
                "				CAST(OLD.duplicateCPNStep AS CHAR), CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                  \n" +
                "				CAST(OLD.duplicateCPNStep AS CHAR), CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF OLD.requireMountingTypeStep IS NULL OR (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;         \n" +
                "		IF IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                  \n" +
                "				CAST(OLD.requireMountingTypeStep AS CHAR), CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                  \n" +
                "				CAST(OLD.requireMountingTypeStep AS CHAR), CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF OLD.requireFunctionalTypeStep IS NULL OR (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN                 	  \n" +
                "		SET pIsUpdateRequired = TRUE;     \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;         \n" +
                "		IF IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                   \n" +
                "			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                  \n" +
                "				CAST(OLD.requireFunctionalTypeStep AS CHAR), CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                " 			INSERT INTO rfq_assembly_history                   \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                  \n" +
                "				oldValue,newValue,changeVersion,                  \n" +
                "				description,createdAt,createdBy,narrative)                   \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                  \n" +
                "				CAST(OLD.requireFunctionalTypeStep AS CHAR), CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                  \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                  \n" +
                "		END IF;  \n" +
                "	END IF;           \n" +
                "  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN        \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);        \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (373,'2.00','V1','R&D Status for Government History - Jignesh K '," + userid + ");"
            );
            break;
        case 373:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "alter table rfq_assemblies  \n" +
                "add column `winQuantity` decimal(16,6) default null;  \n" +
                "  \n" +
                "alter table rfq_assemblies  \n" +
                "add column `winPrice` decimal(16,6) default null;  \n" +
                "  \n" +
                "alter table rfq_assemblies  \n" +
                "Add column `reason` longtext default null;  \n" +
                "  \n" +
                "alter table rfq_assemblies  \n" +
                "add column `quoteClosedBy` varchar(255) default null;  \n" +
                "  \n" +
                "  \n" +
                "update rfq_assemblies set status = 1 where status is null and isDeleted = 0;  \n" +
                "  \n" +
                "update rfq_assemblies set quoteFinalStatus = 1 where quoteFinalStatus is null and isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (374,'2.00','V1','Quote statue related table changes  - shirish'," + userid + ");"
            );
            break;
        case 374:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),	                                      \n" +
                "    IN pWhereClause VARCHAR(16383)                                          \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                      \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,    \n" +
                "		(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS revisedQuoteCount,          \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,           \n" +
                "        CONCAT('Internal-',part.liveInternalVersion) AS liveInternalVersion,          \n" +
                "		(CASE WHEN ra.status = 1 THEN 'InProgress'     \n" +
                "			  WHEN ra.status = 2 THEN 'FollowUp'   \n" +
                "			  WHEN ra.status = 3 THEN 'Won'    \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'   \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "		(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending' WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote' WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,        \n" +
                "		ro.name AS `rohsComplientConvertedValue`,            \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'            \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,            \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'            \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'            \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,            \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer,    \n" +
                "		concat(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,   \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "        ra.isBOMVerified,ra.updatedAt,ra.reason,concat(ems.`firstName` , \" \" ,ems.`lastName`) AS RFQ_ClosedBy,ra.quoteClosedDate  \n" +
                "		FROM rfqforms rf            \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0            \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0            \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0           \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0            \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0        \n" +
                "        LEFT JOIN users em ON em.id = ra.quoteSubmittedBy   \n" +
                "        LEFT JOIN users ems ON ems.id = ra.quoteClosedBy  \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0            \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                                   \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"quoteDueDate DESC\") ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "	EXECUTE query1;                                      \n" +
                "	DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "	EXECUTE query2;                                      \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                      \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "	EXECUTE query3;                                      \n" +
                "	DEALLOCATE PREPARE query3;                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                      \n" +
                "	IN prfqAssyID INT(11),    \n" +
                "    IN pAssyQuoteSubmittedID INT(11)    \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "		# select list for quote summary details of last submitted quote        \n" +
                "			select unitPrice, qty, turnTime,    \n" +
                "            (case when qo.turnType = 'B' then (turnTime+(2*(turnTime/5)))    \n" +
                "            when qo.turnType = 'D' then turntime    \n" +
                "            when qo.turnType = 'W' then (turntime*7) end) turntimedays,    \n" +
                "  \n" +
                "            (case when qo.turnType = 'B' then 'Business Days'    \n" +
                "            when qo.turnType = 'D' then 'Week Days'    \n" +
                "            when qo.turnType = 'W' then 'Week' end) turnType    \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,        \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime        \n" +
                "			from rfq_assy_quote_submitted_assydetail qo        \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID        \n" +
                "			where refSubmittedQuoteID = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy         \n" +
                "			select ra.id rfqAssyID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.mfgName,cu.mfgCode,        \n" +
                "            rf.customerid,rqs.custBillingAddressID, ifnull(rqs.custTermsID, cu.custTermsID) as custTermsID, rqs.custShippingAddressID, rqs.BOMIssues, rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID,        \n" +
                "            ra.assyNote,rf.quoteNote, rt.name RFQType, jt.name JobType, rqs.OtherNotes,ra.isSummaryComplete,concat(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress        \n" +
                "            from rfq_assemblies ra       \n" +
                "            join rfq_assemblies_quotation_submitted rqs on rqs.rfqAssyID = ra.id    \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "            join rfqtype rt on rt.id = ra.rfqTypeID and rt.isDeleted = 0    \n" +
                "            join jobtype jt on jt.id = ra.jobTypeID and jt.isDeleted = 0    \n" +
                "			join mfgcodemst cu on cu.id = rf.customerid and cu.isDeleted = 0    \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0   \n" +
                "            left join users su on su.id = ra.quoteSubmittedBy   \n" +
                "			where ra.id= prfqAssyID and rqs.id = pAssyQuoteSubmittedID;    \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary        \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and id = pAssyQuoteSubmittedID ;        \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote        \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd        \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0        \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0        \n" +
                "			where csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary        \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0        \n" +
                "            and RefSubmittedQuoteID = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "		# select letest submited quote summary detail    \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateQuoteSubmittedSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateQuoteSubmittedSummaryDetails`(	                                    \n" +
                "	IN prfqAssyID INT(11),      \n" +
                "    IN pUserID INT(11)      \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "declare quotecount int(11);   \n" +
                "	# insert quote summary details       \n" +
                "		INSERT INTO `rfq_assy_quote_submitted_assydetail`      \n" +
                "		(`refSubmittedQuoteID`, `rfqAssyID`, `qty`, `turnTime`, `turnType`, `materialCost`, `materialLeadTime`, `laborCost`, `laborLeadTime`,      \n" +
                "		`additionalCost`, `customItemLeadTime`, `unitPrice`, `totalLeadTime`, `extendedCost`, `excessMaterialCost`, `additionalCostDetail`, `nreDays`, `nreCost`,     \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`)      \n" +
                "		select sb.id `refSubmittedQuoteID`, prfqAssyID `rfqAssyID`, requestedQty `qty`, turntime `turnTime`, timeType `turnType`,       \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material') materialCost,fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Material') materialLeadTime,      \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor') laborCost, fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor') laborLeadTime,      \n" +
                "		fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc') additionalCost, fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc') `customItemLeadTime`,      \n" +
                "		(fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc')) `unitPrice`,      \n" +
                "		(fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Material')+    \n" +
                "        (case when (fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor')>fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc'))     \n" +
                "        then fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Labor')    \n" +
                "        else fun_getSumOfDaysByCostingType(qo.id,prfqAssyID,'Ad-hoc') end    \n" +
                "        )) `totalLeadTime`,      \n" +
                "		(qo.requestedQty *(fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Material')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Labor')+fun_getSumOfAmountByCostingType(qo.id,prfqAssyID,'Ad-hoc'))) extendedCost,      \n" +
                "		qo.excessQtyTotalPrice `excessMaterialCost`, null, qo.nreDays, qo.nreCost ,pUserID `createdBy`, current_timestamp(),pUserID `updatedBy`,current_timestamp()      \n" +
                "		from rfq_assy_quotations qo      \n" +
                "		join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID      \n" +
                "		where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);      \n" +
                "  \n" +
                "	# insert standards details from component standard details to rfq assy standard detail      \n" +
                "        INSERT INTO `rfq_assy_standard_class_detail`      \n" +
                "		(`refSubmittedQuoteID`, `standardID`, `standardClassIDs`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`)      \n" +
                "		select (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) refSubmittedQuoteID, certificateStandardID `standardID`,ClassID `standardClassIDs`,       \n" +
                "		pUserID `createdBy`, current_timestamp() `createdAt`, pUserID `updatedBy`, current_timestamp() `updatedAt`      \n" +
                "		from component_standard_details csd       \n" +
                "		where deletedAt is null and componentID = (select partID from rfq_assemblies where id = prfqAssyID);      \n" +
                "  \n" +
                "	# Update Assembly status	  \n" +
                "		#select count(*) into quotecount from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID;  \n" +
                "        update rfq_assemblies set status = 2, quoteFinalStatus = 3 where id = prfqAssyID;  \n" +
                "  \n" +
                "	# select Last inserted data      \n" +
                "		select * from rfq_assy_standard_class_detail where refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);      \n" +
                "		select * from rfq_assy_quote_submitted_assydetail where rfqAssyID = prfqAssyID and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                            \n" +
                "	IN pCustomerID INT(11)                      \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE mfgCodeID INT(11);                       \n" +
                "	DECLARE whereClause VARCHAR(500);                \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";                 \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN                \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);                \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,             \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, mfg.mfgCode , mfg.mfgName,c.specialNote            \n" +
                "	FROM component c             \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0             \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                      \n" +
                "    PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                     \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (375,'2.00','V1','Quote statue related SP changes  - shirish'," + userid + ");"
            );
            break;
        case 375:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "alter table rfq_assemblies  \n" +
                "add column `quoteClosedDate` datetime default null;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (376,'2.00','V1','new field add changes  - shirish'," + userid + ");"
            );
            break;
        case 376:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                    \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN pPartID INT                             \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	DECLARE pOffset INT(11);                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                  \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,   \n" +
                "			CASE WHEN   \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN  \n" +
                "   component cm ON cm.mountingTypeID=rm.id LEFT JOIN  \n" +
                "   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id  \n" +
                "   WHERE rlam.rfqlineitemsid=rl.id)>1 THEN 'Mismatched' ELSE  \n" +
                "                                  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN  \n" +
                "   component cm ON cm.mountingTypeID=rm.id LEFT JOIN  \n" +
                "   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id  \n" +
                "   WHERE rlam.rfqlineitemsid=rl.id LIMIT 1) END AS `name`,  \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                     \n" +
                "			com.PIDCode, com.category, rl.partID,ra.mfgPNID,        \n" +
                "             GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon        \n" +
                "            )AS mfgPN,         \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                   \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                   \n" +
                "			FROM rfq_lineitems_alternatepart ra                                  \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                  \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                                \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0   \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0                 \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0                  \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                                 \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (377,'2.00','V1','Alter sp Sproc_GetRFQLineItems-Champak '," + userid + ");"
            );
            break;
        case 377:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "update page_detail set menuName = 'Part Master', displayMenuName = 'Part Master' where pageName = 'Assemblies';  \n" +
                "update page_detail set menuName = 'Parts', displayMenuName ='Parts' where pageName = 'Component List';  \n" +
                "/*pageName swap because wrong name created in old entry*/  \n" +
                "update page_detail set menuName = 'Part List', displayMenuName = 'Part List', pageName = 'Supplier Part' where pageName = 'Manufacturer Component';  \n" +
                "update page_detail set menuName = 'Part List', displayMenuName = 'Part List', pageName = 'Manufacturer Part' where pageName = 'Distributor Component';  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (378,'2.00','V1','Change Component to Part in menu - Ashish'," + userid + ");"
            );
            break;
        case 378:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2019  *********************************** */
                "UPDATE import_entity_fields  \n" +
                "SET `field` = \"mfgName\" , displayName = \"Manufacturer Name\"  \n" +
                "WHERE `field` = \"mfgType\" AND displayName = \"Manufacturer Type\"  \n" +
                "AND entityTableName = \"mfgcodemst\" ;  \n" +
                "  \n" +
                "INSERT INTO import_entity_fields (`entityTableName`,`field`,`displayName`,`displayOrder`,`createdBy`)  \n" +
                "VALUES (\"mfgcodemst\",\"isCustOrDisty\",\"Customer\",\"3.00\",'1') ;  \n" +
                /* **************************** Add Script Version -> 14-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (379,'2.00','V1',' Entry add update for import mfg - KETAN '," + userid + ");"
            );
            break;
        case 379:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 14-03-2019  *********************************** */
                "DROP TRIGGER  IF EXISTS  `Trg_AU_salesordermst`;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst`   \n" +
                "    FOR EACH ROW BEGIN   \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) Then  \n" +
                "       insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERMST\",cast(new.id as char),'SALESORDERNUMBER',cast(OLD.salesOrderNumber as char),  \n" +
                "       cast(new.salesOrderNumber as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'PONUMBER',cast(OLD.poNumber as char),  \n" +
                "       cast(new.poNumber as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'PODATE',cast(OLD.poDate as char),  \n" +
                "       cast(new.poDate as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'CUSTOMERID', cast(OLD.customerID as char),  \n" +
                "       cast(new.customerID as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'CONTACTPERSONID', cast(OLD.contactPersonID as char),  \n" +
                "       cast(new.contactPersonID as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'BILLINGADDRESSID', cast(OLD.billingAddressID as char),  \n" +
                "       cast(new.billingAddressID as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'SHIPPINGADDRESSID', cast(OLD.shippingAddressID as char),  \n" +
                "       cast(new.shippingAddressID as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'SHIPPINGMETHODID', cast(OLD.shippingMethodID as char),  \n" +
                "       cast(new.shippingMethodID as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'REVISION', cast(OLD.revision as char),  \n" +
                "       cast(new.revision as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'SHIPPINGCOMMENT', cast(OLD.shippingComment as char),  \n" +
                "       cast(new.shippingComment as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'TERMSID', cast(OLD.termsID as char),  \n" +
                "       cast(new.termsID as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "    values(\"SALESORDERMST\",cast(new.id as char),'STATUS', cast(OLD.status as char),  \n" +
                "       cast(new.status as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "     values(\"SALESORDERMST\",cast(new.id as char),'SODATE', cast(OLD.soDate as char),  \n" +
                "       cast(new.soDate as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "     values(\"SALESORDERMST\",cast(new.id as char),'REVISIONCHANGENOTE', cast(OLD.revisionChangeNote as char),  \n" +
                "       cast(new.revisionChangeNote as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) Then  \n" +
                "     insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)  \n" +
                "     values(\"SALESORDERMST\",cast(new.id as char),'', cast(OLD.isDeleted as char),  \n" +
                "       cast(new.isDeleted as char), SYSDATE(), NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "    END IF;  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "DROP TRIGGER  IF EXISTS  `Trg_AU_salesorderdet`;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`   \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) Then  \n" +
                "       insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'REFSALESORDERID',cast(OLD.refSalesOrderID as char),  \n" +
                "       cast(new.refSalesOrderID as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'QTY',cast(OLD.qty as char),  \n" +
                "       cast(new.qty as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'PRICE',cast(OLD.price as char),  \n" +
                "       cast(new.price as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'MRPQTY',cast(OLD.mrpQty as char),  \n" +
                "       cast(new.mrpQty as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'SHIPPINGQTY',cast(OLD.shippingQty as char),  \n" +
                "       cast(new.shippingQty as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'REMARK',cast(OLD.remark as char),  \n" +
                "       cast(new.remark as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'MATERIALTENTITVEDOCDATE',cast(OLD.materialTentitiveDocDate as char),  \n" +
                "       cast(new.materialTentitiveDocDate as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'prcNUMBEROFWEEK',cast(OLD.prcNumberofWeek as char),  \n" +
                "       cast(new.prcNumberofWeek as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'ISHOTJOB',cast(OLD.isHotJob as char),  \n" +
                "       cast(new.isHotJob as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'MATERIALDUEDATE',cast(OLD.materialDueDate as char),  \n" +
                "       cast(new.materialDueDate as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) Then  \n" +
                "        insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'PARTID',cast(OLD.partID as char),  \n" +
                "       cast(new.partID as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) Then  \n" +
                "	 insert into dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby)    \n" +
                "       values(\"SALESORDERDET\",cast(new.id as char),'ISDELETED',cast(OLD.isDeleted as char),  \n" +
                "       cast(new.isDeleted as char),SYSDATE(),NEW.createdBy,SYSDATE(),NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "       END;  \n" +
                //  /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_SOChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_SOChangeHistory`(        \n" +
                "	IN psoID INT(11),        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pTableName varchar(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "    BEGIN        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);   \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "			SELECT *,(SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser   \n" +
                "			FROM `dataentrychange_auditlog`  as dca  \n" +
                "			WHERE `Tablename`=pTableName And `RefTransID`=psoID   \n" +
                "            union all  \n" +
                "	  select *,(SELECT username FROM users WHERE id = dc.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser  \n" +
                "      from dataentrychange_auditlog dc  \n" +
                "	  where tablename ='salesorderdet'  \n" +
                "      AND RefTransID IN (select id from salesorderdet t where refSalesOrderID = psoID and t.id = dc.RefTransID);  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (380,'2.00','V1','Add Triger For sales Order-Mona'," + userid + ");"
            );
            break;
        case 380:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 14-03-2019  *********************************** */
                "Drop function if exists `fun_getAssyDescrByID`;  \n" +
                "CREATE FUNCTION `fun_getAssyDescrByID`(          \n" +
                "	ppartID INT) RETURNS varchar(500) CHARSET utf8  \n" +
                "BEGIN          \n" +
                "	DECLARE result NVARCHAR(255);          \n" +
                "  \n" +
                "	SELECT mfgPNDescription INTO @result FROM component WHERE id = ppartID        \n" +
                "	AND IFNULL(category,0) = 3;            \n" +
                "      	SET result = @result;          \n" +
                "	RETURN result;          \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 14-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (381,'2.00','V1','fun_getAssyDescrByID change in function  - Mona '," + userid + ");"
            );
            break;
        case 381:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "ALTER TABLE component ADD businessRisk VARCHAR(100);  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (382,'2.00','V1','Added column in component-Champak'," + userid + ");"
            );
            break;
        case 382:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/15/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(       \n" +
                "		pWarehouseID int(11),          \n" +
                "		pGlobalSearchBinId int(11),          \n" +
                "        pGlobalSearchUIDId int(11),          \n" +
                "		pSearchBinId INT(11),    \n" +
                "		pSearchString varchar(100),  \n" +
                "		pGlobalSearchClusterWHID INT(11)         \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	SET @vGlobalSearchUIDBinId = NULL;     \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN        \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;         \n" +
                "    END IF;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS            \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount            \n" +
                "	FROM 	component_sid_stock             \n" +
                "	WHERE 	IFNULL(isDeleted,0) = 0          \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts         \n" +
                "	group by binID;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS             \n" +
                "	SELECT 	b.id, 				b.name, 								b.isPermanentBin, 	    \n" +
                "			b.warehouseID, 		cast(NULL as char(50)) warehouseName,    \n" +
                "            0 departmentID,		cast(NULL as char(50)) deptName,		0 uidCount             \n" +
                "	FROM 	binmst b            \n" +
                "	WHERE 	b.id = IFNULL(pGlobalSearchBinId, b.id)              \n" +
                "    AND 	b.id = IFNULL(pSearchBinId, b.id)            \n" +
                "    AND 	b.id = IFNULL(@vGlobalSearchUIDBinId, b.id)          \n" +
                "    AND 	b.warehouseID = IFNULL(pWarehouseID,b.warehouseID)     \n" +
                "    AND 	b.warehouseID = IFNULL(pGlobalSearchClusterWHID,b.warehouseID)             \n" +
                "	AND 	IFNULL(b.isActive,1) = 1             \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0    \n" +
                "	AND 	b.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');    \n" +
                "  \n" +
                "  \n" +
                "	Update tempBinDet t, tempActiveBinIDs c            \n" +
                "	set t.uidCount = c.uidCount            \n" +
                "	where t.id = c.binID;        \n" +
                "  \n" +
                "     -- SET warehouse name      \n" +
                "	update 	tempBinDet t, warehousemst w            \n" +
                "    SET   	t.warehouseName = w.Name, t.departmentID = w.parentWHID         \n" +
                "    WHERE	t.warehouseID = w.id;         \n" +
                "  \n" +
                "    -- SET department name      \n" +
                "	update 	tempBinDet t, warehousemst w            \n" +
                "    SET   	t.deptName = w.Name         \n" +
                "    WHERE	t.departmentID = w.id;     \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempClusterBin  \n" +
                "    select *, 1 binCount,	False isCluster from tempBinDet where isPermanentBin = 0;  \n" +
                "  \n" +
                "	Insert into tempClusterBin  \n" +
                "    select  0, 					warehouseName, 		isPermanentBin, 	    \n" +
                "			warehouseID, 		warehouseName,  	departmentID,		  \n" +
                "            deptName,			sum(uidCount),		count(1) binCount,		True isCluster  \n" +
                "	from 	tempBinDet   \n" +
                "    where 	isPermanentBin = 1  \n" +
                "    group by warehouseName, isPermanentBin, warehouseID, departmentID, deptName, isCluster;  \n" +
                "  \n" +
                "    -- select * from tempBinDet;  \n" +
                "    select * from tempClusterBin;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;            \n" +
                "	DROP TEMPORARY TABLE tempBinDet;            \n" +
                "    DROP TEMPORARY TABLE tempClusterBin;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/15/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(     \n" +
                "	pBinID int(11),                \n" +
                "    pGlobalSearchUIDId int(11),             \n" +
                "	pSearchUIDId INT(11),            \n" +
                "	pSearchString varchar(100),  \n" +
                "    pClusterWHID INT(11)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "    SET @vWhere = \"\";   \n" +
                "  \n" +
                "    IF (pGlobalSearchUIDId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND css.id = \", pGlobalSearchUIDId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pSearchUIDId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND css.id = \", pSearchUIDId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  css.binID  = \", pBinID);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    if(pClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  css.binID  in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND IFNULL(css.isdeleted,0) = 0)\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "    END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"             \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                        \n" +
                "				SELECT 	css.id,					css.scanlabel,						css.pkgQty,				css.uid,                 \n" +
                "						c.PIDCode, 				c.mfgcodeID,        				c.mfgPN,  				mfg.mfgCode, 	        \n" +
                "						mfg.mfgName,			ro.rohsIcon,       					ro.name AS rohsName,	css.nickName,		        \n" +
                "						css.binID,				cast(NULL as char(50)) binName, 	0 warehouseID,			cast(NULL as char(50)) warehouseName,    \n" +
                "						0 departmentID,			cast(NULL as char(50)) deptName,	css.uom,				cast('' as char(100)) uomName                                         \n" +
                "				FROM component_sid_stock css                                        \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND IFNULL(c.isdeleted,0)=0                                       \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND IFNULL(ro.isdeleted,0)=0                                        \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND IFNULL(mfg.isdeleted,0)=0                                               \n" +
                "				WHERE	IFNULL(css.isdeleted,0) = 0             \n" +
                "	\", @vWhere);                  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;   \n" +
                "  \n" +
                "	-- SET Bin name      \n" +
                "	update 	Results r, binmst b            \n" +
                "    SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID         \n" +
                "    WHERE	r.binID = b.id;       \n" +
                "  \n" +
                "    -- SET warehouse name      \n" +
                "	update 	Results r, warehousemst w            \n" +
                "    SET   	r.warehouseName = w.Name, r.departmentID = w.parentWHID         \n" +
                "    WHERE	r.warehouseID = w.id;         \n" +
                "  \n" +
                "    -- SET department name      \n" +
                "	update 	Results r, warehousemst w            \n" +
                "    SET   	r.deptName = w.Name         \n" +
                "    WHERE	r.departmentID = w.id;      \n" +
                "  \n" +
                "	-- Set UOM      \n" +
                "    update 	Results r, uoms u            \n" +
                "    SET   	r.uomName = u.abbreviation            \n" +
                "    WHERE	r.uom = u.id;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \");                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/15/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(                \n" +
                "	pDeptID INT(11),        \n" +
                "    pGlobalSearchWHId INT(11),      \n" +
                "	pGlobalSearchBinId int(11),        \n" +
                "	pGlobalSearchUIDId int(11),        \n" +
                "    pSearchWHId INT(11),    \n" +
                "    pSearchString varchar(100),  \n" +
                "    pGlobalSearchClusterWHID INT(11)  \n" +
                ")  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	set @vGlobalSearchBinWHId = NULL;      \n" +
                "    set @vGlobalSearchUIDBinId = NULL;      \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN      \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;       \n" +
                "         SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = @vGlobalSearchUIDBinId;       \n" +
                "    END IF;      \n" +
                "  \n" +
                "    IF(pGlobalSearchBinId IS NOT NULL) THEN      \n" +
                "		 SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = pGlobalSearchBinId;       \n" +
                "    END IF;      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS       \n" +
                "	SELECT 	w.id, 			w.name, 		w.isPermanentWH,   \n" +
                "			w.parentWHID,  	cast(NULL as char(50)) deptName,   \n" +
                "			0 binCount, 	0 uidCount, 	w.allMovableBin        \n" +
                "	FROM 	warehousemst w         \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)        \n" +
                "	AND 	w.id = IFNULL(pSearchWHId, w.id)     \n" +
                "	AND 	w.id = IFNULL(@vGlobalSearchBinWHId, w.id)   \n" +
                "	AND 	w.id = IFNULL(pGlobalSearchClusterWHID, w.id)   \n" +
                "	AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))          \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1           \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0            \n" +
                "	AND 	IFNULL(w.isActive,1) = 1    \n" +
                "    AND 	w.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS              \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID            \n" +
                "	FROM 	binmst b            \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)           \n" +
                "    AND		b.id = IFNULL(pGlobalSearchBinId, b.id)   		-- Need to remove if show all counts      \n" +
                "    AND		b.id = IFNULL(@vGlobalSearchUIDBinId, id) 		-- Need to remove if show all counts        \n" +
                "	AND 	IFNULL(b.isActive,1) = 1             \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS            \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount            \n" +
                "	FROM 	component_sid_stock             \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)        \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts      \n" +
                "	AND		IFNULL(isDeleted,0) = 0            \n" +
                "	GROUP BY binID;        \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c         \n" +
                "	SET    	t.uidCount = c.uidCount        \n" +
                "	WHERE   t.id = c.binID;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS             \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount            \n" +
                "	FROM 	tempBinDet             \n" +
                "	GROUP BY warehouseID;         \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c         \n" +
                "	SET   	t.binCount = c.binCount,        \n" +
                "			t.uidCount = c.uidCount        \n" +
                "	WHERE  	t.id = c.warehouseID;        \n" +
                "  \n" +
                "	-- SET department name      \n" +
                "	update 	tempWarehouseDet t, warehousemst w            \n" +
                "    SET   	t.deptName = w.Name         \n" +
                "    WHERE	t.parentWHID = w.id;     \n" +
                "  \n" +
                "    SELECT * FROM tempWarehouseDet;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;            \n" +
                "	DROP TEMPORARY TABLE tempBinDet;            \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;            \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/15/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_Transfer_Stock_History`;  \n" +
                "CREATE PROCEDURE `Sproc_Transfer_Stock_History`(	                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),	                                  \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN pUID varchar(14)      \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                    \n" +
                "	SELECT 	css.id, 									css.scanlabel, 							        \n" +
                "			css.pkgQty, 								css.uom,									cast(NULL as char(100)) uomName,        \n" +
                "			css.uid, 									css.printStatus, 							css.costCategoryID,        \n" +
                "            cast(NULL as char(100)) costCategory, 		css.lotCode, 								css.dateCode,             				        \n" +
                "            css.refcompid,								0 mfgcodeID, 								cast(NULL as char(100)) mfgPN, 			        \n" +
                "            cast(NULL as char(50)) PIDCode, 			0 packaginggroupID,							0 mfgID, 	        \n" +
                "            cast(NULL as char(255)) mfgCode, 			0 packageQty,  							cast(NULL as char(500)) mfg,        \n" +
                "            0 mslLevel,									0 pictureCount,								css.refCompSIDStockID,			        \n" +
                "            0 RoHSStatusID,								cast(NULL as char(255)) rohsIcon, 			cast(NULL as char(50)) rohsName,			        \n" +
                "            css.binID,    								cast(NULL as char(50)) location,   		        \n" +
                "            css.warehouseID,							cast(NULL as char(50)) warehouse,                   \n" +
                "            css.deptWHID,					cast(NULL as char(50)) department,        \n" +
                "            css.customerID,								cast(NULL as char(500)) customer,                   \n" +
                "            css.assyID,									cast(NULL as char(50)) assembly,                                \n" +
                "            (CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,               \n" +
                "			(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,        \n" +
                "            css.refCPNMFGPNID,							cast(NULL as char(500)) cpnMFGCode,     	cast(NULL as char(100)) cpnMFGPN,                      \n" +
                "			cast(NULL as char(100)) mfgPNDescription, 	css.receiveMaterialType, 					css.spq,         \n" +
                "            css.pcbPerArray, 							css.updatedAt, 								css.nickName,        \n" +
                "			css.packaging,								cast(NULL as char(100)) packagingName,	        \n" +
                "            css.refSupplierPartId, 						cast(NULL as char(500)) supplierMFGCode,  	cast(NULL as char(100)) supplieMFGPN,        \n" +
                "			css.expiryDate,								css.createdAt,								css.createdBy,	        \n" +
                "            CAST(NULL AS CHAR(255)) createdByName                                   \n" +
                "	FROM component_sid_stock_history css                          \n" +
                "	WHERE IFNULL(css.isdeleted,0) = 0;        \n" +
                "  \n" +
                "    -- Set bin name        \n" +
                "	UPDATE 	Results r, binmst b          \n" +
                "	SET 	r.location = b.Name       \n" +
                "	WHERE 	r.binID = b.id;         \n" +
                "  \n" +
                "    -- Set warehouse name        \n" +
                "    UPDATE 	Results r, warehousemst w          \n" +
                "	SET 	r.warehouse = w.Name      \n" +
                "	WHERE 	r.WarehouseID = w.id;         \n" +
                "  \n" +
                "	-- Set department name        \n" +
                "	UPDATE 	Results r, warehousemst w          \n" +
                "	SET 	r.department = w.Name        \n" +
                "	WHERE 	r.deptWHID = w.id;         \n" +
                "  \n" +
                "    -- Set component detail        \n" +
                "    UPDATE 	Results r, component c          \n" +
                "	SET 	r.mfgcodeID = c.mfgcodeID, r.mfgPN = c.mfgPN, r.PIDCode = c.PIDCode, r.packageQty = IFNULL(c.packageQty,1),        \n" +
                "			r.RoHSStatusID = c.RoHSStatusID, r.packaginggroupID = IFNULL(c.packaginggroupID, 0), r.mslLevel =  IFNULL(c.mslID,0),        \n" +
                "            r.mfgPNDescription = c.mfgPNDescription        \n" +
                "	WHERE 	r.refcompid = c.id;        \n" +
                "  \n" +
                "    -- Set UOM        \n" +
                "    UPDATE 	Results r, uoms u            \n" +
                "    SET   	r.uomName = u.abbreviation            \n" +
                "    WHERE	r.uom = u.id;           \n" +
                "  \n" +
                "	-- Set manufacturer detail        \n" +
                "    UPDATE 	Results r, mfgcodemst m         \n" +
                "	SET 	r.mfgID = m.id,	r.mfgCode = m.mfgCode, r.mfg = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)        \n" +
                "	WHERE 	r.mfgcodeID = m.id;        \n" +
                "  \n" +
                "    -- Set customer detail        \n" +
                "    UPDATE 	Results r, mfgcodemst m         \n" +
                "	SET 	r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)        \n" +
                "	WHERE 	r.customerID = m.id;        \n" +
                "  \n" +
                "	-- Set cost category name        \n" +
                "	UPDATE 	Results r, cost_category c          \n" +
                "	SET 	r.costCategory = c.categoryName        \n" +
                "	WHERE 	r.costCategoryID = c.id;        \n" +
                "  \n" +
                "    -- Set RoHS det        \n" +
                "	UPDATE 	Results r, rfq_rohsmst rohs          \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name        \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;        \n" +
                "  \n" +
                "    -- Update picture count        \n" +
                "    UPDATE 	Results r        \n" +
                "	SET 	r.pictureCount = (SELECT COUNT(*) FROM genericfiles gf WHERE gf.gencFileOwnerType = 'component_sid_stock' AND gf.refTransID = r.refCompSIDStockID AND gf.isActive = 1 AND gf.deletedAt IS NULL);        \n" +
                "  \n" +
                "	 -- Set ref. CPN detail        \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m          \n" +
                "	SET 	r.cpnMFGPN = c.mfgPN, r.cpnMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)        \n" +
                "	WHERE 	r.refCPNMFGPNID = c.id        \n" +
                "    AND		c.mfgcodeID = m.id;        \n" +
                "  \n" +
                "	-- Set assembly detail        \n" +
                "    UPDATE 	Results r, component c        \n" +
                "	SET 	r.assembly = c.PIDCode        \n" +
                "	WHERE 	r.assyID = c.id;        \n" +
                "  \n" +
                "    -- Set packaging detail        \n" +
                "    UPDATE 	Results r, Component_PackagingMst c        \n" +
                "	SET 	r.packagingName = c.name        \n" +
                "	WHERE 	r.packaging = c.id;        \n" +
                "  \n" +
                "  -- Set supplier part detail        \n" +
                "    UPDATE 	Results r, component c, mfgcodemst m          \n" +
                "	SET 	r.supplieMFGPN = c.mfgPN, r.supplierMFGCode = CONCAT('(', m.mfgCode, ')', ' ', m.mfgName)        \n" +
                "	WHERE 	r.refSupplierPartId = c.id        \n" +
                "    AND		c.mfgcodeID = m.id;        \n" +
                "  \n" +
                "	-- set transferred by        \n" +
                "    UPDATE 	Results r, users u          \n" +
                "	SET 	r.createdByName = u.username          \n" +
                "	WHERE 	r.createdBy = u.id;         \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                  \n" +
                "		SET pWhereClause = '1=1';        \n" +
                "	END IF;	             \n" +
                "  \n" +
                "    IF(pUID IS NOT NULL) THEN        \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND uid = '\", pUID, \"'\");        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03/15/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveBin_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin_History`(            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN pBinID INT(11),  \n" +
                "    IN pClusterWHID INT(11)       \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "	SELECT  id,				Name, 									Description, 		      \n" +
                "			WarehouseID, 	cast(NULL as char(50)) wareHoueseName,	nickname,       \n" +
                "			isActive,		(CASE WHEN (isActive= 0) THEN 'Inactive' WHEN (isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,          \n" +
                "			isPermanentBin,	(CASE WHEN (isPermanentBin = 0) THEN 'No' WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS isPermanentBinConvertedValue,      \n" +
                "            refBinID, 		createdBy, 			createdAt,			CAST(NULL AS CHAR(255)) createdByName                \n" +
                "	FROM binmst_history;          \n" +
                "  \n" +
                "	-- Set warehouse name        \n" +
                "    UPDATE 	Results r, warehousemst w          \n" +
                "	SET 	r.wareHoueseName = w.Name      \n" +
                "	WHERE 	r.WarehouseID = w.id;         \n" +
                "  \n" +
                "	-- set created by        \n" +
                "    UPDATE 	Results r, users u          \n" +
                "	SET 	r.createdByName = u.username          \n" +
                "	WHERE 	r.createdBy = u.id;         \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY Name ASC\") ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "    IF(pBinID IS NOT NULL) THEN        \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refBinID = '\", pBinID, \"'\");        \n" +
                "    END IF;       \n" +
                "  \n" +
                "    IF(pClusterWHID IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND refBinID in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND IFNULL(isdeleted,0) = 0)\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );         \n" +
                "    PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);           \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "	DROP TEMPORARY TABLE Results;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/15/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveWarehouse_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse_History`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pWarehouseID INT(11)    \n" +
                ")  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;           \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "	SELECT w.*,  CAST(NULL AS CHAR(50)) parentWarehouseName,        \n" +
                "			(CASE WHEN (w.isActive = 0) THEN 'Inactive' WHEN (w.isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,    \n" +
                "			(CASE WHEN (w.isPermanentWH = 0) THEN 'No' WHEN (w.isPermanentWH = 1) THEN 'Yes' ELSE '' END) AS parentConvertedValue,    \n" +
                "            CAST(NULL AS CHAR(255)) createdByName     \n" +
                "	FROM	warehousemst_history w;    \n" +
                "  \n" +
                "	-- Set department name        \n" +
                "	UPDATE Results r, warehousemst w      \n" +
                "	SET r.parentWarehouseName = w.name      \n" +
                "	WHERE r.parentWHID = w.id;      \n" +
                "  \n" +
                "	-- set created by        \n" +
                "    UPDATE 	Results r, users u          \n" +
                "	SET 	r.createdByName = u.username          \n" +
                "	WHERE 	r.createdBy = u.id;         \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"Name ASC\") ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	IF(pWarehouseID IS NOT NULL) THEN        \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refWHID = '\", pWarehouseID, \"'\");        \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/15/2019   *********************************** */
                /* **************************** Add Script Version -> 03/15/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (383,'2.00','V1',' Modified procedures for Cluster bin related changes - Dharmishtha '," + userid + ");"
            );
            break;
        case 383:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                    \n" +
                "    IN puserID VARCHAR(50),                              \n" +
                "    IN pnickName VARCHAR(20),                              \n" +
                "    IN pprefix VARCHAR(20),                              \n" +
                "    IN puid VARCHAR(20),                          \n" +
                "    IN pComponentID INT,                      \n" +
                "    IN pCustomerID INT,                      \n" +
                "    IN pCPN BOOL,                      \n" +
                "    IN pMFGAvailabel BOOL,                      \n" +
                "    IN pRefCpnMfgID INT,                  \n" +
                "    IN pAssyID INT,                  \n" +
                "    IN pSalesOrderDetailID INT,		                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),        \n" +
                "    IN pkitAssemblyID INT 	                 \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                    \n" +
                "	DECLARE v_length INT;                                     \n" +
                "	DECLARE v_fieldType INT;                                         \n" +
                "	DECLARE v_entityId INT;                                    \n" +
                "	DECLARE v_dataElementId INT;                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                    \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);		              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                    \n" +
                "	DECLARE plen,slen INT;                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                \n" +
                "	DECLARE barcode_type_id INT;                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';      \n" +
                "	DECLARE v_SupplierID INT;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                    \n" +
                "	(                                    \n" +
                "	     errorText NVARCHAR(2000),                                    \n" +
                "	     IsSuccess VARCHAR (2),                          \n" +
                "	     MFGPart VARCHAR(100)                                         \n" +
                "	);                         \n" +
                "	-- get data from barcode templates with seprator                                    \n" +
                "	block1: BEGIN                 \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);         \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN      \n" +
                "			SELECT COUNT(*) INTO @NumberOfPart FROM             \n" +
                "			(            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL            \n" +
                "				UNION            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "			) a;			      \n" +
                "			IF (@NumberOfPart > 0) THEN		      \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);      \n" +
                "				SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);       \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		-- tempregexp;    	            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                          \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                               \n" +
                "		ELSE /* barcode 1D */       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                               \n" +
                "		END IF;              \n" +
                "	END block1;                                    \n" +
                "  \n" +
                "	block2: BEGIN      	            \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                                    \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                                    \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                 \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                             \n" +
                "		-- declare exit loop if data not found                                    \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "	        -- if any record match found than  check for delimiter and its value                               \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                                    \n" +
                "			-- create temporary table for deliemeter and component dataelement                                    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                    \n" +
                "				pentityId INT,                                    \n" +
                "				pdataElementId INT,                                    \n" +
                "				pdelimiter_value VARCHAR(200)                                    \n" +
                "			);                               \n" +
                "  \n" +
                "			-- create temporary table for separator string values                                    \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                    \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                          \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                                    \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                           \n" +
                "  \n" +
                "			-- open cursor                                    \n" +
                "			OPEN barcodeMatch_cursor;                                    \n" +
                "  \n" +
                "			-- set str label as whereclause                                    \n" +
                "			SET strLabel=pWhereClause;                             \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                                    \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                                    \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                    \n" +
                " 			 END IF;                                   \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                                     \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                                    \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                    \n" +
                "			 END IF;	                          \n" +
                "  \n" +
                "			-- insert all values after seprator split                                     \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                    \n" +
                "			PREPARE stmt1 FROM @SQL;	                                    \n" +
                "			EXECUTE stmt1;                                    \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                                    \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                                    \n" +
                "			barcodeMatch_loop:LOOP                 \n" +
                "				-- get all five selected values                                    \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                            \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                                    \n" +
                "				IF exit_loop THEN                               \n" +
                "					CLOSE barcodeMatch_cursor;                                    \n" +
                "					LEAVE barcodeMatch_loop;                                    \n" +
                "				END IF;                               \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                                    \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                    \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                    \n" +
                "				EXECUTE stmtdelimiter;                          \n" +
                "  \n" +
                "				-- get delimiter values from string                                    \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                            \n" +
                "				-- check for field type is static or dynamic                                    \n" +
                "				-- if static field than check for mfg code and mfg part number                                    \n" +
                "				IF v_fieldType = 0  THEN                                \n" +
                "					-- component_sid_stock                                     \n" +
                "					-- get static field name from barcode table delimiter data element id                                    \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                      \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                    \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                          \n" +
                "						SET MFG_Part_No = delimiter_value_data;                          \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN               \n" +
                "							SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM             \n" +
                "							(            \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL            \n" +
                "								UNION            \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "							) a;            \n" +
                "						ELSE                          \n" +
                "							SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                          \n" +
                "						END IF;                          \n" +
                "  \n" +
                "						IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN      \n" +
                "							SET BarcodeMFGMatch = 'Mismatch';      \n" +
                "							CLOSE barcodeMatch_cursor;                                    \n" +
                "							LEAVE barcodeMatch_loop;        \n" +
                "						END IF;      \n" +
                "  \n" +
                "						SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;      \n" +
                "						IF (@MFGType = 'DIST') THEN      \n" +
                "							SET v_SupplierID = @componentId;      \n" +
                "							SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;      \n" +
                "						END IF;      \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN        \n" +
                "							SELECT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId;				        \n" +
                "							IF (@rfqLineItemsID IS NULL) THEN        \n" +
                "								CLOSE barcodeMatch_cursor;                                    \n" +
                "								LEAVE barcodeMatch_loop;        \n" +
                "							END IF;        \n" +
                "						END IF;        \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                    \n" +
                "						END IF;              \n" +
                "					END IF;                                    \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                    \n" +
                "					IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                            \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                    \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		              \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;                    \n" +
                "					IF @componentCount > 1 THEN                          \n" +
                "						CLOSE barcodeMatch_cursor;                                    \n" +
                "						LEAVE barcodeMatch_loop;                          \n" +
                "					END IF;                             \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                    \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                     \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                                    \n" +
                "  \n" +
                "				ELSE                \n" +
                "					-- component_sid_stock_dataelement_Values                                      \n" +
                "					-- dynamic fields                   \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);               \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;                    \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;              \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                                     \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                                 \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                     \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                             \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                                    \n" +
                "			-- check if mfg and component both found than         \n" +
                "			IF (BarcodeMFGMatch = 'Mismatch') THEN                                    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFGCode is mismatch with barcode template MFGCode',8,MFG_Part_No);        \n" +
                "			ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);        \n" +
                "			ELSEIF (@componentCount > 1) THEN                          \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                    \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                    \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                    \n" +
                "                                   IF @Mfgmatched = 0  THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                    \n" +
                "				   END IF;									                                    \n" +
                "			 ELSE 		                          \n" +
                "				IF @mfgCount = 0 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                    \n" +
                "		                END IF;	                                    \n" +
                "				IF @componentCount = 0 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                    \n" +
                "				END IF;	                                    \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                                      \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                    \n" +
                "			        END IF;						                                    \n" +
                "			END IF;				                                    \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN                      \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                      \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                      \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                    \n" +
                "				END IF;                      \n" +
                "			END IF;                      \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                    \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	                      \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                      \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                      \n" +
                "				END IF;                   \n" +
                "  \n" +
                "				-- must call statements in sequence          				                          \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                    \n" +
                "				PREPARE stmt1 FROM @SQL1;                                    \n" +
                "				EXECUTE stmt1;                                  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                      \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                      \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                   \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (v_SupplierID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                      \n" +
                "				END IF;         \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                      \n" +
                "				SET @sql2 = UpdateValue;	                                     \n" +
                "				PREPARE stmt2 FROM @SQL2;                                    \n" +
                "				EXECUTE stmt2;	                                    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                    \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                          \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                     \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                    \n" +
                "				END IF;                                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "			ELSE                                   \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "			END IF;                                    \n" +
                "  \n" +
                "		ELSE                                \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                    \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                      \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "	END block2;                                               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (384,'2.00','V1','Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 384:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-03-2019  *********************************** */
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD bomLastVersion VARCHAR (255);  \n" +
                /* **************************** Add Script Version -> 18-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (385,'2.00','V1','Added column in rfq_assemblies_quotation_submitted-Champak'," + userid + ");"
            );
            break;
        case 385:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(                    \n" +
                "	IN rfqAssyID INT(11),  \n" +
                "	IN customerID INT(11)  \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,c.mfgpn AS assyNumber,  \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,  \n" +
                "	   (SELECT (MAX(LEVEL)+1) FROM part_sub_assy_relationship psar WHERE psar.partID =ra.partID AND psar.isdeleted=0) AS assyLevel,  \n" +
                "	   (SELECT COUNT(*) FROM rfq_assemblies rfqs WHERE rfqs.rfqrefID =ra.rfqrefID AND rfqs.isdeleted=0) AS assyCount,   \n" +
                "	   c.liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,  \n" +
                "	   (SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID=ra.id) AS totalQuoteCount,  \n" +
                "	   (SELECT rasp.quoteNumber FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS quoteNumber,  \n" +
                "	   (SELECT rasp.bomLastVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS bomLastVersion,  \n" +
                "	   (SELECT rasp.quoteSubmitDate FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS quoteSubmitDate,  \n" +
                "	   (SELECT rasp.bomInternalVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS bomInternalVersion,  \n" +
                "	   (SELECT CONCAT('(',mm.mfgCode,')',mm.mfgName) FROM mfgcodemst mm WHERE mm.id=customerID) AS customerName,  \n" +
                "	   (SELECT GROUP_CONCAT(CONCAT(IFNULL(css.className,''),' ',cs.fullName))  FROM component_standard_details csd LEFT JOIN certificate_standards cs  \n" +
                "ON csd.certificatestandardID=cs.certificatestandardid LEFT JOIN standard_class css ON   \n" +
                "csd.classID=css.classID WHERE csd.componentid=ra.partID) AS standards  \n" +
                "	   FROM rfq_assemblies ra  LEFT JOIN component c  \n" +
                "	   ON c.id=ra.partID LEFT JOIN rfq_assy_typemst rat   \n" +
                "          ON rat.id=ra.assemblyTypeID LEFT JOIN rfq_rohsmst rh  \n" +
                "          ON rh.id=c.RoHSStatusID  \n" +
                "  \n" +
                "           WHERE ra.id= rfqAssyID AND ra.isdeleted=0;                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (386,'2.00','V1','Alter sp Sproc_GetAssyBOMHeaderList-Champak'," + userid + ");"
            );
            break;
        case 386:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-03-2019  *********************************** */
                "UPDATE rfq_lineitems_errorcode SET description = 'Supplier PN <% Supplier PN %> does not exist for Supplier <% Supplier %>.',  \n" +
                "systemVariable = '<% Supplier PN %>,<% Supplier %>',displayName ='Supplier & Supplier PN Validation',  \n" +
                "org_description = 'Supplier PN <% Supplier PN %> does not exist for Supplier <% Supplier %>.' WHERE logicID = 4;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Mismatch: MFG <% MFG %> MFG PN <% MFG PN %> mismatched with Supplier <% Supplier %> Supplier PN <% Supplier PN %>, please advise.',  \n" +
                "systemVariable = '<% Supplier PN %>,<% MFG PN %>,<% MFG %>,<% Supplier %>',displayName ='MFG-Supplier Mapping',  \n" +
                "org_description = 'Mismatch: MFG <% MFG %> MFG PN <% MFG PN %> mismatched with Supplier <% Supplier %> Supplier PN <% Supplier PN %>, please advise.' WHERE logicID = 5;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Supplier <% Supplier %> Supplier PN <% Supplier PN %> returned MFG <% MFG %> MFG PN <% MFG PN %> which is not in BOM, please approve to add MFG <% MFG %> MFG PN <% MFG PN %> .',  \n" +
                "systemVariable = '<% Supplier PN %>,<% Supplier %>',displayName ='Unable to Receive MFGPN from Supplier PN',  \n" +
                "org_description = 'Supplier <% Supplier %> Supplier PN <% Supplier PN %> returned MFG <% MFG %> MFG PN <% MFG PN %> which is not in BOM, please approve to add MFG <% MFG %> MFG PN <% MFG PN %> .' WHERE logicID = 6;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Invalid <% Supplier %>.',  \n" +
                "systemVariable = '<% Supplier %>',displayName ='Invalid Supplier',  \n" +
                "org_description = 'Invalid <% Supplier %>.' WHERE logicID = 10;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Invalid Supplier or Supplier PN <% Supplier PN %>, Please suggest valid Supplier & PN.',  \n" +
                "systemVariable = '<% Supplier PN %>',displayName ='Invalid Supplier PN',  \n" +
                "org_description = 'Invalid Supplier or Supplier PN <% Supplier PN %>, Please suggest valid Supplier & PN.' WHERE logicID = 11;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode SET description = 'Bad Supplier part# :  <% Supplier %> <% Supplier PN %>. Please advise.',  \n" +
                "systemVariable = '<% Supplier PN %>,<% Supplier %>',displayName ='Bad Supplier Part',  \n" +
                "org_description = 'Bad Supplier part# :  <% Supplier %> <% Supplier PN %>. Please advise.' WHERE logicID = 13;  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_headers SET `name`='Supplier Alias' WHERE `field` = 'aliasMFGPN';  \n" +
                /* **************************** New Script -> 18-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                          \n" +
                "	IN ppageIndex INT(11),                          \n" +
                "	IN precordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383)                          \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "DECLARE pOffset INT(11);                          \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                          \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                          \n" +
                "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Supplier Mapping'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                           \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                           \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'                                         \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                          \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'                    \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'                        \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'                  \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'               \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Category'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Functional Testing Required'              \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'      \n" +
                "              WHEN(rfq_lineitems_errorcode.logicID = 38) THEN 'Military Standard RoHS'              \n" +
                "              ELSE '' END) AS `logicName`,errorCode, errorColor,                           \n" +
                "              description, systemVariable,logicID, displayName, org_description,updatedAt, narrative                  \n" +
                "			FROM `rfq_lineitems_errorcode`                          \n" +
                "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                          \n" +
                "		ELSE                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "			SET pWhereClause = '1=1' ;                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "		ELSE	                          \n" +
                "			SET rowNumWhere = '';                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "		/* to get total count of rows */                          \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                          \n" +
                "		PREPARE query1 FROM @SQLStatement1;                          \n" +
                "		EXECUTE query1;                          \n" +
                "		DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          \n" +
                "		PREPARE query2 FROM @SQLStatement2;                          \n" +
                "		EXECUTE query2;                          \n" +
                "		DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;                          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                    \n" +
                "	DECLARE pIsUpdateRequired BOOL;          \n" +
                "	DECLARE pLiveInternalVersion INT(11);                     \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                    \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                    \n" +
                "	DECLARE newUOM VARCHAR(50);                   \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);    \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);       \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	DECLARE pRfqAssID INT(11);              \n" +
                "	DECLARE pErrorNarrative TEXT;               \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;          \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;      \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;          \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';        \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN    \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';     \n" +
                "	ELSE     \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';     \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN    \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;    \n" +
                "		ELSE     \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;    \n" +
                "		END IF;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;                    \n" +
                "	IF pLiveInternalVersion > 0 THEN                     \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN                 \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Item\",                    \n" +
                "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;                 \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"QPA\",                    \n" +
                "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;                      \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"REF DES\",                    \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN               \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"CPN\",                    \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.level IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Level\",                    \n" +
                "				NULL, CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Install\",                    \n" +
                "				NULL, CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN                     \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Buy\",                    \n" +
                "				NULL, CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.isActive IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Is Active\",                    \n" +
                "				NULL, CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.leadQty IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead Qty\",                    \n" +
                "				NULL, CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.attritionRate IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Overage %\",                    \n" +
                "				NULL, CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Rev\",                    \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.partclassID IS NOT NULL THEN          \n" +
                "			SET pIsUpdateRequired = TRUE;                     \n" +
                "			IF NEW.partclassID != 0                    \n" +
                "				THEN                     \n" +
                "					SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                    \n" +
                "					SELECT `name` INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                    \n" +
                "				ELSE                     \n" +
                "					SET newPartTypeName = '';                    \n" +
                "					SET newMountingTypeName = '';                    \n" +
                "			END IF;                    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Mounting Type\",                    \n" +
                "				NULL,                    \n" +
                "				CONCAT(newPartTypeName,' | ', newMountingTypeName),                    \n" +
                "				CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Comment\",                    \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;                 \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Lead\",                    \n" +
                "				NULL, CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN QTY\",                    \n" +
                "				NULL, CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DPN DES\",                    \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			IF NEW.uomID IS NOT NULL                    \n" +
                "				THEN                     \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                    \n" +
                "				ELSE                     \n" +
                "					SET newUOM = '';                    \n" +
                "			END IF;                    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"UOM\",                    \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.refRFQLineItemID IS NOT NULL THEN             \n" +
                "			SET pIsUpdateRequired = TRUE;                  \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Parent Line\",                    \n" +
                "				NULL, CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN           \n" +
                "			SET pIsUpdateRequired = TRUE;                    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"Customer Part Desc\",                    \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN            \n" +
                "			SET pIsUpdateRequired = TRUE;                   \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, New.partID, \"DNP Qty Buy\",                    \n" +
                "				NULL, CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN                 	    \n" +
                "			SET pIsUpdateRequired = TRUE;       \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 1;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                    \n" +
                "				NULL, CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN                 	    \n" +
                "			SET pIsUpdateRequired = TRUE;       \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                    \n" +
                "				NULL, CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);            \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN                 	    \n" +
                "			SET pIsUpdateRequired = TRUE;       \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                    \n" +
                "				NULL, CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                    \n" +
                "		END IF;       \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN                 	    \n" +
                "			SET pIsUpdateRequired = TRUE;       \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                    \n" +
                "				NULL, CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                    \n" +
                "		END IF;                          \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN          \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);          \n" +
                "		END IF;         \n" +
                "  \n" +
                "	END IF;                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                    \n" +
                "	DECLARE pIsUpdateRequired BOOL;          \n" +
                "	DECLARE pLiveInternalVersion INT(11);               \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);                    \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);                    \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                    \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                    \n" +
                "	DECLARE oldUOM VARCHAR(50);                    \n" +
                "	DECLARE newUOM VARCHAR(50);    \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);    \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                       \n" +
                "	DECLARE pCompanyName VARCHAR(100);    \n" +
                "	DECLARE pErrorNarrative TEXT;                  \n" +
                "	DECLARE pRfqAssID INT(11);                 \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;          \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;      \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;           \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';        \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN    \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';     \n" +
                "	ELSE     \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';     \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN    \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;    \n" +
                "		ELSE     \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;    \n" +
                "		END IF;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN          \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",                    \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN                \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",                    \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",                    \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN                \n" +
                "		SET pIsUpdateRequired = TRUE;               \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",                    \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN             \n" +
                "		SET pIsUpdateRequired = TRUE;                  \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",                    \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN              \n" +
                "		SET pIsUpdateRequired = TRUE;                 \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Install\",                    \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN                  \n" +
                "		SET pIsUpdateRequired = TRUE;             \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Buy\",                    \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",                    \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN                \n" +
                "		SET pIsUpdateRequired = TRUE;               \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",                    \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN                \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",                    \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",                    \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN                     \n" +
                "		IF OLD.partclassID != 0                    \n" +
                "			THEN                     \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;                    \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;                    \n" +
                "			ELSE                     \n" +
                "				SET oldPartTypeName = '';                    \n" +
                "				SET oldMountingTypeName = '';                    \n" +
                "		END IF;                    \n" +
                "		IF NEW.partclassID != 0                    \n" +
                "			THEN                     \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                    \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                    \n" +
                "			ELSE                     \n" +
                "				SET newPartTypeName = '';                    \n" +
                "				SET newMountingTypeName = '';                    \n" +
                "		END IF;                    \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",                    \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),                    \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),                    \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",                    \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead\",                    \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;		          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",                    \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",                    \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN                     \n" +
                "		IF OLD.uomID IS NOT NULL                    \n" +
                "			THEN                     \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;                    \n" +
                "			ELSE                     \n" +
                "				SET oldUOM = '';                    \n" +
                "		END IF;                    \n" +
                "		IF NEW.uomID IS NOT NULL                    \n" +
                "			THEN                     \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                    \n" +
                "			ELSE                     \n" +
                "				SET newUOM = '';                    \n" +
                "		END IF;                    \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",                    \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",                    \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",                    \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN                     \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                     \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "			oldValue,newValue,changeVersion,                    \n" +
                "			createdAt,createdBy)                     \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",                    \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "			SYSDATE(),NEW.updatedBy);                    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF OLD.qpaDesignatorStep IS NULL OR (IFNULL(OLD.qpaDesignatorStep, 0) != IFNULL(NEW.qpaDesignatorStep, 0)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 1;           \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                    \n" +
                "				CAST(OLD.qpaDesignatorStep AS CHAR), CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                    \n" +
                "				CAST(OLD.qpaDesignatorStep AS CHAR), CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF OLD.duplicateCPNStep IS NULL OR (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;           \n" +
                "		IF IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                    \n" +
                "				CAST(OLD.duplicateCPNStep AS CHAR), CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                    \n" +
                "				CAST(OLD.duplicateCPNStep AS CHAR), CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF OLD.requireMountingTypeStep IS NULL OR (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;           \n" +
                "		IF IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                    \n" +
                "				CAST(OLD.requireMountingTypeStep AS CHAR), CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                    \n" +
                "				CAST(OLD.requireMountingTypeStep AS CHAR), CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF OLD.requireFunctionalTypeStep IS NULL OR (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;           \n" +
                "		IF IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                    \n" +
                "				CAST(OLD.requireFunctionalTypeStep AS CHAR), CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN    \n" +
                " 			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                    \n" +
                "				CAST(OLD.requireFunctionalTypeStep AS CHAR), CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;             \n" +
                "  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN          \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);          \n" +
                "	END IF;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (387,'2.00','V1',' Resolved issues and changes distributor to supplier - Jignesh K '," + userid + ");"
            );
            break;
        case 387:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "UPDATE warehousemst SET allMovableBin = 1 WHERE isPermanentWH = 1;  \n" +
                "UPDATE binmst b SET b.isPermanentBin = 1 WHERE b.warehouseID = (SELECT w.ID FROM warehousemst w WHERE w.deletedAt IS NULL AND w.allMovableBin = 0 AND w.ID = b.warehouseID);  \n" +
                "UPDATE binmst b SET b.isPermanentBin = 0 WHERE b.warehouseID = (SELECT w.ID FROM warehousemst w WHERE w.deletedAt IS NULL AND w.allMovableBin = 1 AND w.ID = b.warehouseID);  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveWarehouse` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383)          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS          \n" +
                "		SELECT `warehousemst`.*,  CAST(NULL AS CHAR(50)) parentWarehouseName,        \n" +
                "			(CASE   \n" +
                "				WHEN (`warehousemst`.`isActive` = 0) THEN 'Inactive'           \n" +
                "				WHEN (`warehousemst`.`isActive` = 1) THEN 'Active'   \n" +
                "				ELSE ''   \n" +
                "			END) AS `isActiveConvertedValue`,      \n" +
                "			(CASE   \n" +
                "				WHEN (`isPermanentWH` = 0) THEN 'No'       \n" +
                "				WHEN (`isPermanentWH` = 1) THEN 'Yes'   \n" +
                "				ELSE ''   \n" +
                "			END) AS `parentConvertedValue`,  \n" +
                "			(CASE   \n" +
                "				WHEN (`allMovableBin` = 0) THEN 'No'       \n" +
                "				WHEN (`allMovableBin` = 1) THEN 'Yes'   \n" +
                "				ELSE ''   \n" +
                "			END) AS `allMovableBinConvertValue`          \n" +
                "		FROM `warehousemst` AS `warehousemst`          \n" +
                "		WHERE `deletedAt` IS NULL;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"Name ASC\") ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "	UPDATE Results r, warehousemst w      \n" +
                "	SET r.parentWarehouseName = w.name      \n" +
                "	WHERE r.parentWHID = w.id;      \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (388,'2.00','V1','Sproc_RetrieveWarehouse - FENIL '," + userid + ");"
            );
            break;
        case 388:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "CREATE TABLE `component_alternatepn_validations` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refRfqPartTypeId` int(11) NOT NULL,  \n" +
                "  `fieldNameToValidate` varchar(100) NOT NULL,  \n" +
                "  `fieldDataType` varchar(100) NOT NULL,  \n" +
                "  `matchCriteria` varchar(10) NOT NULL,  \n" +
                "  `nullValueIsValid` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`Id`),  \n" +
                "  KEY `FK_component_alternatepn_validations_refRfqPartTypeId_idx` (`refRfqPartTypeId`),  \n" +
                "  CONSTRAINT `FK_component_alternatepn_validations_refRfqPartTypeId` FOREIGN KEY (`refRfqPartTypeId`) REFERENCES `rfq_parttypemst` (`id`)  \n" +
                ");  \n" +
                "ALTER TABLE `component_alternatepn_validations`   \n" +
                "ADD COLUMN `fieldTitle` VARCHAR(100) NOT NULL;  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (389,'2.00','V1','created component_alternatepn_validations table - Ashish'," + userid + ");"
            );
            break;
        case 389:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "insert into component_alternatepn_validations   \n" +
                "(refRfqPartTypeId, fieldNameToValidate, fieldDataType, matchCriteria, nullValueIsValid, fieldTitle, isDeleted, createdBy, createdAt, updatedAt)  \n" +
                "select a.id refRfqPartTypeId, b.fieldNameToValidate, b.fieldDataType, b.matchCriteria, b.nullValueIsValid, b.fieldTitle, b.isDeleted, b.createdBy, current_timestamp() createdAt, current_timestamp() updatedAt  \n" +
                "  from rfq_parttypemst a  \n" +
                "	join (select 'tolerance' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, '1' nullValueIsValid, 'Tolerance' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'value' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, '1' nullValueIsValid, 'Value' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'minOperatingTemp' fieldNameToValidate, 'number' fieldDataType, '<=' matchCriteria, '1' nullValueIsValid, 'Min Operating Temperature' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'maxOperatingTemp' fieldNameToValidate, 'number' fieldDataType, '>=' matchCriteria, '1' nullValueIsValid, 'Max Operating Temperature' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'powerRating' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, '1' nullValueIsValid, 'Power' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'partPackage' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, '1' nullValueIsValid, 'Package/ Case (Shape)' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'functionalCategoryID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, '1' nullValueIsValid, 'Functional Type' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "	union all  \n" +
                "	select 'color' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, '1' nullValueIsValid, 'Color' fieldTitle, '0' isDeleted, '1' createdBy) b  \n" +
                "where not exists (select 1 from component_alternatepn_validations c where a.id = c.refRfqPartTypeId);  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (390,'2.00','V1','created Alternate part validation records - Ashish'," + userid + ");"
            );
            break;
        case 390:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "DROP PROCEDURE if EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                        \n" +
                "	IN prfqAssyID INT(11),      \n" +
                "    IN pAssyQuoteSubmittedID INT(11)      \n" +
                "    )  \n" +
                "BEGIN                                        \n" +
                "		# select list for quote summary details of last submitted quote          \n" +
                "			select unitPrice, qty, turnTime,      \n" +
                "            (case when qo.turnType = 'B' then (turnTime+(2*(turnTime/5)))      \n" +
                "            when qo.turnType = 'D' then turntime      \n" +
                "            when qo.turnType = 'W' then (turntime*7) end) turntimedays,      \n" +
                "  \n" +
                "            (case when qo.turnType = 'B' then 'Business Days'      \n" +
                "            when qo.turnType = 'D' then 'Week Days'      \n" +
                "            when qo.turnType = 'W' then 'Week' end) turnType      \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,          \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime          \n" +
                "			from rfq_assy_quote_submitted_assydetail qo          \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID          \n" +
                "			where refSubmittedQuoteID = pAssyQuoteSubmittedID;          \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy           \n" +
                "			select ra.id rfqAssyID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.mfgName,cu.mfgCode,          \n" +
                "            rf.customerid,rqs.custBillingAddressID, ifnull(rqs.custTermsID, cu.custTermsID) as custTermsID, rqs.custShippingAddressID, rqs.BOMIssues, rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID,          \n" +
                "            ra.assyNote,rf.quoteNote, rt.name RFQType, jt.name JobType, rqs.OtherNotes,ra.isSummaryComplete,concat(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress, ra.quoteFinalStatus          \n" +
                "            from rfq_assemblies ra         \n" +
                "            join rfq_assemblies_quotation_submitted rqs on rqs.rfqAssyID = ra.id      \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0      \n" +
                "            join rfqtype rt on rt.id = ra.rfqTypeID and rt.isDeleted = 0      \n" +
                "            join jobtype jt on jt.id = ra.jobTypeID and jt.isDeleted = 0      \n" +
                "			join mfgcodemst cu on cu.id = rf.customerid and cu.isDeleted = 0      \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0     \n" +
                "            left join users su on su.id = ra.quoteSubmittedBy     \n" +
                "			where ra.id= prfqAssyID and rqs.id = pAssyQuoteSubmittedID;      \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary          \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and id = pAssyQuoteSubmittedID ;          \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote          \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd          \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0          \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0          \n" +
                "			where csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;          \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary          \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0          \n" +
                "            and RefSubmittedQuoteID = pAssyQuoteSubmittedID;          \n" +
                "  \n" +
                "		# select letest submited quote summary detail      \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (391,'2.00','V1','Quote statue related SP changes  - shirish'," + userid + ");"
            );
            break;
        case 391:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "ALTER TABLE component ADD COLUMN `status` INT(11);  \n" +
                "ALTER TABLE component ADD COLUMN `isBOMVerified` TINYINT(1);  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (392,'2.00','V1',' Added Field in component master - Jignesh K '," + userid + ");"
            );
            break;
        case 392:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/19/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_transfer_stock`;  \n" +
                "CREATE PROCEDURE `Sproc_transfer_stock`(               \n" +
                "	IN pTransferType VARCHAR(100),     					            \n" +
                "	IN pFromWHID INT(11),                                                                    \n" +
                "	IN pToWHID INT(11),                                                                    \n" +
                "	IN pFromBinID INT(11),                                                                    \n" +
                "	IN pToBinID INT(11),        \n" +
                "    IN pUIDID INT(11),         \n" +
                "	IN pCreatedBy VARCHAR(255)      \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	SET @vWhareClause = \" 1 = 1 \";        \n" +
                "    SET @vFromBinID = 0;      \n" +
                "    SET @vFromWHID = 0;      \n" +
                "	SET @vToWHID = 0;       \n" +
                "	SET @vFromWHBinCount = 0; 	      \n" +
                "    SET @vToWHBinCount = 0;	      \n" +
                "	SET @vFromWHUIDCount = 0; 	      \n" +
                "	SET @vToWHUIDCount  = 0;      \n" +
                "	SET @vFromBinUIDCount = 0;       \n" +
                "	SET @vToBinUIDCount = 0;      \n" +
                "  \n" +
                "    IF(pUIDID IS NOT NULL) THEN        \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND id = \", pUIDID);        \n" +
                "    ELSEIF(pFromBinID IS NOT NULL) THEN            \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID = \", pFromBinID);        \n" +
                "	ELSEIF(pFromWHID IS NOT NULL) THEN        \n" +
                "		SET @vWhareClause = CONCAT(@vWhareClause, \" AND binID IN (SELECT id FROM binmst WHERE IFNULL(isdeleted,0) = 0 AND IFNULL(isActive,1) = 1 AND  WarehouseID = \", pFromWHID,\")\");        \n" +
                "	END IF;        \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\" 	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDetail AS              \n" +
                "									SELECT 	*, 0 warehouseID, 0 deptWHID         \n" +
                "									FROM 	component_sid_stock               \n" +
                "									WHERE   IFNULL(isdeleted,0) = 0 AND \", @vWhareClause );           \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	UPDATE 	tempStockDetail t, binmst b          \n" +
                "	SET 	t.warehouseID = b.warehouseID          \n" +
                "	WHERE 	t.binid = b.id;        \n" +
                "  \n" +
                "    UPDATE 	tempStockDetail t, warehousemst w        \n" +
                "	SET 	t.deptWHID = w.parentWHID        \n" +
                "	WHERE 	t.warehouseID = w.id;        \n" +
                "  \n" +
                "	IF(pTransferType = \"Stock Transfer\") THEN        \n" +
                "		IF(IFNULL(pFromWHID, pFromBinID) IS NOT NULL AND pToWHID IS NOT NULL) THEN        \n" +
                "			SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pFromBinID));        \n" +
                "			SET @vToWHID = pToWHID;      \n" +
                "			IF(pFromWHID IS NOT NULL) THEN        \n" +
                "				UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.WarehouseID = pFromWHID;        \n" +
                "			ELSEIF (pFromBinID IS NOT NULL) THEN        \n" +
                "				UPDATE binmst b SET b.WarehouseID = pToWHID WHERE b.ID = pFromBinID;        \n" +
                "			END IF;         \n" +
                "		ELSEIF(pFromBinID  IS NOT NULL AND pToBinID IS NOT NULL) THEN        \n" +
                "			SET @vFromBinID = pFromBinID;      \n" +
                "			UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.binID = pFromBinID;        \n" +
                "		ELSEIF(pUIDID  IS NOT NULL AND pToBinID IS NOT NULL) THEN        \n" +
                "			SELECT binid INTO @vFromBinID FROM component_sid_stock WHERE id = pUIDID;        \n" +
                "			UPDATE component_sid_stock css SET css.binID = pToBinID WHERE css.id = pUIDID;      \n" +
                "        END IF;    \n" +
                "	ELSEIF(pTransferType = \"Kit to Kit\") THEN        \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;        \n" +
                "	ELSEIF(pTransferType = \"Department to Department\") THEN        \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;        \n" +
                "	ELSE        \n" +
                "		Select pTransferType transferType, pFromID fromID, pToID toID;       \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO component_sid_stock_history        \n" +
                "		(uid,						refcompid,					scanlabel,			pkgQty,				refinvno,        \n" +
                "		refinvdate,					isinStk,					isDeleted,			createdBy,        \n" +
                "		createdAt,					updatedBy,					updatedAt,			deletedBy,			deletedAt,        \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			        \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			       \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,        \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				        \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,        \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	        \n" +
                "        receiveMaterialType,		refCompSIDStockID,			uom,				packaging,			refSupplierPartId)        \n" +
                "	SELECT         \n" +
                "		uid,						refcompid,					scanlabel,			pkgQty,				refinvno,        \n" +
                "		refinvdate,					isinStk,					0,					pCreatedBy,        \n" +
                "		current_timestamp,			pCreatedBy,					current_timestamp,	NULL,				NULL,        \n" +
                "		printStatus,				costCategoryID,				lotCode,			dateCode,			nickName,			        \n" +
                "		prefix,	           			availableQty,				uidPrefix,			customerID,			       \n" +
                "		binID,						warehouseID,				deptWHID,			mfgDate,			expiryDate,        \n" +
                "        pcbPerArray,				isSharedInventory,			MFGorExpiryDate,	BestBefore,			Unit,				        \n" +
                "        FloorLifeExpirationTime,	ShelfLifeExpirationTime,	floortimeRunning,	SealDate,			spq,        \n" +
                "        cpn,						salesOrderDetailID,			RefCPNMFGPNID,		mfgAvailabel,		assyID,	        \n" +
                "        receiveMaterialType,		id,							uom,				packaging,			refSupplierPartId        \n" +
                "	FROM tempStockDetail;         \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTransferType = \"Stock Transfer\" AND (IFNULL(pFromBinID, pUIDID) IS NOT NULL AND pToBinID IS NOT NULL)) THEN        \n" +
                "		SET @vFromWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = @vFromBinID));        \n" +
                "        SET @vToWHID = IFNULL(pFromWHID, (SELECT WarehouseID FROM binMst where id = pToBinID));      \n" +
                "  \n" +
                "        SELECT COUNT(1) uidCount INTO @vFromBinUIDCount FROM component_sid_stock c WHERE c.binid = @vFromBinID AND IFNULL(c.isdeleted,0) = 0;        \n" +
                "        SELECT COUNT(1) uidCount INTO @vToBinUIDCount FROM component_sid_stock c WHERE c.binid = pToBinID  AND IFNULL(c.isdeleted,0) = 0;        \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN      \n" +
                "		SELECT COUNT(1) uidCount into @vFromWHUIDCount FROM component_sid_stock c, binmst b   \n" +
                "        WHERE b.id = c.binid AND b.warehouseID = @vFromWHID  AND IFNULL(c.isdeleted,0) = 0   \n" +
                "        AND IFNULL(b.isdeleted,0) = 0 AND IFNULL(b.isActive,1) = 1 ;        \n" +
                "  \n" +
                "		SELECT COUNT(1) binCount INTO @vFromWHBinCount FROM binmst b   \n" +
                "        WHERE b.warehouseID = @vFromWHID AND IFNULL(b.isdeleted,0) = 0 AND IFNULL(b.isActive,1) = 1 ;     \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(@vFromWHID != 0) THEN      \n" +
                "		SELECT COUNT(1) uidCount INTO @vToWHUIDCount FROM component_sid_stock c, binmst b  \n" +
                "        WHERE b.id = c.binid AND b.warehouseID =  @vToWHID  AND IFNULL(c.isdeleted,0) = 0   \n" +
                "        AND IFNULL(b.isdeleted,0) = 0 AND IFNULL(b.isActive,1) = 1 ;    \n" +
                "  \n" +
                "		SELECT COUNT(1) binCount INTO @vToWHBinCount FROM binmst b   \n" +
                "        WHERE b.warehouseID =  @vToWHID  AND IFNULL(b.isdeleted,0) = 0 AND IFNULL(b.isActive,1) = 1 ;   \n" +
                "  \n" +
                "	END IF;      \n" +
                "  \n" +
                "    Select 	pTransferType transferType, 		pFromWHID fromWHID, 				pToWHID toWHID,         \n" +
                "			pFromBinID fromBinID, 				pToBinID toBinID, 					pUIDID uidID,        \n" +
                "			@vFromWHBinCount fromWHBinCount,	@vToWHBinCount toWHBinCount,		      \n" +
                "            @vFromWHUIDCount fromWHUIDCount,	@vToWHUIDCount toWHUIDCount,		      \n" +
                "            @vFromBinUIDCount fromBinUIDCount,	@vToBinUIDCount toBinUIDCount;         \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockDetail;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/19/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (393,'2.00','V1',' Modified procedure to get only active bin and uid count - Dharmishtha '," + userid + ");"
            );
            break;
        case 393:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "ALTER TABLE component ADD COLUMN `liveInternalVersionPrefix` VARCHAR(50);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(      \n" +
                "	IN pPartID INT,      \n" +
                "	IN pUserID INT        \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE totalCount INT DEFAULT 0;          \n" +
                "	DECLARE currIndex INT DEFAULT 0;          \n" +
                "	DECLARE prevLineID INT;          \n" +
                "	DECLARE currCustPNID INT;          \n" +
                "	DECLARE currMFGPNID INT;      \n" +
                "	DECLARE currLineID INT;      \n" +
                "	DECLARE mountingTypeID INT;      \n" +
                "	DECLARE functionalCategoryID INT;      \n" +
                "	DECLARE rohsStatusID INT;      \n" +
                "	DECLARE categoryID INT;      \n" +
                "	DECLARE partTypeID INT;      \n" +
                "	DECLARE statusID INT;      \n" +
                "	DECLARE mfgPNID INT;         \n" +
                "	DECLARE currCustRev VARCHAR(10);          \n" +
                "	DECLARE currCustPN VARCHAR(500);      \n" +
                "	DECLARE mfgPN VARCHAR(500);      \n" +
                "	DECLARE mfgPID VARCHAR(500);          \n" +
                "	DECLARE maxDisplayOrder DECIMAL;      \n" +
                "	DECLARE pLiveInternalVersion INT(11);     \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);         \n" +
                "	DECLARE pCompanyName VARCHAR(100);           \n" +
                "	DECLARE pMFGPN VARCHAR(100);  \n" +
                "  \n" +
                "	SET categoryID = 2;      \n" +
                "	SET partTypeID = 2;     \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';          \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';       \n" +
                "	ELSE       \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';       \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE       \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;	       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (      \n" +
                "	SELECT       \n" +
                "		rla.id,      \n" +
                "		rla.rfqLineItemsID,      \n" +
                "		rl.custPNID,       \n" +
                "		rl.custPN,      \n" +
                "		rl.customerRev,      \n" +
                "		rla.mfgPNID,       \n" +
                "		c.RoHSStatusID      \n" +
                "	FROM rfq_lineitems_alternatepart rla      \n" +
                "	LEFT JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id       \n" +
                "	LEFT JOIN component c ON c.id = rla.mfgPNID      \n" +
                "	WHERE 	rl.custPN IS NOT NULL AND rla.mfgPNID IS NOT NULL       \n" +
                "		AND rl.partID = pPartID       \n" +
                "		AND rl.isDeleted = 0       \n" +
                "		AND rl.duplicateCPNStep = 1 );    		      \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;          \n" +
                "	SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;      \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;      \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;      \n" +
                "	SELECT gencCategoryID INTO statusID FROM genericcategory WHERE categoryType = 'Part Status' AND gencCategoryName = 'Active';      \n" +
                "  \n" +
                "	IF functionalCategoryID IS NULL THEN       \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;      \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy)      \n" +
                "				VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID);      \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF mountingTypeID IS NULL THEN       \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy)VALUES('CPN', 1, pUserID);      \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	WHILE currIndex < totalCount DO          \n" +
                "		SET currCustPN = NULL;        \n" +
                "		SET currCustRev = NULL;        \n" +
                "  \n" +
                "		SELECT 	a.custPN, 	a.custPNID,       \n" +
                "			a.customerRev, 	a.mfgPNID,       \n" +
                "			a.rfqLineItemsID      \n" +
                "		INTO 	currCustPN,	currCustPNID,      \n" +
                "			currCustRev,	currMFGPNID,      \n" +
                "			currLineID       \n" +
                "		FROM 	temp_component_cust_alias_rev a LIMIT currIndex, 1;          \n" +
                "  \n" +
                "		SET currIndex = currIndex + 1;     \n" +
                "  \n" +
                "  \n" +
                "		IF (currCustPNID IS NOT NULL) THEN      \n" +
                "  \n" +
                "			IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN      \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (currCustPNID , currMFGPNID, pUserID);       \n" +
                "				SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = currCustPNID;          		  \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "				SELECT mfgPN INTO pMFGPN FROM component WHERE id = currMFGPNID;    \n" +
                "				INSERT INTO rfq_assembly_history                       \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "						oldValue,newValue,changeVersion,                      \n" +
                "						createdAt,createdBy)                       \n" +
                "					VALUES 	(\"part\", currCustPNID, NULL,NULL, currCustPNID, \"MFG PN\",                      \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "						SYSDATE(),pUserID);  \n" +
                "				IF (prevLineID IS NULL OR  prevLineID != currLineID) THEN      \n" +
                "					UPDATE component SET liveInternalVersion = pLiveInternalVersion, liveInternalVersionPrefix = pCompanyName WHERE id = currCustPNID;      \n" +
                "				END IF;      \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF (currCustPNID IS NULL) THEN      \n" +
                "			IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN      \n" +
                "				SET rohsStatusID = 0;      \n" +
                "			ELSE       \n" +
                "				SET rohsStatusID = 1;	      \n" +
                "			END IF;      \n" +
                "  \n" +
                "			SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);      \n" +
                "			SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = @mfgCodeID;      \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);      \n" +
                "  \n" +
                "			SELECT id INTO mfgPNID FROM component WHERE PIDCode = mfgPID AND isDeleted = 0;      \n" +
                "  \n" +
                "			IF mfgPNID IS NULL THEN       \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,       \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,       \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,      \n" +
                "							createdAt,liveInternalVersion, partType)       \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,      \n" +
                "							1,1,@mfgCodeID,pUserID,      \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,      \n" +
                "							SYSDATE(), 0, partTypeID);      \n" +
                "				SELECT LAST_INSERT_ID() INTO @maxPartId;      \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (@maxPartId , currMFGPNID, pUserID);      \n" +
                "				UPDATE rfq_lineitems SET custPNID = @maxPartId WHERE id = currLineID;      \n" +
                "  \n" +
                "			ELSE       \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (mfgPNID , currMFGPNID, pUserID);      \n" +
                "				SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = mfgPNID;          		  \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "				SELECT mfgPN INTO pMFGPN FROM component WHERE id = currMFGPNID;    \n" +
                "				INSERT INTO rfq_assembly_history                       \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "						oldValue,newValue,changeVersion,                      \n" +
                "						createdAt,createdBy)                       \n" +
                "					VALUES 	(\"part\", mfgPNID, NULL,NULL, currCustPNID, \"MFG PN\",                      \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "						SYSDATE(),pUserID);  \n" +
                "				IF (prevLineID IS NULL OR  prevLineID  != currLineID) THEN      \n" +
                "					UPDATE component SET liveInternalVersion = pLiveInternalVersion , liveInternalVersionPrefix = pCompanyName WHERE id = mfgPNID;      \n" +
                "				END IF;      \n" +
                "				UPDATE rfq_lineitems SET custPNID = mfgPNID WHERE id = currLineID;      \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		SET prevLineID = currLineID;      \n" +
                "  \n" +
                "	END WHILE;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (394,'2.00','V1',' Manage CPN History with internal version - Jignesh K '," + userid + ");"
            );
            break;
        case 394:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "drop procedure if exists `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(    \n" +
                "IN pGoodPart VARCHAR(100),    \n" +
                "IN pSearch VARCHAR(100),    \n" +
                "IN pId INT(11),    \n" +
                "IN pMfgType VARCHAR(50),    \n" +
                "IN pRoHSStatusID VARCHAR(100),    \n" +
                "IN pMfgCodeId INT(11),    \n" +
                "IN pMountingType VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "IF(pMountingType IS NOT NULL) THEN    \n" +
                " SELECT * FROM    \n" +
                " (    \n" +
                "	 SELECT `com`.`id`,    \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "		`com`.`mfgPN` orgMfgPN,    \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		`com`.`isGoodPart`,    \n" +
                "		`com`.`RoHSStatusID`,    \n" +
                "		`com`.`rohsgroupID`,    \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,    \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,    \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,    \n" +
                "        `com`.`tolerance`,    \n" +
                "        `com`.`minOperatingTemp`,    \n" +
                "        `com`.`maxOperatingTemp`,    \n" +
                "        `com`.`value`,    \n" +
                "        `com`.`partPackage`,    \n" +
                "        `com`.`powerRating`,    \n" +
                "        `com`.`functionalCategoryID`,  \n" +
                "        `com`.`mountingTypeID`,  \n" +
                "        `com`.`connecterTypeID`,  \n" +
                "        `com`.`noOfPosition`,  \n" +
                "        `com`.`noOfRows`,  \n" +
                "        `com`.`pitch`,  \n" +
                "        `com`.`pitchMating`,  \n" +
                "        `com`.`length`,  \n" +
                "        `com`.`width`,  \n" +
                "        `com`.`height`,  \n" +
                "        `com`.`voltage`,  \n" +
                "        `com`.`weight`,  \n" +
                "        `com`.`feature`,  \n" +
                "        `com`.`color`  \n" +
                "	FROM `component` AS `com`    \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND    \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))    \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType    \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))    \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))    \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a    \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR    \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')    \n" +
                "             OR exists (select 1 from component_otherpn opn where opn.refcomponentid = `a` .`id` and opn.name like CONCAT('%', pSearch , '%'))))    \n" +
                ");    \n" +
                "  \n" +
                "  ELSE    \n" +
                "   SELECT * FROM    \n" +
                " (    \n" +
                "	 SELECT `com`.`id`,    \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "		`com`.`mfgPN` orgMfgPN,    \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "		`com`.`isGoodPart`,    \n" +
                "		`com`.`RoHSStatusID`,    \n" +
                "		`com`.`rohsgroupID`,    \n" +
                "		`mfgCodemst`.`id` AS `mfgCodeId`,    \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,    \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,    \n" +
                "        `com`.`tolerance`,    \n" +
                "        `com`.`minOperatingTemp`,    \n" +
                "        `com`.`maxOperatingTemp`,    \n" +
                "        `com`.`value`,    \n" +
                "        `com`.`partPackage`,    \n" +
                "        `com`.`powerRating`,    \n" +
                "        `com`.`functionalCategoryID`,  \n" +
                "        `com`.`mountingTypeID`,  \n" +
                "        `com`.`connecterTypeID`,  \n" +
                "        `com`.`noOfPosition`,  \n" +
                "        `com`.`noOfRows`,  \n" +
                "        `com`.`pitch`,  \n" +
                "        `com`.`pitchMating`,  \n" +
                "        `com`.`length`,  \n" +
                "        `com`.`width`,  \n" +
                "        `com`.`height`,  \n" +
                "        `com`.`voltage`,  \n" +
                "        `com`.`weight`,  \n" +
                "        `com`.`feature`,  \n" +
                "        `com`.`color`  \n" +
                "	FROM `component` AS `com`    \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND    \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))    \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))    \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))    \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)) AS a    \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR    \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')    \n" +
                "             OR exists (select 1 from component_otherpn opn where opn.refcomponentid = `a` .`id` and opn.name like CONCAT('%', pSearch , '%'))))    \n" +
                ");    \n" +
                "END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (395,'2.00','V1','changes in Sproc_GetComponentMFGAliasSearch - Ashish'," + userid + ");"
            );
            break;
        case 395:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                    \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pPackaging TINYINT(1)                             \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	DECLARE pOffset INT(11);                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                              \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                  \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                                  \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                     \n" +
                "			com.PIDCode, com.category, rl.partID,ra.mfgPNID,        \n" +
                "  \n" +
                "			(CASE WHEN pPackaging = 1 THEN  \n" +
                "			(SELECT  GROUP_CONCAT(IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),'@@@',a.RoHSStatusID,'@@@', a.name,'@@@', a.rohsIcon,'@@@',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',IFNULL(a.gencCategoryName,\"\"))   \n" +
                "			FROM    \n" +
                "				( SELECT cp.PIDCode,cp.RoHSStatusID,rom.name,rom.rohsIcon,c.feature,gcp.gencCategoryName  \n" +
                "				FROM rfq_lineitems_alternatepart rla   \n" +
                "				LEFT JOIN  component c ON rla.mfgpnid=c.id    \n" +
                "				JOIN component_packagingalias ca ON ca.componentId = c.id  \n" +
                "				LEFT JOIN component_packagingalias cap ON ca.aliasgroupId = cap.aliasgroupID  \n" +
                "				LEFT JOIN component cp ON cp.id = cap.componentID   \n" +
                "				LEFT JOIN  genericcategory gcp ON cp.partStatus=gcp.gencCategoryID AND gcp.isActive=1 AND gcp.isDeleted=0                   \n" +
                "				LEFT JOIN  rfq_rohsmst rom ON rom.id = cp.RoHSStatusID AND rom.isDeleted = 0                                                          \n" +
                "				WHERE rla.rfqlineitemsid=rl.id AND rla.isdeleted=0  \n" +
                "				UNION   \n" +
                "				SELECT com.PIDCode,com.RoHSStatusID,ro.name,ro.rohsIcon,com.feature,gc.gencCategoryName  \n" +
                "  \n" +
                "				) AS a )  \n" +
                "  \n" +
                "  \n" +
                "                       ELSE  \n" +
                "                                  GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon,'@@@',REPLACE(IFNULL(com.feature,\"\"),\",\",\"\"),'@@@',IFNULL(gc.gencCategoryName,\"\")) END) AS mfgPN,  \n" +
                "			#GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon ) END) AS mfgPN,      \n" +
                "  \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                   \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                   \n" +
                "			FROM rfq_lineitems_alternatepart ra                                  \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                    \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                                  \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                  \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                                \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                        \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0                 \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0  \n" +
                "			LEFT JOIN  genericcategory gc ON com.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0     \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                                 \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (396,'2.00','V1','changes in Sproc_GetRFQLineItems - added pPackaging parameter - Shailesh'," + userid + ");"
            );
            break;
        case 396:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-03-2019 *********************************** */
                "update page_detail  set pageName = 'Parts List' where pageName = 'Component List';  \n" +
                "update page_detail  set pageName = 'Manage Parts',displayMenuName='Parts' where pageName = 'Manage Component';  \n" +
                "update page_detail  set pageName = 'Parts',displayMenuName='Parts' where pageName = 'Component';  \n" +
                "update page_detail  set pageName = 'Manage Parts Detail',displayMenuName='Parts' where pageName = 'Manage Component Detail';  \n" +
                "update page_detail  set pageName = 'Manage Parts Alias & Alternate Groups',displayMenuName='Parts' where pageName = 'Manage Component Alias & Alternate Groups';  \n" +
                "update page_detail  set pageName = 'Manage Parts Standards',displayMenuName='Parts' where pageName = 'Manage Component Standards';  \n" +
                "update page_detail  set pageName = 'Manage Parts Document',displayMenuName='Parts' where pageName = 'Manage Component Document';  \n" +
                "update page_detail  set pageName = 'Manage Parts Miscellaneous',displayMenuName='Parts' where pageName = 'Manage Component Miscellaneous';  \n" +
                "update page_detail  set pageName = 'Manage Parts Pricing History',displayMenuName='Parts' where pageName = 'Manage Component Pricing History';  \n" +
                "update page_detail  set pageName = 'Manage Parts Customer LOA',displayMenuName='Parts' where pageName = 'Manage Component Customer LOA';  \n" +
                "update page_detail  set pageName = 'Manage Parts Comments',displayMenuName='Parts' where pageName = 'Manage Component Comments';  \n" +
                "update page_detail  set pageName = 'Manage Parts BOM',displayMenuName='Parts' where pageName = 'Manage Component BOM';  \n" +
                /* **************************** Add Script Version -> 20-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (397,'2.00','V1','Page details update - Ashish'," + userid + ");"
            );
            break;
        case 397:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/22/2019   *********************************** */
                "Alter table warehousemst_history add column (  \n" +
                "	uniqueCartID varchar(50),  \n" +
                "	scanWH varchar(50),  \n" +
                "	scanBin varchar(50),  \n" +
                "    allMovableBin tinyint(1),  \n" +
                "    userAccessMode varchar(5)  \n" +
                ");  \n" +
                /* **************************** New Script -> 03/22/2019   *********************************** */
                "DROP TRIGGER IF EXISTS Trg_Manage_WH_History;  \n" +
                "CREATE TRIGGER Trg_Manage_WH_History  \n" +
                "BEFORE UPDATE ON warehousemst  \n" +
                "FOR EACH ROW   \n" +
                "BEGIN  \n" +
                "	INSERT INTO warehousemst_history(  \n" +
                "		Name, 			Description, 		nickname,			parentWHID,   \n" +
                "        isActive, 		isPermanentWH, 		isDepartment,		refWHID, 			  \n" +
                "        createdBy,      createdAt,			uniqueCartID,		scanWH,  \n" +
                "		scanBin,		allMovableBin,		userAccessMode)  \n" +
                "	VALUES(  \n" +
                "		OLD.Name,		OLD.Description,	OLD.nickname,		OLD.parentWHID,  \n" +
                "		OLD.isActive,	OLD.isPermanentWH,	OLD.isDepartment,	OLD.id,				  \n" +
                "        OLD.createdBy,  current_timestamp,	OLD.uniqueCartID,	OLD.scanWH,  \n" +
                "		OLD.scanBin,	OLD.allMovableBin,	OLD.userAccessMode);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/22/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(                  \n" +
                "	pDeptID INT(11),          \n" +
                "    pGlobalSearchWHId INT(11),        \n" +
                "	pGlobalSearchBinId int(11),          \n" +
                "	pGlobalSearchUIDId int(11),          \n" +
                "    pSearchWHId INT(11),      \n" +
                "    pSearchString varchar(100),    \n" +
                "    pGlobalSearchClusterWHID INT(11)    \n" +
                ")   \n" +
                "BEGIN              \n" +
                "  \n" +
                "	set @vGlobalSearchBinWHId = NULL;        \n" +
                "    set @vGlobalSearchUIDBinId = NULL;        \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDId IS NOT NULL) THEN        \n" +
                "		 SELECT c.binID INTO @vGlobalSearchUIDBinId FROM component_sid_stock c WHERE c.id = pGlobalSearchUIDId;         \n" +
                "         SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = @vGlobalSearchUIDBinId;         \n" +
                "    END IF;        \n" +
                "  \n" +
                "    IF(pGlobalSearchBinId IS NOT NULL) THEN        \n" +
                "		 SELECT b.WarehouseID INTO @vGlobalSearchBinWHId FROM binmst b WHERE b.id = pGlobalSearchBinId;         \n" +
                "    END IF;        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS         \n" +
                "	SELECT 	w.id, 			w.name, 		w.isPermanentWH,   w.uniqueCartID,  \n" +
                "			w.parentWHID,  	cast(NULL as char(50)) deptName,     \n" +
                "			0 binCount, 	0 uidCount, 	w.allMovableBin          \n" +
                "	FROM 	warehousemst w           \n" +
                "	WHERE 	w.id = IFNULL(pGlobalSearchWHId, w.id)          \n" +
                "	AND 	w.id = IFNULL(pSearchWHId, w.id)       \n" +
                "	AND 	w.id = IFNULL(@vGlobalSearchBinWHId, w.id)     \n" +
                "	AND 	w.id = IFNULL(pGlobalSearchClusterWHID, w.id)     \n" +
                "	AND 	IFNULL(w.parentWHID,0) = IFNULL(pDeptID, IFNULL(w.parentWHID,0))            \n" +
                "	AND		IFNULL(w.isDepartment,0) != 1             \n" +
                "	AND 	IFNULL(w.isDeleted,0) = 0              \n" +
                "	AND 	IFNULL(w.isActive,1) = 1      \n" +
                "    AND 	w.name like CONCAT('%', IFNULL(pSearchString,'') ,'%');              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS                \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID              \n" +
                "	FROM 	binmst b              \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)             \n" +
                "    AND		b.id = IFNULL(pGlobalSearchBinId, b.id)   		-- Need to remove if show all counts        \n" +
                "    AND		b.id = IFNULL(@vGlobalSearchUIDBinId, id) 		-- Need to remove if show all counts          \n" +
                "	AND 	IFNULL(b.isActive,1) = 1               \n" +
                "	AND 	IFNULL(b.isDeleted,0) = 0;              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS              \n" +
                "	SELECT DISTINCT binID, COUNT(1) uidCount              \n" +
                "	FROM 	component_sid_stock               \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)          \n" +
                "    AND		id = IFNULL(pGlobalSearchUIDId, id)   			-- Need to remove if show all counts        \n" +
                "	AND		IFNULL(isDeleted,0) = 0              \n" +
                "	GROUP BY binID;          \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c           \n" +
                "	SET    	t.uidCount = c.uidCount          \n" +
                "	WHERE   t.id = c.binID;              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS               \n" +
                "	SELECT 	DISTINCT warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount              \n" +
                "	FROM 	tempBinDet               \n" +
                "	GROUP BY warehouseID;           \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c           \n" +
                "	SET   	t.binCount = c.binCount,          \n" +
                "			t.uidCount = c.uidCount          \n" +
                "	WHERE  	t.id = c.warehouseID;          \n" +
                "  \n" +
                "	-- SET department name        \n" +
                "	update 	tempWarehouseDet t, warehousemst w              \n" +
                "    SET   	t.deptName = w.Name           \n" +
                "    WHERE	t.parentWHID = w.id;       \n" +
                "  \n" +
                "    SELECT * FROM tempWarehouseDet;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempActiveBinIDs;              \n" +
                "	DROP TEMPORARY TABLE tempBinDet;              \n" +
                "	DROP TEMPORARY TABLE tempActiveWarehouseIDs;              \n" +
                "	DROP TEMPORARY TABLE tempWarehouseDet;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/22/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveWarehouse_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse_History`(            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "    IN pWarehouseID INT(11)      \n" +
                ")  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;             \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "	SELECT w.*,  CAST(NULL AS CHAR(50)) parentWarehouseName,          \n" +
                "			(CASE WHEN (w.isActive = 0) THEN 'Inactive' WHEN (w.isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,      \n" +
                "			(CASE WHEN (w.isPermanentWH = 0) THEN 'No' WHEN (w.isPermanentWH = 1) THEN 'Yes' ELSE '' END) AS parentConvertedValue,      \n" +
                "            (CASE WHEN (w.allMovableBin = 0) THEN 'No' WHEN (w.allMovableBin = 1) THEN 'Yes' ELSE '' END) AS allMovableBinConvertValue,      \n" +
                "            CAST(NULL AS CHAR(255)) createdByName       \n" +
                "	FROM	warehousemst_history w;      \n" +
                "  \n" +
                "	-- Set department name          \n" +
                "	UPDATE Results r, warehousemst w        \n" +
                "	SET r.parentWarehouseName = w.name        \n" +
                "	WHERE r.parentWHID = w.id;        \n" +
                "  \n" +
                "	-- set created by          \n" +
                "    UPDATE 	Results r, users u            \n" +
                "	SET 	r.createdByName = u.username            \n" +
                "	WHERE 	r.createdBy = u.id;           \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"Name ASC\") ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF(pWarehouseID IS NOT NULL) THEN          \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refWHID = '\", pWarehouseID, \"'\");          \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/22/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (398,'2.00','V1',' Added uniquCartID and other columns in history table and modified procedure and triggers for same - Dharmishtha '," + userid + ");"
            );
            break;
        case 398:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-03-2019  *********************************** */
                "ALTER TABLE component CHANGE `status` `exteranalAPICallStatus` INT(11) COMMENT '0 - External Api call on going, 1 - External Api call completed with  Error, 2 - External api call completed and no any error' ;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                                  \n" +
                "	IN ppartID INT                          \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                          \n" +
                "	SELECT 	a.id,               \n" +
                "		a.lineID,               \n" +
                "		a.qpa,               \n" +
                "		a.refDesig,               \n" +
                "		a.custPN,              \n" +
                "		a.custPNID,                                       \n" +
                "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,                                      \n" +
                "		a.description,              \n" +
                "		a.level,              \n" +
                "		a.numOfPosition,              \n" +
                "		a.customerRev,               \n" +
                "		a.customerDescription,               \n" +
                "		a.customerPartDesc,                                       \n" +
                "		CONCAT(part.partTypeName) partclassID,               \n" +
                "		a.isInstall,               \n" +
                "		a.isPurchase,               \n" +
                "		a.leadQty,               \n" +
                "		a.attritionRate,              \n" +
                "		a.valueAddedCost,              \n" +
                "		a.refRFQLineItemID,                            \n" +
                "		a.dnpQty,               \n" +
                "		a.dnpDesig,               \n" +
                "		a.qpaDesignatorStep,              \n" +
                "		a.duplicateCPNStep,            \n" +
                "		a.requireMountingTypeStep,            \n" +
                "		a.requireFunctionalTypeStep,            \n" +
                "		a.qpaDesignatorColorPriority,              \n" +
                "		a.mergeLines,              \n" +
                "		a.lineMergeStep,              \n" +
                "		a.isBuyDNPQty                            \n" +
                "	FROM rfq_lineitems a                            \n" +
                "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                            \n" +
                "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0                 \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                                      \n" +
                "  \n" +
                "	SELECT 	b.id,              \n" +
                "		b.lineID,               \n" +
                "		b.qpa,               \n" +
                "		b.refDesig,                                   \n" +
                "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                                  \n" +
                "		a.mfgCodeID,               \n" +
                "		a.mfgPN,               \n" +
                "		a.mfgPNID,                                      \n" +
                "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                                  \n" +
                "		a.distMfgCodeID,               \n" +
                "		a.distPN,               \n" +
                "		a.distMfgPNID,                                       \n" +
                "		b.custPN,               \n" +
                "		b.custPNID,               \n" +
                "		b.uomID,               \n" +
                "		a.description descriptionAlternate,               \n" +
                "		b.description,               \n" +
                "		b.level,               \n" +
                "		b.numOfPosition,               \n" +
                "		b.customerRev,               \n" +
                "		b.customerDescription,               \n" +
                "		b.customerPartDesc,                                \n" +
                "		b.partclassID,               \n" +
                "		b.isInstall,               \n" +
                "		b.isPurchase,               \n" +
                "		b.leadQty,               \n" +
                "		b.attritionRate,               \n" +
                "		b.valueAddedCost,               \n" +
                "		b.refRFQLineItemID,                                       \n" +
                "		b.dnpQty,               \n" +
                "		b.dnpDesig,               \n" +
                "		a.id AS rfqAlternatePartID,               \n" +
                "		b.qpaDesignatorStep,              \n" +
                "		b.qpaDesignatorColorPriority,               \n" +
                "		b.duplicateCPNStep,        \n" +
                "		b.requireMountingTypeStep,        \n" +
                "		b.requireFunctionalTypeStep,            \n" +
                "		b.isBuyDNPQty,                            \n" +
                "		a.mfgVerificationStep,               \n" +
                "		a.mfgDistMappingStep,              \n" +
                "		a.mfgCodeStep,              \n" +
                "		a.customerApproval,              \n" +
                "		a.org_mfgCode,               \n" +
                "		a.org_mfgPN,                                    \n" +
                "		a.org_distributor,               \n" +
                "		a.org_distPN,                                    \n" +
                "		a.distVerificationStep,               \n" +
                "		a.distCodeStep,               \n" +
                "		a.getMFGPNStep,               \n" +
                "		a.obsoletePartStep,              \n" +
                "		a.mfgGoodPartMappingStep,              \n" +
                "		a.mfgPNStep,               \n" +
                "		a.distPNStep,                                  \n" +
                "		a.badMfgPN,               \n" +
                "		a.distGoodPartMappingStep,               \n" +
                "		a.nonRohsStep,               \n" +
                "		a.oneRohsComponentStep,               \n" +
                "		a.epoxyStep,               \n" +
                "		a.invalidConnectorTypeStep,              \n" +
                "		a.duplicateMPNInSameLineStep,            \n" +
                "		a.mismatchMountingTypeStep,            \n" +
                "		a.mismatchFunctionalCategoryStep,               \n" +
                "		a.restrictUseWithPermissionStep,            \n" +
                "		a.restrictUsePermanentlyStep,              \n" +
                "		a.userData1,              \n" +
                "		a.userData2,          \n" +
                "		a.userData3,          \n" +
                "		a.userData4,          \n" +
                "		a.userData5,          \n" +
                "		a.userData6,          \n" +
                "		a.userData7,          \n" +
                "		a.userData8,          \n" +
                "		a.userData9,          \n" +
                "		a.userData10,          \n" +
                "		a.pickupPadRequiredStep,        \n" +
                "		a.matingPartRquiredStep,        \n" +
                "		a.driverToolsRequiredStep,        \n" +
                "		a.functionalTestingRequiredStep,       \n" +
                "		a.mismatchValueStep,      \n" +
                "		a.mismatchPackageStep,      \n" +
                "		a.mismatchPowerStep,      \n" +
                "		a.mismatchToleranceStep,      \n" +
                "		a.mismatchTempratureStep,      \n" +
                "		a.militaryStandardRoHSStep,    \n" +
                "		CONCAT(part.partTypeName) parttypeID,              \n" +
                "		CONCAT(mount.name) mountingtypeID,               \n" +
                "		CONCAT(cat.categoryname) partcategoryID,              \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                                \n" +
                "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                              \n" +
                "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                            \n" +
                "		CASE WHEN                             \n" +
                "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                            \n" +
                "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                            \n" +
                "			THEN 1 ELSE 0 END isObsolete,                            \n" +
                "		co.mfgPNDescription,              \n" +
                "		co.pitch,            \n" +
                "		co.partPackage,            \n" +
                "		co.value,            \n" +
                "		co.tolerance,            \n" +
                "		co.voltage,            \n" +
                "		co.packaging,       \n" +
                "		co.powerRating,      \n" +
                "		co.minOperatingTemp,      \n" +
                "		co.maxOperatingTemp,   \n" +
                "		co.createdBy,           \n" +
                "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment                        \n" +
                "	FROM rfq_lineitems_alternatepart a                                        \n" +
                "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                                         \n" +
                "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                                  \n" +
                "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0               \n" +
                "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0              \n" +
                "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0              \n" +
                "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                               \n" +
                "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                                \n" +
                "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (399,'2.00','V1','Added one field exteranalAPICallStatus in component for handle external api verification - Jignesh K '," + userid + ");"
            );
            break;
        case 399:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustMFGPn` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(     \n" +
                "-- IN pcustomerID  INT ,     \n" +
                "IN prefCPNPartID INT,    \n" +
                "IN prefComponentIDs VARCHAR(5000),    \n" +
                "IN puserID VARCHAR(10)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);        \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);      \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	DECLARE pMFGPN VARCHAR(100);    \n" +
                "	DECLARE pLiveInternalVersion INT(11);  \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "	BEGIN                      \n" +
                "		ROLLBACK;                      \n" +
                "		RESIGNAL;                      \n" +
                "	END;                      \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "	  BEGIN                      \n" +
                "		ROLLBACK;                      \n" +
                "		RESIGNAL;                      \n" +
                "	END;  \n" +
                "  \n" +
                "	START TRANSACTION;       \n" +
                "  \n" +
                "	/*Generate Dummy data from string to row */      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;      \n" +
                "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );      \n" +
                "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;      \n" +
                "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );      \n" +
                "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");      \n" +
                "	PREPARE stmt1 FROM @SQL;      \n" +
                "	EXECUTE stmt1;      \n" +
                "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;      \n" +
                "	/*Generate Dummy data from string to row */   \n" +
                "  \n" +
                "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;   \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = prefCPNPartID;   \n" +
                "	SET pLiveInternalVersion  = pLiveInternalVersion  + 1;           		    \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';            \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN        \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';         \n" +
                "	ELSE         \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';         \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN        \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;        \n" +
                "		ELSE         \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;        \n" +
                "		END IF;        \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	/* add all mapping mfgPN history with internal version */  \n" +
                "	SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;  \n" +
                "  \n" +
                "	WHILE i < totMFGPN DO   \n" +
                "  \n" +
                "	SET pMFGPN = NULL;  \n" +
                "	SELECT mfgPN INTO pMFGPN FROM component WHERE deletedAt IS NULL   \n" +
                "	AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);  \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "						oldValue,newValue,changeVersion,createdAt,createdBy)                         \n" +
                "	VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MFG PN\",                        \n" +
                "		NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), SYSDATE(),puserID);    \n" +
                "  \n" +
                "	SET i = i + 1;  \n" +
                "	END WHILE;  \n" +
                "  \n" +
                "	/* update component live internal version */  \n" +
                "	UPDATE component   \n" +
                "	SET liveInternalVersion = pLiveInternalVersion, liveInternalVersionPrefix = pCompanyName   \n" +
                "	WHERE id = prefCPNPartID;        \n" +
                "  \n" +
                "	/* add all mapping mfgPN against custpn */	   \n" +
                "	INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy)    \n" +
                "	SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`     \n" +
                "	FROM temp_CustMFGPn ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;      \n" +
                "  \n" +
                "	COMMIT; 			  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentCustAliasRev` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustAliasRev`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "        IN pWhereClause VARCHAR(16383),      \n" +
                "        IN pcustomerID VARCHAR(255)       \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "  \n" +
                "		SELECT co.id,co.custAssyPN,co.mfgcodeID,co.rev,co.liveInternalVersion,co.mfgPN  \n" +
                "		FROM component co  \n" +
                "		WHERE co.deletedAt IS NULL  \n" +
                "		AND co.isCPN = 1  \n" +
                "		AND co.mfgCodeID = pcustomerID ;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"rev ASC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "    END;  \n" +
                /* **************************** New Script -> 22-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponetCustAliasRevPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponetCustAliasRevPN`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),	    \n" +
                "        IN pWhereClause VARCHAR(16383),    \n" +
                "        IN prefComponentCustAliasRevID VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                "  \n" +
                "		SELECT car_pn.id ,car_pn.refComponentID,comp.mfgPN,mfg.mfgCode  \n" +
                "		FROM component_cust_alias_rev_pn car_pn    \n" +
                "			LEFT OUTER JOIN component comp ON comp.id=car_pn.refComponentID AND IFNULL(comp.isDeleted,0)=0    \n" +
                "			LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=comp.mfgcodeID AND IFNULL(mfg.isDeleted,0)=0    \n" +
                "		WHERE IFNULL(car_pn.isDeleted,0)=0   \n" +
                "		AND car_pn.refCPNPartID = prefComponentCustAliasRevID;   \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE	    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
                "	PREPARE query1 FROM @SQLStatement1;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (400,'2.00','V1',' cpn related sps - KETAN '," + userid + ");"
            );
            break;
        case 400:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-03-2019  *********************************** */
                "ALTER TABLE rfq_assemblies  \n" +
                "ADD COLUMN partCostingBOMInternalVersion varchar(50) default null;  \n" +
                /* **************************** Add Script Version -> 22-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (401,'2.00','V1','Field add in RFQ assy table SP changes  - shirish'," + userid + ");"
            );
            break;
        case 401:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(	                                          \n" +
                "	IN prfqAssyID INT(11),        \n" +
                "    IN pAssyQuoteSubmittedID INT(11)        \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "		# select list for quote summary details of last submitted quote            \n" +
                "			select unitPrice, qty, turnTime,        \n" +
                "            (case when qo.turnType = 'B' then (turnTime+(2*(turnTime/5)))        \n" +
                "            when qo.turnType = 'D' then turntime        \n" +
                "            when qo.turnType = 'W' then (turntime*7) end) turntimedays,        \n" +
                "  \n" +
                "            (case when qo.turnType = 'B' then 'Business Days'        \n" +
                "            when qo.turnType = 'D' then 'Week Days'        \n" +
                "            when qo.turnType = 'W' then 'Week' end) turnType        \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,            \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime            \n" +
                "			from rfq_assy_quote_submitted_assydetail qo            \n" +
                "			join rfq_assemblies_quotation_submitted sb on sb.id = qo.refSubmittedQuoteID            \n" +
                "			where refSubmittedQuoteID = pAssyQuoteSubmittedID;            \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy             \n" +
                "			select ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,part.custAssyPN, cu.mfgName,cu.mfgCode,            \n" +
                "            rf.customerid,rqs.custBillingAddressID, ifnull(rqs.custTermsID, cu.custTermsID) as custTermsID, rqs.custShippingAddressID, rqs.BOMIssues, rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID,            \n" +
                "            ra.assyNote,rf.quoteNote, rt.name RFQType, jt.name JobType, rqs.OtherNotes,ra.isSummaryComplete,concat(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress, ra.quoteFinalStatus            \n" +
                "            from rfq_assemblies ra           \n" +
                "            join rfq_assemblies_quotation_submitted rqs on rqs.rfqAssyID = ra.id        \n" +
                "			join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0        \n" +
                "            join rfqtype rt on rt.id = ra.rfqTypeID and rt.isDeleted = 0        \n" +
                "            join jobtype jt on jt.id = ra.jobTypeID and jt.isDeleted = 0        \n" +
                "			join mfgcodemst cu on cu.id = rf.customerid and cu.isDeleted = 0        \n" +
                "			join component part on part.id = ra.partID and part.isDeleted = 0       \n" +
                "            left join users su on su.id = ra.quoteSubmittedBy       \n" +
                "			where ra.id= prfqAssyID and rqs.id = pAssyQuoteSubmittedID;        \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary            \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and id = pAssyQuoteSubmittedID ;            \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote            \n" +
                "			select csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className class from rfq_assy_standard_class_detail csd            \n" +
                "			join certificate_standards cs on cs.certificateStandardID =  csd.standardID and cs.isDeleted = 0            \n" +
                "			left join standard_class sc  on sc.classID =  csd.standardClassIDs and cs.isDeleted = 0            \n" +
                "			where csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;            \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary            \n" +
                "			select * from rfq_assy_quote_submitted_termsconditions where isDeleted = 0            \n" +
                "            and RefSubmittedQuoteID = pAssyQuoteSubmittedID;            \n" +
                "  \n" +
                "		# select letest submited quote summary detail        \n" +
                "			select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-03-2019 *********************************** */
                "DROP PROCEdURE IF EXISTS `Sproc_GetRFQassyRequoteHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQassyRequoteHistory`(	                                  \n" +
                "	IN ppageIndex INT(11),                                  \n" +
                "	IN precordPerPage INT(11),                                  \n" +
                "	IN pOrderBy VARCHAR(255),	                                  \n" +
                "    IN pWhereClause VARCHAR(16383),      \n" +
                "    IN prfqAssyID INT(11)      \n" +
                "    )  \n" +
                "BEGIN                                  \n" +
                "	DECLARE pOffset INT(11);                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                  \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                  \n" +
                "  \n" +
                "		select rqs.id, rqs.rfqAssyID, rqs.quoteNumber,rqs.quoteSubmitDate, rqs.BOMIssues,rqs.OtherNotes,rqs.quoteInDate,rqs.quoteDueDate,    \n" +
                "        rqs.bomLastVersion as internalversion, com.custAssyPN,com.PIDCode,com.mfgPN,com.rev,    \n" +
                "        com.nickName,com.mfgPNDescription,com.assyCode,com.RoHSStatusID, ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,     \n" +
                "        CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer    \n" +
                "        from rfq_assemblies_quotation_submitted rqs    \n" +
                "        join rfq_assemblies ra on ra.id = rqs.rfqAssyID and ra.isDeleted = 0    \n" +
                "        join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "        join component com on com.id = ra.partID and com.isDeleted = 0    \n" +
                "        left join rfq_rohsmst ro on ro.id = com.RoHSStatusID    \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0      \n" +
                "        where rqs.rfqAssyID = prfqAssyID;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                       \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                  \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "	EXECUTE query3;                                  \n" +
                "	DEALLOCATE PREPARE query3;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                      \n" +
                "	IN prfqAssyID INT(1),      \n" +
                "    IN ppartID INT(1),      \n" +
                "	IN puserID INT(1),  \n" +
                "    IN pBOMVersion varchar(50)  \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "  BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                      \n" +
                "  \n" +
                "    START TRANSACTION;              \n" +
                "  \n" +
                "    #consoliadte select               \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS               \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;                \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                      \n" +
                "		drop temporary table if exists leveldata;      \n" +
                "		create temporary table if not exists leveldata as      \n" +
                "			WITH RECURSIVE cte AS          \n" +
                "			(       \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,0 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID as rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				where rl.partId = ppartID and rla.isDeleted = 0      \n" +
                "				)      \n" +
                "			  UNION ALL          \n" +
                "  \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,cte.level+1 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, ceiling((cte.qpa1 * rl.qpa)) as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID #and com.category != 3      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				join cte cte on cte.category = 3 and rl.partID = cte.mfgPNID      \n" +
                "				where rla.isDeleted =0      \n" +
                "			   )      \n" +
                "			)      \n" +
                "			SELECT cte.* FROM cte       \n" +
                "			where cte.category !=3      \n" +
                "			order by lineItemID,partcode;      \n" +
                "  \n" +
                "		drop temporary table if exists Results;      \n" +
                "		create temporary table if not exists Results as      \n" +
                "		select  group_concat(partlineID) as consolidatedpartlineID,count(b.rfqLineItemsID) as multiple,group_concat(b.refDesig) as consolidatedrefDesig, group_concat(b.rfqLineItemsID) as consolidatedLineItemIDs,sum(qpa1)qpa, b.* from (      \n" +
                "		select concat('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',a.lineID,'}') as partlineID, GROUP_CONCAT(part) as part1,GROUP_CONCAT(partcode) as partcode1,      \n" +
                "		a.* from leveldata a      \n" +
                "		group by rfqLineItemsID,level      \n" +
                "		)b      \n" +
                "		group by  numOfPosition,isPurchase,partcode1;      \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                      \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "			SET                       \n" +
                "			cl.isDeleted = TRUE,                      \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "			cl.deletedBy = puserID                      \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                      \n" +
                "            SELECT * FROM(                           \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                       \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                      \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                       \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                      \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                      \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                      \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`)                      \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                      \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                      \n" +
                "		puserID `createdBy`, R.`numOfPosition`,                      \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`                       \n" +
                "        FROM Results R                      \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		 WHERE cl.id IS NULL;                      \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                      \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                      \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                      \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                      \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                      \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                       \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                       \n" +
                "		SET                       \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "        rq.updatedBy = puserID,                      \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                      \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                      \n" +
                "# Update Consilidated LineItems                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                       \n" +
                "		SET                       \n" +
                "		cl.isInstall = R.isInstall ,                      \n" +
                "		cl.isPurchase = R.isPurchase,                      \n" +
                "		cl.numOfPosition = R.numOfPosition,                      \n" +
                "		cl.attritionRate = R.attritionRate,                      \n" +
                "		cl.leadQty = R.leadQty,                      \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                      \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                      \n" +
                "        cl.qpa = R.qpa,                      \n" +
                "        cl.uomID = R.uomID,            \n" +
                "        cl.refDesig = R.consolidatedrefDesig,            \n" +
                "        cl.lineID = R.lineID,                      \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,    \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,    \n" +
                "        cl.updatedBy = puserID                      \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                      \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                      \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cap.deletedBy = puserID                      \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                      \n" +
                "  ############################      \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                       \n" +
                "		SET                       \n" +
                "        isDeleted = TRUE,                      \n" +
                "        deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		deletedBy = puserID                      \n" +
                "        WHERE id IN(                       \n" +
                "        SELECT capID FROM (                      \n" +
                "		SELECT DISTINCT(cap.id)AS capID                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                      \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                       \n" +
                "		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                      \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                       \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove         \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                        \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                        \n" +
                "# delete Consolidate lineItems                       \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		SET                       \n" +
                "        cl.isDeleted = TRUE,                      \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cl.deletedBy = puserID                      \n" +
                "		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                              \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                       \n" +
                "  #################################      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                      \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                      \n" +
                "		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                      \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                    \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed         \n" +
                "#################################               \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl                  \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cap.deletedBy = puserID                  \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (                   \n" +
                "        SELECT  DISTINCT(cap.id)                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);                  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove         \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,                   \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,                  \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                        \n" +
                "		SET                       \n" +
                "        cq.finalPrice = NULL,                  \n" +
                "        cq.selectedPIDCode = NULL,                  \n" +
                "        cq.selectedMpn = NULL,                  \n" +
                "        cq.selectionMode = NULL,                  \n" +
                "        cq.supplier = NULL,                  \n" +
                "        cq.supplierStock = NULL,                  \n" +
                "        cq.currentStock = NULL,                  \n" +
                "        cq.grossStock = NULL,                  \n" +
                "        cq.leadTime = NULL,                  \n" +
                "        cq.min = NULL,                  \n" +
                "        cq.mult = NULL,                  \n" +
                "        cq.unitPrice = NULL,                  \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.updatedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                        \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                     \n" +
                "  \n" +
                "  # update rfq assembly pricing status          \n" +
                "    update rfq_assemblies set isReadyForPricing = true, partCostingBOMInternalVersion = pBOMVersion, updatedAt = current_timestamp(), updatedBy = puserID where isDeleted = 0 and id = prfqAssyID;         \n" +
                "  \n" +
                "    COMMIT;                  \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)                \n" +
                "    UNION              \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id               \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);              \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;               \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (402,'2.00','V1','Quote summary changes SP changes  - shirish'," + userid + ");"
            );
            break;
        case 402:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/22/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(  \n" +
                "	pComponentID int(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS      \n" +
                "	SELECT 	id,		receiveMaterialType, 		pkgQty    \n" +
                "    FROM 	component_sid_stock   \n" +
                "    WHERE 	refcompid = pComponentID   \n" +
                "    AND 	IFNULL(isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempStockRawDet;  \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempStockRawDet where receiveMaterialType = 'Reserve Stock';  \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock   \n" +
                "    FROM 	kit_allocation   \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)   \n" +
                "    AND 	STATUS != 'R';  \n" +
                "  \n" +
                "    SET @reservedStock = (@totalReservedStock + @allocatedToKitStock);  \n" +
                "    SET @availableStock = (@totalStockInSystemRecord - @reservedStock);  \n" +
                "  \n" +
                "  \n" +
                "    -- Calculate Cumulative Stock  \n" +
                "	SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempCumulativeStockRawDet AS      \n" +
                "	SELECT 	c.id,		c.refcompid,	c.receiveMaterialType, 		c.pkgQty    \n" +
                "    FROM 	component_sid_stock c, component_packagingalias cp  \n" +
                "    WHERE 	c.refcompid = cp.componentID  \n" +
                "    AND 	IFNULL(c.isDeleted,0) = 0  \n" +
                "    AND		cp.componentID != pComponentID  \n" +
                "    AND		cp.aliasgroupID = @packaginggroupID  \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeStockInSystemRecord FROM tempCumulativeStockRawDet;  \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeReservedStock FROM tempCumulativeStockRawDet where receiveMaterialType = 'Reserve Stock';  \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedCumulativeStockToKitStock   \n" +
                "    FROM 	kit_allocation   \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempCumulativeStockRawDet)   \n" +
                "    AND 	STATUS != 'R';  \n" +
                "  \n" +
                "    SET @reservedCumulativeStock = (@totalCumulativeReservedStock + @allocatedCumulativeStockToKitStock);  \n" +
                "    SET @cumulativeStock = (@totalCumulativeStockInSystemRecord - @reservedCumulativeStock);  \n" +
                "    -- End Calculate Cumulative Stock  \n" +
                "  \n" +
                "	SET @totalInHouseStock = @availableStock + @reservedStock + @cumulativeStock ;  \n" +
                "  \n" +
                "    SELECT (IFNULL(saftyStock,0) - @availableStock) INTO @shortage   \n" +
                "    FROM component   \n" +
                "    WHERE id = pComponentID;  \n" +
                "  \n" +
                "    SELECT 	@availableStock availableStock,  	@reservedStock reservedStock,  \n" +
                "			@cumulativeStock cumulativeStock, 	@totalInHouseStock totalInHouseStock,  \n" +
                "            @shortage shortage;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockRawDet;  \n" +
                "    DROP TEMPORARY TABLE  tempCumulativeStockRawDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/22/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (403,'2.00','V1',' Created procedure to get stock status - Dharmishtha '," + userid + ");"
            );
            break;
        case 403:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "drop procedure if exists `Sproc_GetNoneTypeComponent`;  \n" +
                "CREATE PROCEDURE `Sproc_GetNoneTypeComponent`()  \n" +
                "BEGIN  \n" +
                "SELECT c.id,c.mfgPN,c.connecterTypeID,c.connectorTypeText,c.mountingTypetext,c.mountingTypeID,c.uomText,c.uom,c.rohsText,c.RoHSStatusID FROM component c LEFT JOIN mfgcodemst mg  \n" +
                "ON mg.id=c.mfgcodeID  \n" +
                "WHERE  mg.mfgType='MFG' AND c.isdeleted=0 AND c.isCustom=0 AND ((c.connecterTypeID=-1 AND c.connectorTypeText IS NOT NULL)  \n" +
                " OR (c.mountingTypeID=-1 AND c.mountingTypetext IS NOT NULL) OR (c.RoHSStatusID=-1 AND c.rohsText IS NOT NULL) OR (c.uom=0 AND c.uomText IS NOT NULL));  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (404,'2.00','V1','rename isCustom field in Sproc_GetNoneTypeComponent - Ashish'," + userid + ");"
            );
            break;
        case 404:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                      \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN pPartID INT,    \n" +
                "	IN pPackaging TINYINT(1)                               \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                    \n" +
                "			SELECT GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                    \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,  \n" +
                "           CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.rfqlineitemsid=rl.id)>1 THEN 'Mismatched' ELSE    \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.rfqlineitemsid=rl.id LIMIT 1) END AS `name`,    \n" +
                "		# CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                                    \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                       \n" +
                "			com.PIDCode, com.category, rl.partID,ra.mfgPNID,          \n" +
                "  \n" +
                "			(CASE WHEN pPackaging = 1 THEN    \n" +
                "			(SELECT  GROUP_CONCAT(IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),'@@@',a.RoHSStatusID,'@@@', a.name,'@@@', a.rohsIcon,'@@@',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',IFNULL(a.gencCategoryName,\"\"))     \n" +
                "			FROM      \n" +
                "				( SELECT cp.PIDCode,cp.RoHSStatusID,rom.name,rom.rohsIcon,c.feature,gcp.gencCategoryName    \n" +
                "				FROM rfq_lineitems_alternatepart rla     \n" +
                "				LEFT JOIN  component c ON rla.mfgpnid=c.id      \n" +
                "				JOIN component_packagingalias ca ON ca.componentId = c.id    \n" +
                "				LEFT JOIN component_packagingalias cap ON ca.aliasgroupId = cap.aliasgroupID    \n" +
                "				LEFT JOIN component cp ON cp.id = cap.componentID     \n" +
                "				LEFT JOIN  genericcategory gcp ON cp.partStatus=gcp.gencCategoryID AND gcp.isActive=1 AND gcp.isDeleted=0                     \n" +
                "				LEFT JOIN  rfq_rohsmst rom ON rom.id = cp.RoHSStatusID AND rom.isDeleted = 0                                                            \n" +
                "				WHERE rla.rfqlineitemsid=rl.id AND rla.isdeleted=0    \n" +
                "				UNION     \n" +
                "				SELECT com.PIDCode,com.RoHSStatusID,ro.name,ro.rohsIcon,com.feature,gc.gencCategoryName    \n" +
                "  \n" +
                "				) AS a )    \n" +
                "  \n" +
                "  \n" +
                "                       ELSE    \n" +
                "			GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon,'@@@',REPLACE(IFNULL(com.feature,\"\"),\",\",\"\"),'@@@',IFNULL(gc.gencCategoryName,\"\")) END) AS mfgPN,    \n" +
                "			#GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon ) END) AS mfgPN,        \n" +
                "  \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                     \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                     \n" +
                "			FROM rfq_lineitems_alternatepart ra                                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                      \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                                  \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                          \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0                   \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0    \n" +
                "			LEFT JOIN  genericcategory gc ON com.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0       \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                                   \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "		SET pWhereClause = '1=1' ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (405,'2.00','V1','Planned BOM SP changes  - shirish'," + userid + ");"
            );
            break;
        case 405:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(        \n" +
                "	IN pPartID INT,        \n" +
                "	IN pUserID INT          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE totalCount INT DEFAULT 0;            \n" +
                "	DECLARE currIndex INT DEFAULT 0;            \n" +
                "	DECLARE prevLineID INT;            \n" +
                "	DECLARE currCustPNID INT;            \n" +
                "	DECLARE currMFGPNID INT;        \n" +
                "	DECLARE currLineID INT;        \n" +
                "	DECLARE mountingTypeID INT;        \n" +
                "	DECLARE functionalCategoryID INT;        \n" +
                "	DECLARE rohsStatusID INT;        \n" +
                "	DECLARE categoryID INT;        \n" +
                "	DECLARE partTypeID INT;        \n" +
                "	DECLARE statusID INT;        \n" +
                "	DECLARE mfgPNID INT;           \n" +
                "	DECLARE currCustRev VARCHAR(10);            \n" +
                "	DECLARE currCustPN VARCHAR(500);        \n" +
                "	DECLARE mfgPN VARCHAR(500);        \n" +
                "	DECLARE mfgPID VARCHAR(500);            \n" +
                "	DECLARE maxDisplayOrder DECIMAL;        \n" +
                "	DECLARE pLiveInternalVersion INT(11);       \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);        \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);           \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	DECLARE pMFGPN VARCHAR(100);    \n" +
                "  \n" +
                "	SET categoryID = 2;        \n" +
                "	SET partTypeID = 2;       \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';            \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN        \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';         \n" +
                "	ELSE         \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';         \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN        \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;        \n" +
                "		ELSE         \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;        \n" +
                "		END IF;        \n" +
                "	END IF;	         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (        \n" +
                "	SELECT         \n" +
                "		rla.id,        \n" +
                "		rla.rfqLineItemsID,        \n" +
                "		rl.custPNID,         \n" +
                "		rl.custPN,        \n" +
                "		rl.customerRev,        \n" +
                "		rla.mfgPNID,         \n" +
                "		c.RoHSStatusID        \n" +
                "	FROM rfq_lineitems_alternatepart rla        \n" +
                "	LEFT JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id         \n" +
                "	LEFT JOIN component c ON c.id = rla.mfgPNID        \n" +
                "	WHERE 	rl.custPN IS NOT NULL AND rla.mfgPNID IS NOT NULL         \n" +
                "		AND rl.partID = pPartID         \n" +
                "		AND rl.isDeleted = 0         \n" +
                "		AND rl.duplicateCPNStep = 1 );    		        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;            \n" +
                "	SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;        \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;        \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;        \n" +
                "	SELECT gencCategoryID INTO statusID FROM genericcategory WHERE categoryType = 'Part Status' AND gencCategoryName = 'Active';        \n" +
                "  \n" +
                "	IF functionalCategoryID IS NULL THEN         \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;        \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy)        \n" +
                "				VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID);        \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;        \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF mountingTypeID IS NULL THEN         \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy)VALUES('CPN', 1, pUserID);        \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;        \n" +
                "	END IF;         \n" +
                "  \n" +
                "	WHILE currIndex < totalCount DO            \n" +
                "		SET currCustPN = NULL;          \n" +
                "		SET currCustRev = NULL;          \n" +
                "  \n" +
                "		SELECT 	a.custPN, 	a.custPNID,         \n" +
                "			a.customerRev, 	a.mfgPNID,         \n" +
                "			a.rfqLineItemsID        \n" +
                "		INTO 	currCustPN,	currCustPNID,        \n" +
                "			currCustRev,	currMFGPNID,        \n" +
                "			currLineID         \n" +
                "		FROM 	temp_component_cust_alias_rev a LIMIT currIndex, 1;            \n" +
                "  \n" +
                "		SET currIndex = currIndex + 1;       \n" +
                "		SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "		IF (currCustPNID IS NOT NULL) THEN        \n" +
                "  \n" +
                "			IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN        \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (currCustPNID , currMFGPNID, pUserID);         \n" +
                "				SELECT IFNULL(k.liveInternalVersion,0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;          		    \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "				SELECT j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;      \n" +
                "				INSERT INTO rfq_assembly_history                         \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "						oldValue,newValue,changeVersion,                        \n" +
                "						createdAt,createdBy)                         \n" +
                "					VALUES 	(\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFG PN\",                        \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "						SYSDATE(),pUserID);    \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF (currCustPNID IS NULL) THEN        \n" +
                "			IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN        \n" +
                "				SET rohsStatusID = 0;        \n" +
                "			ELSE         \n" +
                "				SET rohsStatusID = 1;	        \n" +
                "			END IF;     \n" +
                "			IF (currCustRev IS NULL) THEN   \n" +
                "			   SET currCustRev = \"-\";  \n" +
                "			END IF;  \n" +
                "			SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);        \n" +
                "			SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = @mfgCodeID;        \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);        \n" +
                "  \n" +
                "			SELECT d.id INTO mfgPNID FROM component d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0;        \n" +
                "			IF mfgPNID IS NULL THEN         \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,         \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,         \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,        \n" +
                "							createdAt,liveInternalVersion, partType, uom)         \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,        \n" +
                "							1,1,@mfgCodeID,pUserID,        \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,        \n" +
                "							SYSDATE(), 0, partTypeID, -1);        \n" +
                "				SELECT LAST_INSERT_ID() INTO @maxPartId;        \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (@maxPartId , currMFGPNID, pUserID);        \n" +
                "				UPDATE rfq_lineitems SET custPNID = @maxPartId, customerRev = currCustRev WHERE id = currLineID;        \n" +
                "  \n" +
                "			ELSE         \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (mfgPNID , currMFGPNID, pUserID);    \n" +
                "				SET currCustPNID = mfgPNID;  \n" +
                "				SELECT IFNULL(z.liveInternalVersion,0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;          		    \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "				SELECT t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;      \n" +
                "				INSERT INTO rfq_assembly_history                         \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "						oldValue,newValue,changeVersion,                        \n" +
                "						createdAt,createdBy)                         \n" +
                "					VALUES 	(\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFG PN\",                        \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "						SYSDATE(),pUserID);    \n" +
                "				UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev  WHERE id = currLineID;        \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF ((prevLineID IS NULL OR prevLineID  != currLineID) AND pLiveInternalVersion != 0)  THEN        \n" +
                "			UPDATE component SET liveInternalVersion = pLiveInternalVersion , liveInternalVersionPrefix = pCompanyName WHERE id = currCustPNID;        \n" +
                "		END IF;     \n" +
                "  \n" +
                "		SET prevLineID = currLineID;        \n" +
                "  \n" +
                "	END WHILE;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (406,'2.00','V1',' Resolved Customer PN issue in BOM - Jignesh K'," + userid + ");"
            );
            break;
        case 406:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                                \n" +
                "	IN ppageIndex INT(11),                                                \n" +
                "	IN precordPerPage INT(11),                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                \n" +
                "	IN rfqAssyID INT(11),                                                \n" +
                "	IN puserID INT (11),      \n" +
                "	IN ppackageing TINYINT(1),      \n" +
                "	IN pcustomerID INT(11)                                           \n" +
                "    )  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                            \n" +
                "	    SET @SQLString = NULL;                                             \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                \n" +
                "		ELSE                                                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                                 \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                \n" +
                "			SET pWhereClause = '1=1' ;                                                \n" +
                "		END IF;	                                                \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                \n" +
                "		ELSE	                                                \n" +
                "			SET rowNumWhere = '';                                                \n" +
                "		END IF;	                                                \n" +
                "		SELECT                                        \n" +
                "                     GROUP_CONCAT(DISTINCT                                        \n" +
                "				CONCAT(                                        \n" +
                "					'Max((IF(ra.requestQty = ''',                                        \n" +
                "						ra.requestQty,                                        \n" +
                "					''', rq.finalPrice, null))) AS ''',                                        \n" +
                "						ra.requestQty,''''                                        \n" +
                "					)                                        \n" +
                "					) INTO @SQLString                                        \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                              \n" +
                "			IF(@SQLString IS NOT NULL) THEN                                                \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                \n" +
                "					SELECT                                                 \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,                                                     \n" +
                "						rp.partTypeName, rm.name,rl.refDesig,                                 \n" +
                "						rl.qpa,rl.consolidatedpartlineID,                                      \n" +
                "						(SELECT gc.gencCategoryName FROM genericcategory gc                                      \n" +
                "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,                                      \n" +
                "						co.ltbDate AS LTBDate,                            \n" +
                "						co.eolDate AS EOLDate,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',         \n" +
                "						',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing)),', ',                                                 \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                                \n" +
                "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                \n" +
                "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id   \n" +
                "						LEFT JOIN component co ON co.mfgPN=rq.selectedMpn  \n" +
                "						LEFT JOIN rfq_parttypemst rp ON co.functionalcategoryid=rp.id    \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON co.mountingTypeID=rm.id                                                 \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                       \n" +
                "						AND rq.selectedMpn IN (SELECT mfgPN FROM component                                       \n" +
                "					WHERE deletedAt IS NULL AND ((eolDate IS NOT NULL AND eolDate < CONVERT_TZ(NOW(), @@session.time_zone, ', '''+00:00''', ')) OR  partstatus IN                                       \n" +
                "						(SELECT gencCategoryID FROM genericcategory                                       \n" +
                "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"NOT FOR NEW Designs\",\"Obsolete\"))))                                      \n" +
                "					GROUP BY rl.id');                                                  \n" +
                "			END IF;                                  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                              \n" +
                "			EXECUTE stmt;	                                                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                \n" +
                "			EXECUTE query1;                                                \n" +
                "			DEALLOCATE PREPARE query1;                                                \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                \n" +
                "			EXECUTE query2;                                                \n" +
                "			DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));            \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                          \n" +
                "			EXECUTE query3;                                                          \n" +
                "			DEALLOCATE PREPARE query3;                                                   \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                           \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                \n" +
                "			EXECUTE query4;                                                \n" +
                "			DEALLOCATE PREPARE query4;                                                \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                             \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                  \n" +
                "			EXECUTE query5;                                                                  \n" +
                "			DEALLOCATE PREPARE query5;                                                         \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));          \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                  \n" +
                "			EXECUTE query6;                                                                  \n" +
                "			DEALLOCATE PREPARE query6;               \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));          \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                  \n" +
                "			EXECUTE query7;                                                                  \n" +
                "			DEALLOCATE PREPARE query7;                                                 \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                  \n" +
                "    END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(                                                  \n" +
                "	IN ppageIndex INT(11),                                                  \n" +
                "	IN precordPerPage INT(11),                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                  \n" +
                "	IN rfqAssyID INT(11),                                                  \n" +
                "	IN puserID INT (11),          \n" +
                "	IN pleadTime INT (11),      \n" +
                "	IN ppackageing TINYINT(1),      \n" +
                "	IN pcustomerID INT(11)                      \n" +
                "    )  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                          \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                  \n" +
                "	    SET @SQLString = NULL;                                               \n" +
                "	    SET @HavingClause = NULL;                                                   \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "		ELSE                                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                                   \n" +
                "		END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                  \n" +
                "			SET pWhereClause = '1=1' ;                                                  \n" +
                "		END IF;	                                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "		ELSE	                                                  \n" +
                "			SET rowNumWhere = '';                                                  \n" +
                "		END IF;	                                                  \n" +
                "		SELECT                                                  \n" +
                "                      GROUP_CONCAT(DISTINCT                                                  \n" +
                "				CONCAT(                                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                                  \n" +
                "						ra.requestQty,                                                  \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                                  \n" +
                "						ra.requestQty,''''                                                  \n" +
                "					)                                                  \n" +
                "					),                                        \n" +
                "		GROUP_CONCAT(DISTINCT                                                  \n" +
                "				CONCAT(                                                  \n" +
                "					'((Max((IF(ra.requestQty = ''',                                                  \n" +
                "						ra.requestQty,                                                  \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                                        \n" +
                "					) SEPARATOR ' OR '                                                      \n" +
                "					)                        \n" +
                "				INTO @SQLString,@HavingClause                                             \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                  \n" +
                "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                  \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                                                \n" +
                "			IF(@SQLString IS NOT NULL) THEN       \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                  \n" +
                "					SELECT                                                   \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID, rl.uomID,rl.consolidatedpartlineID,  \n" +
                "					  CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE    \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `name`,  \n" +
                "		   CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.partTypeName)) FROM  rfq_parttypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE    \n" +
                "										  (SELECT rm.partTypeName FROM  rfq_parttypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `partTypeName`,                                               \n" +
                "					  rl.qpa,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',      \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing)),', ',                                                 \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                                  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                  \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                  \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                         \n" +
                "					GROUP BY rl.id');       \n" +
                "  \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                                  \n" +
                "			END IF;                                         \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                  \n" +
                "			EXECUTE stmt;	                                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                  \n" +
                "			EXECUTE query1;                                                  \n" +
                "			DEALLOCATE PREPARE query1;                                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                  \n" +
                "			EXECUTE query2;                                                  \n" +
                "			DEALLOCATE PREPARE query2;           \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID));            \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                          \n" +
                "			EXECUTE query3;                                                          \n" +
                "			DEALLOCATE PREPARE query3;                                                 \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                   \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                  \n" +
                "			EXECUTE query4;                                                  \n" +
                "			DEALLOCATE PREPARE query4;                                                  \n" +
                "  \n" +
                "  			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                             \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                  \n" +
                "			EXECUTE query5;                                                                  \n" +
                "			DEALLOCATE PREPARE query5;                                                         \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));          \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                  \n" +
                "			EXECUTE query6;                                                                  \n" +
                "			DEALLOCATE PREPARE query6;               \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));          \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                  \n" +
                "			EXECUTE query7;                                                                  \n" +
                "			DEALLOCATE PREPARE query7;                                                     \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                    \n" +
                "    END;  \n" +

                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItems` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItems`(            \n" +
                "rfqAssyID INT(11),          \n" +
                "SQLString VARCHAR(16383),      \n" +
                "customerID INT(11),      \n" +
                "isPackaging TINYINT(1)          \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "    READS SQL DATA  \n" +
                "    DETERMINISTIC  \n" +
                "BEGIN     \n" +
                "  \n" +
                "	DECLARE result NVARCHAR(16383);          \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                          \n" +
                "					SELECT                                                           \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,rl.uomID,rl.consolidatedpartlineID,                                                            \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,  \n" +
                "					CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE    \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `name`,    \n" +
                "		   CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.partTypeName)) FROM  rfq_parttypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE    \n" +
                "										  (SELECT rm.partTypeName FROM  rfq_parttypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN    \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `partTypeName`,    \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponent(customerID)),',                                                          \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(isPackaging)),', ',                                                           \n" +
                "					SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                                                          \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                          \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                          \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.id')  INTO @result;            \n" +
                "      	SET result = @result;            \n" +
                "	RETURN result;            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (407,'2.00','V1','Change in part costing sp-champak '," + userid + ");"
            );
            break;
        case 407:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "ALTER TABLE component CHANGE `liveInternalVersionPrefix` `liveVersion` VARCHAR(50);  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(        \n" +
                "	IN pPartID INT,        \n" +
                "	IN pUserID INT          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE totalCount INT DEFAULT 0;            \n" +
                "	DECLARE currIndex INT DEFAULT 0;            \n" +
                "	DECLARE prevLineID INT;            \n" +
                "	DECLARE currCustPNID INT;            \n" +
                "	DECLARE currMFGPNID INT;        \n" +
                "	DECLARE currLineID INT;        \n" +
                "	DECLARE mountingTypeID INT;        \n" +
                "	DECLARE functionalCategoryID INT;        \n" +
                "	DECLARE rohsStatusID INT;        \n" +
                "	DECLARE categoryID INT;        \n" +
                "	DECLARE partTypeID INT;        \n" +
                "	DECLARE statusID INT;        \n" +
                "	DECLARE mfgPNID INT;           \n" +
                "	DECLARE currCustRev VARCHAR(10);            \n" +
                "	DECLARE currCustPN VARCHAR(500);        \n" +
                "	DECLARE mfgPN VARCHAR(500);        \n" +
                "	DECLARE mfgPID VARCHAR(500);            \n" +
                "	DECLARE maxDisplayOrder DECIMAL;        \n" +
                "	DECLARE pLiveInternalVersion INT(11);       \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);        \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);           \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	DECLARE pMFGPN VARCHAR(100);    \n" +
                "  \n" +
                "	SET categoryID = 2;        \n" +
                "	SET partTypeID = 2;       \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';            \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN        \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';         \n" +
                "	ELSE         \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';         \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN        \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;        \n" +
                "		ELSE         \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;        \n" +
                "		END IF;        \n" +
                "	END IF;	         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (        \n" +
                "	SELECT         \n" +
                "		rla.id,        \n" +
                "		rla.rfqLineItemsID,        \n" +
                "		rl.custPNID,         \n" +
                "		rl.custPN,        \n" +
                "		rl.customerRev,        \n" +
                "		rla.mfgPNID,         \n" +
                "		c.RoHSStatusID        \n" +
                "	FROM rfq_lineitems_alternatepart rla        \n" +
                "	LEFT JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id         \n" +
                "	LEFT JOIN component c ON c.id = rla.mfgPNID        \n" +
                "	WHERE 	rl.custPN IS NOT NULL AND rla.mfgPNID IS NOT NULL         \n" +
                "		AND rl.partID = pPartID         \n" +
                "		AND rl.isDeleted = 0         \n" +
                "		AND rl.duplicateCPNStep = 1 );    		        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;            \n" +
                "	SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;        \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;        \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;        \n" +
                "	SELECT gencCategoryID INTO statusID FROM genericcategory WHERE categoryType = 'Part Status' AND gencCategoryName = 'Active';        \n" +
                "  \n" +
                "	IF functionalCategoryID IS NULL THEN         \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;        \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy)        \n" +
                "				VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID);        \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;        \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF mountingTypeID IS NULL THEN         \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy)VALUES('CPN', 1, pUserID);        \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;        \n" +
                "	END IF;         \n" +
                "  \n" +
                "	WHILE currIndex < totalCount DO            \n" +
                "		SET currCustPN = NULL;          \n" +
                "		SET currCustRev = NULL;          \n" +
                "  \n" +
                "		SELECT 	a.custPN, 	a.custPNID,         \n" +
                "			a.customerRev, 	a.mfgPNID,         \n" +
                "			a.rfqLineItemsID        \n" +
                "		INTO 	currCustPN,	currCustPNID,        \n" +
                "			currCustRev,	currMFGPNID,        \n" +
                "			currLineID         \n" +
                "		FROM 	temp_component_cust_alias_rev a LIMIT currIndex, 1;            \n" +
                "  \n" +
                "		SET currIndex = currIndex + 1;       \n" +
                "		SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "		IF (currCustPNID IS NOT NULL) THEN        \n" +
                "  \n" +
                "			IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN        \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (currCustPNID , currMFGPNID, pUserID);         \n" +
                "				SELECT IFNULL(k.liveInternalVersion,0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;          		    \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "				SELECT j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;      \n" +
                "				INSERT INTO rfq_assembly_history                         \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "						oldValue,newValue,changeVersion,                        \n" +
                "						createdAt,createdBy)                         \n" +
                "					VALUES 	(\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFG PN\",                        \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "						SYSDATE(),pUserID);    \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF (currCustPNID IS NULL) THEN        \n" +
                "			IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN        \n" +
                "				SET rohsStatusID = 0;        \n" +
                "			ELSE         \n" +
                "				SET rohsStatusID = 1;	        \n" +
                "			END IF;     \n" +
                "			IF (currCustRev IS NULL) THEN   \n" +
                "			   SET currCustRev = \"-\";  \n" +
                "			END IF;  \n" +
                "			SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);        \n" +
                "			SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = @mfgCodeID;        \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);        \n" +
                "  \n" +
                "			SELECT d.id INTO mfgPNID FROM component d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0;        \n" +
                "			IF mfgPNID IS NULL THEN         \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,         \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,         \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,        \n" +
                "							createdAt,liveInternalVersion, partType, uom)         \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,        \n" +
                "							1,1,@mfgCodeID,pUserID,        \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,        \n" +
                "							SYSDATE(), 0, partTypeID, -1);        \n" +
                "				SELECT LAST_INSERT_ID() INTO @maxPartId;        \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (@maxPartId , currMFGPNID, pUserID);        \n" +
                "				UPDATE rfq_lineitems SET custPNID = @maxPartId, customerRev = currCustRev WHERE id = currLineID;        \n" +
                "  \n" +
                "			ELSE         \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (mfgPNID , currMFGPNID, pUserID);    \n" +
                "				SET currCustPNID = mfgPNID;  \n" +
                "				SELECT IFNULL(z.liveInternalVersion,0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;          		    \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "				SELECT t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;      \n" +
                "				INSERT INTO rfq_assembly_history                         \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "						oldValue,newValue,changeVersion,                        \n" +
                "						createdAt,createdBy)                         \n" +
                "					VALUES 	(\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFG PN\",                        \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "						SYSDATE(),pUserID);    \n" +
                "				UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev  WHERE id = currLineID;        \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF ((prevLineID IS NULL OR prevLineID  != currLineID) AND pLiveInternalVersion != 0)  THEN        \n" +
                "			UPDATE component SET liveInternalVersion = pLiveInternalVersion , liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = currCustPNID;        \n" +
                "		END IF;     \n" +
                "  \n" +
                "		SET prevLineID = currLineID;        \n" +
                "  \n" +
                "	END WHILE;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;            \n" +
                "  \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustMFGPn` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(       \n" +
                "-- IN pcustomerID  INT ,       \n" +
                "IN prefCPNPartID INT,      \n" +
                "IN prefComponentIDs VARCHAR(5000),      \n" +
                "IN puserID VARCHAR(10)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);          \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);        \n" +
                "	DECLARE pCompanyName VARCHAR(100);               \n" +
                "	DECLARE pMFGPN VARCHAR(100);      \n" +
                "	DECLARE pLiveInternalVersion INT(11);    \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;    \n" +
                "	DECLARE i INT DEFAULT 0;    \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                        \n" +
                "	BEGIN                        \n" +
                "		ROLLBACK;                        \n" +
                "		RESIGNAL;                        \n" +
                "	END;                        \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                        \n" +
                "	  BEGIN                        \n" +
                "		ROLLBACK;                        \n" +
                "		RESIGNAL;                        \n" +
                "	END;    \n" +
                "  \n" +
                "	START TRANSACTION;         \n" +
                "  \n" +
                "	/*Generate Dummy data from string to row */        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;        \n" +
                "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );        \n" +
                "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;        \n" +
                "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );        \n" +
                "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");        \n" +
                "	PREPARE stmt1 FROM @SQL;        \n" +
                "	EXECUTE stmt1;        \n" +
                "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;        \n" +
                "	/*Generate Dummy data from string to row */     \n" +
                "  \n" +
                "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;     \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = prefCPNPartID;     \n" +
                "	SET pLiveInternalVersion  = pLiveInternalVersion  + 1;           		      \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';              \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN          \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';           \n" +
                "	ELSE           \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';           \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN          \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;          \n" +
                "		ELSE           \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;          \n" +
                "		END IF;          \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	/* add all mapping mfgPN history with internal version */    \n" +
                "	SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;    \n" +
                "  \n" +
                "	WHILE i < totMFGPN DO     \n" +
                "  \n" +
                "	SET pMFGPN = NULL;    \n" +
                "	SELECT mfgPN INTO pMFGPN FROM component WHERE deletedAt IS NULL     \n" +
                "	AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);    \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                          \n" +
                "						oldValue,newValue,changeVersion,createdAt,createdBy)                           \n" +
                "	VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MFG PN\",                          \n" +
                "		NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), SYSDATE(),puserID);      \n" +
                "  \n" +
                "	SET i = i + 1;    \n" +
                "	END WHILE;    \n" +
                "  \n" +
                "	/* update component live internal version */    \n" +
                "	UPDATE component     \n" +
                "	SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = prefCPNPartID;          \n" +
                "  \n" +
                "	/* add all mapping mfgPN against custpn */	     \n" +
                "	INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy)      \n" +
                "	SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`       \n" +
                "	FROM temp_CustMFGPn ;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;        \n" +
                "  \n" +
                "	COMMIT; 			    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (408,'2.00','V1',' Rename liveinternalVersionPrefix to liveVersion in component master - Jignesh K '," + userid + ");"
            );
            break;
        case 408:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentCustAliasRev` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustAliasRev`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),	        \n" +
                "        IN pWhereClause VARCHAR(16383),        \n" +
                "        IN pcustomerID VARCHAR(255)         \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
                "  \n" +
                "		SELECT co.id,co.custAssyPN,co.mfgcodeID,co.rev,co.liveVersion,co.mfgPN    \n" +
                "		FROM component co    \n" +
                "		WHERE co.deletedAt IS NULL    \n" +
                "		AND co.isCPN = 1    \n" +
                "		AND co.mfgCodeID = pcustomerID ;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"rev ASC\") ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (409,'2.00','V1',' CPN get sp changes - KETAN '," + userid + ");"
            );
            break;
        case 409:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "UPDATE page_detail SET  iconClass=\"mdi mdi-bookmark-outline\"  WHERE displayMenuName=\"Quote Terms & Conditions Categories\";  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE `import_entity_fields` ADD COLUMN `required` TINYINT(1) NULL AFTER `deletedAt`;  \n" +
                "  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  displayName=\"First Name\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  displayName=\"Last Name\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayName=\"Initial\" WHERE  displayName=\"Initials\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  displayName=\"Initial\" AND entityTableName=\"employees\";  \n" +
                "  \n" +
                "INSERT INTO import_entity_fields (entityTableName, FIELD, displayName, displayOrder, createdBy, createdAt, updatedBy, updatedAt, isDeleted, deletedBy, deletedAt, required)  \n" +
                " VALUES('employees', 'phExtension', 'Ext.', '10.00', '1', '2018-10-05 05:23:44', NULL, NULL, '0', NULL, NULL, '0');  \n" +
                "  \n" +
                "INSERT INTO import_entity_fields (entityTableName, FIELD, displayName, displayOrder, createdBy, createdAt, updatedBy, updatedAt, isDeleted, deletedBy, deletedAt, required)  \n" +
                " VALUES('employees', 'street3', 'Address Line 3', '8.00', '1', '2018-10-05 05:23:44', NULL, NULL, '0', NULL, NULL, '0');  \n" +
                "  \n" +
                "UPDATE import_entity_fields SET displayName='State/Province/Region' WHERE  FIELD=\"state\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayName='Zip/Postal Code' WHERE  FIELD=\"postcode\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayName='Phone' WHERE FIELD=\"contact\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayName='Fax' WHERE FIELD=\"faxNumber\" AND entityTableName=\"employees\";  \n" +
                "  \n" +
                "  \n" +
                "UPDATE import_entity_fields SET displayOrder=4 WHERE  FIELD=\"initialName\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=5 WHERE  FIELD=\"code\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=6 WHERE  FIELD=\"email\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=7 WHERE  FIELD=\"street1\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=8 WHERE  FIELD=\"street2\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=9 WHERE  FIELD=\"street3\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=10 WHERE  FIELD=\"city\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=11 WHERE  FIELD=\"contact\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=12 WHERE  FIELD=\"phExtension\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=13 WHERE  FIELD=\"state\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=14 WHERE  FIELD=\"faxNumber\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=15 WHERE  FIELD=\"postcode\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=16 WHERE  FIELD=\"country\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=17 WHERE  FIELD=\"isExternalEmployee\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=18 WHERE  FIELD=\"managerID\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=19 WHERE  FIELD=\"paymentMode\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=20 WHERE  FIELD=\"burdenRate\" AND entityTableName=\"employees\";  \n" +

                "UPDATE import_entity_fields SET displayName='Name' WHERE FIELD=\"assetName\";  \n" +
                "UPDATE import_entity_fields SET displayName='Workstation/Asset#' WHERE FIELD=\"assetNumber\";  \n" +
                "UPDATE import_entity_fields SET displayName=\"Type\" WHERE  FIELD=\"equipmentAs\";  \n" +
                "UPDATE import_entity_fields SET displayName=\"Ownership\" WHERE  FIELD=\"eqpOwnershipTypeID\";  \n" +
                "  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"equipmentAs\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"assetName\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"eqpMake\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"eqpModel\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"eqpYear\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"assetNumber\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE  FIELD=\"eqpOwnershipTypeID\";  \n" +
                "  \n" +
                "  \n" +
                "UPDATE import_entity_fields SET displayOrder=1 WHERE  FIELD=\"equipmentAs\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=2 WHERE  FIELD=\"assetName\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=3 WHERE  FIELD=\"eqpMake\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=4 WHERE  FIELD=\"eqpModel\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=5 WHERE  FIELD=\"eqpYear\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=6 WHERE  FIELD=\"assetNumber\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=7 WHERE  FIELD=\"eqpOwnershipTypeID\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=8 WHERE  FIELD=\"customerId\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=9 WHERE  FIELD=\"placedInServiceDate\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=10 WHERE  FIELD=\"outOfServiceDate\" AND entityTableName=\"equipment\";  \n" +
                "UPDATE import_entity_fields SET displayOrder=11 WHERE  FIELD=\"eqpDescription\" AND entityTableName=\"equipment\";  \n" +

                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (410,'2.00','V1','update label and added required filed in import data - DEEPSHIKHA '," + userid + ");"
            );
            break;
        case 410:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "INSERT INTO rfq_mountingtypemst(NAME,isActive,createdBy,createdAt,isDeleted,systemGenerated)  \n" +
                " VALUES('Software',1,1,UTC_TIMESTAMP(),0,1);  \n" +
                " INSERT INTO rfq_parttypemst(partTypeName,displayOrder,isActive,createdBy,createdAt,isDeleted)  \n" +
                "  VALUES ('Software',0.01,1,1,UTC_TIMESTAMP(),0);  \n" +
                "UPDATE rfq_mountingtypemst SET id = -2 WHERE `name` = 'Software' AND isActive = 1 AND deletedAt IS NULL;  \n" +
                "UPDATE rfq_parttypemst SET id = -2 WHERE `partTypeName` = 'Software' AND isActive = 1 AND deletedAt IS NULL;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (411,'2.00','V1','Created System generated Entry for Functional and Mounting Type - Ashsih'," + userid + ");"
            );
            break;
        case 411:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/23/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveComponentCPNList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentCPNList`(  \n" +
                "	IN pPageIndex INT(11),                                    \n" +
                "	IN pRecordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),	                                    \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "    IN pComponentID int(11)    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS CPNResults AS       \n" +
                "	SELECT 	cpn.id,  			cpn.refCPNPartID,  					c.PIDCOde,  \n" +
                "			c.mfgPN,			c.mfgcodeID,						cast(NULL as char(255)) mfgCode,  \n" +
                "			c.RoHSStatusID,		cast(NULL as char(255)) rohsIcon, 	cast(NULL as char(50)) rohsName,	  \n" +
                "            cast(NULL as char(500)) customer,  	c.rev,				c.liveVersion  \n" +
                "    FROM 	component_cust_alias_rev_pn cpn  \n" +
                "    INNER JOIN component c ON cpn.refCPNPartID = c.id  AND IFNULL(c.deletedAt,0) = 0   \n" +
                "    WHERE 	IFNULL(cpn.deletedAt, 0) = 0 AND cpn.refComponentID = pComponentID  \n" +
                "    GROUP BY cpn.refCPNPartID;  \n" +
                "  \n" +
                "    -- Set customer detail          \n" +
                "    UPDATE 	CPNResults r, mfgcodemst m           \n" +
                "	SET 	r.mfgCode = m.mfgCode, r.customer = CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName)          \n" +
                "	WHERE 	r.mfgcodeID = m.id;    \n" +
                "  \n" +
                "      -- Set RoHS det          \n" +
                "	UPDATE 	CPNResults r, rfq_rohsmst rohs            \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name          \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = \"ORDER BY id\";                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1';          \n" +
                "	END IF;	               \n" +
                "  \n" +
                "    IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM CPNResults where \", pWhereClause );        \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM CPNResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;             \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE CPNResults;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/23/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePackagingParts`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePackagingParts`(  \n" +
                "	IN pPageIndex INT(11),                                    \n" +
                "	IN pRecordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),	                                    \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "    IN pComponentID int(11)    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "  \n" +
                "	SELECT packaginggroupID INTO @packagingGroupID FROM component WHERE id = pComponentID;    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packagingPartResults AS        \n" +
                "    SELECT 	c.ID,  	 			  \n" +
                "			c.mfgcodeID,				cast(NULL as char(255)) mfgCode, 				c.mfgPN,			  \n" +
                "            c.RoHSStatusID,				cast(NULL as char(255)) rohsIcon, 				cast(NULL as char(50)) rohsName,  \n" +
                "            c.functionalCategoryID,		cast(NULL as char(50)) functionalTypeInternal,	c.functionalCategoryText functionalTypeExternal,	  \n" +
                "			c.mountingTypeID,			cast(NULL as char(50)) mountingTypeInternal,	c.mountingTypeText mountingTypeExternal,			  \n" +
                "            c.operatingTemp,			c.minOperatingTemp,								c.maxOperatingTemp,	  \n" +
                "            c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  \n" +
                "            c.noOfPosition,				c.noOfRows,		c.pitch,				c.pitchMating,  \n" +
                "            c.sizeDimension,			c.length,		c.width,  \n" +
                "            c.heightText,				c.height,   \n" +
                "           	c.tolerance,				c.voltage,		c.value,				c.partPackage,          	  \n" +
                "            c.powerRating,				c.weight,		c.feature,				c.color  \n" +
                "    FROM 	component c, component_packagingalias cp    \n" +
                "    WHERE  	c.id = cp.componentID  \n" +
                "	AND		IFNULL(c.isDeleted,0) = 0    \n" +
                "    AND		cp.componentID != pComponentID    \n" +
                "    AND		cp.aliasgroupID = @packagingGroupID   \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;    \n" +
                "  \n" +
                "    -- Set manufacturer detail          \n" +
                "    UPDATE 	packagingPartResults r, mfgcodemst m           \n" +
                "	SET 	r.mfgCode = m.mfgCode         \n" +
                "	WHERE 	r.mfgcodeID = m.id;     \n" +
                "  \n" +
                "    -- Set mounting type detail          \n" +
                "    UPDATE 	packagingPartResults r, rfq_mountingtypemst m           \n" +
                "	SET 	r.mountingTypeInternal = m.name         \n" +
                "	WHERE 	r.mountingTypeID = m.id;     \n" +
                "  \n" +
                "    -- Set functional type detail          \n" +
                "    UPDATE 	packagingPartResults r, rfq_parttypemst f           \n" +
                "	SET 	r.functionalTypeInternal = f.partTypeName         \n" +
                "	WHERE 	r.functionalCategoryID = f.id;    \n" +
                "  \n" +
                "	-- Set RoHS det          \n" +
                "	UPDATE 	packagingPartResults r, rfq_rohsmst rohs            \n" +
                "	SET 	r.rohsIcon = rohs.rohsIcon, r.rohsName = rohs.name          \n" +
                "	WHERE 	r.RoHSStatusID = rohs.id;   \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = \"ORDER BY id\";                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1';          \n" +
                "	END IF;	               \n" +
                "  \n" +
                "    IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM packagingPartResults where \", pWhereClause );        \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM packagingPartResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;             \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE packagingPartResults;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/23/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (412,'2.00','V1',' Cretated procedure for packging list and cpn list for component - Dharmishtha '," + userid + ");"
            );
            break;
        case 412:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-23-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                    \n" +
                "    IN puserID VARCHAR(50),                              \n" +
                "    IN pnickName VARCHAR(20),                              \n" +
                "    IN pprefix VARCHAR(20),                              \n" +
                "    IN puid VARCHAR(20),                          \n" +
                "    IN pComponentID INT,                      \n" +
                "    IN pCustomerID INT,                      \n" +
                "    IN pCPN BOOL,                      \n" +
                "    IN pMFGAvailabel BOOL,                      \n" +
                "    IN pRefCpnMfgID INT,                  \n" +
                "    IN pAssyID INT,                  \n" +
                "    IN pSalesOrderDetailID INT,		                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),        \n" +
                "    IN pkitAssemblyID INT 	                 \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                    \n" +
                "	DECLARE v_length INT;                                     \n" +
                "	DECLARE v_fieldType INT;                                         \n" +
                "	DECLARE v_entityId INT;                                    \n" +
                "	DECLARE v_dataElementId INT;                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                    \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);		              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                    \n" +
                "	DECLARE plen,slen INT;                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                \n" +
                "	DECLARE barcode_type_id INT;                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';      \n" +
                "	DECLARE v_SupplierID INT;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                    \n" +
                "	(                                    \n" +
                "	     errorText NVARCHAR(2000),                                    \n" +
                "	     IsSuccess VARCHAR (2),                          \n" +
                "	     MFGPart VARCHAR(100)                                         \n" +
                "	);                         \n" +
                "	-- get data from barcode templates with seprator                                    \n" +
                "	block1: BEGIN                 \n" +
                "	      SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);         \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN      \n" +
                "			SELECT COUNT(*) INTO @NumberOfPart FROM             \n" +
                "			(            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL            \n" +
                "				UNION            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "			) a;			      \n" +
                "			IF (@NumberOfPart > 0) THEN		      \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);      \n" +
                "				SELECT barcodeType INTO barcode_type_id FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);       \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		-- tempregexp;    	            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                          \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                               \n" +
                "		ELSE /* barcode 1D */       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                               \n" +
                "		END IF;              \n" +
                "	END block1;                                    \n" +
                "  \n" +
                "	block2: BEGIN      	            \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                                    \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                                    \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                 \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                             \n" +
                "		-- declare exit loop if data not found                                    \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "	        -- if any record match found than  check for delimiter and its value                               \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                                    \n" +
                "			-- create temporary table for deliemeter and component dataelement                                    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                    \n" +
                "				pentityId INT,                                    \n" +
                "				pdataElementId INT,                                    \n" +
                "				pdelimiter_value VARCHAR(200)                                    \n" +
                "			);                               \n" +
                "  \n" +
                "			-- create temporary table for separator string values                                    \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                    \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                          \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                                    \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                           \n" +
                "  \n" +
                "			-- open cursor                                    \n" +
                "			OPEN barcodeMatch_cursor;                                    \n" +
                "  \n" +
                "			-- set str label as whereclause                                    \n" +
                "			SET strLabel=pWhereClause;                             \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                                    \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                                    \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                    \n" +
                " 			 END IF;                                   \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                                     \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                                    \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                    \n" +
                "			 END IF;	                          \n" +
                "  \n" +
                "			-- insert all values after seprator split                                     \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                    \n" +
                "			PREPARE stmt1 FROM @SQL;	                                    \n" +
                "			EXECUTE stmt1;                                    \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                                    \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                                    \n" +
                "			barcodeMatch_loop:LOOP                 \n" +
                "				-- get all five selected values                                    \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                            \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                                    \n" +
                "				IF exit_loop THEN                               \n" +
                "					CLOSE barcodeMatch_cursor;                                    \n" +
                "					LEAVE barcodeMatch_loop;                                    \n" +
                "				END IF;                               \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                                    \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                    \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                    \n" +
                "				EXECUTE stmtdelimiter;                          \n" +
                "  \n" +
                "				-- get delimiter values from string                                    \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                            \n" +
                "				-- check for field type is static or dynamic                                    \n" +
                "				-- if static field than check for mfg code and mfg part number                                    \n" +
                "				IF v_fieldType = 0  THEN                                \n" +
                "					-- component_sid_stock                                     \n" +
                "					-- get static field name from barcode table delimiter data element id                                    \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                      \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                    \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                          \n" +
                "						SET MFG_Part_No = delimiter_value_data;                          \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN               \n" +
                "							SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM             \n" +
                "							(            \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL            \n" +
                "								UNION            \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "							) a;            \n" +
                "						ELSE                          \n" +
                "							SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                          \n" +
                "						END IF;                          \n" +
                "						IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN      \n" +
                "							SET BarcodeMFGMatch = 'Mismatch';      \n" +
                "							CLOSE barcodeMatch_cursor;                                    \n" +
                "							LEAVE barcodeMatch_loop;        \n" +
                "						END IF;      \n" +
                "  \n" +
                "						SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;      \n" +
                "						IF (@MFGType = 'DIST') THEN      \n" +
                "							SET v_SupplierID = @componentId;      \n" +
                "							SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;      \n" +
                "						END IF;      \n" +
                "						IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN        \n" +
                "							SELECT DISTINCT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId;				        \n" +
                "							IF (@rfqLineItemsID IS NULL) THEN        \n" +
                "								CLOSE barcodeMatch_cursor;                                    \n" +
                "								LEAVE barcodeMatch_loop;        \n" +
                "							END IF;        \n" +
                "						END IF;        \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                    \n" +
                "						END IF;              \n" +
                "					END IF;                                    \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                    \n" +
                "					IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                            \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                    \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		              \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;                    \n" +
                "					IF @componentCount > 1 THEN                          \n" +
                "						CLOSE barcodeMatch_cursor;                                    \n" +
                "						LEAVE barcodeMatch_loop;                          \n" +
                "					END IF;                             \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                    \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                     \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                                    \n" +
                "  \n" +
                "				ELSE                \n" +
                "					-- component_sid_stock_dataelement_Values                                      \n" +
                "					-- dynamic fields                   \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);               \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;                    \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;              \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                                     \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                                 \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                     \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                             \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                                    \n" +
                "			-- check if mfg and component both found than         \n" +
                "			IF (BarcodeMFGMatch = 'Mismatch') THEN                                    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFGCode is mismatch with barcode template MFGCode',8,MFG_Part_No);        \n" +
                "			ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);        \n" +
                "			ELSEIF (@componentCount > 1) THEN                          \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                    \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                    \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                    \n" +
                "                                   IF @Mfgmatched = 0  THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                    \n" +
                "				   END IF;									                                    \n" +
                "			 ELSE 		                          \n" +
                "				IF @mfgCount = 0 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                    \n" +
                "		                END IF;	                                    \n" +
                "				IF @componentCount = 0 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                    \n" +
                "				END IF;	                                    \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                                      \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                    \n" +
                "			        END IF;						                                    \n" +
                "			END IF;				                                    \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN                      \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                      \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                      \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                    \n" +
                "				END IF;                      \n" +
                "			END IF;                      \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                    \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	                      \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                      \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                      \n" +
                "				END IF;                   \n" +
                "  \n" +
                "				-- must call statements in sequence          				                          \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                    \n" +
                "				PREPARE stmt1 FROM @SQL1;                                    \n" +
                "				EXECUTE stmt1;                                  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                      \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                      \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                   \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (v_SupplierID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                      \n" +
                "				END IF;         \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                      \n" +
                "				SET @sql2 = UpdateValue;	                                     \n" +
                "				PREPARE stmt2 FROM @SQL2;                                    \n" +
                "				EXECUTE stmt2;	                                    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                    \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                          \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                     \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                    \n" +
                "				END IF;                                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "			ELSE                                   \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "			END IF;                                    \n" +
                "  \n" +
                "		ELSE                                \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                    \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                      \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "	END block2;                                               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-23-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (413,'2.00','V1','Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 413:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_jobtypes`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_jobtypes`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                          \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg                                                           \n" +
                "            FROM rfq_assemblies WHERE deletedAt IS NULL AND jobTypeID IN (',IDs,') LIMIT 1) ) q');                                                          \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                                                          \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempJobTypess;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempJobTypess;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempJobTypess;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "DROP PROCEDURE iF EXISTS `Sproc_checkDelete_rfqtype`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfqtype`(                                                          \n" +
                "	IN tableName VARCHAR(255),                                                          \n" +
                "	IN IDs LONGTEXT,                                                          \n" +
                "	IN deletedBy INT,                                                          \n" +
                "	IN entityID VARCHAR(255),                                                          \n" +
                "	IN refrenceIDs LONGTEXT                                                          \n" +
                "    )  \n" +
                "BEGIN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRfqTypes as                                                          \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                          \n" +
                "		    FROM                                                           \n" +
                "		    (                                                          \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg                                                           \n" +
                "            FROM rfq_assemblies WHERE deletedAt IS NULL AND RFQTypeID IN (',IDs,') LIMIT 1) ) q');                                                          \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                          \n" +
                "	EXECUTE stmt;                                                          \n" +
                "		IF (SELECT TotalCount FROM tempRfqTypes)=0 THEN                                                          \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update rfqtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                          \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                          \n" +
                "			EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "			SELECT * FROM tempRfqTypes;                                                          \n" +
                "		ELSE                                                          \n" +
                "			SELECT * FROM tempRfqTypes;                                                          \n" +
                "  \n" +
                "		END IF;                                                          \n" +
                "		DROP TABLE tempRfqTypes;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (414,'2.00','V1','JobType/RFQType delete SP changes  - shirish'," + userid + ");"
            );
            break;
        case 414:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(        \n" +
                "	IN pPartID INT,        \n" +
                "	IN pUserID INT          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE totalCount INT DEFAULT 0;            \n" +
                "	DECLARE currIndex INT DEFAULT 0;            \n" +
                "	DECLARE prevLineID INT;            \n" +
                "	DECLARE currCustPNID INT;            \n" +
                "	DECLARE currMFGPNID INT;        \n" +
                "	DECLARE currLineID INT;        \n" +
                "	DECLARE mountingTypeID INT;        \n" +
                "	DECLARE functionalCategoryID INT;        \n" +
                "	DECLARE rohsStatusID INT;        \n" +
                "	DECLARE categoryID INT;        \n" +
                "	DECLARE partTypeID INT;        \n" +
                "	DECLARE statusID INT;        \n" +
                "	DECLARE mfgPNID INT;           \n" +
                "	DECLARE currCustRev VARCHAR(10);            \n" +
                "	DECLARE currCustPN VARCHAR(500);        \n" +
                "	DECLARE mfgPN VARCHAR(500);        \n" +
                "	DECLARE mfgPID VARCHAR(500);            \n" +
                "	DECLARE maxDisplayOrder DECIMAL;        \n" +
                "	DECLARE pLiveInternalVersion INT(11);       \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);        \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);           \n" +
                "	DECLARE pCompanyName VARCHAR(100);             \n" +
                "	DECLARE pMFGPN VARCHAR(100);    \n" +
                "  \n" +
                "	SET categoryID = 2;        \n" +
                "	SET partTypeID = 2;       \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';            \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN        \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';         \n" +
                "	ELSE         \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';         \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN        \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;        \n" +
                "		ELSE         \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;        \n" +
                "		END IF;        \n" +
                "	END IF;	         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;     \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT(11));       \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (        \n" +
                "	SELECT         \n" +
                "		rla.id,        \n" +
                "		rla.rfqLineItemsID,        \n" +
                "		rl.custPNID,         \n" +
                "		rl.custPN,        \n" +
                "		rl.customerRev,        \n" +
                "		rla.mfgPNID,         \n" +
                "		c.RoHSStatusID        \n" +
                "	FROM rfq_lineitems_alternatepart rla        \n" +
                "	LEFT JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id         \n" +
                "	LEFT JOIN component c ON c.id = rla.mfgPNID        \n" +
                "	WHERE 	rl.custPN IS NOT NULL AND rla.mfgPNID IS NOT NULL         \n" +
                "		AND rl.partID = pPartID         \n" +
                "		AND rl.isDeleted = 0         \n" +
                "		AND rl.duplicateCPNStep = 1 );    		        \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;            \n" +
                "	SELECT mfgCodeID INTO @mfgCodeID FROM component WHERE id = pPartID;        \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;        \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;        \n" +
                "	SELECT gencCategoryID INTO statusID FROM genericcategory WHERE categoryType = 'Part Status' AND gencCategoryName = 'Active';        \n" +
                "  \n" +
                "	IF functionalCategoryID IS NULL THEN         \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;        \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy)        \n" +
                "				VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID);        \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;        \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF mountingTypeID IS NULL THEN         \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy)VALUES('CPN', 1, pUserID);        \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;        \n" +
                "	END IF;         \n" +
                "	SET prevLineID = 0;  \n" +
                "	WHILE currIndex < totalCount DO            \n" +
                "		SET currCustPN = NULL;          \n" +
                "		SET currCustRev = NULL;          \n" +
                "  \n" +
                "		SELECT 	a.custPN, 	a.custPNID,         \n" +
                "			a.customerRev, 	a.mfgPNID,         \n" +
                "			a.rfqLineItemsID        \n" +
                "		INTO 	currCustPN,	currCustPNID,        \n" +
                "			currCustRev,	currMFGPNID,        \n" +
                "			currLineID         \n" +
                "		FROM 	temp_component_cust_alias_rev a LIMIT currIndex, 1;            \n" +
                "  \n" +
                "		SET currIndex = currIndex + 1;       \n" +
                "		SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "		IF (currCustPNID IS NOT NULL) THEN        \n" +
                "  \n" +
                "			IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN        \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (currCustPNID , currMFGPNID, pUserID);         \n" +
                "				SELECT IFNULL(k.liveInternalVersion,0) INTO pLiveInternalVersion FROM component k WHERE k.id = currCustPNID;          		    \n" +
                "				SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "				INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );     \n" +
                "				SELECT j.mfgPN INTO pMFGPN FROM component j WHERE j.id = currMFGPNID;      \n" +
                "				INSERT INTO rfq_assembly_history                         \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "						oldValue,newValue,changeVersion,                        \n" +
                "						createdAt,createdBy)                         \n" +
                "					VALUES 	(\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MFG PN\",                        \n" +
                "					NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "						SYSDATE(),pUserID);    \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF (currCustPNID IS NULL) THEN        \n" +
                "			IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN        \n" +
                "				SET rohsStatusID = 0;        \n" +
                "			ELSE         \n" +
                "				SET rohsStatusID = 1;	        \n" +
                "			END IF;     \n" +
                "			IF (currCustRev IS NULL) THEN   \n" +
                "			   SET currCustRev = \"-\";  \n" +
                "			END IF;  \n" +
                "			SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);        \n" +
                "			SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = @mfgCodeID;        \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);        \n" +
                "  \n" +
                "			SELECT d.id INTO mfgPNID FROM component d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0;        \n" +
                "			IF mfgPNID IS NULL THEN         \n" +
                "				INSERT INTO component(custAssyPN, rev, mfgPN, PIDCode, partStatus,         \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,         \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,        \n" +
                "							createdAt,liveInternalVersion, partType, uom)         \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,        \n" +
                "							1,1,@mfgCodeID,pUserID,        \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,        \n" +
                "							SYSDATE(), 0, partTypeID, -1);        \n" +
                "				SELECT LAST_INSERT_ID() INTO @maxPartId;        \n" +
                "				INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (@maxPartId , currMFGPNID, pUserID);        \n" +
                "				UPDATE rfq_lineitems SET custPNID = @maxPartId, customerRev = currCustRev WHERE id = currLineID;        \n" +
                "  \n" +
                "			ELSE         \n" +
                "				IF (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0 THEN  \n" +
                "					INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy) VALUES (mfgPNID , currMFGPNID, pUserID);    \n" +
                "					SET currCustPNID = mfgPNID;  \n" +
                "					SELECT IFNULL(z.liveInternalVersion,0) INTO pLiveInternalVersion FROM component z WHERE z.id = mfgPNID;          		    \n" +
                "					SET pLiveInternalVersion  = pLiveInternalVersion  + 1;    \n" +
                "					INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "					SELECT t.mfgPN INTO pMFGPN FROM component t WHERE t.id = currMFGPNID;      \n" +
                "					INSERT INTO rfq_assembly_history                         \n" +
                "						(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "							oldValue,newValue,changeVersion,                        \n" +
                "							createdAt,createdBy)                         \n" +
                "						VALUES 	(\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MFG PN\",                        \n" +
                "						NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "							SYSDATE(),pUserID);    \n" +
                "					UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev  WHERE id = currLineID;     \n" +
                "				END IF;     \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "	END WHILE;  \n" +
                "	UPDATE component SET liveInternalVersion = (liveInternalVersion + 1 ) , liveVersion = CONCAT(pCompanyName,'-',CAST(liveInternalVersion AS CHAR)) WHERE id IN ( SELECT cpnID FROM temp_component_vesrion_update);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (415,'2.00','V1',' Manage CPN History from BOM - KETAN '," + userid + ");"
            );
            break;
        case 415:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(	            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),	            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	-- IN pIsMFG TINYINT(1),      \n" +
                "	IN pmfgType VARCHAR(20),      \n" +
                "	IN pisCustOrDisty TINYINT(1)           \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "	/* DECLARE SQLStatement varchar(255); */            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.createdAt,mc.updatedAt,emp.firstName, emp.lastName,(CASE WHEN (mc.isPricingApi=1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi ,          \n" +
                "		    CONCAT(emp.firstName, ' ', emp.lastName) AS fullName, wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`, wbw.acquired,           \n" +
                "		(SELECT GROUP_CONCAT(alias) AS aliaslist FROM mfgcodealias             \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,      \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,       \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive   ,      \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'         \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`          \n" +
                "	FROM mfgcodemst mc             \n" +
                "		JOIN users us ON mc.createdBy = us.id AND us.deletedAt IS NULL             \n" +
                "		JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL              \n" +
                "		LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
                "			FROM  who_bought_who wbwi JOIN mfgcodemst mci ON wbwi.buyBy = mci.id) wbw  \n" +
                "		  ON wbw.buyTo = mc.id          \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0       \n" +
                "	AND mc.deletedAt IS NULL      \n" +
                "	AND mc.mfgType = pmfgType      \n" +
                "	AND CASE WHEN pisCustOrDisty IS NULL THEN 1 = 1      \n" +
                "		WHEN  pisCustOrDisty IS NOT NULL THEN mc.isCustOrDisty = pisCustOrDisty ELSE TRUE END      \n" +
                "	;         \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgCode DESC\") ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;            \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (416,'2.00','V1',' sp Sproc_GetManufacturer - KETAN '," + userid + ");"
            );
            break;
        case 416:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                      \n" +
                "	IN prfqAssyID INT(1),      \n" +
                "    IN ppartID INT(1),      \n" +
                "	IN puserID INT(1),  \n" +
                "    IN pBOMVersion varchar(50)  \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "  BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                      \n" +
                "  \n" +
                "    START TRANSACTION;              \n" +
                "  \n" +
                "    #consoliadte select               \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS               \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;                \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                      \n" +
                "		drop temporary table if exists leveldata;      \n" +
                "		create temporary table if not exists leveldata as      \n" +
                "			WITH RECURSIVE cte AS          \n" +
                "			(       \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,0 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID as rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				where rl.partId = ppartID and rla.isDeleted = 0      \n" +
                "				)      \n" +
                "			  UNION ALL          \n" +
                "  \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,cte.level+1 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, ceiling((cte.qpa1 * rl.qpa)) as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part, concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID #and com.category != 3      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				join cte cte on cte.category = 3 and rl.partID = cte.mfgPNID      \n" +
                "				where rla.isDeleted =0      \n" +
                "			   )      \n" +
                "			)      \n" +
                "			SELECT cte.* FROM cte       \n" +
                "			where cte.category !=3      \n" +
                "			order by lineItemID,partcode;      \n" +
                "  \n" +
                "		drop temporary table if exists Results;      \n" +
                "		create temporary table if not exists Results as      \n" +
                "		select  group_concat(partlineID) as consolidatedpartlineID,count(b.rfqLineItemsID) as multiple,group_concat(b.refDesig) as consolidatedrefDesig, group_concat(b.rfqLineItemsID) as consolidatedLineItemIDs,sum(qpa1)qpa, b.* from (      \n" +
                "		select concat('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',a.lineID,'}') as partlineID, GROUP_CONCAT(part) as part1,GROUP_CONCAT(partcode) as partcode1,      \n" +
                "		a.* from leveldata a      \n" +
                "		group by rfqLineItemsID,level      \n" +
                "		)b      \n" +
                "		group by  numOfPosition,isPurchase,part1;      \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                      \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "			SET                       \n" +
                "			cl.isDeleted = TRUE,                      \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "			cl.deletedBy = puserID                      \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                      \n" +
                "            SELECT * FROM(                           \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                       \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                      \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                       \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                      \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                      \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                      \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`)                      \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                      \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                      \n" +
                "		puserID `createdBy`, R.`numOfPosition`,                      \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`                       \n" +
                "        FROM Results R                      \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		 WHERE cl.id IS NULL;                      \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                      \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                      \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                      \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                      \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                      \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                       \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                       \n" +
                "		SET                       \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "        rq.updatedBy = puserID,                      \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                      \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                      \n" +
                "# Update Consilidated LineItems                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                       \n" +
                "		SET                       \n" +
                "		cl.isInstall = R.isInstall ,                      \n" +
                "		cl.isPurchase = R.isPurchase,                      \n" +
                "		cl.numOfPosition = R.numOfPosition,                      \n" +
                "		cl.attritionRate = R.attritionRate,                      \n" +
                "		cl.leadQty = R.leadQty,                      \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                      \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                      \n" +
                "        cl.qpa = R.qpa,                      \n" +
                "        cl.uomID = R.uomID,            \n" +
                "        cl.refDesig = R.consolidatedrefDesig,            \n" +
                "        cl.lineID = R.lineID,                      \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,    \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,    \n" +
                "        cl.updatedBy = puserID                      \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                      \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                      \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cap.deletedBy = puserID                      \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                      \n" +
                "  ############################      \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                       \n" +
                "		SET                       \n" +
                "        isDeleted = TRUE,                      \n" +
                "        deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		deletedBy = puserID                      \n" +
                "        WHERE id IN(                       \n" +
                "        SELECT capID FROM (                      \n" +
                "		SELECT DISTINCT(cap.id)AS capID                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                      \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                       \n" +
                "		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                      \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                       \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove         \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                        \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                        \n" +
                "# delete Consolidate lineItems                       \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		SET                       \n" +
                "        cl.isDeleted = TRUE,                      \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cl.deletedBy = puserID                      \n" +
                "		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                              \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                       \n" +
                "  #################################      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                      \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                      \n" +
                "		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                      \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                    \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed         \n" +
                "#################################               \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl                  \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cap.deletedBy = puserID                  \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (                   \n" +
                "        SELECT  DISTINCT(cap.id)                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);                  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove         \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,                   \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,                  \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                        \n" +
                "		SET                       \n" +
                "        cq.finalPrice = NULL,                  \n" +
                "        cq.selectedPIDCode = NULL,                  \n" +
                "        cq.selectedMpn = NULL,                  \n" +
                "        cq.selectionMode = NULL,                  \n" +
                "        cq.supplier = NULL,                  \n" +
                "        cq.supplierStock = NULL,                  \n" +
                "        cq.currentStock = NULL,                  \n" +
                "        cq.grossStock = NULL,                  \n" +
                "        cq.leadTime = NULL,                  \n" +
                "        cq.min = NULL,                  \n" +
                "        cq.mult = NULL,                  \n" +
                "        cq.unitPrice = NULL,                  \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.updatedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                        \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                     \n" +
                "  \n" +
                "  # update rfq assembly pricing status          \n" +
                "    update rfq_assemblies set isReadyForPricing = true, partCostingBOMInternalVersion = pBOMVersion, updatedAt = current_timestamp(), updatedBy = puserID where isDeleted = 0 and id = prfqAssyID;         \n" +
                "  \n" +
                "    COMMIT;                  \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)                \n" +
                "    UNION              \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id               \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);              \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;               \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (417,'2.00','V1','Consolidate SP changes  - shirish'," + userid + ");"
            );
            break;
        case 417:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 25-03-2019  *********************************** */
                "alter table salesorderdet add column isCancle tinyint(1) default 0;  \n" +
                "alter table salesorderdet Add column cancleReason varchar(255);  \n" +
                "update master_templates set description='This is master template which includes all operation' where masterTemplate='Process Master Template';  \n" +
                //  /* **************************** New Script -> 25-03-2019  *********************************** */
                "Drop view if exists `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT   \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` As `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` As `RoHSStatusID`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Cancelled'  \n" +
                "            WHEN ((IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) > 0) THEN 'Pending'  \n" +
                "            ELSE 'Completed'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`  \n" +
                "    FROM  \n" +
                "        (SELECT   \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "             (select 1 from workorder_salesorder_details x where x.salesOrderDetailID =a.id and x.isdeleted=0 limit 1)  AS `wosalesOrderDetail`,  \n" +
                "                FUN_GETASSYIDBYID(`a`.`partID`) AS `PIDCode`,  \n" +
                "                FUN_GETASSYNAMEBYID(`a`.`partID`) AS `mfgPN`,  \n" +
                "                FUN_GETASSYREVNAMEBYID(`a`.`partID`) AS `rev`,  \n" +
                "                FUN_GETASSYNICKNAMEBYID(`a`.`partID`) AS `nickName`,  \n" +
                "                FUN_GETASSYDESCRBYID(`a`.`partID`) AS `mfgPNDescription`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` As `RoHSStatusID`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "				`a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "				`a`.`shippingQty` As `shippingQty`,  \n" +
                "                (SELECT   \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT   \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                (`salesshippingmst`.`sDetID` = `a`.`id`)))) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0)))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "		LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0)))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            (IFNULL(`a`.`isDeleted`, 0) = 0)) `a`;  \n" +
                //  /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(	      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),	      \n" +
                "    IN pWhereClause VARCHAR(16383)          \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "	/* DECLARE SQLStatement varchar(255); */      \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                "	SELECT ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,    \n" +
                "    (CASE WHEN (`vuss`.`isHotJob` = 0) THEN 'No'      \n" +
                "					WHEN (`vuss`.`isHotJob` = 1) THEN 'Yes' ELSE '' END) AS `isHotJobValue`,      \n" +
                "	`vuss`.`Sales Order ID` AS id,    \n" +
                "    `vuss`.`salesOrderDetailId` As salesOrderDetailId,  \n" +
                "	`vuss`.`Sales Order` AS salesOrderNumber,      \n" +
                "	`vuss`.`Po Number` AS poNumber,      \n" +
                "	`vuss`.`Po Date` AS poDate,      \n" +
                "	`vuss`.`Customer ID` AS customerID,      \n" +
                "	`vuss`.`ContactPerson ID` AS contactPersonID,      \n" +
                "	`vuss`.`ShippingMethod ID` AS shippingMethodID,      \n" +
                "	`vuss`.`Sales Order Status` AS `status`,      \n" +
                "	`vuss`.`Revision` AS revision,      \n" +
                "	`vuss`.`Shipping Comment` AS shippingComment,      \n" +
                "	`vuss`.`Terms ID` AS termsID,      \n" +
                "	`vuss`.`So Date` AS soDate,      \n" +
                "	`vuss`.`Company Name` AS companyName,      \n" +
                "	`vuss`.`Full Name` AS fullName,      \n" +
                "	`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "    `vuss`.`PO Qty` As qty,  \n" +
                "    `vuss`.`mrpQty` As mrpQty,  \n" +
                "	`vuss`.`price` As price,  \n" +
                "	`vuss`.`materialTentitiveDocDate` As materialTentitiveDocDate,  \n" +
                "	`vuss`.`materialDueDate` As materialDueDate,  \n" +
                "	`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "    `vuss`.`shippingQty` As shippingQty,  \n" +
                "    `vuss`.`remark` As remark,  \n" +
                "    `vuss`.`Assy ID` AS PIDCode,  \n" +
                "	`vuss`.`NickName` AS nickName,  \n" +
                "    `vuss`.`AssyDescr` AS mfgPNDescription,  \n" +
                "    `vuss`.`cancleReason` As cancleReason,  \n" +
                "	`vuss`.`Status` AS completedStatus,      \n" +
                "    `vuss`.`modifyDate` As modifyDate,   \n" +
                "    `vuss`.`wosalesOrderDetail` As wosalesOrderDetail,  \n" +
                "	(CASE WHEN (`vuss`.`Sales Order Status` = 0) THEN 'Draft'       \n" +
                "		WHEN (`vuss`.`Sales Order Status` = 1) THEN 'Published'      \n" +
                "		ELSE '' END) AS `statusConvertedValue`       \n" +
                "	FROM vu_salesorder_shipped_report vuss    \n" +
                "    #left outer join salesorderdet sd on sd.refSalesOrderID = `vuss`.`Sales Order ID`     \n" +
                "    LEFT JOIN rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  ;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;      \n" +
                "  \n" +
                "    END;  \n" +
                //  /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (418,'2.00','V1','Sales Order change - Mona '," + userid + ");"
            );
            break;
        case 418:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentBuyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentBuyDetail`(  \n" +
                "	IN pComponentID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBuyDetail (  \n" +
                "		actionName varchar(25), 	componentID INT(11), 	supplier varchar(255), quoteQty INT(11),   \n" +
                "        unitPrice decimal(16,6),	uom INT(11),			unit varchar(10)  \n" +
                "    );  \n" +
                "  \n" +
                "	INSERT INTO	tempBuyDetail  \n" +
                "			(actionName, componentID, supplier, quoteQty, unitPrice, uom, unit)  \n" +
                "    VALUES	('Best Buy', NULL, NULL, NULL, NULL, NULL, NULL),  \n" +
                "			('Last Purchase', NULL, NULL, NULL, NULL, NULL, NULL),  \n" +
                "			('Last Quote', NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempLastQuoteDetail  \n" +
                "    SELECT  'Last Quote' actionName, 	r.componentID,			r.supplier,				  \n" +
                "			r.quoteQty,					r.unitPrice   \n" +
                "    FROM 	rfq_consolidate_mfgpn_lineitem_quantity r   \n" +
                "    WHERE 	r.componentID = pComponentID  \n" +
                "    AND		IFNULL(r.isdeleted,0) = 0  \n" +
                "    ORDER BY createdAt  \n" +
                "    LIMIT 1;  \n" +
                "  \n" +
                "    UPDATE	tempBuyDetail t, tempLastQuoteDetail lq   \n" +
                "	SET  	t.componentID = lq.componentID,	t.supplier = lq.supplier,		t.quoteQty = lq.quoteQty,		  \n" +
                "			t.unitPrice = lq.unitPrice  \n" +
                "    WHERE 	t.actionName = lq.actionName;  \n" +
                "  \n" +
                "    UPDATE 	tempBuyDetail t, component c  \n" +
                "    SET 	t.uom = c.uom  \n" +
                "    WHERE 	t.componentID = c.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBuyDetail t, uoms u  \n" +
                "    SET 	t.unit = u.abbreviation  \n" +
                "    WHERE 	t.uom = u.id;  \n" +
                "  \n" +
                "    SELECT * from tempBuyDetail;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempBuyDetail;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(    \n" +
                "	pComponentID int(11)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS        \n" +
                "	SELECT 	id,		receiveMaterialType, 		pkgQty      \n" +
                "    FROM 	component_sid_stock     \n" +
                "    WHERE 	refcompid = pComponentID     \n" +
                "    AND 	IFNULL(isDeleted,0) = 0;    \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempStockRawDet;    \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempStockRawDet where receiveMaterialType = 'Reserve Stock';    \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock     \n" +
                "    FROM 	kit_allocation     \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)     \n" +
                "    AND 	STATUS != 'R';   \n" +
                "  \n" +
                "    SET @reservedStock = (@totalReservedStock + @allocatedToKitStock);    \n" +
                "    SET @availableStock = (@totalStockInSystemRecord - @reservedStock);    \n" +
                "  \n" +
                "  \n" +
                "    -- Calculate Cumulative Stock    \n" +
                "	SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id = pComponentID;    \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempCumulativeStockRawDet AS        \n" +
                "	SELECT 	c.id,		c.refcompid,	c.receiveMaterialType, 		c.pkgQty      \n" +
                "    FROM 	component_sid_stock c, component_packagingalias cp    \n" +
                "    WHERE 	c.refcompid = cp.componentID    \n" +
                "    AND 	IFNULL(c.isDeleted,0) = 0    \n" +
                "    AND		cp.componentID != pComponentID    \n" +
                "    AND		cp.aliasgroupID = @packaginggroupID    \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;    \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeStockInSystemRecord FROM tempCumulativeStockRawDet;    \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeReservedStock FROM tempCumulativeStockRawDet where receiveMaterialType = 'Reserve Stock';    \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedCumulativeStockToKitStock     \n" +
                "    FROM 	kit_allocation     \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempCumulativeStockRawDet)     \n" +
                "    AND 	STATUS != 'R';    \n" +
                "  \n" +
                "    SET @reservedCumulativeStock = (@totalCumulativeReservedStock + @allocatedCumulativeStockToKitStock);    \n" +
                "    SET @cumulativeStock = (@totalCumulativeStockInSystemRecord - @reservedCumulativeStock);    \n" +
                "    -- End Calculate Cumulative Stock    \n" +
                "  \n" +
                "	SET @totalInHouseStock = @availableStock + @cumulativeStock ;    \n" +
                "  \n" +
                "    SELECT (IFNULL(saftyStock,0) - @availableStock) INTO @shortage     \n" +
                "    FROM component     \n" +
                "    WHERE id = pComponentID;    \n" +
                "  \n" +
                "    SELECT 	@availableStock availableStock,  	@reservedStock reservedStock,    \n" +
                "			@cumulativeStock cumulativeStock, 	@totalInHouseStock totalInHouseStock,    \n" +
                "            @shortage shortage;    \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockRawDet;    \n" +
                "    DROP TEMPORARY TABLE  tempCumulativeStockRawDet;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (419,'2.00','V1',' Created procedure for buy detail and modify stock status procedure - Dharmishtha '," + userid + ");"
            );
            break;
        case 419:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                // "Insert INTO warehousemst   \n" +
                // "(Name, Description, nickname, parentWHID, isActive, isPermanentWH, createdBy, createdAt, isDeleted, isDepartment)   \n" +
                // "Values   \n" +
                // "('Main Materials warehouse',NULL,NULL,NULL,1,1,1,current_timestamp,0,1),   \n" +
                // "('Main Productions warehouse',NULL,NULL,NULL,1,1,1,current_timestamp,0,1);   \n" +
                // "  \n" +
                // "Update warehousemst set id = -1 where Name = 'Main Materials warehouse';  \n" +
                // "Update warehousemst set id = -2 where Name = 'Main Productions warehouse';  \n" +
                // "  \n" +
                // "SELECT id into @materialDept from warehousemst where Name = 'Material Department';  \n" +
                // "UPDATE warehousemst SET parentWHID = -1 where parentWHID = @materialDept;  \n" +
                // "UPDATE warehousemst_history SET parentWHID = -1 where parentWHID = @materialDept;  \n" +
                // "UPDATE warehousemst_history SET refWHID = -1 where refWHID = @materialDept;  \n" +
                // "UPDATE component_sid_stock_history SET deptWHID = -1 where deptWHID = @materialDept;  \n" +
                // "  \n" +
                // "SELECT id into @productionDept from warehousemst where Name = 'Production Department';  \n" +
                // "UPDATE warehousemst SET parentWHID = -2 where parentWHID = @productionDept;  \n" +
                // "UPDATE warehousemst_history SET parentWHID = -2 where parentWHID = @productionDept;  \n" +
                // "UPDATE warehousemst_history SET refWHID = -2 where refWHID = @productionDept;  \n" +
                // "UPDATE component_sid_stock_history SET deptWHID = -2 where deptWHID = @productionDept;  \n" +
                // "  \n" +
                // "delete from warehousemst where Name in ('Material Department', 'Production Department');  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (420,'2.00','V1',' Rename main warehouse name - Dharmishtha '," + userid + ");"
            );
            break;
        case 420:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                      \n" +
                "	IN prfqAssyID INT(1),      \n" +
                "    IN ppartID INT(1),      \n" +
                "	IN puserID INT(1),  \n" +
                "    IN pBOMVersion varchar(50)  \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "  BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                      \n" +
                "  \n" +
                "    START TRANSACTION;              \n" +
                "  \n" +
                "    #consoliadte select               \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS               \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;                \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                      \n" +
                "		drop temporary table if exists leveldata;      \n" +
                "		create temporary table if not exists leveldata as      \n" +
                "			WITH RECURSIVE cte AS          \n" +
                "			(       \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,1 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part,   \n" +
                "                /* we not required this in functionaly this will be used for check in detail   \n" +
                "                concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, */  \n" +
                "                rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID as rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				where rl.partId = ppartID and rla.isDeleted = 0      \n" +
                "				)      \n" +
                "			  UNION ALL          \n" +
                "  \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,cte.level+1 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, ceiling((cte.qpa1 * rl.qpa)) as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part,   \n" +
                "				/* we not required this in functionaly this will be used for check in detail   \n" +
                "                concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, */  \n" +
                "                rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID #and com.category != 3      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				join cte cte on cte.category = 3 and rl.partID = cte.mfgPNID      \n" +
                "				where rla.isDeleted =0      \n" +
                "			   )      \n" +
                "			)      \n" +
                "			SELECT cte.* FROM cte       \n" +
                "			where cte.category !=3      \n" +
                "			order by lineItemID,part;      \n" +
                "  \n" +
                "		drop temporary table if exists Results;      \n" +
                "		create temporary table if not exists Results as      \n" +
                "		select  group_concat(partlineID) as consolidatedpartlineID,count(b.rfqLineItemsID) as multiple,group_concat(b.refDesig) as consolidatedrefDesig, group_concat(b.rfqLineItemsID) as consolidatedLineItemIDs,sum(qpa1)qpa, b.* from (      \n" +
                "		select concat('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',trim(a.lineID)+0,'}') as partlineID, GROUP_CONCAT(part) as part1,  \n" +
                "		/* we not required this in functionaly this will be used for check in detail   \n" +
                "        GROUP_CONCAT(partcode) as partcode1, */     \n" +
                "		a.* from leveldata a      \n" +
                "		group by rfqLineItemsID,level      \n" +
                "		)b      \n" +
                "		group by  numOfPosition,isPurchase,part1;     \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                      \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "			SET                       \n" +
                "			cl.isDeleted = TRUE,                      \n" +
                "			cl.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "			cl.deletedBy = puserID                      \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                      \n" +
                "            SELECT * FROM(                           \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                       \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                      \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                       \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                      \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                      \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                      \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`)                      \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                      \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,                      \n" +
                "		puserID `createdBy`, R.`numOfPosition`,                      \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`                       \n" +
                "        FROM Results R                      \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		 WHERE cl.id IS NULL;                      \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                      \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                      \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                      \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                      \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                      \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                       \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                       \n" +
                "		SET                       \n" +
                "		rq.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "        rq.updatedBy = puserID,                      \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                      \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                      \n" +
                "# Update Consilidated LineItems                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                       \n" +
                "		SET                       \n" +
                "		cl.isInstall = R.isInstall ,                      \n" +
                "		cl.isPurchase = R.isPurchase,                      \n" +
                "		cl.numOfPosition = R.numOfPosition,                      \n" +
                "		cl.attritionRate = R.attritionRate,                      \n" +
                "		cl.leadQty = R.leadQty,                      \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                      \n" +
                "        cl.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                      \n" +
                "        cl.qpa = R.qpa,                      \n" +
                "        cl.uomID = R.uomID,            \n" +
                "        cl.refDesig = R.consolidatedrefDesig,            \n" +
                "        cl.lineID = R.lineID,                      \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,    \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,    \n" +
                "        cl.updatedBy = puserID                      \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                      \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                      \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cap.deletedBy = puserID                      \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                      \n" +
                "  ############################      \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                       \n" +
                "		SET                       \n" +
                "        isDeleted = TRUE,                      \n" +
                "        deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		deletedBy = puserID                      \n" +
                "        WHERE id IN(                       \n" +
                "        SELECT capID FROM (                      \n" +
                "		SELECT DISTINCT(cap.id)AS capID                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                      \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                       \n" +
                "		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                      \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                       \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove         \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                        \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                        \n" +
                "# delete Consolidate lineItems                       \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		SET                       \n" +
                "        cl.isDeleted = TRUE,                      \n" +
                "        cl.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cl.deletedBy = puserID                      \n" +
                "		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                              \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                       \n" +
                "  #################################      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                      \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                      \n" +
                "		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                      \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ap.`customerApproval`                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                    \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed         \n" +
                "#################################               \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl                  \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = UTC_TIMESTAMP(),                      \n" +
                "		cap.deletedBy = puserID                  \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (                   \n" +
                "        SELECT  DISTINCT(cap.id)                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);                  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove         \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,                   \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,                  \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                        \n" +
                "		SET                       \n" +
                "        cq.finalPrice = NULL,                  \n" +
                "        cq.selectedPIDCode = NULL,                  \n" +
                "        cq.selectedMpn = NULL,                  \n" +
                "        cq.selectionMode = NULL,                  \n" +
                "        cq.supplier = NULL,                  \n" +
                "        cq.supplierStock = NULL,                  \n" +
                "        cq.currentStock = NULL,                  \n" +
                "        cq.grossStock = NULL,                  \n" +
                "        cq.leadTime = NULL,                  \n" +
                "        cq.min = NULL,                  \n" +
                "        cq.mult = NULL,                  \n" +
                "        cq.unitPrice = NULL,                  \n" +
                "        cq.updatedAt = UTC_TIMESTAMP(),                      \n" +
                "		cq.updatedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                        \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                     \n" +
                "# Delete summary additional cost details if exists    \n" +
                "		update rfq_assy_quotations_additionalcost raqa, (select id from rfq_assy_quotations where rfqAssyID = prfqAssyID and refSubmittedQuoteID is null and deletedAt is null) raq  \n" +
                "		set   \n" +
                "		raqa.`isDeleted` = 1,  \n" +
                "		raqa.`deletedBy` = 1,  \n" +
                "		raqa.`deletedAt` = current_timestamp()  \n" +
                "		WHERE raqa.rfqAssyQuoteID in (raq.id) and raqa.deletedAt is null;   \n" +
                "  \n" +
                "# Delete summary details if exists    \n" +
                "		UPDATE `rfq_assy_quotations`  \n" +
                "		SET  \n" +
                "		`isDeleted` = 1,  \n" +
                "		`deletedBy` = 1,  \n" +
                "		`deletedAt` = current_timestamp()  \n" +
                "		WHERE rfqAssyID = prfqAssyID and refSubmittedQuoteID is null and deletedAt is null;   \n" +
                "  \n" +
                "  # update rfq assembly pricing status          \n" +
                "    update rfq_assemblies set isReadyForPricing = true, partCostingBOMInternalVersion = pBOMVersion, updatedAt = current_timestamp(), updatedBy = puserID where isDeleted = 0 and id = prfqAssyID;         \n" +
                "  \n" +
                "    COMMIT;                  \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)                \n" +
                "    UNION              \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id               \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,UTC_TIMESTAMP())<120);              \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;               \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(                              \n" +
                "	IN pCustomerID INT(11)                        \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DECLARE mfgCodeID INT(11);                         \n" +
                "	DECLARE whereClause VARCHAR(500);                  \n" +
                "	SET whereClause =  \"WHERE c.category = 3 and c.deletedAt IS NULL\";                   \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN                  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);                  \n" +
                "	END IF;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT c.id, c.PIDCode, c.RoHSStatusID,               \n" +
                "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, ro.name as rohsName, mfg.mfgCode , mfg.mfgName,c.specialNote              \n" +
                "	FROM component c               \n" +
                "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0               \n" +
                "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                        \n" +
                "    PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                       \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (421,'2.00','V1','Get PID list and Consolidate SP changes  - shirish'," + userid + ");"
            );
            break;
        case 421:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP VIEW IF EXISTS `vu_availableStocks` ;  \n" +
                "CREATE VIEW `vu_availableStocks` AS   \n" +
                "SELECT 	id,receiveMaterialType, SUM(IFNULL(pkgQty,0)) stock,refcompid	      \n" +
                "    FROM 	component_sid_stock     \n" +
                "    WHERE 	   \n" +
                "    	IFNULL(isDeleted,0) = 0 AND receiveMaterialType!='Reserve Stock' AND   \n" +
                "    	id NOT IN (SELECT ka.refUIDId FROM kit_allocation ka WHERE ka.STATUS != 'R') GROUP BY refcompid;   \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_GetLineItemAvailableStock` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetLineItemAvailableStock`(   \n" +
                "	pconsolidateID INT(11)    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "      CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDet AS   \n" +
                "        SELECT cp.componentID FROM component_packagingalias cp  LEFT JOIN component c ON c.packaginggroupID=cp.aliasgroupid  \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rml ON rml.mfgpnid=c.id  \n" +
                "WHERE rml.consolidateid=pconsolidateID AND rml.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT mfgpnid AS componentID FROM rfq_consolidated_mfgpn_lineitem_alternate  \n" +
                "WHERE consolidateid=pconsolidateID AND isdeleted=0;  \n" +
                "	 SELECT SUM(stock)AS availableStock FROM vu_availableStocks WHERE refcompid IN (  \n" +
                "	 SELECT componentID FROM tempStockDet  \n" +
                "	 ) LIMIT 1;  \n" +
                "	 DROP TABLE tempStockDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (422,'2.00','V1','create view vu_availableStocks-champak'," + userid + ");"
            );
            break;
        case 422:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD availableInternalStock INT;  \n" +
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD availableInternalStockTimeStamp DATETIME;  \n" +
                "  \n" +
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity_history ADD availableInternalStock INT;  \n" +
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity_history ADD availableInternalStockTimeStamp DATETIME;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_savePricingHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_savePricingHistory`(                                \n" +
                " IN rfqAssyID INT,  \n" +
                " IN created	VARCHAR(50)                                 \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "           DECLARE historyID INT  ;             \n" +
                "	INSERT INTO rfq_consolidated_history (rfqAssyID,createdBy,isDeleted) VALUES (rfqAssyID,created,0);  \n" +
                "	    SELECT LAST_INSERT_ID() INTO historyID;  \n" +
                "  \n" +
                "	 -- insert history for consolidate table  \n" +
                "	INSERT INTO rfq_consolidated_mfgpn_lineitem_history (refHistoryID,rfqAssyID,lineID,consolidateID,isInstall,isPurchase,uomID,                                \n" +
                "	qpa, numOfPosition,consolidatedLineItemIDs,refDesig,numOfRows,consolidatedpartlineID,leadQty,attritionRate,                                \n" +
                "	createdBy,isDeleted)                                \n" +
                "	SELECT historyID,rfqAssyID,lineID,id,isInstall,isPurchase,uomID,                                \n" +
                "	qpa, numOfPosition,consolidatedLineItemIDs,refDesig,numOfRows,consolidatedpartlineID,leadQty,attritionRate,                                \n" +
                "	created,isDeleted                             \n" +
                "	 FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID=rfqAssyID AND isDeleted=0;                                \n" +
                "     -- insert history for alternate parts  \n" +
                "     INSERT INTO rfq_consolidated_mfgpn_lineitem_alternate_history (refHistoryID,consolidateID,mfgPN,mfgPNID,PIDCode,customerApproval,createdBy,  \n" +
                "     isDeleted)                      \n" +
                "	SELECT historyID,ra.consolidateID,ra.mfgPN,ra.mfgPNID,ra.PIDCode,ra.customerApproval,created,ra.isDeleted  \n" +
                "	 FROM rfq_consolidated_mfgpn_lineitem_alternate ra LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON  \n" +
                "	 rl.id=ra.consolidateID WHERE rl.rfqAssyID=rfqAssyID AND rl.isDeleted=0 AND ra.isDeleted=0;   \n" +
                "  \n" +
                "	 -- insert history for quantity  \n" +
                "	   INSERT INTO rfq_consolidate_mfgpn_lineitem_quantity_history (refHistoryID,consolidateID,qtyID,requestQty,finalPrice,unitPrice,supplier,  \n" +
                "     selectedMpn,selectionMode,`min`,mult,currentStock,selectedPIDCode,leadTime,supplierStock,grossStock,pricingSupplier,apiLead,componentID,  \n" +
                "     packaging,quoteQty,pricenotselectreason,createdBy,isDeleted,availableInternalStock,availableInternalStockTimeStamp)                      \n" +
                "	SELECT historyID,rq.consolidateID,rq.qtyID,ra.requestQty,rq.finalPrice,rq.unitPrice,rq.supplier,  \n" +
                "	rq.selectedMpn,rq.selectionMode,rq.min,rq.mult,rq.currentStock,rq.selectedPIDCode,rq.leadTime,rq.supplierStock,rq.grossStock,rq.pricingSuppliers,rq.apiLead,rq.componentID,  \n" +
                "	rq.packaging,rq.quoteQty,rq.pricenotselectreason,created,rq.isDeleted,rq.availableInternalStock,rq.availableInternalStockTimeStamp  \n" +
                "	 FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON  \n" +
                "	 rl.id=rq.consolidateID LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "          WHERE rl.rfqAssyID=rfqAssyID AND rl.isDeleted=0 AND rq.isDeleted=0 ;   \n" +
                "  \n" +
                "          SELECT historyID LIMIT 1;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssyConsolidateQuantity` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAssyConsolidateQuantity`(              \n" +
                "      IN rfqAssyID INT,              \n" +
                "      IN qtyID INT              \n" +
                "  \n" +
                ")  \n" +
                "BEGIN              \n" +
                "IF(qtyID IS NOT NULL) THEN               \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),              \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),          \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL),rq.availableInternalStock=(NULL),availableInternalStockTimeStamp=(NULL)              \n" +
                "         WHERE rq.qtyID=qtyID  AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);              \n" +
                "         ELSE              \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),              \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),          \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL)                 \n" +
                "         WHERE  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);             \n" +
                "  \n" +
                "END IF;              \n" +
                " IF(SELECT COUNT(1) FROM rfq_consolidate_mfgpn_lineitem_quantity rq WHERE  rq.unitPrice IS NOT NULL AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0))=0 THEN            \n" +
                "          UPDATE rfq_assy_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;            \n" +
                "          UPDATE rfq_lineitem_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;            \n" +
                "          END IF;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (423,'2.00','V1','Available stock manage-Champak'," + userid + ");"
            );
            break;
        case 423:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "Insert INTO warehousemst   \n" +
                "(Name, Description, nickname, parentWHID, isActive, isPermanentWH, createdBy, createdAt, isDeleted, isDepartment)   \n" +
                "Values   \n" +
                "('Main Materials warehouse',NULL,NULL,NULL,1,1,1,current_timestamp,0,1),   \n" +
                "('Main Productions warehouse',NULL,NULL,NULL,1,1,1,current_timestamp,0,1);   \n" +
                "  \n" +
                " SET FOREIGN_KEY_CHECKS = 0; \n" +
                "Update warehousemst set id = -1 where Name = 'Main Materials warehouse';  \n" +
                "Update warehousemst set id = -2 where Name = 'Main Productions warehouse';  \n" +
                "SET FOREIGN_KEY_CHECKS = 1;  \n" +
                "  \n" +
                "SELECT id into @materialDept from warehousemst where Name = 'Material Department';  \n" +
                "UPDATE warehousemst SET parentWHID = -1 where parentWHID = @materialDept;  \n" +
                "UPDATE warehousemst_history SET parentWHID = -1 where parentWHID = @materialDept;  \n" +
                "UPDATE warehousemst_history SET refWHID = -1 where refWHID = @materialDept;  \n" +
                "UPDATE component_sid_stock_history SET deptWHID = -1 where deptWHID = @materialDept;  \n" +
                "  \n" +
                "SELECT id into @productionDept from warehousemst where Name = 'Production Department';  \n" +
                "UPDATE warehousemst SET parentWHID = -2 where parentWHID = @productionDept;  \n" +
                "UPDATE warehousemst_history SET parentWHID = -2 where parentWHID = @productionDept;  \n" +
                "UPDATE warehousemst_history SET refWHID = -2 where refWHID = @productionDept;  \n" +
                "UPDATE component_sid_stock_history SET deptWHID = -2 where deptWHID = @productionDept;  \n" +
                "  \n" +
                "delete from warehousemst where Name in ('Material Department', 'Production Department');  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (424,'2.00','V1',' Rename main warehouse name - Dharmishtha '," + userid + ");"
            );
            break;
        case 424:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-02-2019  *********************************** */
                "update page_detail  set displayMenuName='Part' where pageName = 'Parts';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Detail';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Alias & Alternate Groups';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Standards';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Document';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Miscellaneous';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Pricing History';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Customer LOA';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts Comments';  \n" +
                "update page_detail  set displayMenuName='Part' where pageName = 'Manage Parts BOM';  \n" +
                /* **************************** Add Script Version -> 13-02-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (425,'2.00','V1','Update Menu Entries - Ashish'," + userid + ");"
            );
            break;

        case 425:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssyConsolidateQuantity` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAssyConsolidateQuantity`(              \n" +
                "      IN rfqAssyID INT,              \n" +
                "      IN qtyID INT              \n" +
                "  \n" +
                ")  \n" +
                "BEGIN              \n" +
                "IF(qtyID IS NOT NULL) THEN               \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),              \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),          \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL),rq.availableInternalStock=(NULL),availableInternalStockTimeStamp=(NULL)              \n" +
                "         WHERE rq.qtyID=qtyID  AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);              \n" +
                "         ELSE              \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),              \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),          \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL),rq.availableInternalStock=(NULL),availableInternalStockTimeStamp=(NULL)                  \n" +
                "         WHERE  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0);             \n" +
                "  \n" +
                "END IF;              \n" +
                " IF(SELECT COUNT(1) FROM rfq_consolidate_mfgpn_lineitem_quantity rq WHERE  rq.unitPrice IS NOT NULL AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=0))=0 THEN            \n" +
                "          UPDATE rfq_assy_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;            \n" +
                "          UPDATE rfq_lineitem_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=rfqAssyID;            \n" +
                "          END IF;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (426,'2.00','V1','Update sp Sproc_UpdateAssyConsolidateQuantity -champak'," + userid + ");"
            );
            break;
        case 426:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(      \n" +
                "	pComponentID int(11)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS          \n" +
                "	SELECT 	id,		receiveMaterialType, 		pkgQty        \n" +
                "    FROM 	component_sid_stock       \n" +
                "    WHERE 	refcompid = pComponentID       \n" +
                "    AND 	IFNULL(isDeleted,0) = 0;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock    \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet where receiveMaterialType != 'Reserve Stock')       \n" +
                "    AND 	STATUS != 'R';     \n" +
                "  \n" +
                "    SET @reservedStock = (@totalReservedStock + @allocatedToKitStock);      \n" +
                "    SET @availableStock = (@totalStockInSystemRecord - @reservedStock);      \n" +
                "  \n" +
                "  \n" +
                "    -- Calculate Cumulative Stock      \n" +
                "	SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id = pComponentID;      \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempCumulativeStockRawDet AS          \n" +
                "	SELECT 	c.id,		c.refcompid,	c.receiveMaterialType, 		c.pkgQty        \n" +
                "    FROM 	component_sid_stock c, component_packagingalias cp      \n" +
                "    WHERE 	c.refcompid = cp.componentID      \n" +
                "    AND 	IFNULL(c.isDeleted,0) = 0      \n" +
                "    AND		cp.componentID != pComponentID      \n" +
                "    AND		cp.aliasgroupID = @packaginggroupID      \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeStockInSystemRecord FROM tempCumulativeStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeReservedStock FROM tempCumulativeStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedCumulativeStockToKitStock       \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempCumulativeStockRawDet)       \n" +
                "    AND 	STATUS != 'R';      \n" +
                "  \n" +
                "    SET @reservedCumulativeStock = (@totalCumulativeReservedStock + @allocatedCumulativeStockToKitStock);      \n" +
                "    SET @cumulativeStock = (@totalCumulativeStockInSystemRecord - @reservedCumulativeStock);      \n" +
                "    -- End Calculate Cumulative Stock      \n" +
                "  \n" +
                "	SET @totalInHouseStock = @availableStock + @cumulativeStock ;      \n" +
                "  \n" +
                "    SELECT (IFNULL(saftyStock,0) - @availableStock) INTO @shortage       \n" +
                "    FROM component       \n" +
                "    WHERE id = pComponentID;      \n" +
                "  \n" +
                "    SELECT 	@availableStock availableStock,  	@reservedStock reservedStock,      \n" +
                "			@cumulativeStock cumulativeStock, 	@totalInHouseStock totalInHouseStock,      \n" +
                "            @shortage shortage;      \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockRawDet;      \n" +
                "    DROP TEMPORARY TABLE  tempCumulativeStockRawDet;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (427,'2.00','V1',' Modify stock status procedure to handle kit allocation and reserve stock case- Dharmishtha '," + userid + ");"
            );
            break;
        case 427:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                    \n" +
                "    IN puserID VARCHAR(50),                              \n" +
                "    IN pnickName VARCHAR(20),                              \n" +
                "    IN pprefix VARCHAR(20),                              \n" +
                "    IN puid VARCHAR(20),                          \n" +
                "    IN pComponentID INT,                      \n" +
                "    IN pCustomerID INT,                      \n" +
                "    IN pCPN BOOL,                      \n" +
                "    IN pMFGAvailabel BOOL,                      \n" +
                "    IN pRefCpnMfgID INT,                  \n" +
                "    IN pAssyID INT,                  \n" +
                "    IN pSalesOrderDetailID INT,		                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),        \n" +
                "    IN pkitAssemblyID INT 	                 \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                    \n" +
                "	DECLARE v_length INT;                                     \n" +
                "	DECLARE v_fieldType INT;                                         \n" +
                "	DECLARE v_entityId INT;                                    \n" +
                "	DECLARE v_dataElementId INT;                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                    \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);		              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                    \n" +
                "	DECLARE plen,slen INT;                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                \n" +
                "	DECLARE barcode_type_id INT;                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';      \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                    \n" +
                "	(                                    \n" +
                "	     errorText NVARCHAR(2000),                                    \n" +
                "	     IsSuccess VARCHAR (2),                          \n" +
                "	     MFGPart VARCHAR(100)                                         \n" +
                "	);                         \n" +
                "	-- get data from barcode templates with seprator                                    \n" +
                "	block1: BEGIN                 \n" +
                "	      SELECT id, barcodeType, `name` INTO @barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "		pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);         \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN      \n" +
                "			SELECT COUNT(*) INTO @NumberOfPart FROM             \n" +
                "			(            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL            \n" +
                "				UNION            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "			) a;			      \n" +
                "			IF (@NumberOfPart > 0) THEN		      \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);      \n" +
                "				SELECT id, barcodeType, `name` INTO @barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);       \n" +
                "			END IF;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		-- tempregexp;    	            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                          \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND                                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);       \n" +
                "			SET v_BarcodeType = '2D';                          \n" +
                "		ELSE /* barcode 1D */       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);          \n" +
                "			SET v_BarcodeType = '1D';                       \n" +
                "		END IF;              \n" +
                "	END block1;                                    \n" +
                "  \n" +
                "	block2: BEGIN      	            \n" +
                "		-- declare cusrsor barcode match on all barcode template delimiter record found                                    \n" +
                "		DECLARE  barcodeMatch_cursor CURSOR FOR                                    \n" +
                "			SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                 \n" +
                "			WHERE refbrID = (SELECT id  FROM br_label_template WHERE deletedAt IS NULL AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END)) AND deletedAt IS NULL;                             \n" +
                "		-- declare exit loop if data not found                                    \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "	        -- if any record match found than  check for delimiter and its value                               \n" +
                "  \n" +
                "		IF (pbr_template_ID > 0) THEN                                    \n" +
                "			-- create temporary table for deliemeter and component dataelement                                    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                    \n" +
                "				pentityId INT,                                    \n" +
                "				pdataElementId INT,                                    \n" +
                "				pdelimiter_value VARCHAR(200)                                    \n" +
                "			);                               \n" +
                "  \n" +
                "			-- create temporary table for separator string values                                    \n" +
                "	                DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                    \n" +
                "			CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                          \n" +
                "  \n" +
                "			-- prefix length and suffix lenght to get actual string                                    \n" +
                "			SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                           \n" +
                "  \n" +
                "			-- open cursor                                    \n" +
                "			OPEN barcodeMatch_cursor;                                    \n" +
                "  \n" +
                "			-- set str label as whereclause                                    \n" +
                "			SET strLabel=pWhereClause;                             \n" +
                "  \n" +
                "			-- if prefix is found than remove those from actual string match                                    \n" +
                "			IF(IFNULL(@pprefixlength,0) > 0) THEN				                                    \n" +
                "				 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                    \n" +
                " 			 END IF;                                   \n" +
                "  \n" +
                "			-- if suffix is found than remove those from actual string match                                     \n" +
                "			 IF(IFNULL(@psuffixlength,0) > 0) THEN                                    \n" +
                "				SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                    \n" +
                "			 END IF;	                          \n" +
                "  \n" +
                "			-- insert all values after seprator split                                     \n" +
                "			SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                    \n" +
                "			PREPARE stmt1 FROM @SQL;	                                    \n" +
                "			EXECUTE stmt1;                                    \n" +
                "  \n" +
                "			-- create dynamic query to insert in recieving material                                    \n" +
                "			SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "			-- loop item till all records found in string match of barcode template                                    \n" +
                "			barcodeMatch_loop:LOOP                 \n" +
                "				-- get all five selected values                                    \n" +
                "				FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                            \n" +
                "  \n" +
                "				-- exit loop if no record found for barcode match                                    \n" +
                "				IF exit_loop THEN                               \n" +
                "					CLOSE barcodeMatch_cursor;                                    \n" +
                "					LEAVE barcodeMatch_loop;                                    \n" +
                "				END IF;                               \n" +
                "  \n" +
                "				-- dynamic query to get dellimeter string with values from string                                    \n" +
                "				SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                    \n" +
                "				PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                    \n" +
                "				EXECUTE stmtdelimiter;                          \n" +
                "  \n" +
                "				-- get delimiter values from string                                    \n" +
                "				SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                            \n" +
                "				-- check for field type is static or dynamic                                    \n" +
                "				-- if static field than check for mfg code and mfg part number                                    \n" +
                "				IF v_fieldType = 0  THEN                                \n" +
                "					-- component_sid_stock                                     \n" +
                "					-- get static field name from barcode table delimiter data element id                                    \n" +
                "					SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                      \n" +
                "					-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                    \n" +
                "					IF(StaticField=\"scanmfgpn\") THEN                          \n" +
                "						SET MFG_Part_No = delimiter_value_data;                          \n" +
                "  \n" +
                "						IF(pComponentID=0)THEN               \n" +
                "							SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM             \n" +
                "							(            \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL            \n" +
                "								UNION            \n" +
                "								SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "								WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "							) a;            \n" +
                "						ELSE                          \n" +
                "							SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                          \n" +
                "						END IF;                          \n" +
                "						IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN      \n" +
                "							SET BarcodeMFGMatch = 'Mismatch';      \n" +
                "							CLOSE barcodeMatch_cursor;                                    \n" +
                "							LEAVE barcodeMatch_loop;        \n" +
                "						END IF;      \n" +
                "  \n" +
                "						SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;      \n" +
                "						IF (@MFGType = 'DIST') THEN      \n" +
                "							SET v_SupplierID = @componentId;      \n" +
                "							SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;      \n" +
                "						END IF;    \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN    \n" +
                "							SELECT DISTINCT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId;				        \n" +
                "							IF (@rfqLineItemsID IS NULL) THEN        \n" +
                "								CLOSE barcodeMatch_cursor;                                    \n" +
                "								LEAVE barcodeMatch_loop;        \n" +
                "							END IF;        \n" +
                "						END IF;        \n" +
                "  \n" +
                "						IF  @componentCount = 1 THEN                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                    \n" +
                "						END IF;              \n" +
                "					END IF;                                    \n" +
                "  \n" +
                "					-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                    \n" +
                "					IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                            \n" +
                "						SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                    \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		              \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;                    \n" +
                "					IF @componentCount > 1 THEN                          \n" +
                "						CLOSE barcodeMatch_cursor;                                    \n" +
                "						LEAVE barcodeMatch_loop;                          \n" +
                "					END IF;                             \n" +
                "  \n" +
                "					-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                    \n" +
                "					-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                     \n" +
                "  \n" +
                "					-- select strFeildforInsert,valuesforInsert;                                    \n" +
                "  \n" +
                "				ELSE                \n" +
                "					-- component_sid_stock_dataelement_Values                                      \n" +
                "					-- dynamic fields                   \n" +
                "					SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);               \n" +
                "					IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;                    \n" +
                "  \n" +
                "					IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "						SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                    \n" +
                "						SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "					END IF;              \n" +
                "  \n" +
                "					SELECT entityID INTO v_entityId FROM dataelement WHERE                                     \n" +
                "						dataElementID=v_dataElementId AND deletedAt IS NULL;                                 \n" +
                "					INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                     \n" +
                "						VALUES (v_entityId,v_dataElementId,delimiter_value_data);                             \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "			END LOOP barcodeMatch_loop;                                    \n" +
                "			-- check if mfg and component both found than         \n" +
                "			IF (BarcodeMFGMatch = 'Mismatch') THEN    \n" +
                "				-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,@barcode_id);        \n" +
                "			ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                    \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);        \n" +
                "			ELSEIF (@componentCount > 1) THEN                          \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                    \n" +
                "			ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                    \n" +
                "				SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                    \n" +
                "                                   IF @Mfgmatched = 0  THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                    \n" +
                "				   END IF;									                                    \n" +
                "			 ELSE 		                          \n" +
                "				IF @mfgCount = 0 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                    \n" +
                "		                END IF;	                                    \n" +
                "				IF @componentCount = 0 THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                    \n" +
                "				END IF;	                                    \n" +
                "  \n" +
                "				IF  @mfgCount = 0 AND @componentCount=0  THEN                                      \n" +
                "					TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                    \n" +
                "			        END IF;						                                    \n" +
                "			END IF;				                                    \n" +
                "  \n" +
                "			IF (pCPN = 1) THEN                      \n" +
                "				SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                      \n" +
                "				SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                      \n" +
                "				IF (@codeFromPart != @codeFromMfg) THEN                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                    \n" +
                "				END IF;                      \n" +
                "			END IF;                      \n" +
                "  \n" +
                "			IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                    \n" +
                "  \n" +
                "				IF (pprefix = '') THEN	                      \n" +
                "					CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                      \n" +
                "					SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                      \n" +
                "				END IF;                   \n" +
                "  \n" +
                "				-- must call statements in sequence          				                          \n" +
                "				SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                    \n" +
                "				PREPARE stmt1 FROM @SQL1;                                    \n" +
                "				EXECUTE stmt1;                                  \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                      \n" +
                "  \n" +
                "				IF (pnickName IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                      \n" +
                "  \n" +
                "				IF (pRefCpnMfgID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF (pCustomerID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF (pAssyID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pSalesOrderDetailID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				IF (pReceiveMaterialType IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                   \n" +
                "				END IF;      \n" +
                "  \n" +
                "				IF (v_SupplierID IS NOT NULL) THEN                      \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                      \n" +
                "				END IF;         \n" +
                "  \n" +
                "				SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                      \n" +
                "				SET @sql2 = UpdateValue;	                                     \n" +
                "				PREPARE stmt2 FROM @SQL2;                                    \n" +
                "				EXECUTE stmt2;	                                    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                    \n" +
                "				IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                          \n" +
                "					INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                     \n" +
                "					SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                    \n" +
                "				END IF;                                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "			ELSE                                   \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "			END IF;                                    \n" +
                "  \n" +
                "		ELSE                                \n" +
                "			INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "				('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                    \n" +
                "  \n" +
                "			SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                      \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "	END block2;                                               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (428,'2.00','V1',' Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 428:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(      \n" +
                "	pComponentID int(11)     \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS          \n" +
                "	SELECT 	id,		receiveMaterialType, 		pkgQty        \n" +
                "    FROM 	component_sid_stock       \n" +
                "    WHERE 	refcompid = pComponentID       \n" +
                "    AND 	IFNULL(isDeleted,0) = 0;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock    \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet where receiveMaterialType != 'Reserve Stock')       \n" +
                "    AND 	STATUS != 'R';     \n" +
                "  \n" +
                "    SET @reservedStock = (@totalReservedStock + @allocatedToKitStock);      \n" +
                "    SET @availableStock = (@totalStockInSystemRecord - @reservedStock);      \n" +
                "  \n" +
                "  \n" +
                "    -- Calculate Cumulative Stock      \n" +
                "	SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id = pComponentID;      \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempCumulativeStockRawDet AS          \n" +
                "	SELECT 	c.id,		c.refcompid,	c.receiveMaterialType, 		c.pkgQty        \n" +
                "    FROM 	component_sid_stock c, component_packagingalias cp      \n" +
                "    WHERE 	c.refcompid = cp.componentID      \n" +
                "    AND 	IFNULL(c.isDeleted,0) = 0      \n" +
                "    AND		cp.componentID != pComponentID      \n" +
                "    AND		cp.aliasgroupID = @packaginggroupID      \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeStockInSystemRecord FROM tempCumulativeStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalCumulativeReservedStock FROM tempCumulativeStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedCumulativeStockToKitStock       \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempCumulativeStockRawDet where receiveMaterialType != 'Reserve Stock')       \n" +
                "    AND 	STATUS != 'R';      \n" +
                "  \n" +
                "    SET @reservedCumulativeStock = (@totalCumulativeReservedStock + @allocatedCumulativeStockToKitStock);      \n" +
                "    SET @cumulativeStock = (@totalCumulativeStockInSystemRecord - @reservedCumulativeStock);      \n" +
                "    -- End Calculate Cumulative Stock      \n" +
                "  \n" +
                "	SET @totalInHouseStock = @availableStock + @cumulativeStock ;      \n" +
                "  \n" +
                "    SELECT (IFNULL(saftyStock,0) - @availableStock) INTO @shortage       \n" +
                "    FROM component       \n" +
                "    WHERE id = pComponentID;      \n" +
                "  \n" +
                "    SELECT 	@availableStock availableStock,  	@reservedStock reservedStock,      \n" +
                "			@cumulativeStock cumulativeStock, 	@totalInHouseStock totalInHouseStock,      \n" +
                "            @shortage shortage;      \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockRawDet;      \n" +
                "    DROP TEMPORARY TABLE  tempCumulativeStockRawDet;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (429,'2.00','V1',' Modify stock status procedure to handle kit allocation and reserve stock case- Dharmishtha '," + userid + ");"
            );
            break;
        case 429:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerLatestDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerLatestDetails`(                \n" +
                "    IN pWOOPID INT(11),      \n" +
                "    IN pEmployeeID INT(11),             \n" +
                "    IN pWOID INT(11)      \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	-- SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;      \n" +
                "	/****************************************** 1.Get WO Transaction Details *******************************************/      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_wo_trans;          \n" +
                "	CREATE TEMPORARY TABLE temp_wo_trans AS       \n" +
                "	SELECT       \n" +
                "		`woTransID`,       \n" +
                "		`woID`,       \n" +
                "		`opID`,       \n" +
                "		`woOPID`,       \n" +
                "		`issueQty`,       \n" +
                "		`checkinEmployeeID`,       \n" +
                "		`checkinTime`,       \n" +
                "		`checkoutTime`,       \n" +
                "		`woentrytype`,       \n" +
                "		`isSetup`       \n" +
                "		FROM `workorder_trans` AS `woTransDetails`      \n" +
                "			WHERE (`woTransDetails`.`deletedAt` IS NULL       \n" +
                "				AND (`woTransDetails`.`woOPID` = pWOOPID      \n" +
                "				AND `woTransDetails`.`woentrytype` = 'T'       \n" +
                "				AND `woTransDetails`.`checkoutTime` IS NULL)      \n" +
                "			)       \n" +
                "		AND       \n" +
                "		(       \n" +
                "			SELECT `woTransID` FROM `workorder_trans_empinout` AS `Workorder_Trans_Empinout`       \n" +
                "			WHERE (`Workorder_Trans_Empinout`.`woTransID` = `woTransDetails`.`woTransID`       \n" +
                "				AND (`Workorder_Trans_Empinout`.`deletedAt` IS NULL       \n" +
                "					AND (`Workorder_Trans_Empinout`.`woTransID` = `woTransDetails`.`woTransID`       \n" +
                "						AND `Workorder_Trans_Empinout`.`employeeID` = pEmployeeID      \n" +
                "						AND `Workorder_Trans_Empinout`.`checkoutTime` IS NULL)      \n" +
                "						)      \n" +
                "				) LIMIT 1       \n" +
                "			) IS NOT NULL LIMIT 1;      \n" +
                "  \n" +
                "	SELECT * FROM temp_wo_trans;      \n" +
                "	SELECT woTransID INTO @pwoTransID FROM temp_wo_trans;      \n" +
                "	/****************************************** 1.Get WO Transaction Details *******************************************/      \n" +
                "  \n" +
                "	/****************************************** 2.Get WO Transaction With Employee CheckIn-CheckOut and Pause/Resume Details *******************************************/      \n" +
                "	SELECT woOPEmp.woID,      \n" +
                "		woOPEmp.opID,      \n" +
                "		woOPEmp.employeeID,      \n" +
                "		woOPEmp.woOPID,      \n" +
                "		emp.firstName,      \n" +
                "		emp.lastName,      \n" +
                "		woOPEmpInOut.woTransID,      \n" +
                "		woOPEmpInOut.woTransinoutID,      \n" +
                "		woOPEmpInOut.checkinTime,      \n" +
                "		woOPEmpInOut.checkoutTime,      \n" +
                "		woOPEmpInOut.isPaused,      \n" +
                "		woOPEmpPauseDet.woTransemppausedID,      \n" +
                "		woOPEmpPauseDet.pausedTime FROM workorder_operation_employee woOPEmp      \n" +
                "	LEFT JOIN workorder_trans_empinout woOPEmpInOut       \n" +
                "	ON woOPEmp.employeeID = woOPEmpInOut.employeeID    \n" +
                "	AND (woOPEmp.deletedAt IS NULL       \n" +
                "		AND woOPEmpInOut.woTransID = @pwoTransID      \n" +
                "		AND woOPEmpInOut.woOPID = woOPEmp.woOPID      \n" +
                "		AND `woOPEmpInOut`.`checkoutTime` IS NULL)    \n" +
                "  \n" +
                "	LEFT JOIN workorder_trans_emp_pausedet woOPEmpPauseDet       \n" +
                "	ON  woOPEmpPauseDet.woTransinoutID = woOPEmpInOut.woTransinoutID      \n" +
                "	AND (woOPEmpPauseDet.deletedAt IS NULL      \n" +
                "		AND woOPEmpPauseDet.resumeTime IS NULL)  \n" +
                "  \n" +
                "	LEFT JOIN employees emp       \n" +
                "	ON emp.id = woOPEmp.employeeID       \n" +
                "	AND (emp.isActive = TRUE       \n" +
                "		AND emp.deletedAt IS NULL)      \n" +
                "  \n" +
                "	WHERE woOPEmp.woOPID = pWOOPID AND woOPEmp.woID = pWOID AND woOPEmp.deletedAt IS NULL ;      \n" +
                "	/****************************************** 2.Get WO Transaction With Employee CheckIn-CheckOut and Pause/Resume Details *******************************************/      \n" +
                "  \n" +
                "	SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";     \n" +
                "	/****************************************** 3.Get Active Operation Details from current workorder *******************************************/      \n" +
                "	SELECT woop.opName,       \n" +
                "		woop.opNumber,        \n" +
                "		woop.opVersion,      \n" +
                "		woop.isTeamOperation,       \n" +
                "		woop.isStopOperation,       \n" +
                "		wo.woVersion,      \n" +
                "		wo.woNumber,      \n" +
                "		wo.isStopWorkorder,     \n" +
                "		wo.partID,    \n" +
                "		comp.mfgPN,    \n" +
                "		comp.nickName,    \n" +
                "		comp.PIDCode,    \n" +
                "		comp.rev,    \n" +
                "		CONCAT(@RFQInternalPrefix1, '-',IFNULL(`comp`.`liveInternalVersion`,0)) liveInternalVersion,    \n" +
                "		(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `comp`.`RoHSStatusID`) `rohsIcon`,       \n" +
                "		woOPEmpInOut.woTransID,      \n" +
                "		woOPEmpInOut.woTransinoutID,      \n" +
                "		woOPEmpInOut.woID,      \n" +
                "		woOPEmpInOut.opID,      \n" +
                "		woOPEmpInOut.woOPID,      \n" +
                "		woOPEmpInOut.employeeID,      \n" +
                "		woOPEmpInOut.checkinTime,      \n" +
                "		woOPEmpInOut.checkoutTime,      \n" +
                "		woOPEmpInOut.isPaused    \n" +
                "		FROM workorder_trans_empinout woOPEmpInOut       \n" +
                "	LEFT JOIN workorder_operation woop      \n" +
                "	ON woop.woopid = woOPEmpInOut.woopid      \n" +
                "	AND woop.deletedAt IS NULL      \n" +
                "  \n" +
                "	LEFT JOIN workorder wo      \n" +
                "	ON wo.woid = woOPEmpInOut.woid      \n" +
                "	AND wo.deletedAt IS NULL      \n" +
                "  \n" +
                "	LEFT JOIN component comp    \n" +
                "	ON wo.partID = comp.id    \n" +
                "	AND comp.deletedAt IS NULL    \n" +
                "  \n" +
                "	WHERE woOPEmpInOut.employeeID=pEmployeeID       \n" +
                "	AND woOPEmpInOut.woID = pWOID    \n" +
                "	AND woOPEmpInOut.checkOutTime IS NULL    \n" +
                "	AND woOPEmpInOut.isPaused = 0  \n" +
                "	AND woOPEmpInOut.deletedAt IS NULL;      \n" +
                "	/****************************************** 3.Get Active Operation Details from current workorder   *******************************************/      \n" +
                "  \n" +
                "  \n" +
                "	/****************************************** 4.Get Paused Operation Details from all workorder *******************************************/      \n" +
                "	SELECT woop.opName,       \n" +
                "		woop.opNumber,        \n" +
                "		woop.opVersion,      \n" +
                "		woop.isTeamOperation,       \n" +
                "		woop.isStopOperation,       \n" +
                "		wo.woVersion,      \n" +
                "		wo.woNumber,      \n" +
                "		wo.isStopWorkorder,     \n" +
                "		wo.partID,    \n" +
                "		comp.mfgPN,    \n" +
                "		comp.nickName,    \n" +
                "		comp.PIDCode,    \n" +
                "		comp.rev,    \n" +
                "		(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `comp`.`RoHSStatusID`) `rohsIcon`,      \n" +
                "		CONCAT(@RFQInternalPrefix1, '-',IFNULL(`comp`.`liveInternalVersion`,0)) liveInternalVersion,     \n" +
                "		woOPEmpInOut.woTransID,      \n" +
                "		woOPEmpInOut.woTransinoutID,      \n" +
                "		woOPEmpInOut.woID,      \n" +
                "		woOPEmpInOut.opID,      \n" +
                "		woOPEmpInOut.woOPID,      \n" +
                "		woOPEmpInOut.employeeID,      \n" +
                "		woOPEmpInOut.checkinTime,      \n" +
                "		woOPEmpInOut.checkoutTime,      \n" +
                "		woOPEmpInOut.isPaused,      \n" +
                "		woOPEmpPauseDet.woTransemppausedID,      \n" +
                "		woOPEmpPauseDet.pausedTime      \n" +
                "	FROM workorder_trans_emp_pausedet woOPEmpPauseDet    \n" +
                "  \n" +
                "	LEFT JOIN workorder_trans_empinout woOPEmpInOut    \n" +
                "	ON  woOPEmpPauseDet.woTransinoutID = woOPEmpInOut.woTransinoutID      \n" +
                "  \n" +
                "	LEFT JOIN workorder_operation woop      \n" +
                "	ON woop.woopid = woOPEmpInOut.woopid      \n" +
                "	AND woop.deletedAt IS NULL      \n" +
                "  \n" +
                "	LEFT JOIN workorder wo      \n" +
                "	ON wo.woid = woOPEmpInOut.woid      \n" +
                "	AND wo.deletedAt IS NULL      \n" +
                "  \n" +
                "	LEFT JOIN component comp    \n" +
                "	ON wo.partID = comp.id    \n" +
                "	AND comp.deletedAt IS NULL    \n" +
                "  \n" +
                "	WHERE woOPEmpPauseDet.deletedAt IS NULL      \n" +
                "		AND woOPEmpPauseDet.resumeTime IS NULL   \n" +
                "	AND (woOPEmpInOut.deletedAt IS NULL      \n" +
                "		AND woOPEmpInOut.checkOutTime IS NULL    \n" +
                "		AND woOPEmpInOut.employeeID=pEmployeeID  \n" +
                "		AND woOPEmpInOut.isPaused=1);    \n" +
                "	/****************************************** 4.Get Paused Operation Details from all workorder  *******************************************/      \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerPageDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerPageDetails`(                \n" +
                "    IN pWOOPID INT(11),      \n" +
                "    IN pEmployeeID INT(11)      \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;      \n" +
                "  \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/      \n" +
                "	SELECT       \n" +
                "	`woop`.`woOPID`,       \n" +
                "	`woop`.`woID`,       \n" +
                "	`woop`.`opID`,       \n" +
                "	`woop`.`opName`,       \n" +
                "	`woop`.`opNumber`,       \n" +
                "	`woop`.`opStatus`,       \n" +
                "	`woop`.`opDoes`,       \n" +
                "	`woop`.`opDonts`,       \n" +
                "	`woop`.`opDescription`,       \n" +
                "	`woop`.`opWorkingCondition`,       \n" +
                "	`woop`.`opManagementInstruction`,       \n" +
                "	`woop`.`opDeferredInstruction`,       \n" +
                "	`woop`.`colorCode`,       \n" +
                "	`woop`.`qtyControl`,       \n" +
                "	`woop`.`isIssueQty`,       \n" +
                "	`woop`.`opVersion`,       \n" +
                "	`woop`.`isRework`,       \n" +
                "	`woop`.`isNoClean`,       \n" +
                "	`woop`.`isWatersoluble`,       \n" +
                "	`woop`.`isTeamOperation`,       \n" +
                "	`woop`.`isStopOperation`,       \n" +
                "	`woop`.`firstPcsModel`,       \n" +
                "	`woop`.`firstPcsConclusion`,       \n" +
                "	`woop`.`firstPcsStatus`,       \n" +
                "	`woop`.`isPreProgrammingComponent`,        \n" +
                "	`opType`.`gencCategoryName` AS `operationType`,       \n" +
                "	`woCluster`.`isParellelOperation` AS `isParellelOperation`,      \n" +
                "	`wo`.`woID` AS `woID`,       \n" +
                "	`wo`.`woNumber` AS `woNumber`,       \n" +
                "	`wo`.`buildQty` AS `buildQty`,       \n" +
                "	`wo`.`RoHSStatusID` AS `RoHSStatusID`,       \n" +
                "	`wo`.`isNoClean` AS `isNoClean`,       \n" +
                "	`wo`.`isWatersoluble` AS `isWatersoluble`,       \n" +
                "	`wo`.`woVersion` AS `woVersion`,       \n" +
                "	`wo`.`woStatus` AS `woStatus`,       \n" +
                "	`wo`.`isOperationTrackBySerialNo` AS `isOperationTrackBySerialNo`,       \n" +
                "	`wo`.`isStopWorkorder` AS `isStopWorkorder`,       \n" +
                "	`componentAssembly`.`mfgPN` AS `mfgPN`,       \n" +
                "	`componentAssembly`.`PIDCode` AS `PIDCode`,       \n" +
                "	`componentAssembly`.`rev` AS `rev`,       \n" +
                "	`componentAssembly`.`nickName` AS `nickName`      \n" +
                "	FROM `workorder_operation` AS `woop`       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_operation_cluster` AS `woOPCluster`       \n" +
                "	ON `woop`.`woOPID` = `woOPCluster`.`woOPID`       \n" +
                "	AND `woOPCluster`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_cluster` AS `woCluster`       \n" +
                "	ON `woOPCluster`.`clusterID` = `woCluster`.`clusterID`       \n" +
                "	AND `woCluster`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder` AS `wo`      \n" +
                "	ON `woop`.`woID` = `wo`.`woID`       \n" +
                "	AND `wo`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `component` AS `componentAssembly`       \n" +
                "	ON `wo`.`partID` = `componentAssembly`.`id`       \n" +
                "	AND `componentAssembly`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `opType`       \n" +
                "	ON `woop`.`operationTypeID` = `opType`.`gencCategoryID`       \n" +
                "	AND `opType`.`deletedAt` IS NULL       \n" +
                "	WHERE (`woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pWOOPID);      \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/      \n" +
                "  \n" +
                "	/************************************** 2.Get Employee Details *****************************************/      \n" +
                "	SELECT       \n" +
                "	`Employee`.`id`,       \n" +
                "	`Employee`.`firstName`,       \n" +
                "	`Employee`.`lastName`,       \n" +
                "	`Employee`.`profileImg`,       \n" +
                "	`dept`.`deptName` AS `deptName`,      \n" +
                "	`empTitle`.`gencCategoryName` AS `titleName`      \n" +
                "	FROM `employees` AS `Employee`       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `employee_department` AS `empDept`       \n" +
                "	ON `Employee`.`id` = `empDept`.`employeeID`       \n" +
                "	AND (`empDept`.`deletedAt` IS NULL AND `empDept`.`isDefault` = TRUE)       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `department` AS `dept`       \n" +
                "	ON `empDept`.`departmentID` = `dept`.`deptID`       \n" +
                "	AND `dept`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `empTitle`       \n" +
                "	ON `empDept`.`titleID` = `empTitle`.`gencCategoryID`       \n" +
                "	AND `empTitle`.`deletedAt` IS NULL       \n" +
                "  \n" +
                "	WHERE (`Employee`.`deletedAt` IS NULL AND (`Employee`.`id` = pEmployeeID AND `Employee`.`isDeleted` = FALSE));      \n" +
                "	/****************************************** Get 2.Employee Details *******************************************/      \n" +
                "  \n" +
                "	/************************************** 3.Get Workorder Operation List ***********************************************/      \n" +
                "	SELECT       \n" +
                "		a.`woID` AS `woID`,       \n" +
                "		a.`opID` AS `opID`,       \n" +
                "		a.`woOPID` AS `woOPID`,       \n" +
                "		a.`opNumber` AS `opNumber`,       \n" +
                "		a.`opName` AS `opName`,       \n" +
                "		a.`isNoClean` AS `isNoClean`,       \n" +
                "		a.`isWatersoluble` AS `isWatersoluble`,       \n" +
                "		a.`isRework` AS `isRework`,       \n" +
                "		a.`operationTypeID` AS `operationTypeID`,    \n" +
                "		(SELECT isParellelOperation FROM workorder_cluster WHERE clusterID=b.clusterID AND deletedAt IS NULL) isParellelOperation,  \n" +
                "		(SELECT COUNT(*) FROM workorder_operation_employee WHERE woid=@pwoID AND woopid=a.woopid AND employeeID=pEmployeeID AND deletedAt IS NULL) operationAssignedCount  \n" +
                "	FROM workorder_operation a      \n" +
                "	LEFT JOIN workorder_operation_cluster b     \n" +
                "	ON b.woopid = a.woopid AND b.deletedAt IS NULL    \n" +
                "	WHERE a.deletedAt IS NULL AND a.woID = @pwoID;       \n" +
                "	/**************************************** 3.Get Workorder Operation List *********************************************/      \n" +
                "  \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	      \n" +
                "	SELECT       \n" +
                "	`woTransHold`.`reason` AS `reason`,       \n" +
                "	`woTransHold`.`resumeReason` AS `resumeReason`,       \n" +
                "	`woTransHold`.`startDate` AS `woStartDate`,       \n" +
                "	`woTransHold`.`holdEmployeeId` AS `woHoldEmployeeId`,       \n" +
                "	`woTransHoldEmployee`.`firstName` AS `woHoldEmployeeFirstName`,       \n" +
                "	`woTransHoldEmployee`.`lastName` AS `woHoldEmployeeLastName`,       \n" +
                "	`woTransHoldEmployee`.`initialName` AS `woHoldBy`      \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woTransHold`       \n" +
                "	LEFT OUTER JOIN `employees` AS `woTransHoldEmployee`       \n" +
                "	ON `woTransHold`.`holdEmployeeId` = `woTransHoldEmployee`.`id`       \n" +
                "	AND `woTransHoldEmployee`.`deletedAt` IS NULL       \n" +
                "	WHERE `woTransHold`.`woID` = @pwoID AND (`woTransHold`.`deletedAt` IS NULL       \n" +
                "	AND `woTransHold`.`endDate` IS NULL);      \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	      \n" +
                "  \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	      \n" +
                "	SELECT        \n" +
                "	`woOPTransHold`.`woTransOpHoldUnholdId` AS `woTransOpHoldUnholdId`,       \n" +
                "	`woOPTransHold`.`reason` AS `reason`,       \n" +
                "	`woOPTransHold`.`resumeReason` AS `resumeReason`,       \n" +
                "	`woOPTransHold`.`startDate` AS `opStartDate`,       \n" +
                "	`woOPTransHold`.`endDate` AS `opEndDate`,       \n" +
                "	`woOPTransHold`.`holdEmployeeId` AS `woopHoldEmployeeId`,      \n" +
                "	`woOPTransHoldEmployee`.`firstName` AS `woopHoldEmployeesFirstName`,       \n" +
                "	`woOPTransHoldEmployee`.`lastName` AS `woopHoldEmployeesLastName`,       \n" +
                "	`woOPTransHoldEmployee`.`initialName` AS `opHoldBy`      \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woOPTransHold`       \n" +
                "	LEFT OUTER JOIN `employees` AS `woOPTransHoldEmployee`       \n" +
                "	ON `woOPTransHold`.`holdEmployeeId` = `woOPTransHoldEmployee`.`id`       \n" +
                "	AND `woOPTransHoldEmployee`.`deletedAt` IS NULL       \n" +
                "	WHERE `woOPTransHold`.`woOPID` = pWOOPID       \n" +
                "	AND (`woOPTransHold`.`deletedAt` IS NULL       \n" +
                "	AND `woOPTransHold`.`endDate` IS NULL);      \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	      \n" +
                "  \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction, 7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/      \n" +
                "	CALL Sproc_GetTravelerLatestDetails (pWOOPID, pEmployeeID, @pWOID );      \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction,7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/      \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getActiveOperationListByEmployeeID` ;  \n" +
                "CREATE PROCEDURE `Sproc_getActiveOperationListByEmployeeID`(           \n" +
                "	IN pEmployeeID INT  \n" +
                "    )  \n" +
                "BEGIN	      \n" +
                "	SELECT   \n" +
                "	(SELECT woNumber FROM workorder WHERE woid=woop.woid AND deletedAt IS NULL) woNumber,  \n" +
                "	woop.opNumber,  \n" +
                "	woop.opName,   \n" +
                "	woempinout.woTransID,  \n" +
                "	woempinout.checkinTime,  \n" +
                "	woop.isTeamOperation,  \n" +
                "	(SELECT wc.isParellelOperation FROM workorder_cluster wc    \n" +
                "					WHERE wc.clusterID     \n" +
                "						IN (SELECT clusterID FROM workorder_operation_cluster woc    \n" +
                "							WHERE woc.woopid=`woop`.`woOPID` AND `woc`.`deletedAt` IS NULL)    \n" +
                "					 AND wc.deletedAt IS NULL AND wc.woID = `woop`.woID    \n" +
                "				) isParellelOperation  \n" +
                "	FROM workorder_trans_empinout woempinout  \n" +
                "	LEFT JOIN workorder_operation woop  \n" +
                "	ON woop.woopid = woempinout.woopid AND woop.deletedAt IS NULL  \n" +
                "	WHERE woempinout.employeeID=pEmployeeID AND woempinout.isPaused=0  \n" +
                "		AND woempinout.deletedAt IS NULL AND woempinout.checkoutTime IS NULL;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_PauseActiveOperationListBeforeCheckIn` ;  \n" +
                "CREATE PROCEDURE `Sproc_PauseActiveOperationListBeforeCheckIn`(        \n" +
                "	IN pWoID INT,        \n" +
                "	IN pWoOPID INT,         \n" +
                "	IN pEmployeeID INT,              \n" +
                "	IN pCreatedBy VARCHAR(255)        \n" +
                "    )  \n" +
                "BEGIN	                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;        \n" +
                "	CREATE TEMPORARY TABLE error_CheckIn (        \n" +
                "		errorText NVARCHAR(2000)        \n" +
                "	);        \n" +
                "  \n" +
                "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckInTime;  \n" +
                "  \n" +
                "	--  Start: Pause all current running operation before start activity  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_active_employee_operation;  \n" +
                "	CREATE TEMPORARY TABLE temp_active_employee_operation  \n" +
                "	SELECT woopID,woTransinoutID,  \n" +
                "		(SELECT IFNULL(wc.isParellelOperation,0) FROM workorder_cluster wc    \n" +
                "			WHERE wc.clusterID IN (SELECT clusterID FROM workorder_operation_cluster woc    \n" +
                "					WHERE woc.woopid=woEmpInout.woopID AND `woc`.`deletedAt` IS NULL)    \n" +
                "			AND wc.deletedAt IS NULL AND wc.woID = woEmpInout.woID  \n" +
                "		) isParellelOperation  \n" +
                "	FROM workorder_trans_empinout woEmpInout  \n" +
                "	WHERE woEmpInout.employeeID=pEmployeeID AND woEmpInout.checkinTime IS NOT NULL AND woEmpInout.checkoutTime IS NULL   \n" +
                "	AND woEmpInout.isPaused=0 AND woEmpInout.deletedAt IS NULL;  \n" +
                "  \n" +
                "	SELECT IFNULL(wc.isParellelOperation,0) INTO @pparallelOperation FROM workorder_cluster wc    \n" +
                "					WHERE wc.clusterID     \n" +
                "						IN (SELECT clusterID FROM workorder_operation_cluster woc    \n" +
                "							WHERE woc.woopid=pWoOPID AND `woc`.`deletedAt` IS NULL)    \n" +
                "					 AND wc.deletedAt IS NULL AND wc.woID = pWoID;  \n" +
                "  \n" +
                "	IF(@pparallelOperation = 1) THEN  \n" +
                "	-- case 1: current operation is parallel operation with in same workorder  \n" +
                "		-- SELECT * FROM temp_active_employee_operation;  \n" +
                "		UPDATE workorder_trans_empinout SET isPaused = 1, updatedBy = pCreatedBy   \n" +
                "			WHERE woTransinoutID IN (SELECT woTransinoutID FROM temp_active_employee_operation WHERE IFNULL(isParellelOperation,0)=0);  \n" +
                "  \n" +
                "		INSERT INTO workorder_trans_emp_pausedet (`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)        \n" +
                "		 	SELECT woTransinoutID , @pCheckInTime, pCreatedBy, 0 FROM temp_active_employee_operation WHERE IFNULL(isParellelOperation,0)=0;    \n" +
                "  \n" +
                "	ELSE 	  \n" +
                "	-- case 2: current operation is normal operation    \n" +
                "		-- select * from temp_active_employee_operation;  \n" +
                "		UPDATE workorder_trans_empinout SET isPaused = 1, updatedBy = pCreatedBy   \n" +
                "			WHERE woTransinoutID IN (SELECT woTransinoutID FROM temp_active_employee_operation);  \n" +
                "  \n" +
                "		INSERT INTO workorder_trans_emp_pausedet (`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)        \n" +
                "			SELECT woTransinoutID , @pCheckInTime, pCreatedBy, 0 FROM temp_active_employee_operation;    \n" +
                "	END IF;  \n" +
                "	-- End: Pause all current running operation before start activity  \n" +
                "	SELECT errorText FROM error_CheckIn;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeOperationByWoID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeOperationByWoID`(              \n" +
                "    IN pwoID INT(11),            \n" +
                "    IN pemployeeID INT(11),        \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN          \n" +
                "IF pisUserAdmin = 1 THEN      \n" +
                "	SELECT  woOPID,      \n" +
                "	woID,      \n" +
                "	opID,      \n" +
                "	opNumber,       \n" +
                "	opName,      \n" +
                "	opVersion,       \n" +
                "	opStatus,       \n" +
                "	isStopOperation,    \n" +
                "	isTeamOperation,  \n" +
                "	(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = pwoID AND woemp.woopid=woop.woopid AND woemp.deletedAt IS NULL  \n" +
                "		AND woemp.employeeID IN (pemployeeID)) isAssigned    \n" +
                "	FROM workorder_operation woop      \n" +
                "	WHERE woop.deletedAt IS NULL       \n" +
                "	AND woop.woID = pwoID AND woop.opStatus IN (1, 2);      \n" +
                "ELSE       \n" +
                "	SELECT woOPID,      \n" +
                "	opID,      \n" +
                "	woID,      \n" +
                "	opNumber,      \n" +
                "	opName,      \n" +
                "	opVersion,      \n" +
                "	opStatus,       \n" +
                "	isStopOperation,       \n" +
                "	isTeamOperation,  \n" +
                "	(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = woop.woID AND woemp.deletedAt IS NULL  \n" +
                "		AND woemp.employeeID IN (pemployeeID)) isAssigned						             \n" +
                "	FROM workorder_operation woop       \n" +
                "	WHERE woop.woID = pwoID AND woop.opstatus IN (1,2) AND woop.deletedAt IS NULL      \n" +
                "	AND woopID IN (SELECT woope.woopID FROM workorder_operation_employee woope       \n" +
                "		WHERE woope.deletedAt IS NULL       \n" +
                "		AND woope.employeeID = pemployeeID);      \n" +
                "END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                      \n" +
                "    IN pcodeDigest VARCHAR(1000),                  \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN            \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;                \n" +
                "DECLARE whereClause2 VARCHAR(255) ;       \n" +
                "  \n" +
                "/************************ Save Employee Details in Temp Table ************************************/      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (              \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),              \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)              \n" +
                ");              \n" +
                "INSERT INTO temp_sproc_employeedetails         \n" +
                "SELECT emp.id, emp.firstname, emp.lastname,               \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName              \n" +
                "FROM employees emp              \n" +
                "LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.deletedAt IS NULL AND empdep.isdefault = 1)        \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL              \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.deletedAt IS NULL)       \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1;          \n" +
                "/************************ Create Temp Table for Workorder Details ************************************/      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (              \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),              \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),              \n" +
                "		isSampleAvailable INT(11),	isStopWorkorder INT(11),		createdAt DATETIME,              \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),              \n" +
                "		nickName VARCHAR(50),		liveInternalVersion VARCHAR(100),	imageURL VARCHAR(1000),              \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			standardName VARCHAR(255),              \n" +
                "		colorCode VARCHAR(255),		className VARCHAR(255),			poQty INT(11),			              \n" +
                "		poNumber VARCHAR(1000), 	partID INT(11),				isAssigned INT(11)	              \n" +
                ");        \n" +
                "/************************ Get Prefix values from system configuration ************************************/                \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";              \n" +
                "/************************ save all workorder details in temp table for further use ************************************/                \n" +
                "INSERT INTO temp_sproc_workorderdetails              \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 							wo.woVersion,              \n" +
                "	wo.buildQty,		wo.woStatus,								wo.isClusterApplied,               \n" +
                "	wo.isSampleAvailable,	wo.isStopWorkorder,							wo.createdAt,              \n" +
                "	c.mfgPN, 		c.PIDCode, 								c.rev,               \n" +
                "	c.nickName,		CONCAT(@RFQInternalPrefix1, '-',IFNULL(c.liveInternalVersion,0)),	c.imageURL,              \n" +
                "	rohs.name, 		rohs.rohsIcon,								NULL,              \n" +
                "	NULL,			NULL,									NULL,              \n" +
                "	NULL,			wo.partID,								(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = wo.woID AND woemp.deletedAt IS NULL  \n" +
                "													AND woemp.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet))						             \n" +
                "FROM workorder wo              \n" +
                "LEFT JOIN component c ON wo.partID = c.id               \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id               \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6);  \n" +
                "/************************ 1. Get all employee details ************************************/                \n" +
                "SELECT * FROM temp_sproc_employeedetails;              \n" +
                "/************************ 1. Get all employee details ************************************/                \n" +
                "/************************ save all salesorder details in temp table for further use ************************************/       \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (              \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)              \n" +
                ");              \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails              \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID               \n" +
                "FROM workorder_salesorder_details wosd               \n" +
                "WHERE wosd.deletedAt IS NULL               \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)              \n" +
                "GROUP BY wosd.woID;         \n" +
                "/************************ save all certificate details in temp table for further use ************************************/       \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (              \n" +
                "		priority INT(11),		colorcode VARCHAR(255),		classname VARCHAR(255),              \n" +
                "		fullname VARCHAR(255),		woID INT(11)              \n" +
                ");              \n" +
                "INSERT INTO temp_sproc_certificatedetails              \n" +
                "SELECT MIN(cs.priority), sc.colorcode, sc.classname, cs.fullname, tempWO.woID               \n" +
                "	FROM temp_sproc_workorderdetails tempWO              \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL              \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL              \n" +
                "	LEFT JOIN standard_class sc  ON sc.classID = wc.classIDs AND sc.deletedAt IS NULL              \n" +
                "	GROUP BY tempWO.woID;              \n" +
                "/************************ 2.1 Update details in workorder details from certificate tables ************************************/                \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,               \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result              \n" +
                "SET tempWO1.colorcode = result.colorcode,              \n" +
                "tempWO1.classname = result.classname,              \n" +
                "tempWO1.standardName = result.fullname              \n" +
                "WHERE tempWO1.woID = result.woID;              \n" +
                "/************************ 2.2 Update details in workorder details from sales order tables ************************************/                \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,              \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1              \n" +
                "SET tempWO1.poQty = result1.poQty,              \n" +
                "tempWO1.poNumber = result1.refPONumber              \n" +
                "WHERE tempWO1.woID = result1.woID;              \n" +
                "/************************ 2. Get all workroder list ************************************/                \n" +
                "/************************ If user is not admin than whereclause ************************************/            \n" +
                "IF pisUserAdmin = 1 THEN              \n" +
                "	SET whereClause1 = '';                \n" +
                "ELSE              \n" +
                "	SET whereClause1 = ' AND isAssigned > 0';              \n" +
                "END IF;     \n" +
                "SET @SQLStatement1 = CONCAT(\"SELECT * FROM temp_sproc_workorderdetails where 1=1 \", whereClause1);                                          \n" +
                "PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "EXECUTE query1;                                          \n" +
                "DEALLOCATE PREPARE query1;               \n" +
                "/************************ 2. Get all workroder list ************************************/                \n" +
                "/************************ 3. Get all active operation list ************************************/                \n" +
                "IF pisUserAdmin = 1 THEN              \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';                \n" +
                "ELSE              \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';              \n" +
                "END IF;           \n" +
                "  \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID, wte.checkinTime, wte.isPaused,               \n" +
                "wtep.woTransemppausedID, wtep.pausedTime,               \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation              \n" +
                "FROM workorder_trans_empinout wte              \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL               \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL              \n" +
                "WHERE wte.deletedAt IS NULL               \n" +
                "AND wte.checkoutTime IS NULL               \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                      \n" +
                " /************************ 3. Get all active operation list ************************************/                \n" +
                "  \n" +
                "PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "EXECUTE query2;                                          \n" +
                "DEALLOCATE PREPARE query2;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_resumeEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_resumeEmployeeForOperation`(          \n" +
                "	IN pWOTransemppausedID INT,          \n" +
                "	IN pWOTransinoutID INT,          \n" +
                "	IN pUpdatedBy VARCHAR(255)          \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE lvwoNumber VARCHAR(255);          \n" +
                "	DECLARE lvopName VARCHAR(255);          \n" +
                "	DECLARE lvempName VARCHAR(255);          \n" +
                "	DECLARE lvemployeeID INT(11);          \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);          \n" +
                "	DECLARE lvwoOPID INT(11);          \n" +
                "	DECLARE lEmpResumeDetailCnt INT(11);      \n" +
                "	DECLARE pResumeTime DATETIME;      \n" +
                "	SET pResumeTime = CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');        \n" +
                "  \n" +
                "	-- get current transaction based details to pause/resume operations  \n" +
                "	 SELECT wotransemp.woID, wotransemp.woopID, wotransemp.employeeID   \n" +
                "		INTO @pWoID,@pWoOPID,@pEmployeeID  \n" +
                "		FROM workorder_trans_emp_pausedet wotransempinout  \n" +
                "		LEFT JOIN workorder_trans_empinout wotransemp   \n" +
                "		ON wotransemp.woTransinoutID = wotransempinout.woTransinoutID AND wotransemp.deletedAt IS NULL  \n" +
                "		WHERE wotransempinout.woTransemppausedID = pWOTransemppausedID   \n" +
                "			AND wotransempinout.deletedAt IS NULL  \n" +
                "			AND wotransempinout.woTransinoutID=pWOTransinoutID;  \n" +
                "	CALL Sproc_PauseActiveOperationListBeforeCheckIn(@pWoID,@pWoOPID,@pEmployeeID,pUpdatedBy);  \n" +
                "  \n" +
                "	-- create temporary table for error            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;             \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error            \n" +
                "	(            \n" +
                "	     errorText NVARCHAR(2000)            \n" +
                "	);            \n" +
                "  \n" +
                "	SET lEmpResumeDetailCnt = 0;      \n" +
                "	SELECT COUNT(*) INTO lEmpResumeDetailCnt FROM workorder_trans_empinout WHERE woTransinoutID = pWOTransinoutID AND isPaused = 0;        \n" +
                "	IF (lEmpResumeDetailCnt = 0) THEN		        \n" +
                "		UPDATE workorder_trans_empinout	          \n" +
                "		SET isPaused = 0, updatedBy = pUpdatedBy           \n" +
                "		WHERE woTransinoutID = pWOTransinoutID;          \n" +
                "  \n" +
                "		UPDATE workorder_trans_emp_pausedet           \n" +
                "		SET resumeTime=pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,pResumeTime), updatedBy = pUpdatedBy           \n" +
                "		WHERE woTransinoutID = pWOTransinoutID AND woTransemppausedID= pWOTransemppausedID AND resumeTime IS NULL;          \n" +
                "  \n" +
                "		/* [S] - Add Time line log for resume operation employee to work order operation */          \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),          \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,          \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID          \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID          \n" +
                "		FROM workorder_trans_empinout  wteio          \n" +
                "		WHERE wteio.woTransinoutID = pWOTransinoutID          \n" +
                "		;          \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		          \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee resume for work order operation\");          \n" +
                "		SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of           \n" +
                "			work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');           \n" +
                "		CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.10,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			          \n" +
                "		/* [E] - Add Time line log for resume operation employee to work order operation */	          \n" +
                "	ELSE       \n" +
                "		INSERT INTO temp_operation_error (errorText) VALUES ('Operation already resumed.');         \n" +
                "	END IF;      \n" +
                "	SELECT errorText FROM temp_operation_error;            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkInEmployeeForOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkInEmployeeForOperation`(        \n" +
                "	IN pWoID INT,        \n" +
                "	IN pOpID INT,        \n" +
                "	IN pWoOPID INT,        \n" +
                "	IN pEquipmentID INT,        \n" +
                "	IN pWorkstationID INT,         \n" +
                "	IN pisSetup TINYINT,        \n" +
                "	IN pIsSingleEmployee TINYINT,        \n" +
                "	IN pEmployeeID INT,        \n" +
                "	IN pWoTransID INT,        \n" +
                "	IN pIssueQty INT,          \n" +
                "	IN pCreatedBy VARCHAR(255)        \n" +
                "    )  \n" +
                "BEGIN	        \n" +
                "	DECLARE lvwoNumber VARCHAR(255);        \n" +
                "	DECLARE lvopName VARCHAR(255);        \n" +
                "	DECLARE lvempName VARCHAR(255);        \n" +
                "	DECLARE lvinsertedWoTransInOutID INT(11);        \n" +
                "	DECLARE lvemployeeID INT(11);        \n" +
                "	DECLARE lvopNumber DECIMAL(6,2);        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;        \n" +
                "	CREATE TEMPORARY TABLE error_CheckIn (        \n" +
                "		errorText NVARCHAR(2000)        \n" +
                "	);        \n" +
                "  \n" +
                "  \n" +
                "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckInTime;  \n" +
                "  \n" +
                "	-- to pause all active operation in case of resume any other operation  \n" +
                "	CALL Sproc_PauseActiveOperationListBeforeCheckIn(pWoID,pWoOPID,pEmployeeID,pCreatedBy);  \n" +
                "  \n" +
                "	IF(pIsSingleEmployee = 1) THEN        \n" +
                "		INSERT INTO workorder_trans_empinout        \n" +
                "		(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isPaused`, `isDeleted`)        \n" +
                "		VALUES         \n" +
                "		(pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0);        \n" +
                "  \n" +
                "		SET lvinsertedWoTransInOutID = LAST_INSERT_ID();        \n" +
                "  \n" +
                "		/* [S] - Add Time line log for check-in to team work order operation */        \n" +
                "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),        \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,        \n" +
                "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)         \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber        \n" +
                "		FROM workorder_trans_empinout  wteio        \n" +
                "		WHERE wteio.woTransinoutID = lvinsertedWoTransInOutID;        \n" +
                "  \n" +
                "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		        \n" +
                "  \n" +
                "		SET @pEventTitle = CONCAT(\"Employee start activity in team operation\");        \n" +
                "		SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity in team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');        \n" +
                "		CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',lvinsertedWoTransInOutID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', lvemployeeID),pCreatedBy,1);  			        \n" +
                "		/* [E] - Add Time line log for check-in to team work order operation */	        \n" +
                "	ELSE        \n" +
                "		IF (IFNULL(pIssueQty,0)= 0) THEN        \n" +
                "			INSERT INTO workorder_trans        \n" +
                "			(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isDeleted`, `woentrytype`, `isSetup`)        \n" +
                "				VALUES         \n" +
                "			(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0, 'T', pisSetup);        \n" +
                "  \n" +
                "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;        \n" +
                "  \n" +
                "			INSERT INTO workorder_trans_empinout        \n" +
                "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`, `createdBy`, `isPaused`, `isDeleted`)        \n" +
                "			VALUES         \n" +
                "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0);        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for check-in work order operation */        \n" +
                "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),        \n" +
                "				(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,        \n" +
                "				(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)         \n" +
                "			INTO lvwoNumber,lvopName,lvempName,lvopNumber        \n" +
                "			FROM workorder_trans  wt        \n" +
                "			WHERE wt.woTransID = @pWoTransID;		        \n" +
                "  \n" +
                "			SET @pEventTitle = CONCAT(\"Employee start activity for work order operation\");        \n" +
                "			SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');        \n" +
                "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			        \n" +
                "			/* [E] - Add Time line log for check-in work order operation */					        \n" +
                "		ELSE        \n" +
                "			CALL Sproc_GetopReadyStock(pWOID,pOpID);        \n" +
                "			SELECT issuePending INTO @pIssuePending FROM temp_Sproc_GetopReadyStock;        \n" +
                "  \n" +
                "			IF((IFNULL(pIssueQty,0)) > IFNULL(@pIssuePending,0)) THEN        \n" +
                "				INSERT INTO error_CheckIn (errorText) VALUES ('Invalid Issue Qty !!');        \n" +
                "			ELSE        \n" +
                "				INSERT INTO workorder_trans        \n" +
                "				(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,     \n" +
                "					`createdBy`, `isDeleted`, `woentrytype`, `isSetup`)        \n" +
                "				VALUES         \n" +
                "				(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0, 'T',pisSetup);        \n" +
                "  \n" +
                "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;        \n" +
                "  \n" +
                "			INSERT INTO workorder_trans_empinout        \n" +
                "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`,     \n" +
                "			`checkinTime`,`createdBy`, `isPaused`, `isDeleted`)        \n" +
                "			VALUES         \n" +
                "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime, pCreatedBy, 0,0);        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for check-in work order operation */        \n" +
                "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),        \n" +
                "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,        \n" +
                "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)         \n" +
                "				INTO lvwoNumber,lvopName,lvempName,lvopNumber        \n" +
                "				FROM workorder_trans  wt        \n" +
                "			WHERE wt.woTransID = @pWoTransID;		        \n" +
                "  \n" +
                "			SET @pEventTitle = CONCAT(\"Employee start activity for work order operation\");        \n" +
                "			SET @pEventDescription = CONCAT('\"',lvempName,'\" start activity for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');        \n" +
                "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			        \n" +
                "			/* [E] - Add Time line log for check-in work order operation */	        \n" +
                "  \n" +
                "			END IF;        \n" +
                "	 	END IF;        \n" +
                "	END IF;        \n" +
                "	SELECT errorText FROM error_CheckIn;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(                \n" +
                "	IN pwoID INT(11),                \n" +
                "	IN pwoOPID INT(11),  \n" +
                "	IN pwoTransID INT(11)  \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "SELECT `values` INTO @RFQInternalPrefix1 FROM systemconfigrations WHERE `key`=\"RFQInternalVersionPrefix\";                  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN                \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,             \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,             \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`partID`,                      \n" +
                "			`wocerti`.woAllStandardsWithClass ,            \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                 \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,                \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                 \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,                \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` , CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,             \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  `ca`.specialNote ,             \n" +
                "			(SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon`, salesorddet.totalpoQty, salesorddet.poQty ,                \n" +
                "   			 salesorddet.totalmrpQty, salesorddet.mrpQty, salesorddet.poNumber , salesorddet.salesOrderNumber                \n" +
                "		FROM workorder AS `wo`                 \n" +
                "		LEFT OUTER JOIN           \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''        \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END        \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass           \n" +
                "			FROM `workorder_certification` a          \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID          \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	          \n" +
                "			) AS `wocerti`          \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`            \n" +
                "		LEFT OUTER JOIN `component` AS `ca`                \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                    \n" +
                "		LEFT OUTER JOIN             \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,                \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,                \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber                \n" +
                "			FROM `workorder_salesorder_details` AS `wsd`                 \n" +
                "			INNER JOIN `salesorderdet` AS `sod`                 \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL                 \n" +
                "			INNER JOIN `salesordermst` AS `som`                 \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL                 \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet                \n" +
                "			ON salesorddet.woID = `wo`.`woID`                \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID                \n" +
                "		GROUP BY `wo`.`woID` ;                \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN                \n" +
                "		SELECT             \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,             \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,             \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`partID`,            \n" +
                "			 `wocerti`.woAllStandardsWithClass ,            \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                 \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,                \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                 \n" +
                "				AND woID = `wo`.woID AND isWatersoluble = 1) isWatersolubleOpNumbers ,               \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion,       \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,       \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent,       \n" +
                "			`woop`.colorCode,       \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`, CONCAT(@RFQInternalPrefix1, '-',IFNULL(`ca`.`liveInternalVersion`,0)) liveInternalVersion,            \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,             \n" +
                "			`ca`.`RoHSStatusID`, (SELECT rohsIcon FROM rfq_rohsmst AS `rrm` WHERE `rrm`.id = `ca`.`RoHSStatusID`) `rohsIcon` ,                \n" +
                "			 salesorddet.totalpoQty, salesorddet.poQty, salesorddet.totalmrpQty,             \n" +
                "			 salesorddet.mrpQty, salesorddet.poNumber, salesorddet.salesOrderNumber,    \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc    \n" +
                "				WHERE wc.clusterID     \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc    \n" +
                "						WHERE woc.woopid=`woop`.`woOPID` AND `woc`.`deletedAt` IS NULL)    \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = `wo`.woID    \n" +
                "			) isParellelOperation      \n" +
                "		FROM workorder AS `wo`              \n" +
                "		LEFT OUTER JOIN           \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''        \n" +
                "							ELSE (SELECT className FROM standard_class WHERE classID = a.classIDs) END        \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC ) woAllStandardsWithClass           \n" +
                "			FROM `workorder_certification` a          \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID          \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	          \n" +
                "			) AS `wocerti`		          \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`           \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`                \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID              \n" +
                "		LEFT OUTER JOIN `component` AS `ca`                \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                    \n" +
                "		LEFT OUTER JOIN             \n" +
                "			(SELECT   `wsd`.woID woID , SUM(`wsd`.`poQty`) totalpoQty, GROUP_CONCAT(`wsd`.`poQty`) poQty ,                \n" +
                "			SUM(`sod`.`mrpQty`) totalmrpQty, GROUP_CONCAT(`sod`.`mrpQty`) mrpQty ,                \n" +
                "			GROUP_CONCAT(`som`.`poNumber`) poNumber , GROUP_CONCAT(`som`.`salesOrderNumber`) salesOrderNumber                \n" +
                "  			FROM `workorder_salesorder_details` AS `wsd`                 \n" +
                "			INNER JOIN `salesorderdet` AS `sod`                 \n" +
                "			ON `wsd`.`salesOrderDetailID` = `sod`.`id` AND `sod`.`deletedAt` IS NULL                 \n" +
                "			INNER JOIN `salesordermst` AS `som`                 \n" +
                "			ON `sod`.`refSalesOrderID` = `som`.`id`  AND `som`.`deletedAt` IS NULL                 \n" +
                "			WHERE `wsd`.`deletedAt` IS NULL AND `wsd`.woID = pwoID) AS salesorddet                \n" +
                "		ON salesorddet.woID = `wo`.`woID`                \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID                \n" +
                "		GROUP BY `wo`.`woID` ;                \n" +
                "	END IF ;        \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/	      \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);      \n" +
                "	/********************************* 2.current data ****************************************************/	      \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/     \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);       \n" +
                "		/********************************** 3.current data ***************************************************/      \n" +
                "        -- END IF;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWoOPTimeConsumptionDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWoOPTimeConsumptionDet`(  \n" +
                " IN pwoOPID INT(11),  \n" +
                " IN pwoTransID INT(11)  \n" +
                "     )  \n" +
                "BEGIN   \n" +
                "SELECT woid,  \n" +
                "	opID,  \n" +
                "	woopid,   \n" +
                "	(SELECT woTrans.checkinTime FROM workorder_trans woTrans WHERE woTrans.woTransID=pwoTransID) checkinTime,  \n" +
                "	(SELECT  ProcessTime FROM workordeR_operation c WHERE c.woopid = a.woopid) EstimTotalProcTime,  \n" +
                "	SUM(TimeDiff1) productionTime,  \n" +
                "	IFNULL(SUM(pauseTime),0) pauseTime,  \n" +
                "	(SUM(TimeDiff1) - IFNULL(SUM(pauseTime),0)) TotalConsumptionTime,  \n" +
                "	SUM(ActiveEmpCnt) ActiveEmpCnt,  \n" +
                "	CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') AS currentTime  \n" +
                "	FROM (  \n" +
                "		SELECT a.woid,  \n" +
                "			a.woTransId,  \n" +
                "			b.woTransinoutID,  \n" +
                "			a.opid,  \n" +
                "			a.woopid,  \n" +
                "			b.checkinTime,  \n" +
                "			IFNULL(b.checkoutTime,CONVERT_TZ(NOW(), @@session.time_zone, '+00:00'))  checkoutTime,  \n" +
                "			TIMESTAMPDIFF(SECOND,   \n" +
                "				b.checkinTime,  \n" +
                "				IFNULL(b.checkoutTime,CONVERT_TZ(NOW(), @@session.time_zone, '+00:00'))   \n" +
                "			) TimeDiff1,  \n" +
                "			(SELECT SUM(  \n" +
                "				TIMESTAMPDIFF(SECOND,   \n" +
                "					c.pausedTime,  \n" +
                "					IFNULL(c.resumeTime,CONVERT_TZ(NOW(), @a := @@session.time_zone, '+00:00'))   \n" +
                "				)  \n" +
                "			)pauseTime   \n" +
                "			FROM workorder_trans_emp_pausedet c WHERE c.woTransinoutID = b.woTransinoutID) pauseTime,  \n" +
                "	      CASE WHEN (IFNULL(b.checkoutTime,0) = 0 AND IFNULL(b.isPaused,0) = 0)  THEN 1 ELSE 0 END ActiveEmpCnt  \n" +
                "	FROM workorder_trans a,workorder_trans_empinout b  \n" +
                "	WHERE a.woTransID = b.woTransID  \n" +
                "	AND a.woopid = pwoOPID AND   \n" +
                "	a.woTransID = IFNULL(pwoTransID,a.woTransID) AND  \n" +
                "	IFNULL(a.isDeleted,0) = 0   \n" +
                "	)a GROUP BY woid,opID,woopid;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (430,'2.00','V1','Traveler Page, Header Display and Work Order Changes - Vaibhav'," + userid + ");"
            );
            break;
        case 430:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "Alter table binmst_history Add column parentWarehouseID INT(11) after WarehouseID;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_Manage_Bin_History`;  \n" +
                "CREATE TRIGGER `Trg_Manage_Bin_History` BEFORE UPDATE ON `binmst` FOR EACH ROW BEGIN    \n" +
                "    INSERT INTO binmst_history(    \n" +
                "		Name, 			Description, 		WarehouseID, 		parentWarehouseID,  \n" +
                "		nickname,  	isActive, 			isPermanentBin, 	refBinID, 			  \n" +
                "		createdBy,    createdAt)    \n" +
                "	VALUES(    \n" +
                "		OLD.Name,		OLD.Description,	OLD.WarehouseID,		(SELECT parentWHID FROM warehousemst WHERE id =  OLD.WarehouseID),  \n" +
                "		OLD.nickname,  OLD.isActive,			OLD.isPermanentBin,		OLD.id,				  \n" +
                "		OLD.createdBy,	current_timestamp);     \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/25/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveBin_History`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin_History`(              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "    IN pBinID INT(11),   \n" +
                "    IN pClusterWHID INT(11)         \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "	SELECT  id,					Name, 									Description, 		        \n" +
                "			WarehouseID, 		cast(NULL as char(50)) wareHoueseName,	nickname,       \n" +
                "            parentWarehouseID,	CAST(NULL AS CHAR(50)) parentWarehouse,        \n" +
                "			isActive,			(CASE WHEN (isActive= 0) THEN 'Inactive' WHEN (isActive = 1) THEN 'Active' ELSE '' END) AS isActiveConvertedValue,            \n" +
                "			isPermanentBin,		(CASE WHEN (isPermanentBin = 0) THEN 'No' WHEN (isPermanentBin = 1) THEN 'Yes' ELSE '' END) AS isPermanentBinConvertedValue,        \n" +
                "            refBinID, 			createdBy, 			createdAt,			CAST(NULL AS CHAR(255)) createdByName                  \n" +
                "	FROM binmst_history;            \n" +
                "  \n" +
                "	-- Set warehouse name          \n" +
                "    UPDATE 	Results r, warehousemst w            \n" +
                "	SET 	r.wareHoueseName = w.Name        \n" +
                "	WHERE 	r.WarehouseID = w.id;       \n" +
                "  \n" +
                "    -- Set parent warehouse name          \n" +
                "    UPDATE 	Results r, warehousemst w            \n" +
                "	SET 	r.parentWarehouse = w.Name        \n" +
                "	WHERE 	r.parentWarehouseID = w.id;       \n" +
                "  \n" +
                "  \n" +
                "	-- set created by          \n" +
                "    UPDATE 	Results r, users u            \n" +
                "	SET 	r.createdByName = u.username            \n" +
                "	WHERE 	r.createdBy = u.id;           \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY Name ASC\") ;              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "    IF(pBinID IS NOT NULL) THEN          \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause, \" AND refBinID = '\", pBinID, \"'\");          \n" +
                "    END IF;         \n" +
                "  \n" +
                "    IF(pClusterWHID IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND refBinID in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND IFNULL(isdeleted,0) = 0)\");    \n" +
                "    END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	/* to get total count of rows */              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );           \n" +
                "    PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);             \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "	DROP TEMPORARY TABLE Results;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/25/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (431,'2.00','V1',' Add parent warehouse reference in bin history table and also update procedure and trigger for same - Dharmishtha '," + userid + ");"
            );
            break;
        case 431:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineItemsWithPackaging` ;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineItemsWithPackaging`(          \n" +
                "rfqAssyID INT(11),        \n" +
                "SQLString VARCHAR(16383),    \n" +
                "customerID INT(11),    \n" +
                "isPackaging TINYINT(1)        \n" +
                "	) RETURNS LONGTEXT CHARSET utf8  \n" +
                "BEGIN          \n" +
                "	DECLARE result NVARCHAR(16383);        \n" +
                "	SELECT  CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                        \n" +
                "					SELECT                                                         \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.numOfRows,rl.uomID,                                                          \n" +
                "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa, rl.refDesig,rl.consolidatedpartlineID,  \n" +
                "					CASE WHEN       \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN      \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN      \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id      \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE      \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN      \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN      \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id      \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `name`,      \n" +
                "		   CASE WHEN       \n" +
                "			(SELECT COUNT( DISTINCT(rm.partTypeName)) FROM  rfq_parttypemst rm LEFT JOIN      \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN      \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id      \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE      \n" +
                "										  (SELECT rm.partTypeName FROM  rfq_parttypemst rm LEFT JOIN      \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN      \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id      \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `partTypeName`,                                        \n" +
                "  \n" +
                "					',(SELECT fun_getCommonConsolidateLineComponent(customerID)),',                                                        \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(isPackaging)),', ',SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl     \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                                                        \n" +
                "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                                                        \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID')  INTO @result;          \n" +
                "      	SET result = @result;          \n" +
                "	RETURN result;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (432,'2.00','V1',' Update function fun_getCommonConsolidateLineItemsWithPackaging-champak '," + userid + ");"
            );
            break;
        case 432:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(	              \n" +
                "	IN ppartID INT(11)        \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "		(        \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID        \n" +
                "			FROM         \n" +
                "			(        \n" +
                "					SELECT rl.qpa, com.mountingtypeID, mt.name AS `mountingType`, rl.id, rl.partID        \n" +
                "							FROM rfq_lineitems rl        \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0    \n" +
                "                    left join component com on com.id = ra.mfgPNID  \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = rl.id and ram.isDeleted = 0 AND ram.id != ra.id        \n" +
                "                    left join component comp on comp.id = ram.mfgPNID AND comp.mountingtypeID = com.mountingtypeID  \n" +
                "					LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0        \n" +
                "					WHERE rl.partID = ppartID and rl.isDeleted = 0 AND rl.id NOT IN         \n" +
                "						(        \n" +
                "							SELECT rl.id#, ra.id, ra.mountingtypeID,ram.mountingtypeID,ram.id      \n" +
                "                            FROM rfq_lineitems_alternatepart ra     \n" +
                "                            left join component com on com.id = ra.mfgPNID  \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0        \n" +
                "							left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0       \n" +
                "							left join component comp on comp.id = ram.mfgPNID  \n" +
                "                            LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0        \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND comp.mountingtypeID != com.mountingtypeID        \n" +
                "							GROUP BY rl.id        \n" +
                "						)        \n" +
                "					GROUP BY rl.id        \n" +
                "			) a      \n" +
                "			GROUP BY mountingtypeID        \n" +
                "		) UNION         \n" +
                "		(        \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, mountingtypeID, mountingType, partID        \n" +
                "			FROM        \n" +
                "			(        \n" +
                "				SELECT rl.qpa, ra.mountingtypeID, 'Mismatched' AS `mountingType`, rl.id, rl.partID        \n" +
                "				FROM rfq_lineitems_alternatepart ra       \n" +
                "                left join component com on com.id = ra.mfgPNID  \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0        \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0    \n" +
                "                left join component comp on comp.id = ram.mfgPNID  \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.mountingtypeID AND mt.isDeleted = 0        \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND comp.mountingtypeID != com.mountingtypeID        \n" +
                "				GROUP BY rl.id        \n" +
                "			)a  having sum(ifnull(a.qpa,0)) > 0         \n" +
                "		);        \n" +
                "  \n" +
                "  \n" +
                "  (        \n" +
                "		SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, RoHSStatusID, RoHSStatus, partID        \n" +
                "			FROM         \n" +
                "			(        \n" +
                "            		SELECT rl.qpa, com.RoHSStatusID, ro.name AS `RoHSStatus`, rl.id, rl.partID        \n" +
                "					FROM rfq_lineitems rl        \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0   \n" +
                "                    join component com on com.id = ra.mfgPNID  \n" +
                "					LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.id and ram.isDeleted = 0 AND ram.id != ra.id  \n" +
                "                    left join component comp on comp.id = ram.mfgPNID AND com.RoHSStatusID = comp.RoHSStatusID   \n" +
                "                    LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0        \n" +
                "					WHERE rl.partID = ppartID   \n" +
                "                     and rl.isDeleted = 0 AND rl.id NOT IN         \n" +
                "						(        \n" +
                "							SELECT rl.id     \n" +
                "                            FROM rfq_lineitems_alternatepart ra        \n" +
                "							JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0      \n" +
                "                            left join component com on com.id = ra.mfgPNID  \n" +
                "                            left JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0   \n" +
                "                            left join component comp on comp.id = ram.mfgPNID  \n" +
                "							LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0        \n" +
                "							WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and rl.partID = ppartID and ra.isDeleted = 0 AND com.RoHSStatusID != comp.RoHSStatusID        \n" +
                "							GROUP BY rl.id        \n" +
                "						)        \n" +
                "					GROUP BY rl.id        \n" +
                "			) a        \n" +
                "			GROUP BY RoHSStatusID        \n" +
                "		) UNION         \n" +
                "		(        \n" +
                "			SELECT SUM(qpa) AS `QPA`, COUNT(id) AS `ItemCount`, RoHSStatusID, RoHSStatus, partID        \n" +
                "			FROM        \n" +
                "			(        \n" +
                "				SELECT rl.qpa, ra.RoHSStatusID, 'Mismatched' AS `RoHSStatus`, rl.id, rl.partID        \n" +
                "				FROM rfq_lineitems_alternatepart ra   \n" +
                "                left join component com on com.id = ra.mfgPNID  \n" +
                "				JOIN rfq_lineitems rl ON ra.rfqLineItemsID = rl.id AND rl.isDeleted = 0        \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart ram ON ram.rfqLineItemsID = ra.rfqLineItemsID and ram.isDeleted = 0   \n" +
                "                left join component comp on comp.id = ram.mfgPNID  \n" +
                "				LEFT JOIN rfq_mountingtypemst mt ON mt.id = ra.RoHSStatusID AND mt.isDeleted = 0        \n" +
                "				WHERE ram.rfqLineItemsID = ra.rfqLineItemsID and ra.isDeleted = 0 and rl.partID = ppartID AND comp.RoHSStatusID != com.RoHSStatusID        \n" +
                "				GROUP BY rl.id        \n" +
                "			)a  having sum(ifnull(a.qpa,0)) > 0          \n" +
                "		);        \n" +
                "	/*	SELECT sum(rl.qpa) as `QPA`, ra.RoHSStatusID, ro.name AS `RoHSStatus`, count(rl.id) as `ItemCount`, rl.partID        \n" +
                "		FROM rfq_lineitems rl        \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0        \n" +
                "		LEFT JOIN rfq_rohsmst ro ON ro.id = ra.RoHSStatusID AND ro.isDeleted = 0        \n" +
                "		WHERE rl.partID = ppartID and rl.isDeleted = 0       \n" +
                "		GROUP BY ra.RoHSStatusID;        \n" +
                "  */    \n" +
                "        select sc.className, cs.fullName as standardName,csd.* from component_standard_details csd      \n" +
                "		left join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isDeleted = 0      \n" +
                "		left join standard_class sc on sc.classID = csd.ClassID and sc.isDeleted = 0      \n" +
                "		where csd.isDeleted = 0 and csd.componentID = ppartID;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (433,'2.00','V1','Assy at glance SP changes  - shirish'," + userid + ");"
            );
            break;

        case 433:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "INSERT INTO component_packagingmst(`name`,isActive,isDeleted,createdBy)VALUES  \n" +
                "('Syringe',1,0,'1');  \n" +
                "UPDATE systemconfigrations SET `values`=3 WHERE `key`= 'DigikeyRecordCount';  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (434,'2.00','V1','Update records in packaging-champak '," + userid + ");"
            );
            break;
        case 434:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "INSERT INTO mfgcodealias(mfgcodeId,alias,isDeleted,createdBy)VALUES  \n" +
                "(-1,'DK',0,'1'),  \n" +
                "(-2,'NW',0,'1'),  \n" +
                "(-3,'MO',0,'1'),  \n" +
                "(-4,'TTI',0,'1'),  \n" +
                "(-5,'AR',0,'1'),  \n" +
                "(-6,'AV',0,'1'),  \n" +
                "(-1,'DIGIKEY',0,'1'),  \n" +
                "(-2,'NEWARK',0,'1'),  \n" +
                "(-3,'MOUSER',0,'1'),  \n" +
                "(-5,'ARROW',0,'1'),  \n" +
                "(-6,'AVNET',0,'1');  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (435,'2.00','V1','Update records in mfgcodealias-champak '," + userid + ");"
            );
            break;
        case 435:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "UPDATE rfq_lineitems_errorcode SET description='Mating part is required for <% MFG %> <% MFG PN %>.', systemVariable='<% MFG %>,<% MFG PN %>', org_description ='Mating part is required for <% MFG %> <% MFG PN %>.' WHERE logicID = 22;  \n" +
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	          \n" +
                "    	DECLARE pLiveInternalVersion INT(11);                       \n" +
                "	DECLARE pRfqAssID INT(11);               \n" +
                "	DECLARE pPartID INT(11);                      \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);                      \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);           \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);    \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                  \n" +
                "	DECLARE pCompanyName VARCHAR(100);        \n" +
                "	DECLARE pErrorNarrative TEXT;                    \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);              \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;        \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;                 \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;            \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';        \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN    \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';     \n" +
                "	ELSE     \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';     \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN    \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;    \n" +
                "		ELSE     \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;    \n" +
                "		END IF;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                      \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;                \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier\",                      \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN\",                      \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",                      \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;	                      \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",                      \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN                  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN              \n" +
                "			SET pDeleteMessage =\"MFG PN \";                 \n" +
                "		ELSE              \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);                \n" +
                "		END IF;              \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",                      \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.deletedBy);                      \n" +
                "	END IF;	                      \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN                         \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                        \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.updatedBy);                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN                       \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL                      \n" +
                "			THEN                       \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;                      \n" +
                "			ELSE                       \n" +
                "				SET oldRfqAssyBom = '';                      \n" +
                "		END IF;                      \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL                      \n" +
                "			THEN                       \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;                      \n" +
                "			ELSE                       \n" +
                "				SET newRfqAssyBom = '';                      \n" +
                "		END IF;                \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN                      \n" +
                "			SET pIsUpdateRequired = TRUE;          \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				createdAt,createdBy)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",                      \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				SYSDATE(),NEW.updatedBy);                      \n" +
                "		END IF;              \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	-- IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN              \n" +
                "	-- 	SET pIsUpdateRequired = TRUE;          \n" +
                "	-- 	INSERT INTO rfq_assembly_history                       \n" +
                "	-- 		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "	-- 		oldValue,newValue,changeVersion,                      \n" +
                "	-- 		createdAt,createdBy)                       \n" +
                "	-- 	VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                      \n" +
                "	-- 		CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "	-- 		SYSDATE(),NEW.updatedBy);                      \n" +
                "	-- END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;          \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",                      \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;           \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                    \n" +
                "				CAST(OLD.mfgCodeStep AS CHAR), CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                    \n" +
                "				CAST(OLD.mfgCodeStep AS CHAR), CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;          \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                    \n" +
                "				CAST(OLD.distVerificationStep AS CHAR), CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                    \n" +
                "				CAST(OLD.distVerificationStep AS CHAR), CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;           \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                    \n" +
                "				CAST(OLD.distCodeStep AS CHAR), CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                    \n" +
                "				CAST(OLD.distCodeStep AS CHAR), CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;           \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                    \n" +
                "				CAST(OLD.mfgDistMappingStep AS CHAR), CAST(NEW.mfgDistMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                    \n" +
                "				CAST(OLD.mfgDistMappingStep AS CHAR), CAST(NEW.mfgDistMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, -1) != IFNULL(NEW.getMFGPNStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;           \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                    \n" +
                "				CAST(OLD.getMFGPNStep AS CHAR), CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                    \n" +
                "				CAST(OLD.getMFGPNStep AS CHAR), CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;           \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                    \n" +
                "				CAST(OLD.obsoletePartStep AS CHAR), CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                    \n" +
                "				CAST(OLD.obsoletePartStep AS CHAR), CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;           \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                    \n" +
                "				CAST(OLD.mfgVerificationStep AS CHAR), CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                    \n" +
                "				CAST(OLD.mfgVerificationStep AS CHAR), CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;           \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                    \n" +
                "				CAST(OLD.mfgGoodPartMappingStep AS CHAR), CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                    \n" +
                "				CAST(OLD.mfgGoodPartMappingStep AS CHAR), CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;           \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                    \n" +
                "				CAST(OLD.mfgPNStep AS CHAR), CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                    \n" +
                "				CAST(OLD.mfgPNStep AS CHAR), CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;           \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                    \n" +
                "				CAST(OLD.distPNStep AS CHAR), CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                    \n" +
                "				CAST(OLD.distPNStep AS CHAR), CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;           \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                    \n" +
                "				CAST(OLD.distGoodPartMappingStep AS CHAR), CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                    \n" +
                "				CAST(OLD.distGoodPartMappingStep AS CHAR), CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;           \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                    \n" +
                "				CAST(OLD.nonRohsStep AS CHAR), CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                    \n" +
                "				CAST(OLD.nonRohsStep AS CHAR), CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;           \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                    \n" +
                "				CAST(OLD.epoxyStep AS CHAR), CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                    \n" +
                "				CAST(OLD.epoxyStep AS CHAR), CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.oneRohsComponentStep IS NOT NULL AND (IFNULL(OLD.oneRohsComponentStep, -1) != IFNULL(NEW.oneRohsComponentStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 19;           \n" +
                "		IF OLD.oneRohsComponentStep IS NOT NULL AND IFNULL(NEW.oneRohsComponentStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                    \n" +
                "				CAST(OLD.oneRohsComponentStep AS CHAR), CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.oneRohsComponentStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                    \n" +
                "				CAST(OLD.oneRohsComponentStep AS CHAR), CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;           \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                    \n" +
                "				CAST(OLD.invalidConnectorTypeStep AS CHAR), CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                    \n" +
                "				CAST(OLD.invalidConnectorTypeStep AS CHAR), CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;           \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                    \n" +
                "				CAST(OLD.duplicateMPNInSameLineStep AS CHAR), CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                    \n" +
                "				CAST(OLD.duplicateMPNInSameLineStep AS CHAR), CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;           \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                    \n" +
                "				CAST(OLD.mismatchMountingTypeStep AS CHAR), CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                    \n" +
                "				CAST(OLD.mismatchMountingTypeStep AS CHAR), CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;           \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                    \n" +
                "				CAST(OLD.mismatchFunctionalCategoryStep AS CHAR), CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                    \n" +
                "				CAST(OLD.mismatchFunctionalCategoryStep AS CHAR), CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;                 	    \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;           \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                    \n" +
                "				CAST(OLD.restrictUseWithPermissionStep AS CHAR), CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                    \n" +
                "				CAST(OLD.restrictUseWithPermissionStep AS CHAR), CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;           \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                    \n" +
                "				CAST(OLD.restrictUsePermanentlyStep AS CHAR), CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                    \n" +
                "				CAST(OLD.restrictUsePermanentlyStep AS CHAR), CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;           \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                    \n" +
                "				CAST(OLD.pickupPadRequiredStep AS CHAR), CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                    \n" +
                "				CAST(OLD.pickupPadRequiredStep AS CHAR), CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;           \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                    \n" +
                "				CAST(OLD.matingPartRquiredStep AS CHAR), CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                    \n" +
                "				CAST(OLD.matingPartRquiredStep AS CHAR), CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;     \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;           \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                    \n" +
                "				CAST(OLD.functionalTestingRequiredStep AS CHAR), CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                    \n" +
                "				CAST(OLD.functionalTestingRequiredStep AS CHAR), CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF; 	    \n" +
                "	IF NEW.militaryStandardRoHSStep IS NOT NULL AND (IFNULL(OLD.militaryStandardRoHSStep, -1) != IFNULL(NEW.militaryStandardRoHSStep, -1)) THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;           \n" +
                "		IF OLD.militaryStandardRoHSStep IS NOT NULL AND IFNULL(NEW.militaryStandardRoHSStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                    \n" +
                "				CAST(OLD.militaryStandardRoHSStep AS CHAR), CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		ELSEIF IFNULL(NEW.militaryStandardRoHSStep, 0) = 0 THEN    \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                    \n" +
                "				CAST(OLD.militaryStandardRoHSStep AS CHAR), CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                    \n" +
                "				CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),SYSDATE(),NEW.updatedBy);                    \n" +
                "		ELSE    \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;      \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  \"Customer Approval\",                    \n" +
                "				CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),SYSDATE(),NEW.updatedBy);                    \n" +
                "		END IF;    \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN          \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);          \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                      \n" +
                "	DECLARE pIsUpdateRequired BOOL;            \n" +
                "	DECLARE pLiveInternalVersion INT(11);                 \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);                      \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);                      \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                      \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                      \n" +
                "	DECLARE oldUOM VARCHAR(50);                      \n" +
                "	DECLARE newUOM VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                         \n" +
                "	DECLARE pCompanyName VARCHAR(100);      \n" +
                "	DECLARE pErrorNarrative TEXT;                    \n" +
                "	DECLARE pRfqAssID INT(11);                   \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;            \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;        \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;             \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';          \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';       \n" +
                "	ELSE       \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';       \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE       \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                    \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",                      \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;	                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN                  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",                      \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",                      \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN                  \n" +
                "		SET pIsUpdateRequired = TRUE;                 \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",                      \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN               \n" +
                "		SET pIsUpdateRequired = TRUE;                    \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",                      \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN                \n" +
                "		SET pIsUpdateRequired = TRUE;                   \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Install\",                      \n" +
                "			CAST(OLD.isInstall AS CHAR), CAST(NEW.isInstall AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN                    \n" +
                "		SET pIsUpdateRequired = TRUE;               \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Buy\",                      \n" +
                "			CAST(OLD.isPurchase AS CHAR), CAST(NEW.isPurchase AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN                 \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",                      \n" +
                "			CAST(OLD.isActive AS CHAR), CAST(NEW.isActive AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN                  \n" +
                "		SET pIsUpdateRequired = TRUE;                 \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",                      \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN                  \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",                      \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",                      \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN                       \n" +
                "		IF OLD.partclassID != 0                      \n" +
                "			THEN                       \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;                      \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;                      \n" +
                "			ELSE                       \n" +
                "				SET oldPartTypeName = '';                      \n" +
                "				SET oldMountingTypeName = '';                      \n" +
                "		END IF;                      \n" +
                "		IF NEW.partclassID != 0                      \n" +
                "			THEN                       \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                      \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                      \n" +
                "			ELSE                       \n" +
                "				SET newPartTypeName = '';                      \n" +
                "				SET newMountingTypeName = '';                      \n" +
                "		END IF;                      \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",                      \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),                      \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),                      \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",                      \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead\",                      \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;		            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",                      \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",                      \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN                       \n" +
                "		IF OLD.uomID IS NOT NULL                      \n" +
                "			THEN                       \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;                      \n" +
                "			ELSE                       \n" +
                "				SET oldUOM = '';                      \n" +
                "		END IF;                      \n" +
                "		IF NEW.uomID IS NOT NULL                      \n" +
                "			THEN                       \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                      \n" +
                "			ELSE                       \n" +
                "				SET newUOM = '';                      \n" +
                "		END IF;                      \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",                      \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",                      \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",                      \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN                       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "			oldValue,newValue,changeVersion,                      \n" +
                "			createdAt,createdBy)                       \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",                      \n" +
                "			CAST(OLD.isBuyDNPQty AS CHAR), CAST(NEW.isBuyDNPQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "			SYSDATE(),NEW.updatedBy);                      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 1;             \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                      \n" +
                "				CAST(OLD.qpaDesignatorStep AS CHAR), CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA Vs Designator\",                      \n" +
                "				CAST(OLD.qpaDesignatorStep AS CHAR), CAST(NEW.qpaDesignatorStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, -1) != IFNULL(NEW.duplicateCPNStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;             \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                      \n" +
                "				CAST(OLD.duplicateCPNStep AS CHAR), CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Duplicate CPN\",                      \n" +
                "				CAST(OLD.duplicateCPNStep AS CHAR), CAST(NEW.duplicateCPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, -1) != IFNULL(NEW.requireMountingTypeStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;             \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                      \n" +
                "				CAST(OLD.requireMountingTypeStep AS CHAR), CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Mounting Type\",                      \n" +
                "				CAST(OLD.requireMountingTypeStep AS CHAR), CAST(NEW.requireMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, -1) != IFNULL(NEW.requireFunctionalTypeStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;             \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                      \n" +
                "				CAST(OLD.requireFunctionalTypeStep AS CHAR), CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN      \n" +
                " 			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Require Functional Type\",                      \n" +
                "				CAST(OLD.requireFunctionalTypeStep AS CHAR), CAST(NEW.requireFunctionalTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;               \n" +
                "  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN            \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);            \n" +
                "	END IF;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAllParentPartInternalVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAllParentPartInternalVersion`(    \n" +
                "    IN pPartId INT(11),     \n" +
                "    IN pTableName VARCHAR(50),    \n" +
                "    IN pUpdatedBy VARCHAR(255)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE lastAssemblyHistoryId INT(11);    \n" +
                "	DECLARE subAssyType INT(11);    \n" +
                "	DECLARE parentPartsCount INT;    \n" +
                "	DECLARE currentPartId INT(11);    \n" +
                "	DECLARE parentPartId INT(11);    \n" +
                "	DECLARE description VARCHAR(200);    \n" +
                "	DECLARE parentPartLiveInternalVersion INT(11);    \n" +
                "	DECLARE parentMfgPN VARCHAR(100);    \n" +
                "	DECLARE parentLineItemId INT(11);    \n" +
                "	DECLARE currentPartLiveInternalVersion INT(11);    \n" +
                "	DECLARE pCompanyName VARCHAR(100);    \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);   \n" +
                "  \n" +
                "	SET  subAssyType = 3;    \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';   \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';          \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';       \n" +
                "	ELSE       \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';       \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE       \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;	             \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TempAllParentParts AS          \n" +
                "  \n" +
                "	WITH RECURSIVE cte AS    \n" +
                "	(    \n" +
                "	  SELECT  0 AS rfqlineItemId, c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion    \n" +
                "	  FROM component c     \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL    \n" +
                "  \n" +
                "	  UNION ALL    \n" +
                "	  SELECT rlp.id AS rfqlineItemId, rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion    \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child     \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType    \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL    \n" +
                "	)    \n" +
                "	SELECT  rfqlineItemId, partId, childPartId, liveinternalversion FROM cte;    \n" +
                "all_parent_part_loop: LOOP    \n" +
                "	SELECT COUNT(1) INTO parentPartsCount FROM TempAllParentParts;    \n" +
                "	IF parentPartsCount = 0 THEN                  \n" +
                "		LEAVE all_parent_part_loop;                \n" +
                "	END IF;       \n" +
                "  \n" +
                "	SELECT rfqlineItemId, partId, childPartId, liveInternalVersion INTO parentLineItemId, parentPartId, currentPartId, parentPartLiveInternalVersion  FROM TempAllParentParts LIMIT 1;    \n" +
                "  \n" +
                "	IF currentPartId = parentPartId AND currentPartId = pPartId THEN    \n" +
                "		DELETE FROM TempAllParentParts LIMIT 1;    \n" +
                "		ITERATE  all_parent_part_loop;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SELECT id INTO lastAssemblyHistoryId FROM rfq_assembly_history WHERE partId = currentPartId ORDER BY id DESC LIMIT 1;    \n" +
                "  \n" +
                "	SET description = CONCAT(pCompanyName,'-',CAST((parentPartLiveInternalVersion-1) AS CHAR), ' to change ', pCompanyName,'-',CAST(parentPartLiveInternalVersion AS CHAR));    \n" +
                "  \n" +
                "	SELECT mfgPN, liveinternalversion  INTO parentMfgPN, currentPartLiveInternalVersion FROM component WHERE id = currentPartId;    \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history               \n" +
                "	 (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,              \n" +
                "	 oldValue,newValue,changeVersion, description, refInternalHistoryID,    \n" +
                "	 createdAt, createdBy)               \n" +
                "	VALUES 	(pTableName, parentLineItemId, parentLineItemId, NULL, parentPartId, \"MFG PN\",              \n" +
                "	 CAST(parentMfgPN AS CHAR), CAST(parentMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(currentPartLiveInternalVersion AS CHAR)), description, lastAssemblyHistoryId,    \n" +
                "	 SYSDATE(),pUpdatedBy);    \n" +
                "	 DELETE FROM TempAllParentParts LIMIT 1;    \n" +
                "  \n" +
                "	END LOOP all_parent_part_loop;    \n" +
                "	DROP TEMPORARY TABLE TempAllParentParts;	    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdatePartInternalVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePartInternalVersion`(    \n" +
                "    IN pPartId INT(11)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE subAssyType INT(11);    \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);   \n" +
                "	DECLARE pCompanyName VARCHAR(100);   \n" +
                "  \n" +
                "	SET  subAssyType = 3;    \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';          \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';       \n" +
                "	ELSE       \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';       \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE       \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;	             \n" +
                "  \n" +
                "	UPDATE component    \n" +
                "	SET liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) , liveVersion = CONCAT(pCompanyName,'-',CAST(liveinternalversion AS CHAR))   \n" +
                "	WHERE id IN(    \n" +
                "	WITH RECURSIVE cte AS    \n" +
                "	(    \n" +
                "	  SELECT  c.Id AS partId, c.id AS childPartId, c.liveinternalversion AS liveinternalversion    \n" +
                "	  FROM component c     \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL    \n" +
                "  \n" +
                "	  UNION ALL    \n" +
                "	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion    \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, component cp , cte child     \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType    \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL    \n" +
                "	)    \n" +
                "	SELECT DISTINCT partId FROM cte);    \n" +
                "    END;  \n" +
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMProgress`(                                \n" +
                "	IN pPartID INT(11)                           \n" +
                "	)  \n" +
                "BEGIN                                    \n" +
                "	DECLARE pValidCount INT(11);                                \n" +
                "	DECLARE pInValidCount INT(11);                                \n" +
                "	DECLARE pTotalCount INT(11);                            \n" +
                "	DECLARE pProgress INT(11);                                \n" +
                "	SET pProgress = 0;                          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                      \n" +
                "	SELECT  p.id,                           \n" +
                "	CASE                           \n" +
                "		WHEN                           \n" +
                "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                           \n" +
                "			-- IFNULL(l.miscStep,0) = 1 AND                      \n" +
                "			IFNULL(l.duplicateCPNStep,0) = 1 AND                     \n" +
                "			IFNULL(l.requireFunctionalTypeStep,0) = 1 AND                     \n" +
                "			IFNULL(l.requireMountingTypeStep,0) = 1 AND                     \n" +
                "			IFNULL(p.mfgVerificationStep,0) = 1 AND                           \n" +
                "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                           \n" +
                "			IFNULL(p.mfgCodeStep,0) = 1 AND                           \n" +
                "			IFNULL(p.distVerificationStep,0) = 1 AND                           \n" +
                "			IFNULL(p.distCodeStep,0) = 1 AND                           \n" +
                "			-- IFNULL(p.getMFGPNStep,0) = 1 AND                           \n" +
                "			IFNULL(p.obsoletePartStep,1) = 1 AND                           \n" +
                "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                           \n" +
                "			IFNULL(p.mfgPNStep,0) = 1 AND                           \n" +
                "			IFNULL(p.distPNStep,0) = 1 AND                           \n" +
                "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                           \n" +
                "			IFNULL(p.nonRohsStep,0) = 1 AND                          \n" +
                "			IFNULL(p.epoxyStep,0) = 1  AND                    \n" +
                "			IFNULL(p.oneRohsComponentStep,0) = 1   AND                \n" +
                "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND                \n" +
                "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND                \n" +
                "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND                  \n" +
                "			IFNULL(p.invalidConnectorTypeStep,0) = 1   AND              \n" +
                "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND                  \n" +
                "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND            \n" +
                "			IFNULL(p.pickupPadRequiredStep,0) = 1   AND       \n" +
                "			IFNULL(p.matingPartRquiredStep,0) = 1    AND       \n" +
                "			-- IFNULL(p.driverToolsRequiredStep,0) = 1   AND       \n" +
                "			IFNULL(p.functionalTestingRequiredStep,0) = 1    AND    \n" +
                "			IFNULL(p.militaryStandardRoHSStep,0) = 1        \n" +
                "		THEN 1                          \n" +
                "		ELSE 0                          \n" +
                "	END AS ProgressCount                          \n" +
                "	FROM rfq_lineitems l                          \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                          \n" +
                "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                          \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM Results;                          \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                          \n" +
                "  \n" +
                "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;         \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                          \n" +
                "		SET pProgress = 0;                          \n" +
                "	ELSE                           \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	SELECT pProgress;                            \n" +
                "	DROP TEMPORARY TABLE Results;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (436,'2.00','V1',' Manage History changes  - Jignesh K '," + userid + ");"
            );
            break;
        case 436:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(                      \n" +
                "	IN rfqAssyID INT(11),    \n" +
                "	IN customerID INT(11)    \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,    \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,    \n" +
                "	   (SELECT (MAX(LEVEL)+1) FROM part_sub_assy_relationship psar WHERE psar.partID =ra.partID AND psar.isdeleted=0) AS assyLevel,    \n" +
                "	   (SELECT COUNT(*) FROM rfq_assemblies rfqs WHERE rfqs.rfqrefID =ra.rfqrefID AND rfqs.isdeleted=0) AS assyCount,     \n" +
                "	   c.liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,    \n" +
                "	   (SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID=ra.id) AS totalQuoteCount,    \n" +
                "	   (SELECT rasp.quoteNumber FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS quoteNumber,    \n" +
                "	   (SELECT rasp.bomLastVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS bomLastVersion,    \n" +
                "	   (SELECT rasp.quoteSubmitDate FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS quoteSubmitDate,    \n" +
                "	   (SELECT rasp.bomInternalVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS bomInternalVersion,    \n" +
                "	   (SELECT CONCAT('(',mm.mfgCode,')',mm.mfgName) FROM mfgcodemst mm WHERE mm.id=customerID) AS customerName,    \n" +
                "	   (SELECT GROUP_CONCAT(CONCAT(IFNULL(css.className,''),' ',cs.fullName))  FROM component_standard_details csd LEFT JOIN certificate_standards cs    \n" +
                "ON csd.certificatestandardID=cs.certificatestandardid LEFT JOIN standard_class css ON     \n" +
                "csd.classID=css.classID WHERE csd.componentid=ra.partID) AS standards    \n" +
                "	   FROM rfq_assemblies ra  LEFT JOIN component c    \n" +
                "	   ON c.id=ra.partID LEFT JOIN rfq_assy_typemst rat     \n" +
                "          ON rat.id=ra.assemblyTypeID LEFT JOIN rfq_rohsmst rh    \n" +
                "          ON rh.id=c.RoHSStatusID    \n" +
                "  \n" +
                "           WHERE ra.id= rfqAssyID AND ra.isdeleted=0;                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (437,'2.00','V1','BOm header data SP changes  - shirish'," + userid + ");"
            );
            break;
        case 437:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "UPDATE component a SET a.liveVersion = (SELECT b.changeVersion FROM rfq_assembly_history b WHERE b.partID = a.id ORDER BY b.createdAt DESC LIMIT 1);  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (438,'2.00','V1',' Update live Version of component- Jignesh K '," + userid + ");"
            );
            break;
        case 438:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/26/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveWarehouse`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWarehouse`(            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "		SELECT `warehousemst`.*,  CAST(NULL AS CHAR(50)) parentWarehouseName,          \n" +
                "			(CASE     \n" +
                "				WHEN (`warehousemst`.`isActive` = 0) THEN 'Inactive'             \n" +
                "				WHEN (`warehousemst`.`isActive` = 1) THEN 'Active'     \n" +
                "				ELSE ''     \n" +
                "			END) AS `isActiveConvertedValue`,        \n" +
                "			(CASE     \n" +
                "				WHEN (`isPermanentWH` = 0) THEN 'No'         \n" +
                "				WHEN (`isPermanentWH` = 1) THEN 'Yes'     \n" +
                "				ELSE ''     \n" +
                "			END) AS `parentConvertedValue`,    \n" +
                "			(CASE     \n" +
                "				WHEN (`allMovableBin` = 0) THEN 'No'         \n" +
                "				WHEN (`allMovableBin` = 1) THEN 'Yes'     \n" +
                "				ELSE ''     \n" +
                "			END) AS `allMovableBinConvertValue`     \n" +
                "		FROM `warehousemst` AS `warehousemst`            \n" +
                "		WHERE `deletedAt` IS NULL;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY isDepartment desc, \" , \"Name ASC\") ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY  isDepartment desc, \" , pOrderBy) ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	UPDATE Results r, warehousemst w        \n" +
                "	SET r.parentWarehouseName = w.name        \n" +
                "	WHERE r.parentWHID = w.id;        \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 03/26/2019   *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(      \n" +
                "	pComponentID int(11)     \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS          \n" +
                "	SELECT 	id,		receiveMaterialType, 		pkgQty        \n" +
                "    FROM 	component_sid_stock       \n" +
                "    WHERE 	refcompid = pComponentID       \n" +
                "    AND 	IFNULL(isDeleted,0) = 0;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock    \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)       \n" +
                "    AND 	STATUS != 'R';   \n" +
                "  \n" +
                "    SELECT 	IFNULL(SUM(pkgQty), 0) INTO @allocatedReservedStock   \n" +
                "    FROM 	tempStockRawDet   \n" +
                "    where 	receiveMaterialType = 'Reserve Stock'  \n" +
                "    AND		id  in (SELECT refUIDId FROM kit_allocation       \n" +
                "    WHERE 	STATUS != 'R') ;  \n" +
                "  \n" +
                "    SET @reservedPhysicalStock = @totalReservedStock - @allocatedReservedStock ;      \n" +
                "    SET @availableStock = (@totalStockInSystemRecord - @reservedPhysicalStock - @allocatedToKitStock);      \n" +
                "  \n" +
                "  \n" +
                "    -- Calculate Cumulative Stock      \n" +
                "	SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id = pComponentID;      \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS          \n" +
                "	SELECT 	c.id,		c.refcompid,	c.receiveMaterialType, 		c.pkgQty        \n" +
                "    FROM 	component_sid_stock c, component_packagingalias cp      \n" +
                "    WHERE 	c.refcompid = cp.componentID      \n" +
                "    AND 	IFNULL(c.isDeleted,0) = 0      \n" +
                "    AND		cp.componentID != pComponentID      \n" +
                "    AND		cp.aliasgroupID = @packaginggroupID      \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalPackagingStockInSystemRecord FROM tempPackagingAliasStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalPackagingReservedStock FROM tempPackagingAliasStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedPackagingStockToKitStock       \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempPackagingAliasStockRawDet)       \n" +
                "    AND 	STATUS != 'R';      \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO @allocatedReservedPackagingStock   \n" +
                "    FROM 	tempPackagingAliasStockRawDet   \n" +
                "    where 	receiveMaterialType = 'Reserve Stock'   \n" +
                "    AND		id  in (SELECT refUIDId FROM kit_allocation       \n" +
                "    WHERE 	STATUS != 'R') ;  \n" +
                "  \n" +
                "    SET @reservedPackagingPhysicalStock = @totalPackagingReservedStock - @allocatedReservedPackagingStock;      \n" +
                "    SET @packagingAliasStock = (@totalPackagingStockInSystemRecord - @reservedPackagingPhysicalStock - @allocatedPackagingStockToKitStock);      \n" +
                "    -- End Calculate Cumulative Stock      \n" +
                "  \n" +
                "	SET @totalInHouseStock = @availableStock + @packagingAliasStock ;      \n" +
                "  \n" +
                "    SELECT IFNULL(saftyStock,0) INTO @safetyStock FROM component WHERE id = pComponentID;   \n" +
                "  \n" +
                "    SET @shortage = @safetyStock - @availableStock;  \n" +
                "  \n" +
                "    SELECT 	@availableStock availableStock,  				0 reservedStock,      \n" +
                "			@reservedPhysicalStock reservedPhysicalStock,	@allocatedToKitStock allocatedStock,  \n" +
                "			@packagingAliasStock packagingAliasStock, 		@totalInHouseStock totalInHouseStock,      \n" +
                "			@safetyStock safetyStock,						@shortage shortage;      \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockRawDet;      \n" +
                "    DROP TEMPORARY TABLE  tempPackagingAliasStockRawDet;      \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 03/26/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (439,'2.00','V1',' Modified procedure for stock status and warehouse list - Dharmishtha '," + userid + ");"
            );
            break;
        case 439:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/26/2019   *********************************** */

                "DROP procedure IF EXISTS `Sproc_GetStockStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(      \n" +
                "	pComponentID int(11)     \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS          \n" +
                "	SELECT 	id,		receiveMaterialType, 		pkgQty        \n" +
                "    FROM 	component_sid_stock       \n" +
                "    WHERE 	refcompid = pComponentID       \n" +
                "    AND 	IFNULL(isDeleted,0) = 0;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalStockInSystemRecord FROM tempStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalReservedStock FROM tempStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedToKitStock    \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)       \n" +
                "    AND 	STATUS != 'R';   \n" +
                "  \n" +
                "    SELECT 	IFNULL(SUM(pkgQty), 0) INTO @allocatedReservedStock   \n" +
                "    FROM 	tempStockRawDet   \n" +
                "    where 	receiveMaterialType = 'Reserve Stock'  \n" +
                "    AND		id  in (SELECT refUIDId FROM kit_allocation       \n" +
                "    WHERE 	STATUS != 'R') ;  \n" +
                "  \n" +
                "    SET @reservedPhysicalStock = @totalReservedStock - @allocatedReservedStock ;      \n" +
                "    SET @availableStock = (@totalStockInSystemRecord - @reservedPhysicalStock - @allocatedToKitStock);      \n" +
                "  \n" +
                "  \n" +
                "    -- Calculate Cumulative Stock      \n" +
                "	SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id = pComponentID;      \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS          \n" +
                "	SELECT 	c.id,		c.refcompid,	c.receiveMaterialType, 		c.pkgQty        \n" +
                "    FROM 	component_sid_stock c, component_packagingalias cp      \n" +
                "    WHERE 	c.refcompid = cp.componentID      \n" +
                "    AND 	IFNULL(c.isDeleted,0) = 0      \n" +
                "    AND		cp.componentID != pComponentID      \n" +
                "    AND		cp.aliasgroupID = @packaginggroupID      \n" +
                "    AND 	IFNULL(cp.isDeleted,0) = 0;      \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO @totalPackagingStockInSystemRecord FROM tempPackagingAliasStockRawDet;      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(pkgQty), 0) INTO @totalPackagingReservedStock FROM tempPackagingAliasStockRawDet where receiveMaterialType = 'Reserve Stock';      \n" +
                "  \n" +
                "    SELECT IFNULL(SUM(allocatedQty), 0) INTO @allocatedPackagingStockToKitStock       \n" +
                "    FROM 	kit_allocation       \n" +
                "    WHERE 	refUIDId IN (SELECT id FROM tempPackagingAliasStockRawDet)       \n" +
                "    AND 	STATUS != 'R';      \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO @allocatedReservedPackagingStock   \n" +
                "    FROM 	tempPackagingAliasStockRawDet   \n" +
                "    where 	receiveMaterialType = 'Reserve Stock'   \n" +
                "    AND		id  in (SELECT refUIDId FROM kit_allocation       \n" +
                "    WHERE 	STATUS != 'R') ;  \n" +
                "  \n" +
                "    SET @reservedPackagingPhysicalStock = @totalPackagingReservedStock - @allocatedReservedPackagingStock;      \n" +
                "    SET @packagingAliasStock = (@totalPackagingStockInSystemRecord - @reservedPackagingPhysicalStock - @allocatedPackagingStockToKitStock);      \n" +
                "    -- End Calculate Cumulative Stock      \n" +
                "  \n" +
                "	SET @totalInHouseStock = @availableStock + @packagingAliasStock ;      \n" +
                "  \n" +
                "    SELECT IFNULL(saftyStock,0) INTO @safetyStock FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "    SET @reservedLogicalStock = 0;  \n" +
                "    SET @shortage = @availableStock - ( @safetyStock + @reservedLogicalStock) ;  \n" +
                "  \n" +
                "    SELECT 	@availableStock availableStock,  				@reservedLogicalStock reservedLogicalStock,      \n" +
                "			@reservedPhysicalStock reservedPhysicalStock,	@allocatedToKitStock allocatedStock,  \n" +
                "			@packagingAliasStock packagingAliasStock, 		@totalInHouseStock totalInHouseStock,      \n" +
                "			@safetyStock safetyStock,						@shortage shortage;      \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE tempStockRawDet;      \n" +
                "    DROP TEMPORARY TABLE  tempPackagingAliasStockRawDet;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/26/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (440,'2.00','V1',' Modified procedure to change in safety stock calculation for stock status- Dharmishtha '," + userid + ");"
            );
            break;
        case 440:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/26/2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                    \n" +
                "    IN puserID VARCHAR(50),                              \n" +
                "    IN pnickName VARCHAR(20),                              \n" +
                "    IN pprefix VARCHAR(20),                              \n" +
                "    IN puid VARCHAR(20),                          \n" +
                "    IN pComponentID INT,                      \n" +
                "    IN pCustomerID INT,                      \n" +
                "    IN pCPN BOOL,                      \n" +
                "    IN pMFGAvailabel BOOL,                      \n" +
                "    IN pRefCpnMfgID INT,                  \n" +
                "    IN pAssyID INT,                  \n" +
                "    IN pSalesOrderDetailID INT,		                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),        \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT 	                 \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                    \n" +
                "	DECLARE v_length INT;                                     \n" +
                "	DECLARE v_fieldType INT;                                         \n" +
                "	DECLARE v_entityId INT;                                    \n" +
                "	DECLARE v_dataElementId INT;                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                    \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);		              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                    \n" +
                "	DECLARE plen,slen INT;                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                \n" +
                "	DECLARE barcode_type_id INT;                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';      \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);    \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                    \n" +
                "	(                                    \n" +
                "	     errorText NVARCHAR(2000),                                    \n" +
                "	     IsSuccess VARCHAR (2),                          \n" +
                "	     MFGPart VARCHAR(100)                                         \n" +
                "	);                         \n" +
                "	-- get data from barcode templates with seprator                                    \n" +
                "	block1: BEGIN  \n" +
                "  \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			SELECT COUNT(*) INTO v_barcode_count FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);     \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN  \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "			ELSE  \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);   \n" +
                "				SET pBarcodeID = v_barcode_id;  \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID;  \n" +
                "		END IF;  \n" +
                "		IF (barcode_type_id IS NULL) THEN      \n" +
                "			SELECT COUNT(*) INTO v_NumberOfPart FROM             \n" +
                "			(            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL            \n" +
                "				UNION            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "			) a;  \n" +
                "			IF (v_NumberOfPart > 0) THEN	  \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);    \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND   \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "				SET pBarcodeID = v_barcode_id;  \n" +
                "			END IF;      \n" +
                "		END IF;   \n" +
                "  \n" +
                "		-- tempregexp;    	            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */    \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';                          \n" +
                "		ELSE /* barcode 1D */       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;          \n" +
                "			SET v_BarcodeType = '1D';                       \n" +
                "		END IF;  \n" +
                "	END block1;                                    \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                    \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                    \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                 \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                             \n" +
                "			-- declare exit loop if data not found                                    \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "			-- if any record match found than  check for delimiter and its value                               \n" +
                "  \n" +
                "			IF (pbr_template_ID > 0) THEN                                    \n" +
                "				-- create temporary table for deliemeter and component dataelement                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                    \n" +
                "					pentityId INT,                                    \n" +
                "					pdataElementId INT,                                    \n" +
                "					pdelimiter_value VARCHAR(200)                                    \n" +
                "				);                               \n" +
                "  \n" +
                "				-- create temporary table for separator string values                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                    \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                          \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                    \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                         \n" +
                "  \n" +
                "				-- open cursor                                    \n" +
                "				OPEN barcodeMatch_cursor;                                    \n" +
                "  \n" +
                "				-- set str label as whereclause                                    \n" +
                "				SET strLabel=pWhereClause;                             \n" +
                "  \n" +
                "				-- if prefix is found than remove those from actual string match                                    \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                    \n" +
                "					 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                    \n" +
                "				 END IF;                                   \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                     \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                    \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                    \n" +
                "				 END IF;	                          \n" +
                "  \n" +
                "				-- insert all values after seprator split                                     \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                    \n" +
                "				PREPARE stmt1 FROM @SQL;	                                    \n" +
                "				EXECUTE stmt1;                                    \n" +
                "  \n" +
                "				-- create dynamic query to insert in recieving material                                    \n" +
                "				SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                    \n" +
                "				barcodeMatch_loop:LOOP                 \n" +
                "					-- get all five selected values                                    \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                            \n" +
                "  \n" +
                "					-- exit loop if no record found for barcode match                                    \n" +
                "					IF exit_loop THEN                               \n" +
                "						CLOSE barcodeMatch_cursor;                                    \n" +
                "						LEAVE barcodeMatch_loop;                                    \n" +
                "					END IF;                               \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                    \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                    \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                    \n" +
                "					EXECUTE stmtdelimiter;                          \n" +
                "  \n" +
                "					-- get delimiter values from string                                    \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                            \n" +
                "					-- check for field type is static or dynamic                                    \n" +
                "					-- if static field than check for mfg code and mfg part number                                    \n" +
                "					IF v_fieldType = 0  THEN                                \n" +
                "						-- component_sid_stock                                     \n" +
                "						-- get static field name from barcode table delimiter data element id                                    \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                      \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                    \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                          \n" +
                "							SET MFG_Part_No = delimiter_value_data;                          \n" +
                "  \n" +
                "							IF(pComponentID=0)THEN               \n" +
                "								SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM             \n" +
                "								(            \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL            \n" +
                "									UNION            \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "									WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "								) a;            \n" +
                "							ELSE                          \n" +
                "								SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                          \n" +
                "							END IF;                          \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN      \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';      \n" +
                "								CLOSE barcodeMatch_cursor;                                    \n" +
                "								LEAVE barcodeMatch_loop;        \n" +
                "							END IF;      \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;      \n" +
                "							IF (@MFGType = 'DIST') THEN      \n" +
                "								SET v_SupplierID = @componentId;      \n" +
                "								SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;      \n" +
                "							END IF;    \n" +
                "  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN    \n" +
                "								SELECT DISTINCT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId LIMIT 1;				        \n" +
                "								IF (@rfqLineItemsID IS NULL) THEN        \n" +
                "									CLOSE barcodeMatch_cursor;                                    \n" +
                "									LEAVE barcodeMatch_loop;        \n" +
                "								END IF;        \n" +
                "							END IF;        \n" +
                "  \n" +
                "							IF  @componentCount = 1 THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                    \n" +
                "							END IF;              \n" +
                "						END IF;                                    \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                    \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                            \n" +
                "							SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                    \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;                    \n" +
                "						IF @componentCount > 1 THEN                          \n" +
                "							CLOSE barcodeMatch_cursor;                                    \n" +
                "							LEAVE barcodeMatch_loop;                          \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                    \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                     \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                    \n" +
                "  \n" +
                "					ELSE                \n" +
                "						-- component_sid_stock_dataelement_Values                                      \n" +
                "						-- dynamic fields                   \n" +
                "						SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);               \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;              \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                     \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                 \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                     \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                             \n" +
                "					END IF;                                    \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                    \n" +
                "				-- check if mfg and component both found than         \n" +
                "				IF (BarcodeMFGMatch = 'Mismatch') THEN    \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN  \n" +
                "					-- if (v_BarcodeType = 1) then  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);        \n" +
                "					-- else  \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);        \n" +
                "					-- end if;  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not containt in this assembly bom',7,MFG_Part_No);        \n" +
                "				ELSEIF (@componentCount > 1) THEN                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                    \n" +
                "				ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                    \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                    \n" +
                "					   IF @Mfgmatched = 0  THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                    \n" +
                "					   END IF;									                                    \n" +
                "				 ELSE 		                          \n" +
                "					IF @mfgCount = 0 THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                    \n" +
                "					END IF;	                                    \n" +
                "					IF @componentCount = 0 THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                    \n" +
                "					END IF;	                                    \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND @componentCount=0  THEN                                      \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                    \n" +
                "					END IF;						                                    \n" +
                "				END IF;				                                    \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                      \n" +
                "					SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                      \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                      \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                    \n" +
                "					END IF;                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                    \n" +
                "  \n" +
                "					IF (pprefix = '') THEN	                      \n" +
                "						CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                      \n" +
                "						SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                      \n" +
                "					END IF;                   \n" +
                "  \n" +
                "					-- must call statements in sequence          				                          \n" +
                "					SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                    \n" +
                "					PREPARE stmt1 FROM @SQL1;                                    \n" +
                "					EXECUTE stmt1;                                  \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                      \n" +
                "  \n" +
                "					IF (pnickName IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                      \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                      \n" +
                "  \n" +
                "					IF (pRefCpnMfgID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                      \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF (pCustomerID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                      \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF (pAssyID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                      \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					IF (pSalesOrderDetailID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                      \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					IF (pReceiveMaterialType IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                   \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF (v_SupplierID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                      \n" +
                "					END IF;         \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                      \n" +
                "					SET @sql2 = UpdateValue;	                                     \n" +
                "					PREPARE stmt2 FROM @SQL2;                                    \n" +
                "					EXECUTE stmt2;	                                    \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                    \n" +
                "					IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                          \n" +
                "						INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                     \n" +
                "						SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                    \n" +
                "					END IF;                                      \n" +
                "  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "				ELSE                                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "			ELSE                                \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                      \n" +
                "			END IF;                                    \n" +
                "  \n" +
                "		END block2;   \n" +
                "	END IF;                                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03/26/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (441,'2.00','V1',' Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 441:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "ALTER TABLE `component`   \n" +
                "ADD COLUMN `packagingID` INT(11) NULL,  \n" +
                "ADD INDEX `FK_component_packagingID_idx` (`packagingID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `component`   \n" +
                "ADD CONSTRAINT `FK_component_packagingID`  \n" +
                "  FOREIGN KEY (`packagingID`)  \n" +
                "  REFERENCES `component_packagingmst` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (442,'2.00','V1','Added packagingID field in component table - Ashish'," + userid + ");"
            );
            break;
        case 442:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                      \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN pPartID INT,    \n" +
                "	IN pPackaging TINYINT(1)                               \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                    \n" +
                "			SELECT concat(group_concat(ra.description),'', rl.description) as internalComment, #GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode,   \n" +
                "            rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                    \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,  \n" +
                "           CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.rfqlineitemsid=rl.id)>1 THEN 'Mismatched' ELSE    \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.rfqlineitemsid=rl.id LIMIT 1) END AS `name`,    \n" +
                "		# CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                                    \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                       \n" +
                "			com.PIDCode, com.category, rl.partID,ra.mfgPNID,          \n" +
                "  \n" +
                "			(CASE WHEN pPackaging = 1 THEN    \n" +
                "			(SELECT  GROUP_CONCAT(IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),'@@@',a.RoHSStatusID,'@@@', a.name,'@@@', a.rohsIcon,'@@@',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',IFNULL(a.gencCategoryName,\"\"))     \n" +
                "			FROM      \n" +
                "				( SELECT cp.PIDCode,cp.RoHSStatusID,rom.name,rom.rohsIcon,c.feature,gcp.gencCategoryName    \n" +
                "				FROM rfq_lineitems_alternatepart rla     \n" +
                "				LEFT JOIN  component c ON rla.mfgpnid=c.id      \n" +
                "				JOIN component_packagingalias ca ON ca.componentId = c.id    \n" +
                "				LEFT JOIN component_packagingalias cap ON ca.aliasgroupId = cap.aliasgroupID    \n" +
                "				LEFT JOIN component cp ON cp.id = cap.componentID     \n" +
                "				LEFT JOIN  genericcategory gcp ON cp.partStatus=gcp.gencCategoryID AND gcp.isActive=1 AND gcp.isDeleted=0                     \n" +
                "				LEFT JOIN  rfq_rohsmst rom ON rom.id = cp.RoHSStatusID AND rom.isDeleted = 0                                                            \n" +
                "				WHERE rla.rfqlineitemsid=rl.id AND rla.isdeleted=0    \n" +
                "				UNION     \n" +
                "				SELECT com.PIDCode,com.RoHSStatusID,ro.name,ro.rohsIcon,com.feature,gc.gencCategoryName    \n" +
                "  \n" +
                "				) AS a )    \n" +
                "  \n" +
                "  \n" +
                "                       ELSE    \n" +
                "			GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon,'@@@',REPLACE(IFNULL(com.feature,\"\"),\",\",\"\"),'@@@',IFNULL(gc.gencCategoryName,\"\")) END) AS mfgPN,    \n" +
                "			#GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon ) END) AS mfgPN,        \n" +
                "  \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                     \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                     \n" +
                "  \n" +
                "            FROM rfq_lineitems_alternatepart ra                                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                      \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                                  \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                          \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0                   \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0    \n" +
                "			LEFT JOIN  genericcategory gc ON com.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0       \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                                   \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "		SET pWhereClause = '1=1' ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(	                                        \n" +
                "	IN ppageIndex INT(11),                                        \n" +
                "	IN precordPerPage INT(11),                                        \n" +
                "	IN pOrderBy VARCHAR(255),	                                        \n" +
                "    IN pWhereClause VARCHAR(16383)                                            \n" +
                "    )  \n" +
                "BEGIN                                        \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                        \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                        \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                        \n" +
                "  \n" +
                "		SELECT COUNT(rl.id) AS lineItemCount, rf.id, ra.partID,      \n" +
                "		(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS revisedQuoteCount,            \n" +
                "		part.PIDCode,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,             \n" +
                "        part.liveVersion as liveInternalVersion,            \n" +
                "		(CASE WHEN ra.status = 1 THEN 'InProgress'       \n" +
                "			  WHEN ra.status = 2 THEN 'FollowUp'     \n" +
                "			  WHEN ra.status = 3 THEN 'Won'      \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'     \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,    \n" +
                "		(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending' WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote' WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,          \n" +
                "		ro.name AS `rohsComplientConvertedValue`,              \n" +
                "		(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'              \n" +
                "		WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,              \n" +
                "		(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'              \n" +
                "		WHEN (`ra`.`timePeriod` = 1) THEN 'W'              \n" +
                "		WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,              \n" +
                "		job.name AS JobType, rt.name AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer,      \n" +
                "		concat(em.`firstName` , \" \" ,em.`lastName`) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,     \n" +
                "		ra.quoteInDate, ra.quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,    \n" +
                "        ra.isBOMVerified,ra.updatedAt,ra.reason,concat(ems.`firstName` , \" \" ,ems.`lastName`) AS RFQ_ClosedBy,ra.quoteClosedDate    \n" +
                "		FROM rfqforms rf              \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND IFNULL(ra.isdeleted,0) = 0              \n" +
                "		LEFT JOIN jobtype job ON job.id = ra.jobTypeID AND IFNULL(job.isdeleted,0) = 0              \n" +
                "		LEFT JOIN rfqtype rt ON rt.id = ra.RFQTypeID AND IFNULL(rt.isdeleted,0) = 0             \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0              \n" +
                "		LEFT OUTER JOIN rfq_lineitems rl ON rl.partID = ra.partID AND rl.isDeleted = 0          \n" +
                "        LEFT JOIN users em ON em.id = ra.quoteSubmittedBy     \n" +
                "        LEFT JOIN users ems ON ems.id = ra.quoteClosedBy    \n" +
                "		LEFT JOIN component part ON part.id = ra.partID AND IFNULL(part.category,0) = 3 AND IFNULL(part.isdeleted,0) = 0              \n" +
                "		LEFT JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "		WHERE IFNULL(rf.isdeleted,0) = 0 GROUP BY ra.id;                                     \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "	ELSE                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"quoteDueDate DESC\") ;                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "	ELSE	                                        \n" +
                "		SET rowNumWhere = '';                                        \n" +
                "	END IF;	                                        \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                             \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"select * from rfq_assemblies_quotation_status where isDeleted = 0\");                                        \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                        \n" +
                "	EXECUTE query3;                                        \n" +
                "	DEALLOCATE PREPARE query3;                             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (443,'2.00','V1','planned bom/RFQ List SP changes  - shirish'," + userid + ");"
            );
            break;
        case 443:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                      \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN pPartID INT,    \n" +
                "	IN pPackaging TINYINT(1)                               \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                \n" +
                "  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                                    \n" +
                "			SELECT concat(group_concat(ifnull(ra.description,'')),'', ifnull(rl.description,'')) as internalComment, #GROUP_CONCAT(DISTINCT(ra.mfgPN))AS mfgcode,   \n" +
                "            rl.id,rl.qpa,rl.attritionRate,rl.isInstall,                                    \n" +
                "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,  \n" +
                "           CASE WHEN     \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.rfqlineitemsid=rl.id)>1 THEN 'Mismatched' ELSE    \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN    \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN    \n" +
                "		   rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id    \n" +
                "		   WHERE rlam.rfqlineitemsid=rl.id LIMIT 1) END AS `name`,    \n" +
                "		# CONCAT(pt.partTypeName,'|',pc.name) AS NAME,                                    \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig, um.unitName,rl.uomID,                                       \n" +
                "			com.PIDCode, com.category, rl.partID,ra.mfgPNID,          \n" +
                "  \n" +
                "			(CASE WHEN pPackaging = 1 THEN    \n" +
                "			(SELECT  GROUP_CONCAT(IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),'@@@',a.RoHSStatusID,'@@@', a.name,'@@@', a.rohsIcon,'@@@',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',IFNULL(a.gencCategoryName,\"\"))     \n" +
                "			FROM      \n" +
                "				( SELECT cp.PIDCode,cp.RoHSStatusID,rom.name,rom.rohsIcon,c.feature,gcp.gencCategoryName    \n" +
                "				FROM rfq_lineitems_alternatepart rla     \n" +
                "				LEFT JOIN  component c ON rla.mfgpnid=c.id      \n" +
                "				JOIN component_packagingalias ca ON ca.componentId = c.id    \n" +
                "				LEFT JOIN component_packagingalias cap ON ca.aliasgroupId = cap.aliasgroupID    \n" +
                "				LEFT JOIN component cp ON cp.id = cap.componentID     \n" +
                "				LEFT JOIN  genericcategory gcp ON cp.partStatus=gcp.gencCategoryID AND gcp.isActive=1 AND gcp.isDeleted=0                     \n" +
                "				LEFT JOIN  rfq_rohsmst rom ON rom.id = cp.RoHSStatusID AND rom.isDeleted = 0                                                            \n" +
                "				WHERE rla.rfqlineitemsid=rl.id AND rla.isdeleted=0    \n" +
                "				UNION     \n" +
                "				SELECT com.PIDCode,com.RoHSStatusID,ro.name,ro.rohsIcon,com.feature,gc.gencCategoryName    \n" +
                "  \n" +
                "				) AS a )    \n" +
                "  \n" +
                "  \n" +
                "                       ELSE    \n" +
                "			GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',com.RoHSStatusID, '@@@', ro.name,'@@@', ro.rohsIcon,'@@@',REPLACE(IFNULL(com.feature,\"\"),\",\",\"\"),'@@@',IFNULL(gc.gencCategoryName,\"\")) END) AS mfgPN,    \n" +
                "			#GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'@@@',IFNULL(com.RoHSStatusID,-1), '@@@', ro.name,'@@@', ro.rohsIcon ) END) AS mfgPN,        \n" +
                "  \n" +
                "			(CASE WHEN ccl.isDocumentUpload = 1 THEN GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',ccl.isDocumentUpload)                     \n" +
                "			ELSE GROUP_CONCAT(DISTINCT(REPLACE(com.PIDCode,\",\",\"***\")),'###',ra.mfgCode,'###',IFNULL(com.RoHSStatusID,-1),'###',com.id,'###',0) END) AS component                     \n" +
                "  \n" +
                "            FROM rfq_lineitems_alternatepart ra                                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID  AND rl.partID = pPartID AND IFNULL(rl.isDeleted,0) = 0                                                      \n" +
                "			LEFT JOIN rfq_mountingtypemst pc ON rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN rfq_parttypemst pt ON rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0                                    \n" +
                "			LEFT JOIN uoms um ON um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0                                  \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0                                          \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = IFNULL(com.RoHSStatusID,-1) AND ro.isDeleted = 0                   \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0    \n" +
                "			LEFT JOIN  genericcategory gc ON com.partStatus=gc.gencCategoryID AND gc.isActive=1 AND gc.isDeleted=0       \n" +
                "			WHERE IFNULL(ra.isDeleted,0) = 0 AND rl.partID = pPartID                                   \n" +
                "			GROUP BY rl.id ORDER BY rl.lineID;                                    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "		SET pWhereClause = '1=1' ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                    \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                                    \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                    \n" +
                "	EXECUTE query1;                                    \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                    \n" +
                "	EXECUTE query2;                                    \n" +
                "	DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (444,'2.00','V1','planned bom SP changes  - shirish'," + userid + ");"
            );
            break;
        case 444:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                    \n" +
                "    IN puserID VARCHAR(50),                              \n" +
                "    IN pnickName VARCHAR(20),                              \n" +
                "    IN pprefix VARCHAR(20),                              \n" +
                "    IN puid VARCHAR(20),                          \n" +
                "    IN pComponentID INT,                      \n" +
                "    IN pCustomerID INT,                      \n" +
                "    IN pCPN BOOL,                      \n" +
                "    IN pMFGAvailabel BOOL,                      \n" +
                "    IN pRefCpnMfgID INT,                  \n" +
                "    IN pAssyID INT,                  \n" +
                "    IN pSalesOrderDetailID INT,		                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),        \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT 	                 \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                    \n" +
                "	DECLARE v_length INT;                                     \n" +
                "	DECLARE v_fieldType INT;                                         \n" +
                "	DECLARE v_entityId INT;                                    \n" +
                "	DECLARE v_dataElementId INT;                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                    \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);		              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                    \n" +
                "	DECLARE plen,slen INT;                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                \n" +
                "	DECLARE barcode_type_id INT;                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';      \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);    \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                    \n" +
                "	(                                    \n" +
                "	     errorText NVARCHAR(2000),                                    \n" +
                "	     IsSuccess VARCHAR (2),                          \n" +
                "	     MFGPart VARCHAR(100)                                         \n" +
                "	);                         \n" +
                "	-- get data from barcode templates with seprator                                    \n" +
                "	block1: BEGIN  \n" +
                "  \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			SELECT COUNT(*) INTO v_barcode_count FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND  \n" +
                "			(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;     \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN  \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND  \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "			ELSE  \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND  \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;     \n" +
                "				SET pBarcodeID = v_barcode_id;  \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID;  \n" +
                "		END IF;  \n" +
                "		IF (barcode_type_id IS NULL) THEN      \n" +
                "			SELECT COUNT(*) INTO v_NumberOfPart FROM             \n" +
                "			(            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL            \n" +
                "				UNION            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "			) a;  \n" +
                "			IF (v_NumberOfPart > 0) THEN	  \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);    \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND   \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "				SET pBarcodeID = v_barcode_id;  \n" +
                "			END IF;      \n" +
                "		END IF;   \n" +
                "  \n" +
                "		-- tempregexp;    	            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */    \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';                          \n" +
                "		ELSE /* barcode 1D */       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;          \n" +
                "			SET v_BarcodeType = '1D';                       \n" +
                "		END IF;  \n" +
                "	END block1;                                    \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                    \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                    \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                 \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                             \n" +
                "			-- declare exit loop if data not found                                    \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "			-- if any record match found than  check for delimiter and its value                               \n" +
                "  \n" +
                "			IF (pbr_template_ID > 0) THEN                                    \n" +
                "				-- create temporary table for deliemeter and component dataelement                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                    \n" +
                "					pentityId INT,                                    \n" +
                "					pdataElementId INT,                                    \n" +
                "					pdelimiter_value VARCHAR(200)                                    \n" +
                "				);                               \n" +
                "  \n" +
                "				-- create temporary table for separator string values                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                    \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                          \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                    \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                         \n" +
                "  \n" +
                "				-- open cursor                                    \n" +
                "				OPEN barcodeMatch_cursor;                                    \n" +
                "  \n" +
                "				-- set str label as whereclause                                    \n" +
                "				SET strLabel=pWhereClause;                             \n" +
                "  \n" +
                "				-- if prefix is found than remove those from actual string match                                    \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                    \n" +
                "					 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                    \n" +
                "				 END IF;                                   \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                     \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                    \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                    \n" +
                "				 END IF;	                          \n" +
                "  \n" +
                "				-- insert all values after seprator split                                     \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                    \n" +
                "				PREPARE stmt1 FROM @SQL;	                                    \n" +
                "				EXECUTE stmt1;                                    \n" +
                "  \n" +
                "				-- create dynamic query to insert in recieving material                                    \n" +
                "				SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                    \n" +
                "				barcodeMatch_loop:LOOP                 \n" +
                "					-- get all five selected values                                    \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                            \n" +
                "  \n" +
                "					-- exit loop if no record found for barcode match                                    \n" +
                "					IF exit_loop THEN                               \n" +
                "						CLOSE barcodeMatch_cursor;                                    \n" +
                "						LEAVE barcodeMatch_loop;                                    \n" +
                "					END IF;                               \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                    \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                    \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                    \n" +
                "					EXECUTE stmtdelimiter;                          \n" +
                "  \n" +
                "					-- get delimiter values from string                                    \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                            \n" +
                "					-- check for field type is static or dynamic                                    \n" +
                "					-- if static field than check for mfg code and mfg part number                                    \n" +
                "					IF v_fieldType = 0  THEN                                \n" +
                "						-- component_sid_stock                                     \n" +
                "						-- get static field name from barcode table delimiter data element id                                    \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                      \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                    \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                          \n" +
                "							SET MFG_Part_No = delimiter_value_data;                          \n" +
                "  \n" +
                "							IF(pComponentID=0)THEN               \n" +
                "								SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM             \n" +
                "								(            \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL            \n" +
                "									UNION            \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "									WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "								) a;            \n" +
                "							ELSE                          \n" +
                "								SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                          \n" +
                "							END IF;                          \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN      \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';      \n" +
                "								CLOSE barcodeMatch_cursor;                                    \n" +
                "								LEAVE barcodeMatch_loop;        \n" +
                "							END IF;      \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;      \n" +
                "							IF (@MFGType = 'DIST') THEN      \n" +
                "								SET v_SupplierID = @componentId;      \n" +
                "								SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;      \n" +
                "							END IF;    \n" +
                "  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN    \n" +
                "								SELECT DISTINCT rfqLineItemsID INTO @rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId LIMIT 1;				        \n" +
                "								IF (@rfqLineItemsID IS NULL) THEN        \n" +
                "									CLOSE barcodeMatch_cursor;                                    \n" +
                "									LEAVE barcodeMatch_loop;        \n" +
                "								END IF;        \n" +
                "							END IF;        \n" +
                "  \n" +
                "							IF  @componentCount = 1 THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                    \n" +
                "							END IF;              \n" +
                "						END IF;                                    \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                    \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                            \n" +
                "							SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                    \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;                    \n" +
                "						IF @componentCount > 1 THEN                          \n" +
                "							CLOSE barcodeMatch_cursor;                                    \n" +
                "							LEAVE barcodeMatch_loop;                          \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                    \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                     \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                    \n" +
                "  \n" +
                "					ELSE                \n" +
                "						-- component_sid_stock_dataelement_Values                                      \n" +
                "						-- dynamic fields                   \n" +
                "						SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);               \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;              \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                     \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                 \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                     \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                             \n" +
                "					END IF;                                    \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                    \n" +
                "				-- check if mfg and component both found than         \n" +
                "				IF (BarcodeMFGMatch = 'Mismatch') THEN    \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN  \n" +
                "					-- if (v_BarcodeType = 1) then  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);        \n" +
                "					-- else  \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);        \n" +
                "					-- end if;  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND @rfqLineItemsID IS NULL) THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not found in bom of this assembly.',7,MFG_Part_No);        \n" +
                "				ELSEIF (@componentCount > 1) THEN                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                    \n" +
                "				ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                    \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                    \n" +
                "					   IF @Mfgmatched = 0  THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                    \n" +
                "					   END IF;									                                    \n" +
                "				 ELSE 		                          \n" +
                "					IF @mfgCount = 0 THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                    \n" +
                "					END IF;	                                    \n" +
                "					IF @componentCount = 0 THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                    \n" +
                "					END IF;	                                    \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND @componentCount=0  THEN                                      \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                    \n" +
                "					END IF;						                                    \n" +
                "				END IF;				                                    \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                      \n" +
                "					SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                      \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                      \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                    \n" +
                "					END IF;                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                    \n" +
                "  \n" +
                "					IF (pprefix = '') THEN	                      \n" +
                "						CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                      \n" +
                "						SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                      \n" +
                "					END IF;                   \n" +
                "  \n" +
                "					-- must call statements in sequence          				                          \n" +
                "					SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                    \n" +
                "					PREPARE stmt1 FROM @SQL1;                                    \n" +
                "					EXECUTE stmt1;                                  \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                      \n" +
                "  \n" +
                "					IF (pnickName IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                      \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                      \n" +
                "  \n" +
                "					IF (pRefCpnMfgID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                      \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF (pCustomerID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                      \n" +
                "					END IF;                      \n" +
                "  \n" +
                "					IF (pAssyID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                      \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					IF (pSalesOrderDetailID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                      \n" +
                "					END IF;                  \n" +
                "  \n" +
                "					IF (pReceiveMaterialType IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                   \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF (v_SupplierID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                      \n" +
                "					END IF;         \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());	                      \n" +
                "					SET @sql2 = UpdateValue;	                                     \n" +
                "					PREPARE stmt2 FROM @SQL2;                                    \n" +
                "					EXECUTE stmt2;	                                    \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                    \n" +
                "					IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                          \n" +
                "						INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                     \n" +
                "						SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                    \n" +
                "					END IF;                                      \n" +
                "  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "				ELSE                                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "			ELSE                                \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                      \n" +
                "			END IF;                                    \n" +
                "  \n" +
                "		END block2;   \n" +
                "	END IF;                                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (445,'2.00','V1',' Sproc_MatchBarCodeAndSaveDelimiters - FENIL '," + userid + ");"
            );
            break;
        case 445:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "UPDATE import_entity_fields SET displayName='User ID' WHERE FIELD=\"code\" AND entityTableName=\"employees\";  \n" +
                "UPDATE import_entity_fields SET required=1 WHERE FIELD=\"code\" AND entityTableName=\"employees\";  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (446,'2.00','V1','change label - Deepshikha '," + userid + ");"
            );
            break;
        case 446:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "ALTER TABLE component_fields_genericalias_mst ADD systemGenerated TINYINT DEFAULT 0;  \n" +
                "UPDATE   component_fields_genericalias_mst SET    systemGenerated=1  WHERE refTableName='component_packagingmst';  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (447,'2.00','V1',' added column  component_fields_genericalias_mst-champak'," + userid + ");"
            );
            break;
        case 447:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                      \n" +
                "	IN prfqAssyID INT(1),      \n" +
                "    IN ppartID INT(1),      \n" +
                "	IN puserID INT(1),  \n" +
                "    IN pBOMVersion varchar(50)  \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "  BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                " DROP TEMPORARY TABLE IF EXISTS Results;                      \n" +
                "  \n" +
                "    START TRANSACTION;              \n" +
                "  \n" +
                "    #consoliadte select               \n" +
                " CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS               \n" +
                " SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;                \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems                      \n" +
                "		drop temporary table if exists leveldata;      \n" +
                "		create temporary table if not exists leveldata as      \n" +
                "			WITH RECURSIVE cte AS          \n" +
                "			(       \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,1 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part,   \n" +
                "                /* we not required this in functionaly this will be used for check in detail   \n" +
                "                concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, */  \n" +
                "                rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID as rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				where rl.partId = ppartID and rla.isDeleted = 0      \n" +
                "				)      \n" +
                "			  UNION ALL          \n" +
                "  \n" +
                "				(select rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id as lineItemID,rla.id as alternateID,cte.level+1 as level, com.category,      \n" +
                "				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, ceiling((cte.qpa1 * rl.qpa)) as qpa1,                      \n" +
                "				concat(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part,   \n" +
                "				/* we not required this in functionaly this will be used for check in detail   \n" +
                "                concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, */  \n" +
                "                rl.attritionRate,rl.isInstall,                       \n" +
                "				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                      \n" +
                "				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode        \n" +
                "				from rfq_lineitems_alternatepart rla      \n" +
                "				join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.isDeleted = 0      \n" +
                "				join component com on com.id = rla.mfgPNID #and com.category != 3      \n" +
                "                left join component comp on comp.id = rl.partID      \n" +
                "				join cte cte on cte.category = 3 and rl.partID = cte.mfgPNID      \n" +
                "				where rla.isDeleted =0      \n" +
                "			   )      \n" +
                "			)      \n" +
                "			SELECT cte.* FROM cte       \n" +
                "			where cte.category !=3      \n" +
                "			order by lineItemID,part;      \n" +
                "  \n" +
                "		drop temporary table if exists Results;      \n" +
                "		create temporary table if not exists Results as      \n" +
                "		select  group_concat(partlineID) as consolidatedpartlineID,count(b.rfqLineItemsID) as multiple,group_concat(b.refDesig) as consolidatedrefDesig, group_concat(b.rfqLineItemsID) as consolidatedLineItemIDs,sum(qpa1)qpa, b.* from (      \n" +
                "		select concat('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',trim(a.lineID)+0,'}') as partlineID, GROUP_CONCAT(part) as part1,  \n" +
                "		/* we not required this in functionaly this will be used for check in detail   \n" +
                "        GROUP_CONCAT(partcode) as partcode1, */     \n" +
                "		a.* from leveldata a      \n" +
                "		group by rfqLineItemsID,level      \n" +
                "		)b      \n" +
                "		group by  numOfPosition,isPurchase,part1;     \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change                      \n" +
                "  \n" +
                "			UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "			SET                       \n" +
                "			cl.isDeleted = TRUE,                      \n" +
                "			cl.deletedAt = current_timestamp(),                      \n" +
                "			cl.deletedBy = puserID                      \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                      \n" +
                "            SELECT * FROM(                           \n" +
                "			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                       \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(rcl.isDeleted,0) = 0)a);                      \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems                       \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                      \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                      \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                      \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`)                      \n" +
                "		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                      \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, current_timestamp() `createdAt`,                      \n" +
                "		puserID `createdBy`, R.`numOfPosition`,                      \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`                       \n" +
                "        FROM Results R                      \n" +
                "		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		 WHERE cl.id IS NULL;                      \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity                      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                      \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                      \n" +
                "		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,current_timestamp() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                      \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                      \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity                      \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                       \n" +
                "		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                       \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0) rcl                       \n" +
                "		SET                       \n" +
                "		rq.updatedAt = current_timestamp(),                      \n" +
                "        rq.updatedBy = puserID,                      \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                      \n" +
                "		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                      \n" +
                "# Update Consilidated LineItems                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                       \n" +
                "		SET                       \n" +
                "		cl.isInstall = R.isInstall ,                      \n" +
                "		cl.isPurchase = R.isPurchase,                      \n" +
                "		cl.numOfPosition = R.numOfPosition,                      \n" +
                "		cl.attritionRate = R.attritionRate,                      \n" +
                "		cl.leadQty = R.leadQty,                      \n" +
                "		cl.valueAddedCost = R.valueAddedCost,                      \n" +
                "        cl.updatedAt = current_timestamp(),                      \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,                      \n" +
                "        cl.qpa = R.qpa,                      \n" +
                "        cl.uomID = R.uomID,            \n" +
                "        cl.refDesig = R.consolidatedrefDesig,            \n" +
                "        cl.lineID = R.lineID,                      \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,    \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,    \n" +
                "        cl.updatedBy = puserID  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                      \n" +
                "            AND IFNULL(cl.isDeleted,0) = 0;                      \n" +
                "  \n" +
                " # Update Consilidated LineItems alternate part        \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cla, (select * from rfq_consolidated_mfgpn_lineitem where rfqAssyID = prfqAssyID and isDeleted = 0) cl,  \n" +
                "        (select * from rfq_lineitems_alternatepart where partID = ppartID and isDeleted = 0) rla  \n" +
                "		SET  \n" +
                "        cla.customerApproval = rla.customerApproval,  \n" +
                "        cla.updatedAt = current_timestamp(),  \n" +
                "        cla.updatedBy = puserID  \n" +
                "        WHERE cl.rfqLineItemID = rla.rfqLineItemsID AND cla.mfgPNID = rla.mfgPNID  \n" +
                "            AND IFNULL(cla.isDeleted,0) = 0;         \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed                      \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                      \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = current_timestamp(),                      \n" +
                "		cap.deletedBy = puserID                      \n" +
                "		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                      \n" +
                "  ############################      \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                       \n" +
                "		SET                       \n" +
                "        isDeleted = TRUE,                      \n" +
                "        deletedAt = current_timestamp(),                      \n" +
                "		deletedBy = puserID                      \n" +
                "        WHERE id IN(                       \n" +
                "        SELECT capID FROM (                      \n" +
                "		SELECT DISTINCT(cap.id)AS capID                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                      \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                       \n" +
                "		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                      \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity                       \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = current_timestamp(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                        \n" +
                "        AND IFNULL(cl.isDeleted,0) = 1);                           \n" +
                "# delete Consolidated lineitem Quantity if rfq Quantity remove         \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                    \n" +
                "		SET                       \n" +
                "        cq.isDeleted = TRUE,                      \n" +
                "        cq.deletedAt = current_timestamp(),                      \n" +
                "		cq.deletedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                        \n" +
                "        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                        \n" +
                "# delete Consolidate lineItems                       \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl                      \n" +
                "		SET                       \n" +
                "        cl.isDeleted = TRUE,                      \n" +
                "        cl.deletedAt = current_timestamp(),                      \n" +
                "		cl.deletedBy = puserID                      \n" +
                "		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                      \n" +
                "		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                              \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                       \n" +
                "  #################################      \n" +
                "  \n" +
                "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                      \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                      \n" +
                "		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                      \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,current_timestamp() `createdAt`, ap.`customerApproval`                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                      \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                    \n" +
                "  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed         \n" +
                "#################################               \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl                  \n" +
                "		SET                       \n" +
                "        cap.isDeleted = TRUE,                      \n" +
                "        cap.deletedAt = current_timestamp(),                      \n" +
                "		cap.deletedBy = puserID                  \n" +
                "		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (                   \n" +
                "        SELECT  DISTINCT(cap.id)                      \n" +
                "		FROM rfq_lineitems_alternatepart ap                       \n" +
                "		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                  \n" +
                "		WHERE rl.partID in(select prPerPartID from part_sub_assy_relationship where partID = (select partID from rfq_assemblies where id = prfqAssyID))      \n" +
                "        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);                  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove         \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,                   \n" +
                "        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,                  \n" +
                "        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                        \n" +
                "		SET                       \n" +
                "        cq.finalPrice = NULL,                  \n" +
                "        cq.selectedPIDCode = NULL,                  \n" +
                "        cq.selectedMpn = NULL,                  \n" +
                "        cq.selectionMode = NULL,                  \n" +
                "        cq.supplier = NULL,                  \n" +
                "        cq.supplierStock = NULL,                  \n" +
                "        cq.currentStock = NULL,                  \n" +
                "        cq.grossStock = NULL,                  \n" +
                "        cq.leadTime = NULL,                  \n" +
                "        cq.min = NULL,                  \n" +
                "        cq.mult = NULL,                  \n" +
                "        cq.unitPrice = NULL,                  \n" +
                "        cq.updatedAt = current_timestamp(),                      \n" +
                "		cq.updatedBy = puserID                      \n" +
                "        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                        \n" +
                "        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                     \n" +
                "# Delete summary additional cost details if exists    \n" +
                "		update rfq_assy_quotations_additionalcost raqa, (select id from rfq_assy_quotations where rfqAssyID = prfqAssyID and refSubmittedQuoteID is null and deletedAt is null) raq  \n" +
                "		set   \n" +
                "		raqa.`isDeleted` = 1,  \n" +
                "		raqa.`deletedBy` = 1,  \n" +
                "		raqa.`deletedAt` = current_timestamp()  \n" +
                "		WHERE raqa.rfqAssyQuoteID in (raq.id) and raqa.deletedAt is null;   \n" +
                "  \n" +
                "# Delete summary details if exists    \n" +
                "		UPDATE `rfq_assy_quotations`  \n" +
                "		SET  \n" +
                "		`isDeleted` = 1,  \n" +
                "		`deletedBy` = 1,  \n" +
                "		`deletedAt` = current_timestamp()  \n" +
                "		WHERE rfqAssyID = prfqAssyID and refSubmittedQuoteID is null and deletedAt is null;   \n" +
                "  \n" +
                "  # update rfq assembly pricing status          \n" +
                "    update rfq_assemblies set isReadyForPricing = true, partCostingBOMInternalVersion = pBOMVersion, updatedAt = current_timestamp(), updatedBy = puserID where isDeleted = 0 and id = prfqAssyID;         \n" +
                "  \n" +
                "    COMMIT;                  \n" +
                "    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)                \n" +
                "    UNION              \n" +
                "    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id               \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,current_timestamp())<120);              \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;               \n" +
                "DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (448,'2.00','V1','Consolidated SP changes  - shirish'," + userid + ");"
            );
            break;
        case 448:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(                        \n" +
                "	IN rfqAssyID INT(11),      \n" +
                "	IN customerID INT(11)  \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,      \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,      \n" +
                "	   (SELECT (MAX(LEVEL)+1) FROM part_sub_assy_relationship psar WHERE psar.partID =ra.partID AND psar.isdeleted=0) AS assyLevel,      \n" +
                "	   (SELECT COUNT(*) FROM rfq_assemblies rfqs WHERE rfqs.rfqrefID =ra.rfqrefID AND rfqs.isdeleted=0) AS assyCount,       \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,      \n" +
                "	   (SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID=ra.id) AS totalQuoteCount,      \n" +
                "	   (SELECT rasp.quoteNumber FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS quoteNumber,      \n" +
                "	   (SELECT rasp.bomLastVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS bomLastVersion,      \n" +
                "	   (SELECT rasp.quoteSubmitDate FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS quoteSubmitDate,      \n" +
                "	   (SELECT rasp.bomInternalVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id  ORDER BY rasp.id DESC LIMIT 1) AS bomInternalVersion,      \n" +
                "	   (SELECT CONCAT('(',mm.mfgCode,')',mm.mfgName) FROM mfgcodemst mm WHERE mm.id=customerID) AS customerName,   \n" +
                "	   CASE WHEN    IFNULL(ra.isSummaryComplete,0)=0 THEN  \n" +
                "	   (SELECT GROUP_CONCAT(CONCAT(IFNULL(css.className,''),' ',cs.fullName))  FROM component_standard_details csd LEFT JOIN certificate_standards cs      \n" +
                "ON csd.certificatestandardID=cs.certificatestandardid LEFT JOIN standard_class css ON       \n" +
                "csd.classID=css.classID WHERE csd.componentid=ra.partID)  \n" +
                "ELSE  \n" +
                "(SELECT GROUP_CONCAT(CONCAT(IFNULL(css.className,''),' ',cs.fullName))  FROM rfq_assy_standard_class_detail csd LEFT JOIN certificate_standards cs      \n" +
                "ON csd.standardID=cs.certificatestandardid LEFT JOIN standard_class css ON       \n" +
                "csd.standardClassIds=css.classID WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = rfqAssyID ORDER BY id DESC LIMIT 1))  \n" +
                "END AS standards      \n" +
                "	   FROM rfq_assemblies ra  LEFT JOIN component c      \n" +
                "	   ON c.id=ra.partID LEFT JOIN rfq_assy_typemst rat       \n" +
                "          ON rat.id=ra.assemblyTypeID LEFT JOIN rfq_rohsmst rh      \n" +
                "          ON rh.id=c.RoHSStatusID      \n" +
                "  \n" +
                "           WHERE ra.id= rfqAssyID AND ra.isdeleted=0;                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-03-2019  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (449,'2.00','V1','Alter sp Sproc_GetAssyBOMHeaderList-Champak '," + userid + ");"
            );
            break;
        case 449:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                    \n" +
                "    IN puserID VARCHAR(50),                              \n" +
                "    IN pnickName VARCHAR(20),                              \n" +
                "    IN pprefix VARCHAR(20),                              \n" +
                "    IN puid VARCHAR(20),                          \n" +
                "    IN pComponentID INT,                      \n" +
                "    IN pCustomerID INT,                      \n" +
                "    IN pCPN BOOL,                      \n" +
                "    IN pMFGAvailabel BOOL,                      \n" +
                "    IN pRefCpnMfgID INT,                  \n" +
                "    IN pAssyID INT,                  \n" +
                "    IN pSalesOrderDetailID INT,		                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),        \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT 	                 \n" +
                "    )  \n" +
                "BEGIN                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                    \n" +
                "	DECLARE v_length INT;                                     \n" +
                "	DECLARE v_fieldType INT;                                         \n" +
                "	DECLARE v_entityId INT;                                    \n" +
                "	DECLARE v_dataElementId INT;                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                    \n" +
                "	DECLARE StaticField VARCHAR(100);              \n" +
                "	DECLARE DynamicField VARCHAR(100);		              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                    \n" +
                "	DECLARE plen,slen INT;                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                \n" +
                "	DECLARE barcode_type_id INT;                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';      \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);    \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;   \n" +
                "	DECLARE v_rfqLineItemsID INT;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                    \n" +
                "	(                                    \n" +
                "	     errorText NVARCHAR(2000),                                    \n" +
                "	     IsSuccess VARCHAR (2),                          \n" +
                "	     MFGPart VARCHAR(100)                                         \n" +
                "	);                         \n" +
                "	-- get data from barcode templates with seprator                                    \n" +
                "	block1: BEGIN  \n" +
                "  \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			SELECT COUNT(*) INTO v_barcode_count FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND  \n" +
                "			(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;     \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN  \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND  \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "			ELSE  \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND                                     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND  \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;     \n" +
                "				SET pBarcodeID = v_barcode_id;  \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID;  \n" +
                "		END IF;  \n" +
                "		IF (barcode_type_id IS NULL) THEN      \n" +
                "			SELECT COUNT(*) INTO v_NumberOfPart FROM             \n" +
                "			(            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL            \n" +
                "				UNION            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "			) a;  \n" +
                "			IF (v_NumberOfPart > 0) THEN	  \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);    \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND   \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "				SET pBarcodeID = v_barcode_id;  \n" +
                "			END IF;      \n" +
                "		END IF;   \n" +
                "  \n" +
                "		-- tempregexp;    	            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */    \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';                          \n" +
                "		ELSE /* barcode 1D */       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;          \n" +
                "			SET v_BarcodeType = '1D';                       \n" +
                "		END IF;  \n" +
                "	END block1;                                    \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                    \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                    \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                 \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                             \n" +
                "			-- declare exit loop if data not found                                    \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "			-- if any record match found than  check for delimiter and its value                               \n" +
                "  \n" +
                "			IF (pbr_template_ID > 0) THEN                                    \n" +
                "				-- create temporary table for deliemeter and component dataelement                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                    \n" +
                "					pentityId INT,                                    \n" +
                "					pdataElementId INT,                                    \n" +
                "					pdelimiter_value VARCHAR(200)                                    \n" +
                "				);                               \n" +
                "  \n" +
                "				-- create temporary table for separator string values                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                    \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                          \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                    \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                         \n" +
                "  \n" +
                "				-- open cursor                                    \n" +
                "				OPEN barcodeMatch_cursor;                                    \n" +
                "  \n" +
                "				-- set str label as whereclause                                    \n" +
                "				SET strLabel=pWhereClause;                             \n" +
                "  \n" +
                "				-- if prefix is found than remove those from actual string match                                    \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                    \n" +
                "					 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                    \n" +
                "				 END IF;                                   \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                     \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                    \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                    \n" +
                "				 END IF;	                          \n" +
                "  \n" +
                "				-- insert all values after seprator split                                     \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                    \n" +
                "				PREPARE stmt1 FROM @SQL;	                                    \n" +
                "				EXECUTE stmt1;                                    \n" +
                "  \n" +
                "				-- create dynamic query to insert in recieving material                                    \n" +
                "				SET QueryForStatic = 'insert into component_sid_stock';               \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                    \n" +
                "				barcodeMatch_loop:LOOP                 \n" +
                "					-- get all five selected values                                    \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                            \n" +
                "  \n" +
                "					-- exit loop if no record found for barcode match                                    \n" +
                "					IF exit_loop THEN                               \n" +
                "						CLOSE barcodeMatch_cursor;                                    \n" +
                "						LEAVE barcodeMatch_loop;                                    \n" +
                "					END IF;                               \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                    \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                    \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                    \n" +
                "					EXECUTE stmtdelimiter;                          \n" +
                "  \n" +
                "					-- get delimiter values from string                                    \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                            \n" +
                "					-- check for field type is static or dynamic                                    \n" +
                "					-- if static field than check for mfg code and mfg part number                                    \n" +
                "					IF v_fieldType = 0  THEN                                \n" +
                "						-- component_sid_stock                                     \n" +
                "						-- get static field name from barcode table delimiter data element id                                    \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                      \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                    \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                          \n" +
                "							SET MFG_Part_No = delimiter_value_data;                          \n" +
                "  \n" +
                "							IF(pComponentID=0)THEN               \n" +
                "								SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM             \n" +
                "								(            \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL            \n" +
                "									UNION            \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID             \n" +
                "									WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL            \n" +
                "								) a;            \n" +
                "							ELSE                          \n" +
                "								SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                          \n" +
                "							END IF;                          \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG) THEN      \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';      \n" +
                "								CLOSE barcodeMatch_cursor;                                    \n" +
                "								LEAVE barcodeMatch_loop;        \n" +
                "							END IF;      \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;      \n" +
                "							IF (@MFGType = 'DIST') THEN      \n" +
                "								SET v_SupplierID = @componentId;      \n" +
                "								SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;      \n" +
                "							END IF;    \n" +
                "  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN    \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId limit 1;				        \n" +
                "								SELECT a.componentID INTO v_rfqLineItemsID FROM   \n" +
                "								(  \n" +
                "									SELECT cp.componentID FROM component_packagingalias cp    \n" +
                "									LEFT JOIN component c ON c.packaginggroupID = cp.aliasgroupid    \n" +
                "									LEFT JOIN rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id    \n" +
                "									WHERE rml.partID = pkitAssemblyID AND rml.isDeleted = 0  \n" +
                "									UNION    \n" +
                "									SELECT mfgpnid AS componentID FROM rfq_lineitems_alternatepart    \n" +
                "									WHERE partID = pkitAssemblyID AND isdeleted = 0  \n" +
                "								) a WHERE a.componentID = @componentId LIMIT 1;  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN        \n" +
                "									CLOSE barcodeMatch_cursor;                                    \n" +
                "									LEAVE barcodeMatch_loop;        \n" +
                "								END IF;     \n" +
                "							END IF;        \n" +
                "							IF  @componentCount = 1 THEN                                    \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                    \n" +
                "							END IF;              \n" +
                "						END IF;                                    \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                    \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                            \n" +
                "							SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                    \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;                    \n" +
                "						IF @componentCount > 1 THEN                          \n" +
                "							CLOSE barcodeMatch_cursor;                                    \n" +
                "							LEAVE barcodeMatch_loop;                          \n" +
                "						END IF;                             \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                    \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                     \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                    \n" +
                "  \n" +
                "					ELSE                \n" +
                "						-- component_sid_stock_dataelement_Values                                      \n" +
                "						-- dynamic fields                   \n" +
                "						SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);               \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                    \n" +
                "						END IF;              \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                     \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                 \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                     \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                             \n" +
                "					END IF;                                    \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;              \n" +
                "				-- check if mfg and component both found than         \n" +
                "				IF (BarcodeMFGMatch = 'Mismatch') THEN    \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN  \n" +
                "					-- if (v_BarcodeType = 1) then  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);        \n" +
                "					-- else  \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);        \n" +
                "					-- end if;  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not found in bom of this assembly.',7,MFG_Part_No);        \n" +
                "				ELSEIF (@componentCount > 1) THEN                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                    \n" +
                "				ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                    \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                    \n" +
                "					   IF @Mfgmatched = 0  THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                    \n" +
                "					   END IF;									                                    \n" +
                "				 ELSE 		                          \n" +
                "					IF @mfgCount = 0 THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                    \n" +
                "					END IF;	                                    \n" +
                "					IF @componentCount = 0 THEN                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                    \n" +
                "					END IF;	                                    \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND @componentCount=0  THEN                                      \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                    \n" +
                "					END IF;						                                    \n" +
                "				END IF;				                                    \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                      \n" +
                "					SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                      \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                      \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                    \n" +
                "					END IF;                      \n" +
                "				END IF;                      \n" +
                "  \n" +
                "				IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                    \n" +
                "					IF (pprefix = '') THEN	                      \n" +
                "						CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                      \n" +
                "						SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                      \n" +
                "					END IF;                   \n" +
                "  \n" +
                "					-- must call statements in sequence          				                          \n" +
                "					SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                    \n" +
                "					PREPARE stmt1 FROM @SQL1;                                    \n" +
                "					EXECUTE stmt1;                                  \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                      \n" +
                "					IF (pnickName IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                      \n" +
                "					END IF;        \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);  \n" +
                "  \n" +
                "					IF (pRefCpnMfgID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                      \n" +
                "					END IF;         \n" +
                "  \n" +
                "					IF (pCustomerID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                      \n" +
                "					END IF;     \n" +
                "  \n" +
                "					IF (pAssyID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                      \n" +
                "					END IF;       \n" +
                "  \n" +
                "					IF (pSalesOrderDetailID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                      \n" +
                "					END IF;        \n" +
                "  \n" +
                "					IF (pReceiveMaterialType IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                   \n" +
                "					END IF;     \n" +
                "  \n" +
                "					IF (v_SupplierID IS NOT NULL) THEN                      \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                      \n" +
                "					END IF;     \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());  \n" +
                "  \n" +
                "					SET @sql2 = UpdateValue;	                                     \n" +
                "					PREPARE stmt2 FROM @SQL2;                                    \n" +
                "					EXECUTE stmt2;	  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                    \n" +
                "					IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                          \n" +
                "						INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                     \n" +
                "						SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                    \n" +
                "					END IF;                                      \n" +
                "  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "				ELSE                                   \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                    \n" +
                "				END IF;                                    \n" +
                "  \n" +
                "			ELSE                                \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                     \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                      \n" +
                "			END IF;                                    \n" +
                "  \n" +
                "		END block2;   \n" +
                "	END IF;                                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-03-2019 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMPartAndPackagingAliasByAssembly` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMPartAndPackagingAliasByAssembly`(	            \n" +
                "	IN pPartID INT        \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT rml.rfqLineItemsID, cp.componentID AS mfgPNID, rml.mfgPN, rml.partID FROM component_packagingalias cp    \n" +
                "	LEFT JOIN component c ON c.packaginggroupID = cp.aliasgroupid    \n" +
                "	LEFT JOIN rfq_lineitems_alternatepart rml ON rml.mfgpnid = c.id    \n" +
                "	WHERE rml.partID = pPartID AND rml.isDeleted = 0  \n" +
                "	UNION    \n" +
                "	SELECT rla.rfqLineItemsID, rla.mfgPNID, rla.mfgPN, rla.partID FROM rfq_lineitems_alternatepart rla   \n" +
                "	WHERE partID = pPartID AND isdeleted = 0;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 27-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (450,'2.00','V1',' Sproc_MatchBarCodeAndSaveDelimiters, Sproc_GetBOMPartAndPackagingAliasByAssembly  - FENIL '," + userid + ");"
            );
            break;
        case 450:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetNoneTypeComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetNoneTypeComponent`()  \n" +
                "BEGIN    \n" +
                "SELECT c.id,c.mfgPN,c.connecterTypeID,c.connectorTypeText,c.mountingTypetext,c.mountingTypeID,c.uomText,c.uom,c.rohsText,c.RoHSStatusID,functionalCategoryID,  \n" +
                "functionalCategoryText  \n" +
                " FROM component c LEFT JOIN mfgcodemst mg    \n" +
                "ON mg.id=c.mfgcodeID    \n" +
                "WHERE  mg.mfgType='MFG' AND c.isdeleted=0 AND c.isCustom=0 AND ((c.connecterTypeID=-1 AND c.connectorTypeText IS NOT NULL)    \n" +
                " OR (c.mountingTypeID=-1 AND c.mountingTypetext IS NOT NULL) OR   \n" +
                " (c.RoHSStatusID=-1 AND c.rohsText IS NOT NULL) OR   \n" +
                "  (c.functionalCategoryID=-1 AND c.functionalCategoryText IS NOT NULL) OR   \n" +
                " (c.uom=0 AND c.uomText IS NOT NULL));    \n" +
                "END;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_refreshComponentStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_refreshComponentStatus`(	      \n" +
                "	 IN tableName VARCHAR(255),  \n" +
                "         IN typetext VARCHAR(255)      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  DECLARE dataid INT;  \n" +
                "  IF(tableName='rfq_connectertypemst')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id  FROM rfq_connectertypemst WHERE `name`=typetext AND isDeleted=0    \n" +
                "  UNION    \n" +
                "  SELECT refid AS id   FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_connectertypemst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET connecterTypeID=dataid WHERE connectorTypeText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  IF(tableName='rfq_mountingtypemst')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id FROM rfq_mountingtypemst WHERE `name`=typetext AND isDeleted=0    \n" +
                "   UNION    \n" +
                "   SELECT refid AS id   FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_mountingtypemst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET mountingTypeID=dataid WHERE mountingTypeText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(tableName='uoms')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id  FROM uoms WHERE `unitName`=typetext AND isDeleted=0  \n" +
                "  UNION    \n" +
                "  SELECT refid AS id FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='uoms' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET uom=dataid WHERE uomText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  IF(tableName='rfq_parttypemst')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id  FROM rfq_parttypemst WHERE `partTypeName`=typetext AND isDeleted=0  \n" +
                "  UNION    \n" +
                "  SELECT refid AS id FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_parttypemst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET functionalCategoryID=dataid WHERE functionalCategoryText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "  IF(tableName='rfq_rohsmst')THEN  \n" +
                "  SELECT id INTO dataid FROM (SELECT id  FROM rfq_rohsmst WHERE `name`=typetext AND isDeleted=0    \n" +
                "  UNION    \n" +
                "  SELECT refid AS id    FROM  component_fields_genericalias_mst   \n" +
                "  WHERE refTableName='rfq_rohsmst' AND alias=typetext AND isDeleted=0)AS a;  \n" +
                "	IF(dataid IS NOT NULL)THEN  \n" +
                "	UPDATE component SET RoHSStatusID=dataid WHERE rohsText=typetext AND isDeleted=0;  \n" +
                "	END IF;   \n" +
                "  END IF;  \n" +
                "SELECT dataid;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (451,'2.00','V1',' Update sp Sproc_GetNoneTypeComponent,Sproc_refreshComponentStatus-Champak '," + userid + ");"
            );
            break;
        case 451:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-03-2019  *********************************** */
                "ALTER TABLE dataelement MODIFY rangeFrom DECIMAL(14,6);  \n" +
                "  \n" +
                " ALTER TABLE dataelement MODIFY rangeTo DECIMAL(14,6);  \n" +
                /* **************************** Add Script Version -> 28-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (452,'2.00','V1',' Data element range from - to decimal data type  - KETAN '," + userid + ");"
            );
            break;
        case 452:
            allDbChangesArray.push(
                //  /* **************************** New Script -> 29-03-2019  *********************************** */
                "update page_detail set menuName=pageName where menuName='';  \n" +
                "update page_detail set menuName=pageName where menuName is null;  \n" +
                "update page_detail  set menuRoute=null ,pageRoute=null,pageURl=null where pageName= 'generic category';  \n" +
                "  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Miscellaneous') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Printer Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Miscellaneous') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Print Format Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Miscellaneous') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Shipping Type Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Operation') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Operation Type Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Certificate Standard') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Standard Type Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Personnel') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Employee Title Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Personnel') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Work Area Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Equipment & Workstation') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Equipment Group Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Equipment & Workstation') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Equipment Type Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Equipment & Workstation') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Equipment Ownership Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Equipment & Workstation') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Location Type Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Part Attributes') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Part Status Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Part Attributes') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Part Status Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='Barcodes') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Barcode Separator Generic Category';  \n" +
                "update page_detail pd,(select a.pageID from page_detail a where a.pageName='CustomerMenu') pg set pd.parentPageID= pg.pageID  \n" +
                " where pd.pageName='Manage Terms Generic Category';  \n" +
                "  \n" +
                "update page_detail set isActive=0 where pageName ='Manage Shipping Status Generic Category';  \n" +
                "update page_detail set isActive=0 where pageName ='Manage Operation Verification Status Generic Category';  \n" +
                "  \n" +
                "update page_detail set menuName='Manage Data Tracking Entity' where pageName='Manage Entity';  \n" +
                "update page_detail set menuName='Define Custom Forms Manage Data Fields' where pageName='Custom Forms Manage Data Fields';  \n" +
                "update page_detail set menuName='Define Custom Forms Manage Data Fields' where pageName='Custom Forms Manage Data Fields';  \n" +
                "update page_detail set menuName='Manage Predefined Chat Message' where pageName='Manage Standard Message';  \n" +
                "update page_detail set menuName='Manage Department' where pageName='Manage Department';  \n" +
                "update page_detail set menuName='Manage Supplier' where pageName='Manage Supplier';  \n" +
                "update page_detail set menuName='Manage Personnel' where pageName='Manage Employee';  \n" +
                "update page_detail set menuName='Manage Personnel Operation' where pageName='Manage Employee Operation';  \n" +
                "update page_detail set menuName='Manage Title' where pageName='Manage Employee Title Generic Category';  \n" +
                "update page_detail set menuName='Manage Work Order Personnel' where pageName='Manage Work Order Employees';  \n" +
                "update page_detail set menuName='Manage Work Order Operation Personnel' where pageName='Manage Work Order Operation Employees';  \n" +
                "update page_detail set menuName='Manage Responsibility' where pageName='Manage Work Area Generic Category';  \n" +
                "update page_detail set menuName='Manage Customer' where pageName='Manage Customer';  \n" +
                "update page_detail set menuName='Manage Parts Customer LOA' where pageName='Manage Parts Customer LOA';  \n" +
                "update page_detail set menuName='Manage Payment Term' where pageName='Manage Terms Generic Category';  \n" +
                "update page_detail set menuName='Manage Standard Type' where pageName='Manage Standard Type Generic Category';  \n" +
                "update page_detail set menuName='Manage Standard ' where pageName='Manage Certificate standard';  \n" +
                "update page_detail set menuName='Manage Parts Standards' where pageName='Manage Parts Standards';  \n" +
                "update page_detail set menuName='Manage Work Order Standards' where pageName='Manage Work Order Standards';  \n" +
                "update page_detail set menuName='Manage Equipment & Workstation' where pageName='Manage Equipment & Workstation';  \n" +
                "update page_detail set menuName='Manage Equipment & Workstation Groups' where pageName='Manage Equipment Group Generic Category';  \n" +
                "update page_detail set menuName='Manage Equipment & Workstation Ownerships' where pageName='Manage Equipment Ownership Generic Category';  \n" +
                "update page_detail set menuName='Manage Equipment & Workstation Type' where pageName='Manage Equipment Type Generic Category';  \n" +
                "update page_detail set menuName='Manage Work Order Equipment & Workstation' where pageName='Manage Work Order Equipments';  \n" +
                "update page_detail set menuName='Manage Location' where pageName='Manage Location Type Generic Category';  \n" +
                "update page_detail set menuName='Manage Parts' where pageName='Manage Parts';  \n" +
                "update page_detail set menuName='Manage Parts Alias & Alternate Groups' where pageName='Manage Parts Alias & Alternate Groups';  \n" +
                "update page_detail set menuName='Manage Parts BOM' where pageName='Manage Parts BOM';  \n" +
                "update page_detail set menuName='Manage Parts Comments' where pageName='Manage Parts Comments';  \n" +
                "update page_detail set menuName='Manage Parts Detail' where pageName='Manage Parts Detail';  \n" +
                "update page_detail set menuName='Manage Parts Document' where pageName='Manage Parts Document';  \n" +
                "update page_detail set menuName='Manage Parts Miscellaneous' where pageName='Manage Parts Miscellaneous';  \n" +
                "update page_detail set menuName='Manage Parts Pricing History' where pageName='Manage Parts Pricing History';  \n" +
                "update page_detail set menuName='Manage Parts Standards' where pageName='Manage Parts Standards';  \n" +
                "update page_detail set menuName='Manage Part Status' where pageName='Manage Part Status Generic Category';  \n" +
                "update page_detail set menuName='Manage Barcode Separator' where pageName='Manage Barcode Separator Generic Category';  \n" +
                "update page_detail set menuName='Manage Barcode Template' where pageName='Manage Barcode template';  \n" +
                "update page_detail set menuName='Manage Operation Type' where pageName='Manage Operation Type Generic Category';  \n" +
                "update page_detail set menuName='Manage Work Order Operation' where pageName='Manage Work Order Operations';  \n" +
                "update page_detail set menuName='Manage Operation' where pageName='Manage Operation';  \n" +
                "update page_detail set menuName='Manage Printer' where pageName='Manage Printer Generic Category';  \n" +
                "update page_detail set menuName='Manage Label Templates' where pageName='Manage Print Format Generic Category';  \n" +
                "update page_detail set menuName='Manage Shipping Methods' where pageName='Manage Shipping Type Generic Category';  \n" +
                "update page_detail set menuName='Manage Work Order Data Fields' where pageName='Manage Work Order Datafields';  \n" +
                "update page_detail set menuName='Manage Work Order Detail' where pageName='Manage Work Order Detail';  \n" +
                "update page_detail set menuName='Manage Work Order Documents' where pageName='Manage Work Order Documents';  \n" +
                "update page_detail set menuName='Manage Work Order Personnel' where pageName='Manage Work Order Employees';  \n" +
                "update page_detail set menuName='Manage Work Order Operation Personnel' where pageName='Manage Work Order Operation Employees';  \n" +
                "update page_detail set menuName='Manage Work Order Equipments' where pageName='Manage Work Order Equipments';  \n" +
                "update page_detail set menuName='Manage Work Order Invite People' where pageName='Manage Work Order Invite People';  \n" +
                "update page_detail set menuName='Manage Work Order Other Details' where pageName='Manage Work Order Other Details';  \n" +
                "update page_detail set menuName='Manage Work Order Parts' where pageName='Manage Work Order Parts';  \n" +
                "update page_detail set menuName='Manage Work Order Standards' where pageName='Manage Work Order Standards';  \n" +
                "update page_detail set menuName='Manage Shipping Records' where pageName='Manage Shipped';  \n" +
                "update page_detail set menuName='Manage Request For Shipment' where pageName='Manage Request For Shipment';  \n" +
                "update page_detail set menuName='Manage RFQ' where pageName='Manage RFQ';  \n" +
                "update page_detail set menuName='Traveler' where pageName='Traveler';  \n" +
                "update page_detail set menuName='Manage Traveler' where pageName='manage traveler';  \n" +
                "update page_detail set menuName='Manage Forms' where pageName='Manage Forms';  \n" +
                "update page_detail set menuName='Manage Page' where pageName='Manage page';  \n" +
                "update page_detail set menuName='Manage work Order manual Entry' where pageName='Manage work Order manual Entry';  \n" +
                "update page_detail set menuName='RFQ Types' where pageName='Rfq Type';  \n" +
                "update page_detail set menuName='Manage Shipping Status' where pagename='Manage Shipping Status Generic Category';  \n" +
                "update page_detail set menuName='Manage Operation Verification Status' where pagename='Manage Operation Verification Status Generic Category';  \n" +
                //  /* **************************** Add Script Version -> 29-03-2019 *********************************** */
                "Drop PROCEDURE if exists `Sproc_GetPermissionsPageListByRole`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(      \n" +
                "	IN ppageIndex INT(11),      \n" +
                "	IN precordPerPage INT(11),      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pUserId INT(11),    \n" +
                "	IN pRoleId INT(11)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);     \n" +
                "  \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	IF (@result1 = 0) THEN    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS    \n" +
                "			SELECT `rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay` FROM `rolepagedetail` AS `rp`    \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`    \n" +
                "			WHERE `rp`.`roleID` = pRoleId AND `rp`.`deletedAt` IS NULL AND `pd`.`deletedAt` IS NULL AND `pd`.`isActive` = 1;    \n" +
                "  \n" +
                "			INSERT INTO PageResults (roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay)    \n" +
                "			SELECT pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay     \n" +
                "			FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM rolepagedetail WHERE roleID = pRoleId AND deletedAt IS NULL);    \n" +
                "	ELSE    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS    \n" +
                "			SELECT `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`, `up`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay` FROM `userpagedetail` AS `up`    \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`    \n" +
                "			WHERE `up`.`userID` = pUserId AND `up`.`roleID` = pRoleId AND `up`.`deletedAt` IS NULL AND `pd`.`deletedAt` IS NULL AND `pd`.`isActive` = 1;    \n" +
                "  \n" +
                "		INSERT INTO PageResults (roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay)    \n" +
                "		SELECT pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay     \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1' ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE	      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );      \n" +
                "	PREPARE query1 FROM @SQLStatement1;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;    \n" +
                "END;  \n" +
                //  /* **************************** Add Script Version -> 29-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (453,'2.00','V1','update Page_detail entry-Mona'," + userid + ");"
            );
            break;
        case 453:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-03-2019  *********************************** */
                "INSERT INTO rfq_parttypemst (partTypeName,displayOrder,isActive,createdBy,isDeleted)  \n" +
                "VALUES ('Chemical',0.12,1,'1',0);  \n" +
                "UPDATE rfq_parttypemst SET id=-3 WHERE partTypeName='Chemical';  \n" +
                "UPDATE rfq_parttypemst SET displayOrder=0.13 WHERE partTypeName='Component';  \n" +
                /* **************************** Add Script Version -> 29-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (454,'2.00','V1',' Add default data in  rfq_parttypemst - Champak '," + userid + ");"
            );
            break;
        case 454:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-03-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                      \n" +
                "    IN pWhereClause VARCHAR(16383),                                      \n" +
                "    IN puserID VARCHAR(50),                                \n" +
                "    IN pnickName VARCHAR(20),                                \n" +
                "    IN pprefix VARCHAR(20),                                \n" +
                "    IN puid VARCHAR(20),                            \n" +
                "    IN pComponentID INT,                        \n" +
                "    IN pCustomerID INT,                        \n" +
                "    IN pCPN BOOL,                        \n" +
                "    IN pMFGAvailabel BOOL,                        \n" +
                "    IN pRefCpnMfgID INT,                    \n" +
                "    IN pAssyID INT,                    \n" +
                "    IN pSalesOrderDetailID INT,		                    \n" +
                "    IN pReceiveMaterialType VARCHAR(255),          \n" +
                "    IN pkitAssemblyID INT,    \n" +
                "    IN pBarcodeID INT 	                   \n" +
                "    )  \n" +
                "BEGIN                                      \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                      \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                      \n" +
                "	DECLARE v_length INT;                                       \n" +
                "	DECLARE v_fieldType INT;                                           \n" +
                "	DECLARE v_entityId INT;                                      \n" +
                "	DECLARE v_dataElementId INT;                                      \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                      \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                      \n" +
                "	DECLARE strLabel VARCHAR(2000);                                      \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                      \n" +
                "	DECLARE StaticField VARCHAR(100);                \n" +
                "	DECLARE DynamicField VARCHAR(100);		                \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                      \n" +
                "	DECLARE valuesforInsert VARCHAR(200) DEFAULT CONCAT('\"',pWhereClause,'\"');                                      \n" +
                "	DECLARE plen,slen INT;                                      \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                      \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                  \n" +
                "	DECLARE barcode_type_id INT;                            \n" +
                "	DECLARE MFG_Part_No VARCHAR(100);                        \n" +
                "	DECLARE UpdateValue VARCHAR(16383);         \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';        \n" +
                "	DECLARE v_SupplierID INT;    \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);      \n" +
                "	DECLARE v_barcode_id INT;    \n" +
                "	DECLARE v_barcode_count INT;    \n" +
                "	DECLARE v_NumberOfPart INT;     \n" +
                "	DECLARE v_rfqLineItemsID INT;                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                       \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                      \n" +
                "	(                                      \n" +
                "	     errorText NVARCHAR(2000),                                      \n" +
                "	     IsSuccess VARCHAR (2),                            \n" +
                "	     MFGPart VARCHAR(100)                                           \n" +
                "	);                           \n" +
                "	-- get data from barcode templates with seprator                                      \n" +
                "	block1: BEGIN    \n" +
                "  \n" +
                "		IF (pBarcodeID IS NULL) THEN    \n" +
                "			SELECT COUNT(*) INTO v_barcode_count FROM br_label_template  WHERE deletedAt IS NULL  AND                                       \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND    \n" +
                "			(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;       \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN    \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL  AND                                       \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND    \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;      \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                       \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;    \n" +
                "			ELSE    \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND                                       \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND    \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;       \n" +
                "				SET pBarcodeID = v_barcode_id;    \n" +
                "			END IF;    \n" +
                "		ELSE     \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID;    \n" +
                "		END IF;    \n" +
                "		IF (barcode_type_id IS NULL) THEN        \n" +
                "			SELECT COUNT(*) INTO v_NumberOfPart FROM               \n" +
                "			(              \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL              \n" +
                "				UNION              \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID               \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL              \n" +
                "			) a;    \n" +
                "			IF (v_NumberOfPart > 0) THEN	    \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);      \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL  AND     \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;    \n" +
                "				SET pBarcodeID = v_barcode_id;    \n" +
                "			END IF;        \n" +
                "		END IF;     \n" +
                "  \n" +
                "		-- tempregexp;    	              \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */      \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                    \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;    \n" +
                "			SET v_BarcodeType = '2D';                            \n" +
                "		ELSE /* barcode 1D */         \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                     \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;            \n" +
                "			SET v_BarcodeType = '1D';                         \n" +
                "		END IF;    \n" +
                "	END block1;                                      \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN    \n" +
                "		block2: BEGIN    \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                      \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                      \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                   \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                               \n" +
                "			-- declare exit loop if data not found                                      \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                      \n" +
                "			-- if any record match found than  check for delimiter and its value                                 \n" +
                "  \n" +
                "			IF (pbr_template_ID > 0) THEN                                      \n" +
                "				-- create temporary table for deliemeter and component dataelement                                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                      \n" +
                "					pentityId INT,                                      \n" +
                "					pdataElementId INT,                                      \n" +
                "					pdelimiter_value VARCHAR(200)                                      \n" +
                "				);                                 \n" +
                "  \n" +
                "				-- create temporary table for separator string values                                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                      \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue CHAR(255));                            \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                      \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                           \n" +
                "  \n" +
                "				-- open cursor                                      \n" +
                "				OPEN barcodeMatch_cursor;                                      \n" +
                "  \n" +
                "				-- set str label as whereclause                                      \n" +
                "				SET strLabel=pWhereClause;                               \n" +
                "  \n" +
                "				-- if prefix is found than remove those from actual string match                                      \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                      \n" +
                "					 SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                      \n" +
                "				 END IF;                                     \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                       \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                      \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                      \n" +
                "				 END IF;	                            \n" +
                "  \n" +
                "				-- insert all values after seprator split                                       \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                      \n" +
                "				PREPARE stmt1 FROM @SQL;	                                      \n" +
                "				EXECUTE stmt1;                                      \n" +
                "  \n" +
                "				-- create dynamic query to insert in recieving material                                      \n" +
                "				SET QueryForStatic = 'insert into component_sid_stock';                 \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                      \n" +
                "				barcodeMatch_loop:LOOP                   \n" +
                "					-- get all five selected values                                      \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                              \n" +
                "  \n" +
                "					-- exit loop if no record found for barcode match                                      \n" +
                "					IF exit_loop THEN                                 \n" +
                "						CLOSE barcodeMatch_cursor;                                      \n" +
                "						LEAVE barcodeMatch_loop;                                      \n" +
                "					END IF;                                 \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                      \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                      \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                      \n" +
                "					EXECUTE stmtdelimiter;                            \n" +
                "  \n" +
                "					-- get delimiter values from string                                      \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                              \n" +
                "					-- check for field type is static or dynamic                                      \n" +
                "					-- if static field than check for mfg code and mfg part number                                      \n" +
                "					IF v_fieldType = 0  THEN                                  \n" +
                "						-- component_sid_stock                                       \n" +
                "						-- get static field name from barcode table delimiter data element id                                      \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                        \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                      \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                            \n" +
                "							SET MFG_Part_No = delimiter_value_data;                            \n" +
                "  \n" +
                "							IF(pComponentID=0)THEN                 \n" +
                "								SELECT COUNT(*), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID INTO @componentCount,@componentId,@mfgPartNO,@partMFG,@mfgPartForSupplier FROM               \n" +
                "								(              \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component c WHERE c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL              \n" +
                "									UNION              \n" +
                "									SELECT c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID               \n" +
                "									WHERE (c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL              \n" +
                "								) a;              \n" +
                "							ELSE                            \n" +
                "								SELECT COUNT(*),id,mfgPN,mfgcodeID INTO @componentCount,@componentId,@mfgPartNO,@partMFG FROM component WHERE id=pComponentID AND deletedAt IS NULL;                            \n" +
                "							END IF;                            \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != @partMFG AND @componentCount = 1) THEN        \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';        \n" +
                "								CLOSE barcodeMatch_cursor;                                      \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;        \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = @partMFG AND deletedAt IS NULL;        \n" +
                "							IF (@MFGType = 'DIST') THEN        \n" +
                "								SET v_SupplierID = @componentId;        \n" +
                "								SELECT id INTO @componentId FROM component WHERE id = @mfgPartForSupplier;        \n" +
                "							END IF;      \n" +
                "  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND @componentId IS NOT NULL) THEN      \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = @componentId limit 1;				          \n" +
                "								SELECT a.componentID INTO v_rfqLineItemsID FROM     \n" +
                "								(    \n" +
                "									SELECT cp.componentID FROM component_packagingalias cp      \n" +
                "									LEFT JOIN component c ON c.packaginggroupID = cp.aliasgroupid      \n" +
                "									LEFT JOIN rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id      \n" +
                "									WHERE rml.partID = pkitAssemblyID AND rml.isDeleted = 0    \n" +
                "									UNION      \n" +
                "									SELECT mfgpnid AS componentID FROM rfq_lineitems_alternatepart      \n" +
                "									WHERE partID = pkitAssemblyID AND isdeleted = 0    \n" +
                "								) a WHERE a.componentID = @componentId LIMIT 1;    \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN          \n" +
                "									CLOSE barcodeMatch_cursor;                                      \n" +
                "									LEAVE barcodeMatch_loop;          \n" +
                "								END IF;       \n" +
                "							END IF;          \n" +
                "							IF  @componentCount = 1 THEN                                      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                      \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',@componentId, '\"'); 	    				                                      \n" +
                "							END IF;                \n" +
                "						END IF;                                      \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                      \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                              \n" +
                "							SELECT COUNT(*),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                      \n" +
                "						END IF;                        \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                      \n" +
                "						END IF;                      \n" +
                "						IF @componentCount > 1 THEN                            \n" +
                "							CLOSE barcodeMatch_cursor;                                      \n" +
                "							LEAVE barcodeMatch_loop;                            \n" +
                "						END IF;                               \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                      \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                       \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                      \n" +
                "  \n" +
                "					ELSE                  \n" +
                "						-- component_sid_stock_dataelement_Values                                        \n" +
                "						-- dynamic fields                     \n" +
                "						SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                 \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                      \n" +
                "						END IF;                      \n" +
                "  \n" +
                "						IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                      \n" +
                "						END IF;                \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                       \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                   \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                       \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                               \n" +
                "					END IF;                                      \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                \n" +
                "				-- check if mfg and component both found than           \n" +
                "				IF (BarcodeMFGMatch = 'Mismatch') THEN      \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN    \n" +
                "					-- if (v_BarcodeType = 1) then    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);          \n" +
                "					-- else    \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);          \n" +
                "					-- end if;    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN is not found in bom of this assembly.',7,MFG_Part_No);          \n" +
                "				ELSEIF (@componentCount > 1) THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFG PN found',5,MFG_Part_No);                                      \n" +
                "				ELSEIF (@mfgCount > 0 AND @componentCount > 0) THEN                                      \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=@mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                      \n" +
                "					   IF @Mfgmatched = 0  THEN                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and Mfg partNO are avialable but not matched in component',2,MFG_Part_No);							                                      \n" +
                "					   END IF;									                                      \n" +
                "				 ELSE 		                            \n" +
                "					IF @mfgCount = 0 THEN                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode is not found',3,MFG_Part_No);                                      \n" +
                "					END IF;	                                      \n" +
                "					IF @componentCount = 0 THEN                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFG PN does not exist',4,MFG_Part_No);                                      \n" +
                "					END IF;	                                      \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND @componentCount=0  THEN                                        \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Mfgcode and MfgpartNO is not Found',0,MFG_Part_No);                                      \n" +
                "					END IF;						                                      \n" +
                "				END IF;				                                      \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                        \n" +
                "					SELECT mfgcodeId INTO @codeFromPart FROM component WHERE id = @componentId;                        \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                        \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN MFG Part is mismatch with CPN MFG Code',6,MFG_Part_No);                                      \n" +
                "					END IF;                        \n" +
                "				END IF;                        \n" +
                "  \n" +
                "				IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                      \n" +
                "					IF (pprefix = '') THEN	                        \n" +
                "						CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                        \n" +
                "						SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                        \n" +
                "					END IF;                     \n" +
                "  \n" +
                "					-- must call statements in sequence          				                            \n" +
                "					SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');		                                      \n" +
                "					PREPARE stmt1 FROM @SQL1;                                      \n" +
                "					EXECUTE stmt1;                                    \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT('Update component_sid_stock set uid =','\"',puid,'\"',',prefix=','\"',pprefix,'\"');                        \n" +
                "					IF (pnickName IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                        \n" +
                "					END IF;          \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);    \n" +
                "  \n" +
                "					IF (pRefCpnMfgID IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                        \n" +
                "					END IF;           \n" +
                "  \n" +
                "					IF (pCustomerID IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                        \n" +
                "					END IF;       \n" +
                "  \n" +
                "					IF (pAssyID IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                        \n" +
                "					END IF;         \n" +
                "  \n" +
                "					IF (pSalesOrderDetailID IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                        \n" +
                "					END IF;          \n" +
                "  \n" +
                "					IF (pReceiveMaterialType IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                     \n" +
                "					END IF;       \n" +
                "  \n" +
                "					IF (v_SupplierID IS NOT NULL) THEN                        \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                        \n" +
                "					END IF;       \n" +
                "  \n" +
                "					SET UpdateValue = CONCAT(UpdateValue,' where id=',LAST_INSERT_ID());    \n" +
                "  \n" +
                "					SET @sql2 = UpdateValue;	                                       \n" +
                "					PREPARE stmt2 FROM @SQL2;                                      \n" +
                "					EXECUTE stmt2;	    \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (LAST_INSERT_ID(),1,MFG_Part_No);                                      \n" +
                "					IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                            \n" +
                "						INSERT INTO component_sid_stock_dataelement_values (`refsidid`,`entityid`,`dataelementid`,`value`, `createdBy`)                                       \n" +
                "						SELECT LAST_INSERT_ID(),t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                      \n" +
                "					END IF;                                        \n" +
                "  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                      \n" +
                "				ELSE                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                      \n" +
                "				END IF;                                      \n" +
                "  \n" +
                "			ELSE                                  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                       \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                        \n" +
                "			END IF;                                      \n" +
                "  \n" +
                "		END block2;     \n" +
                "	END IF;                                                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-03-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (455,'2.00','V1',' Sproc_MatchBarCodeAndSaveDelimiters  - FENIL '," + userid + ");"
            );
            break;
        case 455:
            allDbChangesArray.push(
                /* **************************** New Script -> 03/29/2019   *********************************** */
                "CREATE TABLE packing_slip_material_receive (  \n" +
                "	id INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "	poNumber VARCHAR(50),  \n" +
                "	mfgCodeID INT(11),  \n" +
                "	supplierSONumber VARCHAR(50),  \n" +
                "	packingSlipNumber VARCHAR(50),  \n" +
                "	invoiceNumber VARCHAR(50),  \n" +
                "	description VARCHAR(1000),  \n" +
                "	billToAddress VARCHAR(1000),  \n" +
                "	shipToAddress VARCHAR(1000),  \n" +
                "	poVersion VARCHAR(255),  \n" +
                "	freight DECIMAL(16,8),  \n" +
                "	tax DECIMAL(16,8),  \n" +
                "	invoiceVerified TINYINT(1),  \n" +
                "	createdBy varchar(255),   \n" +
                "	createdAt datetime,   \n" +
                "	updatedBy varchar(255),  \n" +
                "	updatedAt datetime,   \n" +
                "	deletedBy varchar(255),   \n" +
                "	deletedAt datetime,   \n" +
                "	isDeleted tinyint(1),  \n" +
                "	PRIMARY KEY (id),  \n" +
                "    KEY FK_packing_slip_material_receive_mfgCodeID (mfgCodeID),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_mfgCodeID FOREIGN KEY (mfgCodeID) REFERENCES mfgcodemst (id)  \n" +
                ") ENGINE=InnoDB DEFAULT CHARSET=utf8;  \n" +
                /* **************************** New Script -> 03/29/2019   *********************************** */
                "CREATE TABLE packing_slip_material_receive_det (  \n" +
                "	id INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "    refPackingSlipMaterialRecID INT(11),  \n" +
                "	packingSlipSerialNumber VARCHAR(50),  \n" +
                "	nickname VARCHAR(50),  \n" +
                "    partID INT(11),  \n" +
                "    orderedQty INT(11),  \n" +
                "    receivedQty INT(11),  \n" +
                "    binID INT(11),  \n" +
                "    warehouseID INT(11),  \n" +
                "    parentWarehouseID INT(11),  \n" +
                "	unitPrice DECIMAL(16,8),  \n" +
                "	priceApproved tinyint(1),  \n" +
                "    disputedPrice DECIMAL(16,8),  \n" +
                "	createdBy varchar(255),   \n" +
                "	createdAt datetime,   \n" +
                "	updatedBy varchar(255),  \n" +
                "	updatedAt datetime,   \n" +
                "	deletedBy varchar(255),   \n" +
                "	deletedAt datetime,   \n" +
                "	isDeleted tinyint(1),  \n" +
                "	PRIMARY KEY (id),  \n" +
                "    KEY FK_packing_slip_material_receive_det_refPackingSlipMaterialRecID (refPackingSlipMaterialRecID),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_det_refPackingSlipMaterialRecID FOREIGN KEY (refPackingSlipMaterialRecID) REFERENCES packing_slip_material_receive (id),  \n" +
                "    KEY FK_packing_slip_material_receive_det_partID (partID),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_det_partID FOREIGN KEY (partID) REFERENCES component (id),  \n" +
                "    KEY FK_packing_slip_material_receive_det_binID (binID),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_det_binID FOREIGN KEY (binID) REFERENCES binmst (id),  \n" +
                "    KEY FK_packing_slip_material_receive_det_warehouseID (warehouseID),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_det_warehouseID FOREIGN KEY (warehouseID) REFERENCES warehousemst (id),  \n" +
                "    KEY FK_packing_slip_material_receive_det_parentWarehouseID (parentWarehouseID),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_det_parentWarehouseID FOREIGN KEY (parentWarehouseID) REFERENCES warehousemst (parentWHID)  \n" +
                ") ENGINE=InnoDB DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 03/29/2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (456,'2.00','V1',' Created table for packaging slip  - Dharmishtha '," + userid + ");"
            );
            break;
        case 456:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-03-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_AssyQuantityPriceSelectionSettings` ;  \n" +
                  "CREATE PROCEDURE `Sproc_AssyQuantityPriceSelectionSettings`(	        \n" +
                  "	IN ppageIndex INT(11),        \n" +
                  "	IN precordPerPage INT(11),        \n" +
                  "	IN pOrderBy VARCHAR(255),	        \n" +
                  "        IN pWhereClause VARCHAR(16383),        \n" +
                  "        IN prfqAssyID INT (11)            \n" +
                  "    )  \n" +
                  "BEGIN        \n" +
                  "  \n" +
                  "	DECLARE pOffset INT(11);        \n" +
                  "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                  "	/* DECLARE SQLStatement varchar(255); */        \n" +
                  "  \n" +
                  "  \n" +
                  "  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS PriceSetting AS        \n" +
                  "      SELECT rq.id AS qtyID,rq.requestQty,    \n" +
                  "     CASE WHEN  rq.quantityType=1 THEN 'Proto'    \n" +
                  "     WHEN  rq.quantityType=2 THEN 'Unknown'     \n" +
                  "     ELSE 'Production' END quantityTypeName,     \n" +
                  "      rs.id,IFNULL(rs.stock,0) stock,IFNULL(rs.stockPercentage,0) stockPercentage,IFNULL(rs.price,0) price,rs.isCheckRequiredQty,rs.isLeadTime,rs.remark,cp.name,rs.packagingID         \n" +
                  "       FROM rfq_assy_quantity rq LEFT OUTER JOIN rfq_assy_quantity_price_selection_setting rs  ON rq.id=rs.qtyID     \n" +
                  "       LEFT JOIN component_packagingmst cp ON cp.id=rs.packagingID AND cp.isDeleted=0    \n" +
                  "       WHERE IFNULL(rq.isdeleted,0) = 0 AND rq.rfqAssyID=prfqAssyID;        \n" +
                  "  \n" +
                  "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                  "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                  "	ELSE        \n" +
                  "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;        \n" +
                  "	END IF;	        \n" +
                  "  \n" +
                  "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                  "  \n" +
                  "		SET pWhereClause = '1=1' ;        \n" +
                  "	END IF;	        \n" +
                  "  \n" +
                  "  \n" +
                  "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                  "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                  "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                  "	ELSE	        \n" +
                  "		SET rowNumWhere = '';        \n" +
                  "	END IF;	        \n" +
                  "  \n" +
                  "  \n" +
                  "	/* to get total count of rows */        \n" +
                  "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PriceSetting where \", pWhereClause );            \n" +
                  "	PREPARE query1 FROM @SQLStatement1;        \n" +
                  "	EXECUTE query1;        \n" +
                  "	DEALLOCATE PREPARE query1;        \n" +
                  "  \n" +
                  "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PriceSetting where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                  "	PREPARE query2 FROM @SQLStatement2;        \n" +
                  "	EXECUTE query2;        \n" +
                  "	DEALLOCATE PREPARE query2;     \n" +
                  "  \n" +
                  "	DROP TEMPORARY TABLE PriceSetting;        \n" +
                  "  \n" +
                  "  \n" +
                  "    END;  \n" +
            /* **************************** Add Script Version -> 29-03-2019 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (457,'2.00','V1',' alter sp Sproc_AssyQuantityPriceSelectionSettings -champak '," + userid + ");"
            );
            break;
        case 457:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-03-2019 *********************************** */
            "drop procedure if exists `Sproc_GetComponentList`;  \n" +
              "CREATE PROCEDURE `Sproc_GetComponentList`(    \n" +
              "	IN ppageIndex INT(11),    \n" +
              "	IN precordPerPage INT(11),    \n" +
              "	IN pOrderBy VARCHAR(255),    \n" +
              "	IN pWhereClause VARCHAR(16383),    \n" +
              "	IN pIsMFG TINYINT(1),    \n" +
              "    IN pMfgCodeIDs LONGTEXT,    \n" +
              "    IN pPackagingIDs LONGTEXT,    \n" +
              "    IN pPartStatusIDs LONGTEXT,    \n" +
              "    IN pMountingTypeIDs LONGTEXT,    \n" +
              "    IN pFunctionalTypeIDs LONGTEXT,    \n" +
              "    IN pAttributesSearch LONGTEXT    \n" +
              "    )  \n" +
              "BEGIN    \n" +
              "	DECLARE pOffset INT(11);    \n" +
              "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
              "	/* DECLARE SQLStatement varchar(255);  */     \n" +
              "  \n" +
              "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
              "		SELECT DISTINCT co.*, mf.mfgCode,    \n" +
              "		gc.gencCategoryName AS partStatusValue,    \n" +
              "		mf.mfgType,    \n" +
              "		vu_co.MFGPN AS AliasMFGPN,    \n" +
              "		vu_co.mfgcode AS AliasMFGCode,    \n" +
              "		ro.name AS `rohsComplientConvertedValue`,    \n" +
              "		ro.rohsIcon AS `rohsIcon`,    \n" +
              "		(CASE WHEN (`co`.`isGoodPart` = 0) THEN 'No'    \n" +
              "					WHEN (`co`.`isGoodPart` = 1) THEN 'Yes' ELSE '' END) AS `isGoodPartValue`,    \n" +
              "		pt.partTypeName functionalCategoryName,    \n" +
              "        mt.name mountingTypeName,    \n" +
              "		pc.categoryName,    \n" +
              "        rct.name connecterTypeName,    \n" +
              "        u.unitName  \n" +
              "		FROM component co    \n" +
              "        LEFT JOIN rfq_partcategory pc on pc.id = co.partType    \n" +
              "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0    \n" +
              "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus    \n" +
              "		 LEFT JOIN component_alias ca ON ca.aliasgroupID = co.aliasgroupID AND IFNULL(ca.isDeleted,0)=0 AND ca.deletedAt IS NULL    \n" +
              "		LEFT JOIN vu_component_dist_comp_details vu_co ON ca.aliasgroupID = vu_co.aliasgroupID    \n" +
              "		LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0    \n" +
              "        left join rfq_parttypemst pt ON pt.id = co.functionalCategoryID    \n" +
              "        left join rfq_mountingtypemst mt on mt.id = co.mountingTypeID    \n" +
              "        left join rfq_connectertypemst rct ON co.connecterTypeID = rct.id    \n" +
              "        left join uoms u ON u.id = co.uom  \n" +
              "	-- LEFT JOIN vu_component_dist_comp_details vu_co ON co.id = vu_co.compID    \n" +
              "		WHERE IFNULL(co.isdeleted,0) = 0;    \n" +
              "  \n" +
              "	IF (pOrderBy IS NOT NULL) THEN    \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
              "	ELSE    \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;    \n" +
              "	END IF;    \n" +
              "  \n" +
              "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
              "		SET pWhereClause = '1=1' ;    \n" +
              "	END IF;    \n" +
              "  \n" +
              "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
              "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
              "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
              "	ELSE    \n" +
              "		SET rowNumWhere = '';    \n" +
              "	END IF;    \n" +
              "  \n" +
              "	IF pIsMFG THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );    \n" +
              "	ELSE    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );    \n" +
              "	END IF;    \n" +
              "  \n" +
              "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');    \n" +
              "    END IF;    \n" +
              "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND packaging in (', pPackagingIDs, ' )');    \n" +
              "    END IF;    \n" +
              "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND partStatus in (', pPartStatusIDs, ' )');    \n" +
              "    END IF;    \n" +
              "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');    \n" +
              "    END IF;    \n" +
              "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');    \n" +
              "    END IF;    \n" +
              "  \n" +
              "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN    \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND (functionalCategoryText like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR functionalCategoryName like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR mountingTypeText like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR mountingTypeName like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR operatingTemp like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR minOperatingTemp like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR maxOperatingTemp like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR connectorTypeText like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR connecterTypeName like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR noOfPosition like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR noOfRows like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR pitch like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR pitchMating like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR sizeDimension like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR length like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR width like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR heightText like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR height like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR tolerance like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR voltage like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR value like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR partPackage like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR powerRating like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR weight like ''%', pAttributesSearch, '%'' ');    \n" +
              "        SET pWhereClause = CONCAT(pWhereClause, ' OR feature like ''%', pAttributesSearch, '%'' )');    \n" +
              "    END IF;    \n" +
              "  \n" +
              "	/* to get total count of rows */    \n" +
              "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results c where \", pWhereClause );     \n" +
              "	PREPARE query1 FROM @SQLStatement1;    \n" +
              "	EXECUTE query1;    \n" +
              "	DEALLOCATE PREPARE query1;    \n" +
              "  \n" +
              "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
              "    PREPARE query2 FROM @SQLStatement2;    \n" +
              "	EXECUTE query2;    \n" +
              "	DEALLOCATE PREPARE query2;    \n" +
              "  \n" +
              "	DROP TEMPORARY TABLE Results;    \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 29-03-2019 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (458,'2.00','V1','Change Sproc_GetComponentList to add Unit field - Ashish'," + userid + ");"
            );
            break;
        case 458:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-03-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem` ;  \n" +
"CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(                        \n" +
"	IN prfqAssyID INT(1),        \n" +
"    IN ppartID INT(1),        \n" +
"	IN puserID INT(1),    \n" +
"    IN pBOMVersion VARCHAR(50)    \n" +
")  \n" +
"BEGIN                        \n" +
"DECLARE EXIT HANDLER FOR SQLEXCEPTION                        \n" +
"BEGIN                        \n" +
"	ROLLBACK;                        \n" +
"	RESIGNAL;                        \n" +
"END;                        \n" +
"DECLARE EXIT HANDLER FOR SQLWARNING                        \n" +
"  BEGIN                        \n" +
"	ROLLBACK;                        \n" +
"	RESIGNAL;                        \n" +
"END;                        \n" +
" DROP TEMPORARY TABLE IF EXISTS Results;                        \n" +
"  \n" +
"    START TRANSACTION;                \n" +
"  \n" +
"    #consoliadte select                 \n" +
" CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS                 \n" +
" SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;                  \n" +
"  \n" +
"# Select Consolidated rfq_lineitems                        \n" +
"		DROP TEMPORARY TABLE IF EXISTS leveldata;        \n" +
"		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS        \n" +
"			WITH RECURSIVE cte AS            \n" +
"			(         \n" +
"				(SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,        \n" +
"				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, rl.qpa AS qpa1,                        \n" +
"				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part,     \n" +
"                /* we not required this in functionaly this will be used for check in detail     \n" +
"                concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, */    \n" +
"                rl.attritionRate,rl.isInstall,                         \n" +
"				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                        \n" +
"				rl.lineID,rl.numOfPosition,prfqAssyID AS rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode          \n" +
"				FROM rfq_lineitems_alternatepart rla        \n" +
"				JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0        \n" +
"				JOIN component com ON com.id = rla.mfgPNID        \n" +
"                LEFT JOIN component comp ON comp.id = rl.partID        \n" +
"				WHERE rl.partId = ppartID AND rla.isDeleted = 0        \n" +
"				)        \n" +
"			  UNION ALL            \n" +
"  \n" +
"				(SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,        \n" +
"				rla.rfqLineItemsID, rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig, CEILING((cte.qpa1 * rl.qpa)) AS qpa1,                        \n" +
"				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID ) AS part,     \n" +
"				/* we not required this in functionaly this will be used for check in detail     \n" +
"                concat(rla.mfgCode,' | ',rla.mfgPN) as partcode, */    \n" +
"                rl.attritionRate,rl.isInstall,                         \n" +
"				rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,                        \n" +
"				rl.lineID,rl.numOfPosition,prfqAssyID rfqAssyID,rl.uomID,rl.rfqAssyBomID,comp.PIDCode          \n" +
"				FROM rfq_lineitems_alternatepart rla        \n" +
"				JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0        \n" +
"				JOIN component com ON com.id = rla.mfgPNID #and com.category != 3        \n" +
"                LEFT JOIN component comp ON comp.id = rl.partID        \n" +
"				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID        \n" +
"				WHERE rla.isDeleted =0        \n" +
"			   )        \n" +
"			)        \n" +
"			SELECT cte.* FROM cte         \n" +
"			WHERE cte.category !=3        \n" +
"			ORDER BY lineItemID,part;        \n" +
"  \n" +
"		DROP TEMPORARY TABLE IF EXISTS Results;        \n" +
"		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
"		SELECT  GROUP_CONCAT(partlineID) AS consolidatedpartlineID,COUNT(b.rfqLineItemsID) AS multiple,GROUP_CONCAT(b.refDesig) AS consolidatedrefDesig, GROUP_CONCAT(b.rfqLineItemsID) AS consolidatedLineItemIDs,SUM(qpa1)qpa, b.* FROM (        \n" +
"		SELECT CONCAT('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',TRIM(a.lineID)+0,' | QPA:',TRIM(a.qpa1)+0,'}') AS partlineID, GROUP_CONCAT(part) AS part1,    \n" +
"		/* we not required this in functionaly this will be used for check in detail     \n" +
"        GROUP_CONCAT(partcode) as partcode1, */       \n" +
"		a.* FROM leveldata a        \n" +
"		GROUP BY rfqLineItemsID,LEVEL        \n" +
"		)b        \n" +
"		GROUP BY  numOfPosition,isPurchase,part1;       \n" +
"  \n" +
"# Delete consolidated lineItem if consolidatedLineItemIDs  change                        \n" +
"  \n" +
"			UPDATE rfq_consolidated_mfgpn_lineitem cl                        \n" +
"			SET                         \n" +
"			cl.isDeleted = TRUE,                        \n" +
"			cl.deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"			cl.deletedBy = puserID                        \n" +
"			WHERE cl.rfqAssyID = prfqAssyID AND cl.id NOT IN (                        \n" +
"            SELECT * FROM(                             \n" +
"			SELECT id FROM rfq_consolidated_mfgpn_lineitem rcl                        \n" +
"			JOIN Results R ON R.rfqAssyID = rcl.rfqAssyID                         \n" +
"			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.id  IS NOT NULL  AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                        \n" +
"            AND IFNULL(rcl.isDeleted,0) = 0)a);                        \n" +
"  \n" +
"  \n" +
"# insert Consolidated lineItems                         \n" +
"        INSERT INTO `rfq_consolidated_mfgpn_lineitem`                        \n" +
"		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,                        \n" +
"		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,                        \n" +
"		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`)                        \n" +
"		SELECT R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,prfqAssyID `rfqAssyID`,R.`partTypeID`,                        \n" +
"		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, CURRENT_TIMESTAMP() `createdAt`,                        \n" +
"		puserID `createdBy`, R.`numOfPosition`,                        \n" +
"		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`                         \n" +
"        FROM Results R                        \n" +
"		 LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = R.rfqAssyID AND IFNULL(cl.isDeleted,0) = 0                        \n" +
"		 WHERE cl.id IS NULL;                        \n" +
"  \n" +
"# insert Consolidated lineItems Quentity                        \n" +
"  \n" +
"        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`                        \n" +
"		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)                        \n" +
"		SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,CURRENT_TIMESTAMP() `createdAt`  FROM rfq_consolidated_mfgpn_lineitem cl                        \n" +
"		JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0                        \n" +
"        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id                         \n" +
"		WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;                        \n" +
"  \n" +
"# Update Consilidated LineItems Quantity                        \n" +
"        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT * FROM Results) Rs, (SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs FROM rfq_consolidated_mfgpn_lineitem cl                         \n" +
"		WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL                         \n" +
"            AND IFNULL(cl.isDeleted,0) = 0) rcl                         \n" +
"		SET                         \n" +
"		rq.updatedAt = CURRENT_TIMESTAMP(),                        \n" +
"        rq.updatedBy = puserID,                        \n" +
"        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN NULL WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)                        \n" +
"		WHERE  IFNULL(rq.isDeleted,0) = 0 AND rcl.qpa != Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.consolidateID IN(rcl.id);                        \n" +
"# Update Consilidated LineItems                        \n" +
"        UPDATE rfq_consolidated_mfgpn_lineitem cl, (SELECT * FROM Results) R                         \n" +
"		SET                         \n" +
"		cl.isInstall = R.isInstall ,                        \n" +
"		cl.isPurchase = R.isPurchase,                        \n" +
"		cl.numOfPosition = R.numOfPosition,                        \n" +
"		cl.attritionRate = R.attritionRate,                        \n" +
"		cl.leadQty = R.leadQty,                        \n" +
"		cl.valueAddedCost = R.valueAddedCost,                        \n" +
"        cl.updatedAt = CURRENT_TIMESTAMP(),                        \n" +
"        cl.rfqLineItemID = R.rfqLineItemsID,                        \n" +
"        cl.qpa = R.qpa,                        \n" +
"        cl.uomID = R.uomID,              \n" +
"        cl.refDesig = R.consolidatedrefDesig,              \n" +
"        cl.lineID = R.lineID,                        \n" +
"        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,      \n" +
"        cl.consolidatedpartlineID = R.consolidatedpartlineID,      \n" +
"        cl.updatedBy = puserID    \n" +
"        WHERE cl.rfqAssyID = prfqAssyID AND cl.id  IS NOT NULL AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs                        \n" +
"            AND IFNULL(cl.isDeleted,0) = 0;                        \n" +
"  \n" +
" # Update Consilidated LineItems alternate part          \n" +
"        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cla, (SELECT * FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND isDeleted = 0) cl,    \n" +
"        (SELECT * FROM rfq_lineitems_alternatepart WHERE partID = ppartID AND isDeleted = 0) rla    \n" +
"		SET    \n" +
"        cla.customerApproval = rla.customerApproval,    \n" +
"        cla.updatedAt = CURRENT_TIMESTAMP(),    \n" +
"        cla.updatedBy = puserID    \n" +
"        WHERE cl.rfqLineItemID = rla.rfqLineItemsID AND cla.mfgPNID = rla.mfgPNID    \n" +
"            AND IFNULL(cla.isDeleted,0) = 0;           \n" +
"  \n" +
"# delete from consolidated Alternatepart if lineItem removed                        \n" +
"        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap                        \n" +
"		SET                         \n" +
"        cap.isDeleted = TRUE,                        \n" +
"        cap.deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"		cap.deletedBy = puserID                        \n" +
"		WHERE  cap.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                          \n" +
"        AND IFNULL(cl.isDeleted,0) = 1);                             \n" +
"  \n" +
"# Delete Consilidated alternate parts if only mfg PN is removed from lineItem                        \n" +
"  ############################        \n" +
"  \n" +
"        UPDATE rfq_consolidated_mfgpn_lineitem_alternate                         \n" +
"		SET                         \n" +
"        isDeleted = TRUE,                        \n" +
"        deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"		deletedBy = puserID                        \n" +
"        WHERE id IN(                         \n" +
"        SELECT capID FROM (                        \n" +
"		SELECT DISTINCT(cap.id)AS capID                        \n" +
"		FROM rfq_lineitems_alternatepart ap                         \n" +
"		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID IN(SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID))        \n" +
"		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                        \n" +
"		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID                         \n" +
"		JOIN component com ON com.id = ap.mfgPNID AND com.category != 3                        \n" +
"		WHERE rl.partID IN(SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID))        \n" +
"        AND cap.consolidateID IS NOT NULL AND IFNULL(cl.isDeleted,0) = 0 AND IFNULL(ap.isDeleted,0) = 1) AS rcap);                        \n" +
"  \n" +
"# delete Consolidated lineItems Quentity                         \n" +
"        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity WHERE rfqAssyID = prfqAssyID AND isDeleted = 1) rq                      \n" +
"		SET                         \n" +
"        cq.isDeleted = TRUE,                        \n" +
"        cq.deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"		cq.deletedBy = puserID                        \n" +
"		WHERE cq.qtyID = rq.id AND cq.consolidateID IN(SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL                          \n" +
"        AND IFNULL(cl.isDeleted,0) = 1);                             \n" +
"# delete Consolidated lineitem Quantity if rfq Quantity remove           \n" +
"  \n" +
"		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT * FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND IFNULL(q.isDeleted,0) = 1 ) rq                      \n" +
"		SET                         \n" +
"        cq.isDeleted = TRUE,                        \n" +
"        cq.deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"		cq.deletedBy = puserID                        \n" +
"        WHERE cq.consolidateID IN(SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND IFNULL(isDeleted, 0) = 0)                          \n" +
"        AND rq.id = cq.qtyID AND IFNULL(cq.isDeleted,0)= 0;                          \n" +
"# delete Consolidate lineItems                         \n" +
"		UPDATE rfq_consolidated_mfgpn_lineitem cl                        \n" +
"		SET                         \n" +
"        cl.isDeleted = TRUE,                        \n" +
"        cl.deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"		cl.deletedBy = puserID                        \n" +
"		WHERE  cl.rfqAssyID = prfqAssyID AND cl.id IS NOT NULL  AND IFNULL(cl.isDeleted,0) = 0                        \n" +
"		AND cl.rfqLineItemID NOT IN(SELECT rfqLineItemsID FROM Results);                                \n" +
"# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part                         \n" +
"  #################################        \n" +
"  \n" +
"        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`                        \n" +
"		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`customerApproval`)                        \n" +
"		SELECT DISTINCT(ap.`mfgPN`), (SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl WHERE rcl.rfqAssyID = prfqAssyID AND rcl.rfqLineItemID = rl.id AND IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,                        \n" +
"			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`,puserID `createdBy`,CURRENT_TIMESTAMP() `createdAt`, ap.`customerApproval`                        \n" +
"		FROM rfq_lineitems_alternatepart ap                         \n" +
"		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID IN(SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID))        \n" +
"		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                    \n" +
"        JOIN component com ON com.id = ap.mfgPNID AND IFNULL(com.isDeleted,0) = 0                    \n" +
"		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0                        \n" +
"		WHERE rl.partID IN(SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID))        \n" +
"        AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0 AND cap.consolidateID IS NULL;                      \n" +
"  \n" +
"# Delete consolidated mfgPart if mfgPart Changed           \n" +
"#################################                 \n" +
"		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl                    \n" +
"		SET                         \n" +
"        cap.isDeleted = TRUE,                        \n" +
"        cap.deletedAt = CURRENT_TIMESTAMP(),                        \n" +
"		cap.deletedBy = puserID                    \n" +
"		WHERE cap.consolidateID IN (rcl.id) AND cap.id NOT IN (                     \n" +
"        SELECT  DISTINCT(cap.id)                        \n" +
"		FROM rfq_lineitems_alternatepart ap                         \n" +
"		JOIN rfq_lineitems rl ON rl.id = ap.rfqLineItemsID AND rl.isDeleted = 0 AND rl.partID IN(SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID))        \n" +
"		JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.rfqLineItemID = rl.id AND cl.rfqAssyID = prfqAssyID                    \n" +
"		WHERE rl.partID IN(SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID))        \n" +
"        AND cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID  AND ap.isDeleted = 0 AND IFNULL(cl.isDeleted,0) = 0);                    \n" +
" # delete Consolidated lineitem Quantity if selected alternate part remove           \n" +
"		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,                     \n" +
"        (SELECT * FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND IFNULL(cl.isDeleted,0) = 0 ) rcl,                    \n" +
"        (SELECT consolidateID, PIDCode FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1) cap                          \n" +
"		SET                         \n" +
"        cq.finalPrice = NULL,                    \n" +
"        cq.selectedPIDCode = NULL,                    \n" +
"        cq.selectedMpn = NULL,                    \n" +
"        cq.selectionMode = NULL,                    \n" +
"        cq.supplier = NULL,                    \n" +
"        cq.supplierStock = NULL,                    \n" +
"        cq.currentStock = NULL,                    \n" +
"        cq.grossStock = NULL,                    \n" +
"        cq.leadTime = NULL,                    \n" +
"        cq.min = NULL,                    \n" +
"        cq.mult = NULL,                    \n" +
"        cq.unitPrice = NULL,                    \n" +
"        cq.updatedAt = CURRENT_TIMESTAMP(),                        \n" +
"		cq.updatedBy = puserID                        \n" +
"        WHERE cq.consolidateID IN(SELECT consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE IFNULL(isDeleted, 0) = 1)                          \n" +
"        AND cq.consolidateID = cap.consolidateID AND cq.selectedPIDCode = cap.PIDCode AND IFNULL(cq.isDeleted,0)= 0;                       \n" +
"# Delete summary additional cost details if exists      \n" +
"		UPDATE rfq_assy_quotations_additionalcost raqa, (SELECT id FROM rfq_assy_quotations WHERE rfqAssyID = prfqAssyID AND refSubmittedQuoteID IS NULL AND deletedAt IS NULL) raq    \n" +
"		SET     \n" +
"		raqa.`isDeleted` = 1,    \n" +
"		raqa.`deletedBy` = 1,    \n" +
"		raqa.`deletedAt` = CURRENT_TIMESTAMP()    \n" +
"		WHERE raqa.rfqAssyQuoteID IN (raq.id) AND raqa.deletedAt IS NULL;     \n" +
"  \n" +
"# Delete summary details if exists      \n" +
"		UPDATE `rfq_assy_quotations`    \n" +
"		SET    \n" +
"		`isDeleted` = 1,    \n" +
"		`deletedBy` = 1,    \n" +
"		`deletedAt` = CURRENT_TIMESTAMP()    \n" +
"		WHERE rfqAssyID = prfqAssyID AND refSubmittedQuoteID IS NULL AND deletedAt IS NULL;     \n" +
"  \n" +
"  # update rfq assembly pricing status            \n" +
"    UPDATE rfq_assemblies SET isReadyForPricing = TRUE, partCostingBOMInternalVersion = pBOMVersion, updatedAt = CURRENT_TIMESTAMP(), updatedBy = puserID WHERE isDeleted = 0 AND id = prfqAssyID;           \n" +
"  \n" +
"    COMMIT;                    \n" +
"    SELECT id FROM tempconsolidate WHERE  id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0)                  \n" +
"    UNION                \n" +
"    SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                 \n" +
"    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,CURRENT_TIMESTAMP())<120);                \n" +
"    DROP TEMPORARY TABLE IF EXISTS Results;                 \n" +
"DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;                       \n" +
"END;  \n" +
            /* **************************** Add Script Version -> 29-03-2019 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (459,'2.00','V1','Alter sp Sproc_CreateRfqConsolidateLineItem -Champak '," + userid + ");"
            );
            break;
        case 459:
            allDbChangesArray.push(
            /* **************************** New Script -> 01-04-2019  *********************************** */
             "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
              "VALUES (39,'UOMMISMATCHED','#258456','Line UOM is mismatched with part UOM. Please Advise.','Line UOM is mismatched with part UOM. Please Advise.','','1','2019-03-28',NULL,NULL,NULL,NULL,NULL,'Mismatch UOM');  \n" +
              "  \n" +
              "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
              "VALUES (40,'PROGRAMINGREQUIRED','#969696','Programing is not included for <% MFG %> <% MFG PN %>. Please Advise.','Programing is not included for <% MFG %> <% MFG PN %>. Please Advise.','<% MFG %> <% MFG PN %>','1','2019-03-28',NULL,NULL,NULL,NULL,NULL,'Programing Is Not Included');  \n" +
              "  \n" +
              "INSERT  INTO `rfq_lineitems_errorcode`(`logicID`,`errorCode`,`errorColor`,`description`,`org_description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`deletedBy`,`deletedAt`,`isDeleted`,`displayName`)  \n" +
              "VALUES (41,'MISMATCHCOLOR','#8788d1','<% MFG %> <% MFG PN %> color is mismatched. Please advise.','<% MFG %> <% MFG PN %> color is mismatched. Please advise.','<% MFG %> <% MFG PN %>','1','2019-03-28',NULL,NULL,NULL,NULL,NULL,'Mismatch Color');  \n" +
              "  \n" +
              "  \n" +
              "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `uomMismatchedStep` TINYINT(1);  \n" +
              "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `programingRequiredStep` TINYINT(1);  \n" +
              "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN `mismatchColorStep` TINYINT(1);  \n" +
              "UPDATE rfq_lineitems_alternatepart SET uomMismatchedStep = TRUE, programingRequiredStep = TRUE, mismatchColorStep = TRUE;  \n" +
              "ALTER TABLE rfq_lineitems ADD COLUMN `programingStatus` INT(11) NOT NULL DEFAULT 0;  \n" +
              "INSERT INTO rfq_lineitems_headers(`name`,`field`,`displayOrder`,`createdBy`,`createdAt`,`isDeleted`,`isActive`,`isAdditionalField`)  \n" +
              "VALUES('Programing', 'programingStatus', 16.1,'1','2019-03-29', 0,0,0);  \n" +
            /* **************************** New Script -> 01-04-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode` ;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(                            \n" +
            "	IN ppageIndex INT(11),                            \n" +
            "	IN precordPerPage INT(11),                            \n" +
            "	IN pOrderBy VARCHAR(255),                            \n" +
            "	IN pWhereClause VARCHAR(16383)                            \n" +
            ")  \n" +
            "BEGIN                            \n" +
            "DECLARE pOffset INT(11);                            \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                            \n" +
            "			SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFG Invalid'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFG Verification'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'MFG-Supplier Mapping'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFGPN'                             \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFG Bad Part'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'                             \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFG PN Invalid'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'                                           \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'                            \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'                          \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'                          \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'Non-ROHS'                          \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'                      \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'                      \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'                          \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 19) THEN 'One RoHS Component'                    \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Lead Mismatch'                 \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MPN'                \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Mating Part Required'                \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Drive Tools Required'                \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Pickup Pad Required'                \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'                \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Category'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Functional Testing Required'                \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'        \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 38) THEN 'Military Standard RoHS'  \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'  \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'  \n" +
            "              WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'  \n" +
            "              ELSE '' END) AS `logicName`,errorCode, errorColor,                             \n" +
            "              description, systemVariable,logicID, displayName, org_description,updatedAt, narrative                    \n" +
            "			FROM `rfq_lineitems_errorcode`                            \n" +
            "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;                            \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;                            \n" +
            "		ELSE                            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
            "		END IF;	                            \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
            "			SET pWhereClause = '1=1' ;                            \n" +
            "		END IF;	                            \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
            "		ELSE	                            \n" +
            "			SET rowNumWhere = '';                            \n" +
            "		END IF;	                            \n" +
            "  \n" +
            "		/* to get total count of rows */                            \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );                            \n" +
            "		PREPARE query1 FROM @SQLStatement1;                            \n" +
            "		EXECUTE query1;                            \n" +
            "		DEALLOCATE PREPARE query1;                            \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
            "		PREPARE query2 FROM @SQLStatement2;                            \n" +
            "		EXECUTE query2;                            \n" +
            "		DEALLOCATE PREPARE query2;                            \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;                            \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 01-04-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(                                    \n" +
            "	IN ppartID INT                            \n" +
            ")  \n" +
            "BEGIN                                        \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;                                        \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitemsAlt;                            \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS                                            \n" +
            "	SELECT 	a.id,                 \n" +
            "		a.lineID,                 \n" +
            "		a.qpa,                 \n" +
            "		a.refDesig,                 \n" +
            "		a.custPN,                \n" +
            "		a.custPNID,                                         \n" +
            "		CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,  \n" +
            "		CASE WHEN a.programingStatus = 1 THEN 'Pre' WHEN a.programingStatus = 2 THEN 'Post' ELSE 'N/A' END AS  programingStatus,   \n" +
            "		a.description,                \n" +
            "		a.level,                \n" +
            "		a.numOfPosition,                \n" +
            "		a.customerRev,                 \n" +
            "		a.customerDescription,                 \n" +
            "		a.customerPartDesc,                                         \n" +
            "		CONCAT(part.partTypeName) partclassID,                 \n" +
            "		a.isInstall,                 \n" +
            "		a.isPurchase,                 \n" +
            "		a.leadQty,                 \n" +
            "		a.attritionRate,                \n" +
            "		a.valueAddedCost,                \n" +
            "		a.refRFQLineItemID,                              \n" +
            "		a.dnpQty,                 \n" +
            "		a.dnpDesig,                 \n" +
            "		a.qpaDesignatorStep,                \n" +
            "		a.duplicateCPNStep,              \n" +
            "		a.requireMountingTypeStep,              \n" +
            "		a.requireFunctionalTypeStep,              \n" +
            "		a.qpaDesignatorColorPriority,                \n" +
            "		a.mergeLines,                \n" +
            "		a.lineMergeStep,                \n" +
            "		a.isBuyDNPQty                              \n" +
            "	FROM rfq_lineitems a                              \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0                              \n" +
            "	LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0                   \n" +
            "	WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;                                        \n" +
            "  \n" +
            "	SELECT 	b.id,                \n" +
            "		b.lineID,                 \n" +
            "		b.qpa,                 \n" +
            "		b.refDesig,                                     \n" +
            "		(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,                                    \n" +
            "		a.mfgCodeID,                 \n" +
            "		a.mfgPN,                 \n" +
            "		a.mfgPNID,                                        \n" +
            "		(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	                                    \n" +
            "		a.distMfgCodeID,                 \n" +
            "		a.distPN,                 \n" +
            "		a.distMfgPNID,                                         \n" +
            "		b.custPN,                 \n" +
            "		b.custPNID,                 \n" +
            "		b.uomID,     \n" +
            "		b.programingStatus,              \n" +
            "		a.description descriptionAlternate,                 \n" +
            "		b.description,                 \n" +
            "		b.level,                 \n" +
            "		b.numOfPosition,                 \n" +
            "		b.customerRev,                 \n" +
            "		b.customerDescription,                 \n" +
            "		b.customerPartDesc,                                  \n" +
            "		b.partclassID,                 \n" +
            "		b.isInstall,                 \n" +
            "		b.isPurchase,                 \n" +
            "		b.leadQty,                 \n" +
            "		b.attritionRate,                 \n" +
            "		b.valueAddedCost,                 \n" +
            "		b.refRFQLineItemID,                                         \n" +
            "		b.dnpQty,                 \n" +
            "		b.dnpDesig,                 \n" +
            "		a.id AS rfqAlternatePartID,                 \n" +
            "		b.qpaDesignatorStep,                \n" +
            "		b.qpaDesignatorColorPriority,                 \n" +
            "		b.duplicateCPNStep,          \n" +
            "		b.requireMountingTypeStep,          \n" +
            "		b.requireFunctionalTypeStep,              \n" +
            "		b.isBuyDNPQty,                              \n" +
            "		a.mfgVerificationStep,                 \n" +
            "		a.mfgDistMappingStep,                \n" +
            "		a.mfgCodeStep,                \n" +
            "		a.customerApproval,                \n" +
            "		a.org_mfgCode,                 \n" +
            "		a.org_mfgPN,                                      \n" +
            "		a.org_distributor,                 \n" +
            "		a.org_distPN,                                      \n" +
            "		a.distVerificationStep,                 \n" +
            "		a.distCodeStep,                 \n" +
            "		a.getMFGPNStep,                 \n" +
            "		a.obsoletePartStep,                \n" +
            "		a.mfgGoodPartMappingStep,                \n" +
            "		a.mfgPNStep,                 \n" +
            "		a.distPNStep,                                    \n" +
            "		a.badMfgPN,                 \n" +
            "		a.distGoodPartMappingStep,                 \n" +
            "		a.nonRohsStep,                 \n" +
            "		a.oneRohsComponentStep,                 \n" +
            "		a.epoxyStep,                 \n" +
            "		a.invalidConnectorTypeStep,                \n" +
            "		a.duplicateMPNInSameLineStep,              \n" +
            "		a.mismatchMountingTypeStep,              \n" +
            "		a.mismatchFunctionalCategoryStep,                 \n" +
            "		a.restrictUseWithPermissionStep,              \n" +
            "		a.restrictUsePermanentlyStep,                \n" +
            "		a.userData1,                \n" +
            "		a.userData2,            \n" +
            "		a.userData3,            \n" +
            "		a.userData4,            \n" +
            "		a.userData5,            \n" +
            "		a.userData6,            \n" +
            "		a.userData7,            \n" +
            "		a.userData8,            \n" +
            "		a.userData9,            \n" +
            "		a.userData10,            \n" +
            "		a.pickupPadRequiredStep,          \n" +
            "		a.matingPartRquiredStep,          \n" +
            "		a.driverToolsRequiredStep,          \n" +
            "		a.functionalTestingRequiredStep,         \n" +
            "		a.mismatchValueStep,        \n" +
            "		a.mismatchPackageStep,        \n" +
            "		a.mismatchPowerStep,        \n" +
            "		a.mismatchToleranceStep,        \n" +
            "		a.mismatchTempratureStep,        \n" +
            "		a.militaryStandardRoHSStep,  \n" +
            "		a.uomMismatchedStep,  \n" +
            "		a.programingRequiredStep,     \n" +
            "		a.mismatchColorStep,    \n" +
            "		CONCAT(part.partTypeName) parttypeID,                \n" +
            "		CONCAT(mount.name) mountingtypeID,                 \n" +
            "		CONCAT(cat.categoryname) partcategoryID,                \n" +
            "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,                                  \n" +
            "		(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,                                \n" +
            "		(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,                              \n" +
            "		CASE WHEN                               \n" +
            "			(co.eolDate IS NOT NULL AND co.eolDate < UTC_TIMESTAMP()) OR                              \n" +
            "		EXISTS (SELECT 1 FROM genericcategory gc WHERE co.partStatus = gc.gencCategoryID AND gc.gencCategoryName = 'Obsolete' AND gc.isDeleted = 0 AND gc.isActive = 1)                              \n" +
            "			THEN 1 ELSE 0 END isObsolete,                              \n" +
            "		co.mfgPNDescription,                \n" +
            "		co.pitch,              \n" +
            "		co.partPackage,              \n" +
            "		co.value,              \n" +
            "		co.tolerance,              \n" +
            "		co.voltage,              \n" +
            "		co.packaging,         \n" +
            "		co.powerRating,        \n" +
            "		co.minOperatingTemp,        \n" +
            "		co.maxOperatingTemp,     \n" +
            "		co.createdBy,  \n" +
            "		(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,  \n" +
            "		co.color,          \n" +
            "		co.uom AS partUOMID,     \n" +
            "		(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) customerApprovalComment                          \n" +
            "	FROM rfq_lineitems_alternatepart a                                          \n" +
            "		LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0                                           \n" +
            "		LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0                                    \n" +
            "		LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0                 \n" +
            "		LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0                \n" +
            "		LEFT JOIN rfq_mountingtypemst mount ON a.mountingtypeID = mount.id AND IFNULL(mount.isDeleted,0) = 0                \n" +
            "		LEFT JOIN rfq_partcategory cat ON a.partcategoryID = cat.id AND IFNULL(cat.isDeleted,0) = 0                                 \n" +
            "		JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id                                                  \n" +
            "	WHERE IFNULL(a.isDeleted,0) = 0  AND b.id IS NOT NULL ORDER BY b.lineID, a.id;                                        \n" +
            "END;  \n" +
            /* **************************** New Script -> 01-04-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetPIDList`(                                \n" +
            "	IN pCustomerID INT(11)                          \n" +
            ")  \n" +
            "BEGIN                                \n" +
            "	DECLARE mfgCodeID INT(11);  \n" +
            "	DECLARE whereClause VARCHAR(500);                           \n" +
            "	DECLARE gencCategoryID INT(11);      \n" +
            "  \n" +
            "	SELECT gc.gencCategoryID INTO gencCategoryID FROM genericcategory gc WHERE gc.gencCategoryName= 'Obsolete' AND gc.categoryType='Part Status';              \n" +
            "	SET whereClause = \"WHERE c.category = 3 AND c.deletedAt IS NULL\";                     \n" +
            "  \n" +
            "	IF pCustomerID IS NOT NULL THEN                    \n" +
            "		SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);                    \n" +
            "	END IF;                \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"SELECT c.id, c.PIDCode, c.RoHSStatusID,                 \n" +
            "	c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription as description,ro.rohsIcon, ro.name as rohsName, mfg.mfgCode , mfg.mfgName,c.specialNote, c.liveVersion,  \n" +
            "	CASE c.partStatus  \n" +
            "	WHEN \", gencCategoryID, \" THEN FALSE  \n" +
            "	ELSE TRUE  \n" +
            "	END AS isActive                \n" +
            "	FROM component c                 \n" +
            "	left join rfq_rohsmst ro on c.RoHSStatusID = ro.id and ro.isDeleted = 0                 \n" +
            "	LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0 \", whereClause);                          \n" +
            "	PREPARE query2 FROM @SQLStatement2;                          \n" +
            "	EXECUTE query2;                          \n" +
            "	DEALLOCATE PREPARE query2;                         \n" +
            "END;  \n" +
            /* **************************** New Script -> 01-04-2019  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetBOMProgress` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetBOMProgress`(                                  \n" +
            "	IN pPartID INT(11)                             \n" +
            "	)  \n" +
            "BEGIN                                      \n" +
            "	DECLARE pValidCount INT(11);                                  \n" +
            "	DECLARE pInValidCount INT(11);                                  \n" +
            "	DECLARE pTotalCount INT(11);                              \n" +
            "	DECLARE pProgress INT(11);                                  \n" +
            "	SET pProgress = 0;                            \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                        \n" +
            "	SELECT  p.id,                             \n" +
            "	CASE                             \n" +
            "		WHEN                             \n" +
            "			IFNULL(l.qpaDesignatorStep,0) = 1 AND                             \n" +
            "			-- IFNULL(l.miscStep,0) = 1 AND                        \n" +
            "			IFNULL(l.duplicateCPNStep,0) = 1 AND                       \n" +
            "			IFNULL(l.requireFunctionalTypeStep,0) = 1 AND                       \n" +
            "			IFNULL(l.requireMountingTypeStep,0) = 1 AND                       \n" +
            "			IFNULL(p.mfgVerificationStep,0) = 1 AND                             \n" +
            "			IFNULL(p.mfgDistMappingStep,0) = 1 AND                             \n" +
            "			IFNULL(p.mfgCodeStep,0) = 1 AND                             \n" +
            "			IFNULL(p.distVerificationStep,0) = 1 AND                             \n" +
            "			IFNULL(p.distCodeStep,0) = 1 AND                             \n" +
            "			-- IFNULL(p.getMFGPNStep,0) = 1 AND                             \n" +
            "			IFNULL(p.obsoletePartStep,1) = 1 AND                             \n" +
            "			IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND                             \n" +
            "			IFNULL(p.mfgPNStep,0) = 1 AND                             \n" +
            "			IFNULL(p.distPNStep,0) = 1 AND                             \n" +
            "			IFNULL(p.distGoodPartMappingStep,0) = 1 AND                             \n" +
            "			IFNULL(p.nonRohsStep,0) = 1 AND                            \n" +
            "			IFNULL(p.epoxyStep,0) = 1  AND                      \n" +
            "			IFNULL(p.oneRohsComponentStep,0) = 1   AND                  \n" +
            "			IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND                  \n" +
            "			IFNULL(p.mismatchFunctionalCategoryStep,0) = 1   AND                  \n" +
            "			IFNULL(p.mismatchMountingTypeStep,0) = 1   AND                    \n" +
            "			IFNULL(p.invalidConnectorTypeStep,0) = 1   AND                \n" +
            "			IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND                    \n" +
            "			IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND              \n" +
            "			IFNULL(p.pickupPadRequiredStep,0) = 1   AND         \n" +
            "			IFNULL(p.matingPartRquiredStep,0) = 1    AND         \n" +
            "			-- IFNULL(p.driverToolsRequiredStep,0) = 1   AND         \n" +
            "			IFNULL(p.functionalTestingRequiredStep,0) = 1    AND      \n" +
            "			IFNULL(p.militaryStandardRoHSStep,0) = 1   AND       \n" +
            "			IFNULL(p.uomMismatchedStep,0) = 1   AND       \n" +
            "			IFNULL(p.programingRequiredStep,0) = 1     AND  \n" +
            "			IFNULL(p.mismatchColorStep,0) = 1           \n" +
            "		THEN 1                            \n" +
            "		ELSE 0                            \n" +
            "	END AS ProgressCount                            \n" +
            "	FROM rfq_lineitems l                            \n" +
            "	LEFT OUTER JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id                            \n" +
            "	WHERE l.partID = pPartID AND l.isDeleted = 0 AND p.isDeleted = 0;                            \n" +
            "  \n" +
            "	SELECT COUNT(1) INTO pTotalCount FROM Results;                            \n" +
            "  \n" +
            "	SELECT COUNT(1) INTO pValidCount FROM Results WHERE ProgressCount = 1;                            \n" +
            "  \n" +
            "	SELECT COUNT(0) INTO pInValidCount FROM Results WHERE ProgressCount = 0;           \n" +
            "  \n" +
            "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN                            \n" +
            "		SET pProgress = 0;                            \n" +
            "	ELSE                             \n" +
            "		SET pProgress = ((pValidCount * 100) / pTotalCount);                            \n" +
            "	END IF;                            \n" +
            "  \n" +
            "	SELECT pProgress;                              \n" +
            "	DROP TEMPORARY TABLE Results;            \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 01-04-2019 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (460,'2.00','V1',' Task 5638,5650,5637,5651 DB Changes - Jignesh K '," + userid + ");"
            );
            break;
            case 460:
             allDbChangesArray.push(
             /* **************************** New Script -> 01-04-2019  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_ValidateWorkorderAndPublish` ;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(        \n" +
                "	IN pwoID INT,        \n" +
                "	IN pwoStatus INT,        \n" +
                "	IN pupdatedBy INT        \n" +
                "    )  \n" +
                "BEGIN         \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/        \n" +
                "  \n" +
                "	-- create temporary table for error        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;         \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error        \n" +
                "	(        \n" +
                "	     errorText NVARCHAR(2000)        \n" +
                "	);        \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/        \n" +
                "	block1: BEGIN        \n" +
                "		DECLARE current_opnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "		DECLARE current_previousopnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;        \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;        \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;        \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;        \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;        \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;        \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;        \n" +
                "  \n" +
                "		DECLARE current_opname NVARCHAR(500) DEFAULT '';        \n" +
                "		DECLARE current_woopid NVARCHAR(500) DEFAULT '';        \n" +
                "  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table        \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;        \n" +
                "  \n" +
                "		-- 2 declare the cursor operation        \n" +
                "		DECLARE operation_cursor CURSOR FOR        \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;        \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows        \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;        \n" +
                "  \n" +
                "		-- get first operation workorder        \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo         \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL;        \n" +
                "  \n" +
                "		-- get inspection process type id        \n" +
                "		SET InspectionOperationTypeID := 0;        \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory         \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;        \n" +
                "  \n" +
                "  \n" +
                "		 -- open the cursor        \n" +
                "		OPEN operation_cursor;        \n" +
                "  \n" +
                "		 -- start looping        \n" +
                "		operation_loop: LOOP        \n" +
                "  \n" +
                "			-- read the name from next row into the variables         \n" +
                "			FETCH operation_cursor INTO current_opnumber;        \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,         \n" +
                "			-- close the cursor and exit the loop if it has.        \n" +
                "			IF exit_loop THEN        \n" +
                "				 CLOSE operation_cursor;        \n" +
                "				 LEAVE operation_loop;        \n" +
                "			END IF;        \n" +
                "  \n" +
                "			SET current_opname:= '';        \n" +
                "			SET current_woopid:= 0;        \n" +
                "			SET current_operationTypeID:= 0;        \n" +
                "			SET current_qtyControl:= 0;        \n" +
                "			SET current_isIssueQty:= 0;        \n" +
                "			-- get opname and woopid from operation number        \n" +
                "			SELECT opname, woopid, operationTypeID, qtyControl, isIssueQty        \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl, current_isIssueQty        \n" +
                "			FROM workorder_operation WHERE opnumber = current_opnumber         \n" +
                "			AND deletedat IS NULL AND woid=pwoid LIMIT 1;        \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/        \n" +
                "			IF first_opnumber=current_opnumber THEN        \n" +
                "				SET @stmt_op = CONCAT('<b>', current_opname,' (', current_opnumber, ')', '</b> is rework operation, it cannot be set as first operation of work order.');         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "			END IF;				        \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/        \n" +
                "			SET IsInspectionProcess:=0;        \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN        \n" +
                "				SET IsInspectionProcess := 1;        \n" +
                "			END IF;        \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN        \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b> is rework operation, it cannot be inspection process.');         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "			END IF;	        \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/        \n" +
                "			SET IsInValidReworkOperation:=0;        \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN        \n" +
                "				SET IsInValidReworkOperation := 1;        \n" +
                "			END IF;        \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN        \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b>  is rework operation, it must have manufacturer and issue qty set as true.');         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "			END IF;	        \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/        \n" +
                "			SET found_in_paralleloperation:= 0;        \n" +
                "  \n" +
                "			SELECT COUNT(*) INTO found_in_paralleloperation FROM workorder_operation_cluster         \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (        \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1        \n" +
                "			) AND woopid=current_woopid;        \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN        \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "			END IF;        \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/        \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/        \n" +
                "			-- get previous operation of rework operation        \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo         \n" +
                "				WHERE opnumber < current_opnumber         \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;        \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not        \n" +
                "			IF current_previousopnumber > 0 THEN        \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;        \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process        \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation        \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)        \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;         \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process         \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN        \n" +
                "					SET @stmt_op = CONCAT('Previous operation of ','<b>',current_opname,' (', current_opnumber, ')', '</b> must be inspection operation or rework operation.');         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "				END IF;        \n" +
                "			ELSE        \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>',current_opname,' (', current_opnumber, ')', '</b> must be inspection operation or rework operation.');         \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "			END IF;        \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/        \n" +
                "		END LOOP operation_loop;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/        \n" +
                "		block2: BEGIN        \n" +
                "			-- 1 get list of inspection operation in workorder        \n" +
                "			DECLARE c_opnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "			DECLARE c_checkopnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "			DECLARE c_reworkopnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "			DECLARE temp_opname NVARCHAR(500) DEFAULT 0;        \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;        \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;        \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;        \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;        \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;        \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;        \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table        \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;        \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation        \n" +
                "			DECLARE inspection_cursor CURSOR FOR        \n" +
                "			SELECT opnumber FROM workorder_operation        \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID        \n" +
                "			AND woid=pwoid AND deletedat IS NULL;         \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows        \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;        \n" +
                "  \n" +
                "			-- open the cursor        \n" +
                "			OPEN inspection_cursor;        \n" +
                "  \n" +
                "			 -- start looping        \n" +
                "			inspection_loop: LOOP        \n" +
                "  \n" +
                "				-- read the name from next row into the variables         \n" +
                "				FETCH inspection_cursor INTO c_opnumber;        \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,         \n" +
                "				-- close the cursor and exit the loop if it has.        \n" +
                "				IF exit_inspection_loop THEN        \n" +
                "					 CLOSE inspection_cursor;        \n" +
                "					 LEAVE inspection_loop;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				SET temp_opname:= '';        \n" +
                "				SET temp_woopid:= 0;        \n" +
                "				SET temp_isRework:= 0;        \n" +
                "				SET temp_qtyControl:= 0;        \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl        \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl        \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber         \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;        \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/        \n" +
                "				SET IsReworkInspectionOperation:= 0;        \n" +
                "				IF (temp_isRework = 1) THEN        \n" +
                "					SET IsReworkInspectionOperation := 1;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN        \n" +
                "					SET @stmt_op = CONCAT('<b>',temp_opname,' (', c_opnumber, ')', '</b> is inspection process, it cannot be rework operation.');         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "				END IF;	        \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/        \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/        \n" +
                "				SET IsInValidInspectionOperation:= 0;        \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN        \n" +
                "					SET IsInValidInspectionOperation := 1;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN        \n" +
                "					SET @stmt_op = CONCAT('<b>',temp_opname,' (', c_opnumber, ')', '</b> is inspection process, it must have manufacturer qty set as true.');         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "				END IF;	        \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/        \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/        \n" +
                "				SET IsParallelClusterOperation:= 0;			        \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation         \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (        \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL         \n" +
                "				 			AND clusterid IN (        \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL         \n" +
                "								AND woid=pwoid AND isparelleloperation=1        \n" +
                "				 	)        \n" +
                "				);        \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/        \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/        \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster        \n" +
                "				IF (IsParallelClusterOperation = 0) THEN        \n" +
                "					SET c_checkopnumber:= 0;        \n" +
                "					-- get next operation of inspection operation        \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo         \n" +
                "						WHERE opnumber > c_opnumber         \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;        \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not        \n" +
                "					IF c_checkopnumber > 0 THEN        \n" +
                "						SET c_reworkopnumber:= 0;        \n" +
                "						-- set checked operation number if found as rework process        \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation        \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1        \n" +
                "						AND woid=pwoid AND deletedat IS NULL;         \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process         \n" +
                "						IF c_reworkopnumber = 0 THEN        \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>',temp_opname,' (', c_opnumber, ')','</b> must be rework operation.');         \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "						END IF;        \n" +
                "					ELSE        \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>',temp_opname,' (', c_opnumber, ')','</b> must be rework operation.');         \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);        \n" +
                "					END IF;	        \n" +
                "				END IF;        \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/        \n" +
                "			END LOOP inspection_loop;        \n" +
                "		END block2;        \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/        \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/        \n" +
                "		block3: BEGIN        \n" +
                "			-- 1 get list of cluster in workorder        \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;        \n" +
                "			DECLARE current_minopnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "			DECLARE current_maxopnumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "  \n" +
                "			DECLARE temp_clustername NVARCHAR(100) DEFAULT '';        \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;        \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(6,2) DEFAULT 0;        \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;        \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;        \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(6,2) DEFAULT 0;        \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;        \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;        \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;        \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table        \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;        \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster        \n" +
                "			DECLARE cluster_cursor CURSOR FOR        \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster         \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;        \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows        \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;        \n" +
                "  \n" +
                "			-- open the cursor        \n" +
                "			OPEN cluster_cursor;        \n" +
                "  \n" +
                "			 -- start looping        \n" +
                "			cluster_loop: LOOP        \n" +
                "  \n" +
                "				-- read the name from next row into the variables         \n" +
                "				FETCH cluster_cursor INTO current_clusterid;        \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,         \n" +
                "				-- close the cursor and exit the loop if it has.        \n" +
                "				IF exit_cluster_loop THEN        \n" +
                "					 CLOSE cluster_cursor;        \n" +
                "					 LEAVE cluster_loop;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN	        \n" +
                "					SET temp_clustername:= '';        \n" +
                "					SET temp_isParellelOperation:= 0;        \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;        \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN        \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/        \n" +
                "						SET IsReworkParallelCluster:=0;        \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation         \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (        \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid        \n" +
                "						);        \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN        \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');        \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);        \n" +
                "						END IF;        \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/        \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/        \n" +
                "						SET IsPregrorammingParallelCluster:=0;        \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation         \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (        \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid        \n" +
                "						);        \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN        \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');        \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);        \n" +
                "						END IF;        \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/        \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/        \n" +
                "						SET found_mismatchoperations:= 0;        \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (        \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid        \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;        \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN        \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');        \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);        \n" +
                "						ELSE        \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/        \n" +
                "							IF (found_mismatchoperations = 1) THEN        \n" +
                "								SET found_operationTypeID:= 0;        \n" +
                "								SET cluster_maxOpNumber:= 0;        \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (        \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid        \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;        \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN        \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;        \n" +
                "  \n" +
                "									SELECT isRework INTO next_operation_to_cluster_is_rework FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND         \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND        \n" +
                "									opNumber > cluster_maxOpNumber);        \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN        \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');        \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);        \n" +
                "									END IF;        \n" +
                "								END IF;        \n" +
                "							END IF;		        \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/        \n" +
                "						END IF;	        \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/						        \n" +
                "					END IF;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/        \n" +
                "					SET current_minopnumber:= 0;        \n" +
                "					SET current_maxopnumber:= 0;        \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation        \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN         \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)        \n" +
                "					AND woid = pwoid AND deletedat IS NULL;        \n" +
                "					SET found_invalidsequenceoperation:= 0;        \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid        \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE         \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)        \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN        \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)        \n" +
                "					ORDER BY opnumber;	        \n" +
                "					IF found_invalidsequenceoperation > 0 THEN        \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');         \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);        \n" +
                "					END IF;        \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/        \n" +
                "				END IF;        \n" +
                "			END LOOP cluster_loop;        \n" +
                "		END block3;        \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/        \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/        \n" +
                "		block4: BEGIN        \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/        \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;        \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;        \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;        \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;        \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;      \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;        \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;        \n" +
                "  \n" +
                "			SET found_invalid_rework_operation:= 0;        \n" +
                "			SELECT COUNT(*) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;        \n" +
                "			IF found_invalid_rework_operation > 0 THEN        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');        \n" +
                "			END IF;        \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/        \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/        \n" +
                "  \n" +
                "			SET found_invalid_inspection_operation:= 0;        \n" +
                "			SELECT COUNT(*) INTO found_invalid_inspection_operation FROM workorder_operation WHERE        \n" +
                "			operationTypeID IN (        \n" +
                "					SELECT genccategoryid FROM genericcategory WHERE genccategoryname='inspection process'         \n" +
                "					AND deletedat IS NULL AND categorytype = 'operation type'        \n" +
                "			) AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;        \n" +
                "			IF found_invalid_inspection_operation > 0 THEN        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');        \n" +
                "			END IF;        \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/        \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/        \n" +
                "			SET check_workorder_isrevised:= 0;        \n" +
                "			SELECT COUNT(*) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;        \n" +
                "			IF check_workorder_isrevised > 0 THEN        \n" +
                "				SET first_OpTypeID:=0;   \n" +
                "  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;        \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN         \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');        \n" +
                "				END IF;        \n" +
                "			END IF;        \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/        \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/        \n" +
                "			SET preprogramming_operation_count:= 0;        \n" +
                "			SELECT COUNT(*) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;        \n" +
                "			IF preprogramming_operation_count > 1 THEN        \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only have one pre-programming operation !!');        \n" +
                "			END IF;        \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/        \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/        \n" +
                "			-- set flag 1 for standard count ok        \n" +
                "			-- SET certificate_standard_count:= 0;        \n" +
                "			-- SELECT COUNT(*) INTO certificate_standard_count FROM certificate_standards         \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND         \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);        \n" +
                "			-- IF certificate_standard_count > 0 THEN        \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');        \n" +
                "			-- END IF;        \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/        \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/        \n" +
                "			-- set flag 1 for standard count ok        \n" +
                "			SET invalid_wo_count:= 0;        \n" +
                "			SELECT COUNT(*) INTO invalid_wo_count FROM workorder_operation         \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;        \n" +
                "			IF invalid_wo_count > 0 THEN        \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published !!');        \n" +
                "			END IF;        \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/        \n" +
                "  \n" +
                "		END block4;        \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/        \n" +
                "  \n" +
                "		SELECT errorText FROM temp_operation_error;        \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/        \n" +
                "		IF (SELECT COUNT(*) FROM temp_operation_error) = 0 THEN        \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,        \n" +
                "			updatedat=CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') WHERE woid=pwoid;        \n" +
                "		END IF;        \n" +
                "	END block1;        \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetopReadyStock` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetopReadyStock`(     \n" +
            " IN pwoID INT(11),  \n" +
            " IN pOPID INT(11)  \n" +
            "     )  \n" +
            "BEGIN  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetopReadyStock;  \n" +
            "	CREATE TEMPORARY TABLE temp_Sproc_GetopReadyStock (  \n" +
            "		woID INT,  \n" +
            "        opID INT,  \n" +
            "        opNumber INT,  \n" +
            "        WoOpId INT,          \n" +
            "        OPProdQty INT,  \n" +
            "        IssueQty INT,  \n" +
            "        prevstockQty INT,  \n" +
            "        firstOPID INT,  \n" +
            "        BuildQty INT,  \n" +
            "        ReadyStock INT,  \n" +
            "        issuePending INT,  \n" +
            "        returnPending INT,  \n" +
            "        StockQty INT,  \n" +
            "        TillProcessScrapQty INT  \n" +
            "    );  \n" +
            "  /*Logic of Previou operation considet*/  \n" +
            "  /*case 1 current operation is cluster with pareller Normal operation */  \n" +
            "  SELECT IFNULL(MIN(genccategoryid),0) INTO @InsepctionProcessTypeID FROM genericcategory WHERE genccategoryname='inspection process'   \n" +
            "  AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
            "  \n" +
            "   SELECT a.isteamoperation,  a.isrework,  a.qtyControl,   b.ClusterID,  b.isparellelOperation,  \n" +
            "	  a.opNumber INTO @pisteamoperation ,@pisrework,@pqtyControl,@pclusterID,@pisparellelOperation,@popNumber  \n" +
            "	 FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON   \n" +
            "	 a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  AND   IFNULL(a.isdeleted,0) = 0  \n" +
            "	WHERE  a.woid = pwoID AND a.opid = pOPID  AND  IFNULL(a.isdeleted,0) = 0 ;  \n" +
            "  \n" +
            "	/*check previous operation Pramtere have cluster */  \n" +
            "	  SELECT a.opid, a.opNumber, a.isteamoperation,a.isrework,a.qtyControl,b.ClusterID, b.isparellelOperation  \n" +
            "	  INTO @prevopid, @prevopnumber,@previsteamoperation,@prevpisrework, @prevpqtyControl,@prevpclusterID,@prevpisparellelOperation  \n" +
            "	 FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON   \n" +
            "	 a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  \n" +
            "	WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0  \n" +
            "	AND  a.opNumber  = (SELECT MAX(opNumber)  \n" +
            "			    FROM workorder_operation b   \n" +
            "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0  \n" +
            "				 AND b.qtyControl = 1 AND b.opNumber < @popNumber);   \n" +
            "  \n" +
            " IF (IFNULL(@pisrework,0) = 1 AND IFNULL(@prevpisrework,0) != 1) THEN  \n" +
            "	/*SELECT 'operation is rework type' d1;*/   \n" +
            "  \n" +
            "	/*SELECT @prevopnumber,@prevpisrework ,@prevpclusterID,@prevpisparellelOperation; */		  \n" +
            "	/* if previous operation in cluster and with parallel */  \n" +
            "	IF(IFNULL(@prevpclusterID,0) != 0 AND IFNULL(@prevpisparellelOperation,0) = 1) THEN  \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "				IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "		SELECT  woID,  \n" +
            "			MAX(opID)OpID,   \n" +
            "			opNumber,  \n" +
            "			MAX(woOpId)WoOpId,   \n" +
            "			MAX(OPProdQty) OPProdQty,   \n" +
            "			SUM(IssueQty) IssueQty,  \n" +
            "			SUM(prevstockQty) prevstockQty,  \n" +
            "			MAX(firstOPID) firstOPID,   \n" +
            "			MAX(BuildQty) BuildQty,  \n" +
            "  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			ELSE  \n" +
            "				(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			     ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)  \n" +
            "			END ReadyStock,  \n" +
            "  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  SUM(issueQty)  \n" +
            "            ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "				ELSE SUM(prevstockQty) -  SUM(issueQty) END)  \n" +
            "			END issuePending,  \n" +
            "  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN(  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "            ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "			END returnPending,  \n" +
            "			MAX(StockQty) StockQty							  \n" +
            "			FROM (  \n" +
            "			SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty,a.OPProdQty OPProdQty,  \n" +
            "            a.StockQty StockQty, 0 prevstockQty ,  \n" +
            "			(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "						     AND IFNULL(deletedAt,0) = 0  \n" +
            "												) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "			UNION ALL   \n" +
            "			SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "					0 OPProdQty, 0 StockQty, (IFNULL(a.observedQty,0) + IFNULL(a.reworkQty,0)) -(a.TerminatedTransQty+ a.shippedQty)  prevstockQty,   \n" +
            "					0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID   \n" +
            "			AND a.opid  IN (SELECT woc.opid FROM workordeR_operation_cluster woc  \n" +
            "						WHERE woc.clusterid = @prevpclusterID   \n" +
            "						AND IFNULL(woc.deletedAt,0)= 0 AND IFNULL(woc.isDeleted,0)= 0  \n" +
            "						-- AND exists (select 'Y' from workorder_cluster wc where woc.clusterid = wc.clusterid and wc.isParellelOperation=1 and IFNULL(wc.deletedAt,0)=0)  \n" +
            "						)  \n" +
            "			AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "						 AND a.qtyControl = 1  \n" +
            "			)a GROUP BY woID;	  \n" +
            "	ELSE  \n" +
            "	/* Previous Operation is not in cluster or cluster with no parallel*/  \n" +
            "	INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "				IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "			SELECT  woID,  \n" +
            "				MAX(opID)OpID,  \n" +
            "				opNumber,  \n" +
            "				MAX(woOpId)WoOpId,   \n" +
            "				MAX(OPProdQty) OPProdQty,   \n" +
            "				SUM(IssueQty) IssueQty,  \n" +
            "				SUM(prevstockQty) prevstockQty,  \n" +
            "				MAX(firstOPID) firstOPID,   \n" +
            "				MAX(BuildQty) BuildQty,  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			     ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)  \n" +
            "			END ReadyStock,  \n" +
            "  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "					MAX(BuildQty) -  SUM(issueQty)  \n" +
            "				ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "				ELSE SUM(prevstockQty) -  SUM(issueQty) END)  \n" +
            "			END issuePending,  \n" +
            "  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN(  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "			END returnPending,  \n" +
            "			MAX(StockQty) StockQty  \n" +
            "			FROM (  \n" +
            "			SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty,a.OPProdQty OPProdQty,   \n" +
            "				a.StockQty StockQty, 0 prevstockQty,  \n" +
            "			(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "			UNION ALL   \n" +
            "			SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,   \n" +
            "					0 OPProdQty, 0 StockQty, (IFNULL(a.observedQty,0) + IFNULL(a.reworkQty,0)) - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,   \n" +
            "					0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "			AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "						 AND a.qtyControl = 1)  \n" +
            "			)a GROUP BY woID;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  ELSEIF(IFNULL(@pclusterID,0) > 0 AND IFNULL(@pisparellelOperation,0) = 1) THEN  \n" +
            "  \n" +
            "	-- Get Previous Operation of Parallel Cluster and Check is rework or noy					   \n" +
            "	SELECT isRework, opID INTO @clusterPrevisRework, @clusterPrevisReworkOPID FROM vu_workorder_production_stk AS a WHERE a.woID=pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "	AND opid NOT IN (SELECT opid FROM workordeR_operation_cluster WHERE clusterid = @pclusterID)  \n" +
            "	AND  NOT EXISTS ( SELECT 'Y' FROM workorder_operation_cluster wcp ,workorder_cluster wc  \n" +
            "			     WHERE wcp.clusterid = wc.clusterid AND   \n" +
            "				wcp.opid  = a.opid  AND   \n" +
            "				wc.woid = a.woid AND   \n" +
            "				wc.isParellelOperation = 1 AND   \n" +
            "				IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wcp.deletedAt,0)= 0)  \n" +
            "	AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = popid AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "	AND a.qtyControl = 1);  \n" +
            "  \n" +
            "	IF (IFNULL(@clusterPrevisRework,0) = 1) THEN /* Previous Operation is Rework*/  \n" +
            "		SELECT b.ClusterID, b.isparellelOperation  \n" +
            "		INTO @ReworkprevpclusterID,@ReworkprevpisparellelOperation  \n" +
            "		FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON   \n" +
            "		a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  \n" +
            "		WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0  \n" +
            "		AND  a.opNumber  = (SELECT MAX(opNumber)  \n" +
            "				    FROM workorder_operation b   \n" +
            "				    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0  \n" +
            "					 AND a.qtyControl = 1 AND b.opNumber < @prevopnumber);   \n" +
            "  \n" +
            "  \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "					IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "		 SELECT  woID,  \n" +
            "			MAX(opID)OpID,  \n" +
            "			opNumber,  \n" +
            "			MAX(woOpId)WoOpId,  \n" +
            "			MAX(OPProdQty) OPProdQty,   \n" +
            "			SUM(IssueQty) IssueQty,  \n" +
            "			SUM(prevstockQty) prevstockQty,  \n" +
            "			MAX(firstOPID) firstOPID,   \n" +
            "			MAX(BuildQty) BuildQty,  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "            ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)  \n" +
            "            END ReadyStock,  \n" +
            "  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  SUM(issueQty)  \n" +
            "            ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "			ELSE SUM(prevstockQty) -  SUM(issueQty) END)  \n" +
            "            END issuePending,  \n" +
            "  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN(  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "            ELSE  \n" +
            "				(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "					CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "					ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "			END returnPending,  \n" +
            "		MAX(StockQty) StockQty  \n" +
            "		FROM (  \n" +
            "			SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty, a.OPProdQty OPProdQty,  \n" +
            "            a.StockQty StockQty, 0 prevstockQty ,  \n" +
            "			(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "											(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "											WHERE woID = c.woID  \n" +
            "											AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "											AND IFNULL(deletedAt,0) = 0  \n" +
            "											) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "		UNION ALL  /*Get stock of all prvious Operation Pass and Minimum pass value of Clustor parallel operation of in spection */  \n" +
            "		-- start  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, a.passQty - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,   \n" +
            "				0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "		AND  NOT EXISTS ( SELECT 'Y' FROM workorder_operation_cluster wcp ,workorder_cluster wc  \n" +
            "					     WHERE wcp.clusterid = wc.clusterid AND   \n" +
            "						   wcp.opid  = a.opid  AND   \n" +
            "						   wc.woid = a.woid AND   \n" +
            "						   wc.isParellelOperation = 1 AND   \n" +
            "						   IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wcp.deletedAt,0)= 0)  \n" +
            "		AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID /* parameter operation */ AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "					 AND a.qtyControl = 1)  \n" +
            "		UNION ALL /*Inspection Parellel Cluster Min Pass Qty*/  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, MIN(a.passQty)-(SUM(a.TerminatedTransQty)+ SUM(a.shippedQty))  prevstockQty,  \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID   \n" +
            "		AND a.opid  IN (SELECT opid FROM workordeR_operation_cluster c   \n" +
            "				WHERE clusterid = @ReworkprevpclusterID AND    \n" +
            "					EXISTS ( SELECT 'y' FROM workorder_cluster wc   \n" +
            "						WHERE wc.clusterID = c.clusterID   \n" +
            "						AND wc.isParellelOperation = 1 AND IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wc.isDeleted,0)= 0) )  \n" +
            "		AND operationTypeID=@InsepctionProcessTypeID  \n" +
            "		AND opNumber  <=  (SELECT opNumber FROM workorder_operation b   \n" +
            "				  WHERE b.woid = pwoID AND opId = @clusterPrevisReworkOPID/*rework operation id */ AND   \n" +
            "				  IFNULL(b.deletedAt,0)= 0) AND   \n" +
            "				  a.qtyControl = 1 GROUP BY woID  \n" +
            "		UNION ALL /* if Insepection is in cluster with not parellel or not in clustor */  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, IFNULL(a.passQty,0) - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,  \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND  \n" +
            "			 a.opid  NOT IN (SELECT opid FROM workordeR_operation_cluster c   \n" +
            "					WHERE clusterid = IFNULL(@ReworkprevpclusterID,0) /*Inspection cluster */ AND    \n" +
            "						IFNULL(c.deletedAt,0)= 0 AND  \n" +
            "						EXISTS ( SELECT 'y' FROM workorder_cluster wc   \n" +
            "							WHERE wc.clusterID = c.clusterID   \n" +
            "							AND wc.isParellelOperation = 1 AND IFNULL(wc.deletedAt,0)= 0)) AND  \n" +
            "			 a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "		AND operationTypeID=@InsepctionProcessTypeID  \n" +
            "		AND opNumber  <=  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = @clusterPrevisReworkOPID AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "						 AND a.qtyControl = 1 AND opID NOT IN (SELECT opID FROM workorder_operation_cluster WHERE woID=pwoID AND IFNULL(deletedAt,0)=0 AND clusterID=IFNULL(@pclusterID, 0)))  \n" +
            "		-- end   \n" +
            "  \n" +
            "  \n" +
            "		)a   \n" +
            "		GROUP BY woID;  \n" +
            "	ELSE  \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "				IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "		SELECT  woID,  \n" +
            "			MAX(opID)OpID,  \n" +
            "			opNumber,MAX(woOpId)WoOpId,  \n" +
            "			MAX(OPProdQty) OPProdQty,   \n" +
            "			SUM(IssueQty) IssueQty,   \n" +
            "			MAX(prevstockQty) prevstockQty,  \n" +
            "			MAX(firstOPID) firstOPID,   \n" +
            "			MAX(BuildQty) BuildQty,  \n" +
            "		CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "		     ELSE MAX(prevstockQty) -  MAX(OPProdQty) END)  \n" +
            "		END ReadyStock,  \n" +
            "  \n" +
            "        CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			MAX(BuildQty) -  SUM(issueQty)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "			ELSE MAX(prevstockQty) -  SUM(issueQty) END)  \n" +
            "		END issuePending,  \n" +
            "  \n" +
            "         CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			(CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "         ELSE  \n" +
            "		 (CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "		END returnPending,  \n" +
            "		MAX(StockQty) StockQty  \n" +
            "		FROM (  \n" +
            "		SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty, a.OPProdQty OPProdQty,  \n" +
            "        a.StockQty StockQty, 0 prevstockQty ,  \n" +
            "		(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "											(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "											WHERE woID = c.woID  \n" +
            "											AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "						 AND IFNULL(deletedAt,0) = 0  \n" +
            "											) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "		UNION ALL   \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, a.stockQty - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,   \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "		AND opid NOT IN (SELECT opid FROM workordeR_operation_cluster WHERE clusterid = @pclusterID AND IFNULL(deletedAt,0)= 0)  \n" +
            "		AND  NOT EXISTS ( SELECT 'Y' FROM workorder_operation_cluster wcp ,workorder_cluster wc  \n" +
            "					     WHERE wcp.clusterid = wc.clusterid AND   \n" +
            "						   wcp.opid  = a.opid  AND   \n" +
            "						   wc.woid = a.woid AND   \n" +
            "						   wc.isParellelOperation = 1 AND   \n" +
            "						   IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wcp.deletedAt,0)= 0)  \n" +
            "		AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "					 AND a.qtyControl = 1)  \n" +
            "		)a GROUP BY woID;      \n" +
            "	END IF;  \n" +
            "	/*Check if previous operation is rework and current operation is rework  */  \n" +
            "  ELSEIF (IFNULL(@pisrework,0) = 1 AND IFNULL(@prevpisrework,0) = 1) THEN  \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "				IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "			 SELECT  woID,  \n" +
            "				MAX(opID)OpID,  \n" +
            "				opNumber,  \n" +
            "				MAX(woOpId)WoOpId,  \n" +
            "				MAX(OPProdQty) OPProdQty,   \n" +
            "				SUM(IssueQty) IssueQty,  \n" +
            "				SUM(prevstockQty) prevstockQty,  \n" +
            "				MAX(firstOPID) firstOPID,   \n" +
            "				MAX(BuildQty) BuildQty,  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "            ELSE  \n" +
            "            (CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "				ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)  \n" +
            "			END ReadyStock,  \n" +
            "  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  SUM(issueQty)  \n" +
            "            ELSE  \n" +
            "            (CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "				ELSE SUM(prevstockQty) -  SUM(issueQty) END)  \n" +
            "			END issuePending,  \n" +
            "  \n" +
            "            CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				(  \n" +
            "					CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "            ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "					CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "				ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "			END returnPending,  \n" +
            "			MAX(StockQty) StockQty  \n" +
            "			FROM (  \n" +
            "				SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty, a.OPProdQty OPProdQty,  \n" +
            "                a.StockQty StockQty, 0 prevstockQty ,  \n" +
            "				(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID AND IFNULL(deletedAt,0)=0) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "			UNION ALL   \n" +
            "			SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "					0 OPProdQty, 0 StockQty, a.stockQty - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,   \n" +
            "					0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "			AND  NOT EXISTS ( SELECT 'Y' FROM workorder_operation_cluster wcp ,workorder_cluster wc  \n" +
            "						     WHERE wcp.clusterid = wc.clusterid AND   \n" +
            "							   wcp.opid  = a.opid  AND   \n" +
            "							   wc.woid = a.woid AND   \n" +
            "							   wc.isParellelOperation = 1 AND   \n" +
            "							   IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wcp.deletedAt,0)= 0)  \n" +
            "			AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "						 AND a.qtyControl = 1)  \n" +
            "			)a   \n" +
            "			GROUP BY woID;  \n" +
            "  ELSE   \n" +
            "	BEGIN  \n" +
            "	/*Check if previous operation is rework then get all pass Min Qty of Inspection and Pass Qty of Rework as stock of issue */  \n" +
            "	IF (IFNULL(@prevpisrework,0) = 1 ) THEN /* Previous Operation is Rework*/  \n" +
            "		  SELECT b.ClusterID, b.isparellelOperation  \n" +
            "		  INTO @ReworkprevpclusterID,@ReworkprevpisparellelOperation  \n" +
            "		 FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON   \n" +
            "		 a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  \n" +
            "		WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0  \n" +
            "		AND  a.opNumber  = (SELECT MAX(opNumber)  \n" +
            "				    FROM workorder_operation b   \n" +
            "				    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0  \n" +
            "					 AND a.qtyControl = 1 AND b.opNumber < @prevopnumber);   \n" +
            "  \n" +
            "  \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "					IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "		 SELECT  woID,  \n" +
            "			MAX(opID)OpID,  \n" +
            "			opNumber,  \n" +
            "			MAX(woOpId)WoOpId,  \n" +
            "			MAX(OPProdQty) OPProdQty,   \n" +
            "			SUM(IssueQty) IssueQty,  \n" +
            "			SUM(prevstockQty) prevstockQty,  \n" +
            "			MAX(firstOPID) firstOPID,   \n" +
            "			MAX(BuildQty) BuildQty,  \n" +
            "		CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)  \n" +
            "		END ReadyStock,  \n" +
            "  \n" +
            "        CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			MAX(BuildQty) -  SUM(issueQty)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "			ELSE SUM(prevstockQty) -  SUM(issueQty) END)  \n" +
            "		END issuePending,  \n" +
            "  \n" +
            "        CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN(  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "		END returnPending,  \n" +
            "		MAX(StockQty) StockQty  \n" +
            "		FROM (  \n" +
            "			SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty, a.OPProdQty OPProdQty,  \n" +
            "            a.StockQty StockQty, 0 prevstockQty,  \n" +
            "			(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "											(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "											WHERE woID = c.woID  \n" +
            "											AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "											AND IFNULL(deletedAt,0) = 0  \n" +
            "											) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "		UNION ALL  /*Get stock of all prvious Operation Pass and Minimum pass value of Clustor parallel operation of in spection */  \n" +
            "		-- start  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, a.passQty - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,   \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "		AND  NOT EXISTS ( SELECT 'Y' FROM workorder_operation_cluster wcp ,workorder_cluster wc  \n" +
            "					     WHERE wcp.clusterid = wc.clusterid AND   \n" +
            "						   wcp.opid  = a.opid  AND   \n" +
            "						   wc.woid = a.woid AND   \n" +
            "						   wc.isParellelOperation = 1 AND   \n" +
            "						   IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wcp.deletedAt,0)= 0)  \n" +
            "		AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID /* parameter operation */ AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "					 AND a.qtyControl = 1)  \n" +
            "		UNION ALL /*Inspection Parellel Cluster Min Pass Qty*/  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, MIN(a.passQty)-(SUM(a.TerminatedTransQty)+SUM(a.shippedQty))  prevstockQty,  \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID   \n" +
            "		AND a.opid  IN (SELECT opid FROM workordeR_operation_cluster c   \n" +
            "				WHERE clusterid = @ReworkprevpclusterID AND IFNULL(c.deletedAt,0)=0 AND   \n" +
            "					EXISTS ( SELECT 'y' FROM workorder_cluster wc   \n" +
            "						WHERE wc.clusterID = c.clusterID   \n" +
            "						AND wc.isParellelOperation = 1 AND IFNULL(wc.deletedAt,0)=0) )  \n" +
            "		AND operationTypeID=@InsepctionProcessTypeID  \n" +
            "		AND opNumber  <=  (SELECT opNumber FROM workorder_operation b   \n" +
            "				  WHERE b.woid = pwoID AND opId = @prevopid/*rework operation id */ AND   \n" +
            "				  IFNULL(b.deletedAt,0)= 0) AND   \n" +
            "				  a.qtyControl = 1 GROUP BY woID  \n" +
            "		UNION ALL /* if Insepection is in cluster with not parellel or not in clustor */  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, IFNULL(a.passQty,0) - (a.TerminatedTransQty+ a.shippedQty) prevstockQty,   \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND  \n" +
            "			 a.opid  NOT IN (SELECT opid FROM workordeR_operation_cluster c   \n" +
            "					WHERE clusterid = IFNULL(@ReworkprevpclusterID,0) /*Inspection cluster */ AND    \n" +
            "						IFNULL(c.deletedAt,0)=0 AND  \n" +
            "						EXISTS (SELECT 'y' FROM workorder_cluster wc   \n" +
            "							WHERE wc.clusterID = c.clusterID   \n" +
            "							AND wc.isParellelOperation = 1)) AND  \n" +
            "			 a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "			AND operationTypeID=@InsepctionProcessTypeID  \n" +
            "			AND opNumber  <=  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = @prevopid AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "						 AND a.qtyControl = 1)  \n" +
            "		-- end   \n" +
            "  \n" +
            "  \n" +
            "		)a   \n" +
            "		GROUP BY woID;  \n" +
            "  \n" +
            "	/*Previous operation is cluster with paraller operation*/   \n" +
            "	ELSEIF(IFNULL(@prevpclusterID,0) > 0 AND IFNULL(@prevpisparellelOperation,0) = 1) THEN  \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "				IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "		SELECT  woID,  \n" +
            "			MAX(opID)OpID,  \n" +
            "			opNumber,  \n" +
            "			MAX(woOpId)WoOpId,  \n" +
            "			MAX(OPProdQty) OPProdQty,   \n" +
            "			SUM(IssueQty) IssueQty,  \n" +
            "			SUM(prevstockQty) prevstockQty,  \n" +
            "			MAX(firstOPID) firstOPID,   \n" +
            "			MAX(BuildQty) BuildQty,  \n" +
            "		CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)   \n" +
            "		END ReadyStock,  \n" +
            "  \n" +
            "		CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "			MAX(BuildQty) -  SUM(issueQty)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "			ELSE SUM(prevstockQty) -  SUM(issueQty) END)   \n" +
            "            END issuePending,  \n" +
            "  \n" +
            "        CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN(  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "        ELSE  \n" +
            "		(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "				CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "					ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "		END returnPending,  \n" +
            "		MAX(StockQty) StockQty  \n" +
            "		FROM (  \n" +
            "			SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty, a.OPProdQty OPProdQty,  \n" +
            "            a.StockQty StockQty, 0 prevstockQty ,  \n" +
            "			(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "											(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "											WHERE woID = c.woID  \n" +
            "											AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "											AND IFNULL(c.deletedAt,0) = 0  \n" +
            "											) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "		UNION ALL  /*Get stock of all prvious Operation Pass and Minimum pass value of Clustor parallel operation of in spection */  \n" +
            "		-- start  \n" +
            "		 /*Inspection Parellel Cluster Min Pass Qty*/  \n" +
            "		SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "				0 OPProdQty, 0 StockQty, MIN(IFNULL(a.stockQty,0)) -(SUM(a.TerminatedTransQty) +SUM(a.shippedQty)) prevstockQty,   \n" +
            "                0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "		FROM vu_workorder_production_stk a  \n" +
            "		WHERE a.woID = pwoID   \n" +
            "		AND a.opid  IN (SELECT opid FROM workordeR_operation_cluster c   \n" +
            "				WHERE clusterid = IFNULL(@prevpclusterID,0) AND   \n" +
            "					IFNULL(c.deletedAt,0)=0 AND   \n" +
            "					EXISTS ( SELECT 'y' FROM workorder_cluster wc   \n" +
            "						WHERE wc.clusterID = c.clusterID   \n" +
            "						AND wc.isParellelOperation = 1 AND IFNULL(wc.deletedAt,0)=0) )  \n" +
            "		AND opNumber  <=  (SELECT opNumber FROM workorder_operation b   \n" +
            "				  WHERE b.woid = pwoID AND opId = @prevopid/*rework operation id */ AND   \n" +
            "				  IFNULL(b.deletedAt,0)= 0) AND   \n" +
            "				  a.qtyControl = 1 GROUP BY woID  \n" +
            "  \n" +
            "		-- end   \n" +
            "		)a   \n" +
            "		GROUP BY woID;  \n" +
            "  \n" +
            "	ELSE /*Previous Operation in Normal Operation */   \n" +
            "		INSERT INTO temp_Sproc_GetopReadyStock (woID, opID, opNumber, WoOpId, OPProdQty,   \n" +
            "				IssueQty, prevstockQty, firstOPID, BuildQty, ReadyStock, issuePending, returnPending, StockQty)  \n" +
            "			 SELECT  woID,  \n" +
            "				MAX(opID)OpID,  \n" +
            "				opNumber,  \n" +
            "				MAX(woOpId)WoOpId,  \n" +
            "				MAX(OPProdQty) OPProdQty,   \n" +
            "				SUM(IssueQty) IssueQty,  \n" +
            "				SUM(prevstockQty) prevstockQty,  \n" +
            "				MAX(firstOPID) firstOPID,   \n" +
            "				MAX(BuildQty) BuildQty,  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "			ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  MAX(OPProdQty)  \n" +
            "				ELSE SUM(prevstockQty) -  MAX(OPProdQty) END)   \n" +
            "			END ReadyStock,  \n" +
            "  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN  \n" +
            "				MAX(BuildQty) -  SUM(issueQty)  \n" +
            "			ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN MAX(BuildQty) -  SUM(issueQty)  \n" +
            "				ELSE SUM(prevstockQty) -  SUM(issueQty) END)   \n" +
            "			END issuePending,  \n" +
            "  \n" +
            "			CASE WHEN (MAX(firstOPClusterID) != 0 AND MAX(currOpClustID) != 0 AND MAX(firstOPClusterID) = MAX(currOpClustID)) THEN(  \n" +
            "					CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "			ELSE  \n" +
            "			(CASE WHEN MAX(firstOPID) = MAX(opID) THEN (  \n" +
            "					CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE MAX(BuildQty) -  MAX(OPProdQty) END)  \n" +
            "				ELSE (CASE WHEN SUM(IssueQty) > 0 THEN SUM(IssueQty) - MAX(OPProdQty)  \n" +
            "						ELSE SUM(prevstockQty) -  MAX(OPProdQty) END) END)  \n" +
            "			END returnPending,  \n" +
            "			MAX(StockQty) StockQty  \n" +
            "			FROM (  \n" +
            "				SELECT  a.woID woID,a.opID opID, a.opNumber opNumber,a.woOpId woOPID,a.IssueQty IssueQty,  \n" +
            "						a.OPProdQty OPProdQty,a.StockQty StockQty, 0 prevstockQty,  \n" +
            "				(SELECT opID FROM workorder_operation c WHERE woID = a.woID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) firstOPID,  \n" +
            "			(SELECT  BuildQty FROM workorder WHERE woID = a.woID) BuildQty,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE IFNULL(deletedAt,0) = 0  \n" +
            "				 AND woOPID = (SELECT woOPID FROM workorder_operation WHERE woID=pwoID AND opID=pOPID   \n" +
            "				 AND IFNULL(deletedAt,0) = 0  \n" +
            "				 AND operationTypeID=@InsepctionProcessTypeID)) AS currOpClustID ,  \n" +
            "			(SELECT IFNULL(MIN(clusterID),0) FROM workorder_operation_cluster WHERE woOPID = (SELECT woOPID FROM workorder_operation c WHERE woID = pwoID  \n" +
            "												AND operationTypeID=@InsepctionProcessTypeID  AND opNumber =  \n" +
            "												(SELECT MIN(opNumber) FROM workorder_operation  \n" +
            "												WHERE woID = c.woID  \n" +
            "												AND qtyControl = 1 AND IFNULL(deletedAt,0) = 0)  \n" +
            "												AND IFNULL(deletedAt,0) = 0  \n" +
            "												) AND deletedAt IS NULL)   \n" +
            "												AS firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opID = pOPID  \n" +
            "			UNION ALL   \n" +
            "			SELECT  a.woID,0 opID, a.opNumber opNumber,0 woOpId,0 IssueQty,  \n" +
            "					0 OPProdQty, 0 StockQty, (a.stockQty - (a.TerminatedTransQty+ a.shippedQty)) prevstockQty,  \n" +
            "                    0 firstOPID,0 BuildQty, 0 currOpClustID, 0 firstOPClusterID  \n" +
            "			FROM vu_workorder_production_stk a  \n" +
            "			WHERE a.woID = pwoID AND a.opnumber  = (SELECT MAX(opNumber) FROM workorder_operation a WHERE woID = pwoID AND IFNULL(a.deletedAt,0) = 0  \n" +
            "			AND  NOT EXISTS ( SELECT 'Y' FROM workorder_operation_cluster wcp ,workorder_cluster wc  \n" +
            "						     WHERE wcp.clusterid = wc.clusterid AND   \n" +
            "							   wcp.opid  = a.opid  AND   \n" +
            "							   wc.woid = a.woid AND   \n" +
            "							   wc.isParellelOperation = 1 AND   \n" +
            "							   IFNULL(wc.deletedAt,0)= 0 AND IFNULL(wcp.deletedAt,0)= 0)  \n" +
            "			AND opNumber  <  (SELECT opNumber FROM workorder_operation b WHERE b.woid = pwoID AND opId = pOPID AND IFNULL(b.deletedAt,0)= 0)  \n" +
            "						 AND a.qtyControl = 1)  \n" +
            "			)a   \n" +
            "			GROUP BY woID;   \n" +
            "	END IF;  \n" +
            "	END;  \n" +
            "END IF;  \n" +
            "/****************** Get total scrap qty and update in temp table **************************/  \n" +
            "SELECT IFNULL(SUM(scrapQty),0) INTO @TillProcessScrapQty FROM vu_workorder_production_stk a  \n" +
            "WHERE woID=pwoID AND opNumber < @popNumber ORDER BY opNumber ASC;  \n" +
            "UPDATE temp_Sproc_GetopReadyStock SET TillProcessScrapQty=@TillProcessScrapQty WHERE woID=pwoID AND opID=popID;  \n" +
            "/****************** Get total scrap qty **************************/  \n" +
            "SELECT * FROM temp_Sproc_GetopReadyStock;  \n" +
            "END;  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_ValidateWorkorderOperation` ;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderOperation`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoOPID INT,  \n" +
                "	IN pisRework TINYINT,  \n" +
                "	IN pqtyControl TINYINT,  \n" +
                "	IN pisIssueQty TINYINT,  \n" +
                "	IN poperationTypeID INT,  \n" +
                "	IN pisPreProgrammingComponent INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE previous_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "	DECLARE next_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "	DECLARE is_current_inspection_or_rework_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "	DECLARE current_rework_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "	DECLARE first_op_number INT DEFAULT 0;  \n" +
                "  \n" +
                "	DECLARE IsInValidReworkInspectionProcess INT DEFAULT 0;  \n" +
                "	DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "	DECLARE Found_As_Parallel_Operation INT DEFAULT 0;  \n" +
                "	DECLARE Found_In_Parallel_Cluster INT DEFAULT 0;  \n" +
                "	DECLARE operation_clusterid INT DEFAULT 0;  \n" +
                "	DECLARE isParellelCluster INT DEFAULT 0;  \n" +
                "	DECLARE isparelleloperationtypeid INT DEFAULT 0;  \n" +
                "	DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "	DECLARE IsInvalidReworkInspectionOperation INT DEFAULT 0;  \n" +
                "	DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "	DECLARE IsReworkInParallelCluster INT DEFAULT 0;  \n" +
                "	DECLARE IsPreProgrammingInParallelCluster INT DEFAULT 0;  \n" +
                "	DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "	DECLARE prv_oprn_is_inspection_parellel_cluster INT DEFAULT 0;  \n" +
                "	DECLARE Is_Rework_FALSE INT DEFAULT 0;  \n" +
                "  \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;   \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText NVARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "	-- get opnumber from woopid  \n" +
                "	-- get opname from woopid and opnumber  \n" +
                "	SELECT opnumber, opname, isRework, qtyControl, isIssueQty, operationTypeID, isPreProgrammingComponent   \n" +
                "	INTO @pwoopnumber, @curr_opname, @curr_isRework, @curr_qtyControl, @curee_isIssueQty, @curr_operationTypeID, @curr_isPreProgrammingComponent FROM workorder_operation  \n" +
                "	WHERE woopid=pwoopid AND deletedat IS NULL LIMIT 1;  \n" +
                "  \n" +
                "	-- get inspection process type id  \n" +
                "	SET InspectionOperationTypeID := 0;  \n" +
                "	SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory   \n" +
                "		WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                "  \n" +
                "	/******************** start - case 1 - current operation with rework than previous operation must have 'inspection process' ***********/  \n" +
                "	IF (pisrework = 1) THEN  \n" +
                "		SET first_op_number:= 0;  \n" +
                "		SELECT MIN(opNumber) INTO first_op_number FROM workorder_operation wo   \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "		/**************************************** start - 1. if current operation is first operation should not be rework type ****************************************************/  \n" +
                "		IF first_op_number=@pwoopnumber THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' not allowed as rework operation, because first operation of workorder can not be rework !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;	  \n" +
                "		/**************************************** end - 1. if current operation is first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 2. rework operation should not be inspection process ****************************************************/  \n" +
                "		SET IsInValidReworkInspectionProcess:=0;  \n" +
                "		IF (poperationtypeid IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(poperationtypeid,0) = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInValidReworkInspectionProcess:=1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_operationTypeID,0) = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInValidReworkInspectionProcess:=1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF IsInValidReworkInspectionProcess  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is rework operation, So it can not be as inspection process !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;	  \n" +
                "		/**************************************** end - 2. rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 3. rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "		SET IsInValidReworkOperation:=0;  \n" +
                "		IF ((pqtyControl IS NOT NULL)) THEN  \n" +
                "			IF ((IFNULL(pqtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			IF ((IFNULL(@curr_qtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF ((pisIssueQty IS NOT NULL)) THEN  \n" +
                "			IF ((IFNULL(pisIssueQty,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			IF ((IFNULL(@curr_isIssueQty,0) = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IsInValidReworkOperation  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is invalid operation, It must be allow true for manufacturer qty and Issue Qty !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;	  \n" +
                "		/**************************************** end - 3. rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 4. check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "		SET Found_As_Parallel_Operation:= 0;  \n" +
                "		-- check rework operation should not be in parallel operation cluster  \n" +
                "		SELECT COUNT(*) INTO Found_As_Parallel_Operation FROM workorder_operation_cluster   \n" +
                "			WHERE clusterid IN (SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1 )  \n" +
                "			AND deletedat IS NULL AND woopid=pwoopid;  \n" +
                "  \n" +
                "		-- set flag false if any operation not found as inspection process   \n" +
                "		IF Found_As_Parallel_Operation > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation cannot be set as rework operation, because it is in parallel cluster !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************************************** end - 4. check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - 5. check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "		SET previous_opnumber:= 0;  \n" +
                "  \n" +
                "		-- get previous operation of rework operation  \n" +
                "		SELECT MAX(opnumber) INTO previous_opnumber FROM workorder_operation wo   \n" +
                "		WHERE opnumber < @pwoopnumber   \n" +
                "		AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "		-- if found previous operation than check operation is inspection process or not  \n" +
                "		IF previous_opnumber > 0 THEN  \n" +
                "			SET is_current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "			-- set checked operation number if found as inspection process  \n" +
                "			SELECT opnumber INTO is_current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "			WHERE ((operationtypeid = InspectionOperationTypeID) OR (isrework=1))  \n" +
                "			AND woid=pwoid AND deletedat IS NULL AND opnumber=previous_opnumber;   \n" +
                "  \n" +
                "			-- set flag false if any operation not found as inspection process   \n" +
                "			IF is_current_inspection_or_rework_opnumber = 0 THEN  \n" +
                "				SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have previous operation inspection process or rework operation !!');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have previous operation inspection process or rework operation !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;	  \n" +
                "		/**************************************** start - 5. check previous operation of rework operation must be inspection or rework only ****************************************************/		  \n" +
                "	END IF;  \n" +
                "	/******************** end - case 1 - current operation with rework than previous operation must have 'inspection process' ***********/  \n" +
                "  \n" +
                "	/**************************************** start - case 2 - current Operation inspection process ****************************************************/  \n" +
                "	/* case 0 - any operation with inspection process than next operation must have 'rework' and not in parallel cluster*/  \n" +
                "  \n" +
                "	SET IsInspectionProcess:= 0;  \n" +
                "	IF (poperationtypeid IS NOT NULL) THEN  \n" +
                "		IF(InspectionOperationTypeID = IFNULL(poperationtypeid,0)) THEN   \n" +
                "			SET IsInspectionProcess:= 1;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF(InspectionOperationTypeID = IFNULL(@curr_operationTypeID,0)) THEN   \n" +
                "			SET IsInspectionProcess:= 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(IsInspectionProcess > 0) THEN  \n" +
                "		SET IsInvalidReworkInspectionOperation:= 0;  \n" +
                "		/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "		IF (pisrework IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(pisrework,0) = 1) THEN   \n" +
                "				SET IsInvalidReworkInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_isRework,0) = 1) THEN   \n" +
                "				SET IsInvalidReworkInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IsInvalidReworkInspectionOperation  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is invalid inspection operation, It cannot be rework operation !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;	  \n" +
                "		/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "		SET IsInValidInspectionOperation:= 0;  \n" +
                "		IF ((pqtyControl IS NOT NULL)) THEN  \n" +
                "			IF ((IFNULL(pqtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE   \n" +
                "			IF ((IFNULL(@curr_qtyControl,0) = 0)) THEN  \n" +
                "				SET IsInValidInspectionOperation:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is invalid operation, It must allow true for manufacturer qty !!');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;	  \n" +
                "		/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "		SET Found_In_Parallel_Cluster:= 0;  \n" +
                "		-- check rework operation should not be in parallel operation cluster  \n" +
                "		SELECT COUNT(*) INTO Found_In_Parallel_Cluster FROM workorder_operation_cluster   \n" +
                "			WHERE clusterid IN (SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1 )  \n" +
                "			AND deletedat IS NULL AND woopid=pwoopid;  \n" +
                "  \n" +
                "		IF (Found_In_Parallel_Cluster = 0) THEN  \n" +
                "			SET next_opnumber:= 0;  \n" +
                "			-- get next operation of inspection operation  \n" +
                "			SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo   \n" +
                "			WHERE opnumber > @pwoopnumber   \n" +
                "			AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "			-- if found next operation than check operation is rework operation or not  \n" +
                "			IF next_opnumber > 0 THEN  \n" +
                "				SET current_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as rework operation  \n" +
                "				SELECT opnumber INTO current_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE opnumber=next_opnumber AND isrework=1  \n" +
                "				AND woid=pwoid AND deletedat IS NULL;   \n" +
                "  \n" +
                "				-- set flag false if any operation not found as rework operation  \n" +
                "				IF current_rework_opnumber = 0 THEN  \n" +
                "					SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have next operation as rework operation');   \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have next operation as rework operation');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;	  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/**************************************** end - case 2 - current Operation inspection process ****************************************************/  \n" +
                "  \n" +
                "	/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "	SET isparelleloperationtypeid:= 0;  \n" +
                "	SET operation_clusterid:= 0;  \n" +
                "	SET isParellelCluster:= 0;  \n" +
                "  \n" +
                "	SELECT clusterid INTO operation_clusterid FROM workorder_operation_cluster WHERE woopid=pwoopid AND deletedat IS NULL LIMIT 1;  \n" +
                "	SELECT isparelleloperation INTO isParellelCluster FROM workorder_cluster WHERE clusterID=operation_clusterid AND deletedat IS NULL LIMIT 1;  \n" +
                "  \n" +
                "	IF (operation_clusterid > 0 AND isParellelCluster = 1) THEN   \n" +
                "		/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "		SET IsReworkInParallelCluster:=0;  \n" +
                "		IF (pisrework IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(pisrework,0) = 1) THEN   \n" +
                "				SET IsReworkInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_isRework,0) = 1) THEN   \n" +
                "				SET IsReworkInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(IsReworkInParallelCluster = 1) THEN  \n" +
                "			SET @stmt_str = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is rework operation, It is not allowed in parallel cluster');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "		END IF;  \n" +
                "		/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "		/************************** start - if cluster is parallel than it should not have any preprogramming operation ******************************/  \n" +
                "		SET IsPreProgrammingInParallelCluster:=0;  \n" +
                "		IF (pisPreProgrammingComponent IS NOT NULL) THEN  \n" +
                "			IF(IFNULL(pisPreProgrammingComponent,0) = 1) THEN   \n" +
                "				SET IsPreProgrammingInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			IF(IFNULL(@curr_isPreProgrammingComponent,0) = 1) THEN   \n" +
                "				SET IsPreProgrammingInParallelCluster:= 1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(IsPreProgrammingInParallelCluster = 1) THEN  \n" +
                "			SET @stmt_str = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is preprogramming operation, It is not allowed in parallel cluster');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "		END IF;  \n" +
                "		/************************** end - if cluster is parallel than it should not have any preprogramming operation ******************************/  \n" +
                "  \n" +
                "		/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "		SELECT DISTINCT operationtypeid  INTO isparelleloperationtypeid FROM workorder_operation WHERE woopid = pwoopid AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "		-- set flag false if any operation not found as inspection process   \n" +
                "		IF ((isparelleloperationtypeid > 0) AND (isparelleloperationtypeid != poperationtypeid)) THEN  \n" +
                "			SET @stmt_op = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' operation must have same operation type in cluster');   \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "		END IF;  \n" +
                "		/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "	/****************** start - If current operation is not rework than check previous of this operation should not be in inspection parallel cluster ******************/  \n" +
                "	SET Is_Rework_FALSE := 0;  \n" +
                "	IF (pisrework IS NOT NULL) THEN  \n" +
                "		IF(IFNULL(pisrework,0) = 0) THEN   \n" +
                "			SET Is_Rework_FALSE = 1;  \n" +
                "	END IF;  \n" +
                "	ELSE  \n" +
                "		IF(IFNULL(@curr_isRework,0) = 0) THEN   \n" +
                "			SET Is_Rework_FALSE = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (Is_Rework_FALSE = 1) THEN  \n" +
                "		SET prv_oprn_is_inspection_parellel_cluster:= 0;  \n" +
                "		-- get previous operation of rework operation  \n" +
                "		SELECT isParellelOperation INTO prv_oprn_is_inspection_parellel_cluster FROM workorder_cluster WHERE clusterID = (  \n" +
                "			SELECT clusterID FROM workorder_operation_cluster WHERE woOPID=(  \n" +
                "				SELECT woOPID FROM workorder_operation WHERE opNumber = (  \n" +
                "					SELECT MAX(opnumber) FROM workorder_operation   \n" +
                "					WHERE opnumber < @pwoopnumber   \n" +
                "					AND woid=pwoid AND deletedat IS NULL  \n" +
                "				) AND deletedat IS NULL AND woid=pwoid AND operationTypeID = InspectionOperationTypeID  \n" +
                "			) AND deletedat IS NULL  \n" +
                "		) AND deletedat IS NULL;  \n" +
                "  \n" +
                "		IF(prv_oprn_is_inspection_parellel_cluster = 1) THEN  \n" +
                "			SET @stmt_str = CONCAT(@curr_opname,' (', @pwoopnumber, ')', ' is must be rework operation, because it is next operation of inspection parallel cluster.');  \n" +
                "			INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/****************** end - If current operation is not rework than check previous of this operation should not be in inspection parallel cluster ******************/  \n" +
                "  \n" +
                "	SELECT errorText FROM temp_operation_error;  \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_convertToMasterTemplate` ;  \n" +
                "CREATE PROCEDURE `Sproc_convertToMasterTemplate`(          \n" +
                "	IN pmasterTemplate VARCHAR(1000),        \n" +
                "	IN pdescription TEXT,      \n" +
                "	IN pwoID INT,      \n" +
                "	IN pcreatedBy VARCHAR(100)    \n" +
                ")  \n" +
                "BEGIN   \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;        \n" +
                "	-- create temporary table for error        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_mastertemplate_convert_error;         \n" +
                "	CREATE TEMPORARY TABLE temp_mastertemplate_convert_error        \n" +
                "	(        \n" +
                "	     errorText NVARCHAR(2000)        \n" +
                "	);        \n" +
                "  \n" +
                "	SELECT COUNT(masterTemplate) INTO @masterTemplateDet FROM master_templates WHERE masterTemplate=pmasterTemplate AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0;  \n" +
                "	SELECT COUNT(opID) INTO @opCount FROM workorder_operation woop WHERE woID=pwoID AND woop.deletedAt IS NULL AND IFNULL(woop.isDeleted,0)=0;  \n" +
                "	IF (IFNULL(@masterTemplateDet,0) > 0) THEN  \n" +
                "		SET @stmt_error_template = CONCAT('<b>',pmasterTemplate,'</b>  template is already exists!');         \n" +
                "		INSERT INTO temp_mastertemplate_convert_error (errorText) VALUES (@stmt_error_template);        \n" +
                "		SELECT errorText FROM temp_mastertemplate_convert_error;        \n" +
                "	ELSEIF (IFNULL(@opCount,0) < 1) THEN  \n" +
                "		SET @stmt_error_op = CONCAT('There is no operations in work order to convert into master template');         \n" +
                "		INSERT INTO temp_mastertemplate_convert_error (errorText) VALUES (@stmt_error_op);        \n" +
                "		SELECT errorText FROM temp_mastertemplate_convert_error;        \n" +
                "	ELSE   \n" +
                "		START TRANSACTION;  \n" +
                "			INSERT INTO master_templates (masterTemplate,description,isActive,isMasterTemplate, createdBy)  \n" +
                "			VALUES (pmasterTemplate, pdescription, 1, 0, pcreatedBy);  \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO @pmasterTemplateID;  \n" +
                "  \n" +
                "			INSERT INTO operation_master_templates (masterTemplateId,operationId,isActive,createdBy,isDeleted)  \n" +
                "			SELECT @pmasterTemplateID, a.opID , 1, pcreatedBy, 0 FROM (SELECT woop.opID FROM workorder_operation woop WHERE woop.woID=pwoID AND woop.deletedAt IS NULL AND IFNULL(woop.isDeleted,0)=0) a;  \n" +
                "		COMMIT;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "DROP VIEW IF EXISTS vu_workorder_transfer_report;  \n" +
            "CREATE VIEW `vu_workorder_transfer_report` AS   \n" +
            "SELECT   \n" +
            "	`a`.`woID` AS `woID Identity`,  \n" +
            "	`a`.`opID` AS `opID Identity`,  \n" +
            "	`a`.`toWOID` AS `toWOID Identity`,  \n" +
            "	`a`.`opName` AS `OP Name`,  \n" +
            "	`a`.`opNumber` AS `OP Number`,  \n" +
            "	`a`.`opVersion` AS `OP Version`,  \n" +
            "	`a`.`transferQty` AS `Transfer Qty`,  \n" +
            "	`fromwo`.`woNumber` AS `WO Number`,  \n" +
            "	`fromwo`.`woVersion` AS `WO Version`,  \n" +
            "	`fromwo`.`ECORemark` AS `ECO Remark`,  \n" +
            "	`fromwo`.`FCORemark` AS `FCO Remark`,  \n" +
            "	`fromwo`.`poQty` AS `PO Qty`,  \n" +
            "	`towo`.`woNumber` AS `To WO Number`,  \n" +
            "	`towo`.`woVersion` AS `To WO Version`,  \n" +
            "	`fromcomp`.`mfgPN` AS `Assy Number`,  \n" +
            "	`fromcomp`.`PIDCode` AS `Assembly ID`,  \n" +
            "	`fromcomp`.`nickName` AS `Assy Nickname`,  \n" +
            "	`fromcomp`.`rev` AS `Assy Revision`,  \n" +
            "	`tocomp`.`mfgPN` AS `To Assy Number`,  \n" +
            "	`tocomp`.`PIDCode` AS `To Assembly ID`,  \n" +
            "	`tocomp`.`nickName` AS `To Assy Nickname`,  \n" +
            "	`tocomp`.`rev` AS `To Assy Revision`   \n" +
            "	FROM (((((SELECT  \n" +
            "			`wo`.`woID` AS `woID`,  \n" +
            "			`wo`.`opID` AS `opID`,  \n" +
            "			`wo`.`opName` AS `opName`,  \n" +
            "			`wo`.`opNumber` AS `opNumber`,  \n" +
            "			`wo`.`opVersion` AS `opVersion`,  \n" +
            "			`wt`.`toWOID` AS `toWOID`,  \n" +
            "			`wt`.`transferQty` AS `transferQty`  \n" +
            "			-- (select `wt`.`toWOID` from `workorder_transfer` `wt` where ((ifnull(`wt`.`isDeleted`,0) = 0) and (`wt`.`fromWOID` = `wo`.`woID`)) limit 1) AS `toWOID`   \n" +
            "				FROM `workorder_operation` `wo`   \n" +
            "				LEFT JOIN workorder_transfer `wt` ON ((`wt`.`fromWOID` = `wo`.`woID`) AND ((IFNULL(`wt`.`isDeleted`,0) = 0) AND (`wt`.`deletedAt` IS NULL)))  \n" +
            "				WHERE ((`wo`.`isTerminated` = 1) AND (IFNULL(`wo`.`isDeleted`,0) = 0))  \n" +
            "			) `a`   \n" +
            "			JOIN `workorder` `fromwo` ON(((`fromwo`.`woID` = `a`.`woID`) AND (IFNULL(`fromwo`.`isDeleted`,0) = 0))))   \n" +
            "			JOIN `workorder` `towo` ON(((`towo`.`woID` = `a`.`toWOID`) AND (IFNULL(`towo`.`isDeleted`,0) = 0))))   \n" +
            "			JOIN `component` `fromcomp` ON(((`fromwo`.`partID` = `fromcomp`.`id`) AND (IFNULL(`fromcomp`.`isDeleted`,0) = 0) AND (IFNULL(`fromcomp`.`category`,0) = 3))))   \n" +
            "			JOIN `component` `tocomp` ON(((`towo`.`partID` = `tocomp`.`id`) AND (IFNULL(`tocomp`.`category`,0) = 3) AND (IFNULL(`tocomp`.`isDeleted`,0) = 0))));  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetWorkorder`(	                \n" +
            "	IN ppageIndex INT(11),                \n" +
            "	IN precordPerPage INT(11),                \n" +
            "	IN pOrderBy VARCHAR(255),	                \n" +
            "	IN pWhereClause VARCHAR(16383)                    \n" +
            "    )  \n" +
            "BEGIN                \n" +
            "  \n" +
            "	DECLARE pOffset INT(11);                \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
            "	/* DECLARE SQLStatement varchar(255); */        \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS                \n" +
            "	SELECT 	wo.*,   \n" +
            "		co.PIDCODE AS PIDCode,   \n" +
            "		co.mfgPN AS mfgPN,   \n" +
            "		co.nickname AS nickName,           \n" +
            "		co.rev AS rev,                 \n" +
            "		(SELECT SUM(ws.poQty) FROM workorder_salesorder_details ws WHERE wo.woID = ws.woID AND IFNULL(ws.isDeleted,0) = 0 AND ws.deletedAt IS NULL) soPOQty,  \n" +
            "		vuwoassystk.shippedQty,  \n" +
            "		vuwoassystk.inHouseStockQty,  \n" +
            "		`vuwotransfer`.`OP Name` AS fromOpName,  \n" +
            "		`vuwotransfer`.`OP Number` AS fromOpNumber,  \n" +
            "		`vuwotransfer`.`Transfer Qty` AS transferQty,  \n" +
            "		`vuwotransfer`.`To WO Number` AS transferWoNumber,  \n" +
            "		`vuwotransfer`.`To WO Version` AS transferWoVersion,  \n" +
            "		fun_getWoStatusNameByID(`wo`.`woStatus`) AS `woStatusConvertedValue` ,                \n" +
            "		ro.rohsIcon,  \n" +
            "		`ro`.`name` AS `isLeadFreeConvertedValue` ,            \n" +
            "		(SELECT COUNT(*) FROM workorder_operation woop WHERE woop.woID=wo.woID AND woop.deletedAt IS NULL AND IFNULL(woop.isDeleted,0) = 0) opCount,  \n" +
            "		(SELECT COUNT(*) FROM workorder_reqforreview worr WHERE worr.woID=wo.woID AND  worr.deletedAt IS NULL AND IFNULL(worr.isDeleted,0) = 0) woReviewChangesCount,  \n" +
            "		(SELECT COUNT(*) FROM eco_request er WHERE er.woID=wo.woID AND er.deletedAt IS NULL AND IFNULL(er.isDeleted,0) = 0) ecoRequestCount,  \n" +
            "		(SELECT COUNT(*) FROM workorder_cluster woc WHERE woc.woID=wo.woID AND woc.deletedAt IS NULL AND IFNULL(woc.isDeleted,0) = 0 AND woc.isParellelOperation = 1) parallelClusterCount,  \n" +
            "		(CASE WHEN (`wo`.`isSampleAvailable` = 0) THEN 'No'                 \n" +
            "			WHEN (`wo`.`isSampleAvailable` = 1) THEN 'Yes' ELSE '' END) AS `isSampleAvailableConvertedValue` ,                \n" +
            "		(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'                 \n" +
            "			WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,                \n" +
            "		fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,        \n" +
            "		(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'              \n" +
            "			ELSE 'No' END) AS `isHalt`,              \n" +
            "		(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN               \n" +
            "			(SELECT CONCAT(whu.reason, ' - Halt by ',               \n" +
            "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),               \n" +
            "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))               \n" +
            "			FROM workorder_trans_hold_unhold whu               \n" +
            "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0               \n" +
            "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL              \n" +
            "			ORDER BY whu.startDate DESC LIMIT 1)               \n" +
            "		ELSE                \n" +
            "			(SELECT CONCAT(whu.resumeReason, ' - Resume by ',               \n" +
            "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),               \n" +
            "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))              \n" +
            "				FROM workorder_trans_hold_unhold whu               \n" +
            "				WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0               \n" +
            "				AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL              \n" +
            "			ORDER BY whu.endDate DESC LIMIT 1)               \n" +
            "		END) AS reasonDetails,              \n" +
            "		(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0               \n" +
            "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount              \n" +
            "	FROM workorder wo                \n" +
            "        JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3      \n" +
            "        LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0          \n" +
            "        LEFT JOIN vu_workorder_readyAssy_stk vuwoassystk ON vuwoassystk.woID = wo.woID   \n" +
            "        LEFT JOIN vu_workorder_transfer_report vuwotransfer ON `vuwotransfer`.`woID Identity` = wo.woID   \n" +
            "	WHERE IFNULL(wo.isdeleted,0) = 0;                     \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN                \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
            "	ELSE                \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName DESC\") ;                \n" +
            "	END IF;	                \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
            "		SET pWhereClause = '1=1' ;                \n" +
            "	END IF;	                \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
            "	ELSE	                \n" +
            "		SET rowNumWhere = '';                \n" +
            "	END IF;	                \n" +
            "  \n" +
            "  \n" +
            "	/* to get total count of rows */                \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );                \n" +
            "	PREPARE query1 FROM @SQLStatement1;                \n" +
            "	EXECUTE query1;                \n" +
            "	DEALLOCATE PREPARE query1;                \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
            "	PREPARE query2 FROM @SQLStatement2;                \n" +
            "	EXECUTE query2;                \n" +
            "	DEALLOCATE PREPARE query2;                \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;                 \n" +
            "  \n" +
            "	/* to get total count of rows of workorder table */                \n" +
            "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(*) FROM workorder where deletedAt IS NULL \" );                \n" +
            "	PREPARE query3 FROM @SQLStatement3;                \n" +
            "	EXECUTE query3;                \n" +
            "	DEALLOCATE PREPARE query3;                \n" +
            "  \n" +
            "  \n" +
            "    END;  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "UPDATE page_detail  \n" +
            "SET menuName='Work Order Change Log',   \n" +
            "displayMenuName='Work Order Change Log'  \n" +
            "WHERE menuName='Work Order Data Entry Change History';  \n" +
             /* **************************** Add Script Version -> 01-04-2019 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
             "VALUES (461,'2.00','V1','Work Order SP, View changes - Vaibhav'," + userid + ");"
             );
             break;
            case 461:
                allDbChangesArray.push(
                /* **************************** New Script -> 02-04-2019  *********************************** */
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN isCustomerUnAppoval TINYINT(1);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN customerUnAppovalBy INT(11);  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart ADD COLUMN customerUnAppovalDate DATETIME;  \n" +
                "UPDATE rfq_lineitems_headers SET `name` ='Pending Issues / Status' WHERE `field` = 'description';  \n" +
                /* **************************** New Script -> 02-04-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN                \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	          \n" +
                "	DECLARE pLiveInternalVersion INT(11);                 \n" +
                "	DECLARE pRfqAssID INT(11);              \n" +
                "	DECLARE pPartID INT(11);                 \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);           \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);    \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);            \n" +
                "	DECLARE pCompanyName VARCHAR(100);      \n" +
                "	DECLARE pErrorNarrative TEXT;                  \n" +
                "	SET pIsUpdateRequired = FALSE;          \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;                     \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;     \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';        \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN    \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';     \n" +
                "	ELSE     \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';     \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN    \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;    \n" +
                "		ELSE     \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;    \n" +
                "		END IF;    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN                 \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN                 \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                 \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier\",                \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;                   \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN\",                \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN         \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",                \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL THEN                 \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				createdAt,createdBy)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                    \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				SYSDATE(),NEW.createdBy);                    \n" +
                "		END IF;                \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN                 \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",                \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;		                \n" +
                "  \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL THEN              \n" +
                "			SET pIsUpdateRequired = TRUE;                   \n" +
                "			IF NEW.rfqAssyBomID IS NOT NULL                \n" +
                "				THEN                 \n" +
                "					SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;                \n" +
                "				ELSE                 \n" +
                "					SET newRfqAssyBom = '';                \n" +
                "			END IF;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",                \n" +
                "				NULL,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;                \n" +
                "  \n" +
                "		-- IF NEW.customerApproval IS NOT NULL THEN              \n" +
                "		-- 	SET pIsUpdateRequired = TRUE;                   \n" +
                "		-- 	INSERT INTO rfq_assembly_history                 \n" +
                "		-- 		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "		-- 		oldValue,newValue,changeVersion,                \n" +
                "		-- 		createdAt,createdBy)                 \n" +
                "		-- 	VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                \n" +
                "		-- 		NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "		-- 		SYSDATE(),NEW.createdBy);                \n" +
                "		-- END IF;                \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;                \n" +
                "			INSERT INTO rfq_assembly_history                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                \n" +
                "				oldValue,newValue,changeVersion,                \n" +
                "				createdAt,createdBy)                 \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",                \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                \n" +
                "				SYSDATE(),NEW.createdBy);                \n" +
                "		END IF;       \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                    \n" +
                "				NULL, CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;       \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                    \n" +
                "				NULL, CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;       \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                    \n" +
                "				NULL, CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                    \n" +
                "				NULL, CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;       \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                    \n" +
                "				NULL, CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                    \n" +
                "				NULL, CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                    \n" +
                "				NULL, CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                    \n" +
                "				NULL, CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                    \n" +
                "				NULL, CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                    \n" +
                "				NULL, CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                    \n" +
                "				NULL, CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                    \n" +
                "				NULL, CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                    \n" +
                "				NULL, CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.oneRohsComponentStep IS NOT NULL AND NEW.oneRohsComponentStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 19;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                    \n" +
                "				NULL, CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                    \n" +
                "				NULL, CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                    \n" +
                "				NULL, CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                    \n" +
                "				NULL, CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                    \n" +
                "				NULL, CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                    \n" +
                "				NULL, CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                    \n" +
                "				NULL, CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                    \n" +
                "				NULL, CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                    \n" +
                "				NULL, CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                    \n" +
                "				NULL, CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "		IF NEW.militaryStandardRoHSStep IS NOT NULL AND NEW.militaryStandardRoHSStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                    \n" +
                "				NULL, CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch UOM\",                    \n" +
                "				NULL, CAST(NEW.uomMismatchedStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN        \n" +
                "			SET pIsUpdateRequired = TRUE;    \n" +
                "			SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;           \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy,narrative)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Required Programing\",                    \n" +
                "				NULL, CAST(NEW.programingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				'Issue Generated',SYSDATE(),NEW.createdBy,pErrorNarrative);                   \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN                 	    \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN                     \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                    \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),SYSDATE(),NEW.updatedBy);                    \n" +
                "		ELSE    \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;      \n" +
                "			INSERT INTO rfq_assembly_history                     \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                    \n" +
                "				oldValue,newValue,changeVersion,                    \n" +
                "				description,createdAt,createdBy)                     \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  \"Customer Approval\",                    \n" +
                "				NULL, CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                    \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),SYSDATE(),NEW.updatedBy);                    \n" +
                "		END IF;    \n" +
                "	END IF;       \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN          \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);          \n" +
                "		END IF;          \n" +
                "  \n" +
                "	END IF;                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-04-2019  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "	DECLARE pIsUpdateRequired BOOL;  	            \n" +
                "    	DECLARE pLiveInternalVersion INT(11);                         \n" +
                "	DECLARE pRfqAssID INT(11);                 \n" +
                "	DECLARE pPartID INT(11);                        \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);                        \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);             \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                    \n" +
                "	DECLARE pCompanyName VARCHAR(100);          \n" +
                "	DECLARE pErrorNarrative TEXT;                      \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);                \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;          \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;                   \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;              \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';          \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';       \n" +
                "	ELSE       \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';       \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE       \n" +
                "			SELECT DATE_FORMAT(CURDATE(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                        \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN                   \n" +
                "		SET pIsUpdateRequired = TRUE;                  \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier\",                        \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.updatedBy);                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN                         \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN\",                        \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.updatedBy);                        \n" +
                "	END IF;	                        \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN                         \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG\",                        \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.updatedBy);                        \n" +
                "	END IF;	                        \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN                         \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN\",                        \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.updatedBy);                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN                    \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN                \n" +
                "			SET pDeleteMessage =\"MFG PN \";                   \n" +
                "		ELSE                \n" +
                "			SET pDeleteMessage = CONCAT(\"MFG PN \",NEW.mfgPN);                  \n" +
                "		END IF;                \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",                        \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.deletedBy);                        \n" +
                "	END IF;	                        \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN                           \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                           \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                          \n" +
                "			oldValue,newValue,changeVersion,                          \n" +
                "			createdAt,createdBy)                           \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",                          \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                          \n" +
                "			SYSDATE(),NEW.updatedBy);                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN                         \n" +
                "		IF OLD.rfqAssyBomID IS NOT NULL                        \n" +
                "			THEN                         \n" +
                "				SELECT reqAssyID INTO oldRfqAssyBom FROM rfq_assy_bom WHERE id = OLD.rfqAssyBomID;                        \n" +
                "			ELSE                         \n" +
                "				SET oldRfqAssyBom = '';                        \n" +
                "		END IF;                        \n" +
                "		IF NEW.rfqAssyBomID IS NOT NULL                        \n" +
                "			THEN                         \n" +
                "				SELECT reqAssyID INTO newRfqAssyBom FROM rfq_assy_bom WHERE id = NEW.rfqAssyBomID;                        \n" +
                "			ELSE                         \n" +
                "				SET newRfqAssyBom = '';                        \n" +
                "		END IF;                  \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN                        \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history                         \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "				oldValue,newValue,changeVersion,                        \n" +
                "				createdAt,createdBy)                         \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",                        \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "				SYSDATE(),NEW.updatedBy);                        \n" +
                "		END IF;                \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	-- IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN                \n" +
                "	-- 	SET pIsUpdateRequired = TRUE;            \n" +
                "	-- 	INSERT INTO rfq_assembly_history                         \n" +
                "	-- 		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "	-- 		oldValue,newValue,changeVersion,                        \n" +
                "	-- 		createdAt,createdBy)                         \n" +
                "	-- 	VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                        \n" +
                "	-- 		CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "	-- 		SYSDATE(),NEW.updatedBy);                        \n" +
                "	-- END IF;                        \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN                         \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history                         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                        \n" +
                "			oldValue,newValue,changeVersion,                        \n" +
                "			createdAt,createdBy)                         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFG PN\",                        \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                        \n" +
                "			SYSDATE(),NEW.updatedBy);                        \n" +
                "	END IF;                           \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;             \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                      \n" +
                "				CAST(OLD.mfgCodeStep AS CHAR), CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Invalid MFG\",                      \n" +
                "				CAST(OLD.mfgCodeStep AS CHAR), CAST(NEW.mfgCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;            \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                      \n" +
                "				CAST(OLD.distVerificationStep AS CHAR), CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Verification\",                      \n" +
                "				CAST(OLD.distVerificationStep AS CHAR), CAST(NEW.distVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;             \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                      \n" +
                "				CAST(OLD.distCodeStep AS CHAR), CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Invalid\",                      \n" +
                "				CAST(OLD.distCodeStep AS CHAR), CAST(NEW.distCodeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;             \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                      \n" +
                "				CAST(OLD.mfgDistMappingStep AS CHAR), CAST(NEW.mfgDistMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG-Supplier Mapping\",                      \n" +
                "				CAST(OLD.mfgDistMappingStep AS CHAR), CAST(NEW.mfgDistMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, -1) != IFNULL(NEW.getMFGPNStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;             \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                      \n" +
                "				CAST(OLD.getMFGPNStep AS CHAR), CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Get MFGPN\",                      \n" +
                "				CAST(OLD.getMFGPNStep AS CHAR), CAST(NEW.getMFGPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;             \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                      \n" +
                "				CAST(OLD.obsoletePartStep AS CHAR), CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Check Obsolete Parts\",                      \n" +
                "				CAST(OLD.obsoletePartStep AS CHAR), CAST(NEW.obsoletePartStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;             \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                      \n" +
                "				CAST(OLD.mfgVerificationStep AS CHAR), CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Verification\",                      \n" +
                "				CAST(OLD.mfgVerificationStep AS CHAR), CAST(NEW.mfgVerificationStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;             \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                      \n" +
                "				CAST(OLD.mfgGoodPartMappingStep AS CHAR), CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG Bad Part\",                      \n" +
                "				CAST(OLD.mfgGoodPartMappingStep AS CHAR), CAST(NEW.mfgGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;             \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                      \n" +
                "				CAST(OLD.mfgPNStep AS CHAR), CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFG PN Invalid\",                      \n" +
                "				CAST(OLD.mfgPNStep AS CHAR), CAST(NEW.mfgPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;             \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                      \n" +
                "				CAST(OLD.distPNStep AS CHAR), CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN Invalid\",                      \n" +
                "				CAST(OLD.distPNStep AS CHAR), CAST(NEW.distPNStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;             \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                      \n" +
                "				CAST(OLD.distGoodPartMappingStep AS CHAR), CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier Bad Part\",                      \n" +
                "				CAST(OLD.distGoodPartMappingStep AS CHAR), CAST(NEW.distGoodPartMappingStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;             \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                      \n" +
                "				CAST(OLD.nonRohsStep AS CHAR), CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Non-RoHS\",                      \n" +
                "				CAST(OLD.nonRohsStep AS CHAR), CAST(NEW.nonRohsStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;             \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                      \n" +
                "				CAST(OLD.epoxyStep AS CHAR), CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Epoxy\",                      \n" +
                "				CAST(OLD.epoxyStep AS CHAR), CAST(NEW.epoxyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.oneRohsComponentStep IS NOT NULL AND (IFNULL(OLD.oneRohsComponentStep, -1) != IFNULL(NEW.oneRohsComponentStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 19;             \n" +
                "		IF OLD.oneRohsComponentStep IS NOT NULL AND IFNULL(NEW.oneRohsComponentStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                      \n" +
                "				CAST(OLD.oneRohsComponentStep AS CHAR), CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.oneRohsComponentStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"One RoHS Component\",                      \n" +
                "				CAST(OLD.oneRohsComponentStep AS CHAR), CAST(NEW.oneRohsComponentStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;             \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                      \n" +
                "				CAST(OLD.invalidConnectorTypeStep AS CHAR), CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lead Mismatch\",                      \n" +
                "				CAST(OLD.invalidConnectorTypeStep AS CHAR), CAST(NEW.invalidConnectorTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;             \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                      \n" +
                "				CAST(OLD.duplicateMPNInSameLineStep AS CHAR), CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Duplicate MFGPN\",                      \n" +
                "				CAST(OLD.duplicateMPNInSameLineStep AS CHAR), CAST(NEW.duplicateMPNInSameLineStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;             \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                      \n" +
                "				CAST(OLD.mismatchMountingTypeStep AS CHAR), CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Mounting Type\",                      \n" +
                "				CAST(OLD.mismatchMountingTypeStep AS CHAR), CAST(NEW.mismatchMountingTypeStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;             \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                      \n" +
                "				CAST(OLD.mismatchFunctionalCategoryStep AS CHAR), CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch Functional Type\",                      \n" +
                "				CAST(OLD.mismatchFunctionalCategoryStep AS CHAR), CAST(NEW.mismatchFunctionalCategoryStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;                 	      \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;             \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                      \n" +
                "				CAST(OLD.restrictUseWithPermissionStep AS CHAR), CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use With Permission\",                      \n" +
                "				CAST(OLD.restrictUseWithPermissionStep AS CHAR), CAST(NEW.restrictUseWithPermissionStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;             \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                      \n" +
                "				CAST(OLD.restrictUsePermanentlyStep AS CHAR), CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Restrict Use Permanently\",                      \n" +
                "				CAST(OLD.restrictUsePermanentlyStep AS CHAR), CAST(NEW.restrictUsePermanentlyStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;             \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                      \n" +
                "				CAST(OLD.pickupPadRequiredStep AS CHAR), CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Pickup Pad Required\",                      \n" +
                "				CAST(OLD.pickupPadRequiredStep AS CHAR), CAST(NEW.pickupPadRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;             \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                      \n" +
                "				CAST(OLD.matingPartRquiredStep AS CHAR), CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mating Part Required\",                      \n" +
                "				CAST(OLD.matingPartRquiredStep AS CHAR), CAST(NEW.matingPartRquiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;             \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                      \n" +
                "				CAST(OLD.functionalTestingRequiredStep AS CHAR), CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Functional Testing Required\",                      \n" +
                "				CAST(OLD.functionalTestingRequiredStep AS CHAR), CAST(NEW.functionalTestingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF; 	      \n" +
                "	IF NEW.militaryStandardRoHSStep IS NOT NULL AND (IFNULL(OLD.militaryStandardRoHSStep, -1) != IFNULL(NEW.militaryStandardRoHSStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;             \n" +
                "		IF OLD.militaryStandardRoHSStep IS NOT NULL AND IFNULL(NEW.militaryStandardRoHSStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                      \n" +
                "				CAST(OLD.militaryStandardRoHSStep AS CHAR), CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.militaryStandardRoHSStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Military Standard RoHS\",                      \n" +
                "				CAST(OLD.militaryStandardRoHSStep AS CHAR), CAST(NEW.militaryStandardRoHSStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, -1) != IFNULL(NEW.uomMismatchedStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;             \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch UOM\",                      \n" +
                "				CAST(OLD.uomMismatchedStep AS CHAR), CAST(NEW.uomMismatchedStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Mismatch UOM\",                      \n" +
                "				CAST(OLD.uomMismatchedStep AS CHAR), CAST(NEW.uomMismatchedStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;     \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative` INTO pErrorNarrative  FROM rfq_lineitems_errorcode WHERE `logicID` = 38;             \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Required Programing\",                      \n" +
                "				CAST(OLD.programingRequiredStep AS CHAR), CAST(NEW.programingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Resolved',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy,narrative)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Required Programing\",                      \n" +
                "				CAST(OLD.programingRequiredStep AS CHAR), CAST(NEW.programingRequiredStep AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				'Issue Generated',SYSDATE(),NEW.updatedBy,pErrorNarrative);                      \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN                 	      \n" +
                "		SET pIsUpdateRequired = TRUE;        \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN                       \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",                      \n" +
                "				CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),SYSDATE(),NEW.updatedBy);                      \n" +
                "		ELSE      \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;        \n" +
                "			INSERT INTO rfq_assembly_history                       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                      \n" +
                "				oldValue,newValue,changeVersion,                      \n" +
                "				description,createdAt,createdBy)                       \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  \"Customer Approval\",                      \n" +
                "				CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                      \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),SYSDATE(),NEW.updatedBy);                      \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN            \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);            \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-04-2019  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMAssyHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMAssyHistory`(            \n" +
                "	IN pPartID INT(11),    \n" +
                "	IN pNarrative TINYINT(1),            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383)          \n" +
                "	)  \n" +
                "BEGIN                \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS           \n" +
                "	SELECT 	h.id,          \n" +
                "		h.tableName,          \n" +
                "		h.rfqLineItemID,          \n" +
                "		h.rfqAssyID,          \n" +
                "		h.columnName,          \n" +
                "		h.oldValue,          \n" +
                "		h.newValue,          \n" +
                "		h.changeVersion,          \n" +
                "		h.createdAt,          \n" +
                "		h.description,      \n" +
                "		h.narrative,    \n" +
                "		h.time,    \n" +
                "		CONCAT(u.firstName ,\" \", u.lastName) AS CreatedUser,          \n" +
                "		i.lineID,          \n" +
                "		a.assemblyNumber,          \n" +
                "		a.assemblyRev,          \n" +
                "		a.assemblyDescription,          \n" +
                "		a.assemblyVersion,          \n" +
                "		c.liveInternalVersion      \n" +
                "	FROM rfq_assembly_history h          \n" +
                "	INNER JOIN component c ON c.id = h.partId      \n" +
                "	LEFT OUTER JOIN rfq_lineitems i ON i.id = h.rfqLineItemID          \n" +
                "	LEFT OUTER JOIN rfq_assemblies a ON a.id = h.rfqAssyID          \n" +
                "	LEFT OUTER JOIN users u ON u.id = h.createdBy          \n" +
                "	WHERE h.partID = pPartID;          \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	     \n" +
                "  \n" +
                "	IF pNarrative = 1 THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , \" AND columnName IN ('QPA Vs Designator', 'Duplicate CPN','Require Functional Type','Require Mounting Type','Invalid MFG','Supplier Verification', 'Get MFGPN',    \n" +
                "		'Check Obsolete Parts','MFG Verification','MFG Bad Part','MFG PN Invalid','Supplier Invalid','MFG-Supplier Mapping','Supplier PN Invalid','Supplier Bad Part',    \n" +
                "		'Non-RoHS','Epoxy','One RoHS Component','Lead Mismatch','Duplicate MFGPN','Mismatch Mounting Type','Mismatch Functional Type'    \n" +
                "		,'Restrict Use With Permission','Restrict Use Permanently','Pickup Pad Required','Mating Part Required','Functional Testing Required','Military Standard RoHS','Mismatch UOM','Required Programing')\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 02-04-2019 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (462,'2.00','V1',' DB changes for unapproved column - Jignesh K '," + userid + ");"
                );
                break;
                /*********************************************************************************************/
                /******************** Don't add more here, We have shifted next part to "dbscript_dev_3.js" ***********************/
                /*********************************************************************************************/
    }
    return allDbChangesArray;
});


// sample
//break;
//case 1:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 13-02-2019  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 13-02-2019 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
//  "VALUES (2,'2.00','V1',' Sample entry - KETAN '," + userid + ");"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/